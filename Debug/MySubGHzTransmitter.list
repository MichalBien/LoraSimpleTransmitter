
MySubGHzTransmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8dc  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  0800da14  0800da14  0000ea14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ddd4  0800ddd4  0000f030  2**0
                  CONTENTS
  4 .ARM          00000008  0800ddd4  0800ddd4  0000edd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dddc  0800dddc  0000f030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dddc  0800dddc  0000eddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dde0  0800dde0  0000ede0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  0800dde4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000072c  20000030  0800de14  0000f030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  0800de14  0000f75c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000f030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024609  00000000  00000000  0000f05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006256  00000000  00000000  00033663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021d0  00000000  00000000  000398c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000198d  00000000  00000000  0003ba90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000212b1  00000000  00000000  0003d41d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b1b4  00000000  00000000  0005e6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4973  00000000  00000000  00089882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e1f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a64  00000000  00000000  0013e238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00146c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000030 	.word	0x20000030
 8000154:	00000000 	.word	0x00000000
 8000158:	0800d9fc 	.word	0x0800d9fc

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000034 	.word	0x20000034
 8000174:	0800d9fc 	.word	0x0800d9fc

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295
 8000198:	f04f 30ff 	movne.w	r0, #4294967295
 800019c:	f000 b96a 	b.w	8000474 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9d08      	ldr	r5, [sp, #32]
 80001be:	460c      	mov	r4, r1
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d14e      	bne.n	8000262 <__udivmoddi4+0xaa>
 80001c4:	4694      	mov	ip, r2
 80001c6:	458c      	cmp	ip, r1
 80001c8:	4686      	mov	lr, r0
 80001ca:	fab2 f282 	clz	r2, r2
 80001ce:	d962      	bls.n	8000296 <__udivmoddi4+0xde>
 80001d0:	b14a      	cbz	r2, 80001e6 <__udivmoddi4+0x2e>
 80001d2:	f1c2 0320 	rsb	r3, r2, #32
 80001d6:	4091      	lsls	r1, r2
 80001d8:	fa20 f303 	lsr.w	r3, r0, r3
 80001dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e0:	4319      	orrs	r1, r3
 80001e2:	fa00 fe02 	lsl.w	lr, r0, r2
 80001e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001ea:	fa1f f68c 	uxth.w	r6, ip
 80001ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80001f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001f6:	fb07 1114 	mls	r1, r7, r4, r1
 80001fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001fe:	fb04 f106 	mul.w	r1, r4, r6
 8000202:	4299      	cmp	r1, r3
 8000204:	d90a      	bls.n	800021c <__udivmoddi4+0x64>
 8000206:	eb1c 0303 	adds.w	r3, ip, r3
 800020a:	f104 30ff 	add.w	r0, r4, #4294967295
 800020e:	f080 8112 	bcs.w	8000436 <__udivmoddi4+0x27e>
 8000212:	4299      	cmp	r1, r3
 8000214:	f240 810f 	bls.w	8000436 <__udivmoddi4+0x27e>
 8000218:	3c02      	subs	r4, #2
 800021a:	4463      	add	r3, ip
 800021c:	1a59      	subs	r1, r3, r1
 800021e:	fa1f f38e 	uxth.w	r3, lr
 8000222:	fbb1 f0f7 	udiv	r0, r1, r7
 8000226:	fb07 1110 	mls	r1, r7, r0, r1
 800022a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800022e:	fb00 f606 	mul.w	r6, r0, r6
 8000232:	429e      	cmp	r6, r3
 8000234:	d90a      	bls.n	800024c <__udivmoddi4+0x94>
 8000236:	eb1c 0303 	adds.w	r3, ip, r3
 800023a:	f100 31ff 	add.w	r1, r0, #4294967295
 800023e:	f080 80fc 	bcs.w	800043a <__udivmoddi4+0x282>
 8000242:	429e      	cmp	r6, r3
 8000244:	f240 80f9 	bls.w	800043a <__udivmoddi4+0x282>
 8000248:	4463      	add	r3, ip
 800024a:	3802      	subs	r0, #2
 800024c:	1b9b      	subs	r3, r3, r6
 800024e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000252:	2100      	movs	r1, #0
 8000254:	b11d      	cbz	r5, 800025e <__udivmoddi4+0xa6>
 8000256:	40d3      	lsrs	r3, r2
 8000258:	2200      	movs	r2, #0
 800025a:	e9c5 3200 	strd	r3, r2, [r5]
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d905      	bls.n	8000272 <__udivmoddi4+0xba>
 8000266:	b10d      	cbz	r5, 800026c <__udivmoddi4+0xb4>
 8000268:	e9c5 0100 	strd	r0, r1, [r5]
 800026c:	2100      	movs	r1, #0
 800026e:	4608      	mov	r0, r1
 8000270:	e7f5      	b.n	800025e <__udivmoddi4+0xa6>
 8000272:	fab3 f183 	clz	r1, r3
 8000276:	2900      	cmp	r1, #0
 8000278:	d146      	bne.n	8000308 <__udivmoddi4+0x150>
 800027a:	42a3      	cmp	r3, r4
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xcc>
 800027e:	4290      	cmp	r0, r2
 8000280:	f0c0 80f0 	bcc.w	8000464 <__udivmoddi4+0x2ac>
 8000284:	1a86      	subs	r6, r0, r2
 8000286:	eb64 0303 	sbc.w	r3, r4, r3
 800028a:	2001      	movs	r0, #1
 800028c:	2d00      	cmp	r5, #0
 800028e:	d0e6      	beq.n	800025e <__udivmoddi4+0xa6>
 8000290:	e9c5 6300 	strd	r6, r3, [r5]
 8000294:	e7e3      	b.n	800025e <__udivmoddi4+0xa6>
 8000296:	2a00      	cmp	r2, #0
 8000298:	f040 8090 	bne.w	80003bc <__udivmoddi4+0x204>
 800029c:	eba1 040c 	sub.w	r4, r1, ip
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	fa1f f78c 	uxth.w	r7, ip
 80002a8:	2101      	movs	r1, #1
 80002aa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b2:	fb08 4416 	mls	r4, r8, r6, r4
 80002b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ba:	fb07 f006 	mul.w	r0, r7, r6
 80002be:	4298      	cmp	r0, r3
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x11c>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f106 34ff 	add.w	r4, r6, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x11a>
 80002cc:	4298      	cmp	r0, r3
 80002ce:	f200 80cd 	bhi.w	800046c <__udivmoddi4+0x2b4>
 80002d2:	4626      	mov	r6, r4
 80002d4:	1a1c      	subs	r4, r3, r0
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb4 f0f8 	udiv	r0, r4, r8
 80002de:	fb08 4410 	mls	r4, r8, r0, r4
 80002e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002e6:	fb00 f707 	mul.w	r7, r0, r7
 80002ea:	429f      	cmp	r7, r3
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x148>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 34ff 	add.w	r4, r0, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x146>
 80002f8:	429f      	cmp	r7, r3
 80002fa:	f200 80b0 	bhi.w	800045e <__udivmoddi4+0x2a6>
 80002fe:	4620      	mov	r0, r4
 8000300:	1bdb      	subs	r3, r3, r7
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	e7a5      	b.n	8000254 <__udivmoddi4+0x9c>
 8000308:	f1c1 0620 	rsb	r6, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 f706 	lsr.w	r7, r2, r6
 8000312:	431f      	orrs	r7, r3
 8000314:	fa20 fc06 	lsr.w	ip, r0, r6
 8000318:	fa04 f301 	lsl.w	r3, r4, r1
 800031c:	ea43 030c 	orr.w	r3, r3, ip
 8000320:	40f4      	lsrs	r4, r6
 8000322:	fa00 f801 	lsl.w	r8, r0, r1
 8000326:	0c38      	lsrs	r0, r7, #16
 8000328:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800032c:	fbb4 fef0 	udiv	lr, r4, r0
 8000330:	fa1f fc87 	uxth.w	ip, r7
 8000334:	fb00 441e 	mls	r4, r0, lr, r4
 8000338:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800033c:	fb0e f90c 	mul.w	r9, lr, ip
 8000340:	45a1      	cmp	r9, r4
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90a      	bls.n	800035e <__udivmoddi4+0x1a6>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800034e:	f080 8084 	bcs.w	800045a <__udivmoddi4+0x2a2>
 8000352:	45a1      	cmp	r9, r4
 8000354:	f240 8081 	bls.w	800045a <__udivmoddi4+0x2a2>
 8000358:	f1ae 0e02 	sub.w	lr, lr, #2
 800035c:	443c      	add	r4, r7
 800035e:	eba4 0409 	sub.w	r4, r4, r9
 8000362:	fa1f f983 	uxth.w	r9, r3
 8000366:	fbb4 f3f0 	udiv	r3, r4, r0
 800036a:	fb00 4413 	mls	r4, r0, r3, r4
 800036e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000372:	fb03 fc0c 	mul.w	ip, r3, ip
 8000376:	45a4      	cmp	ip, r4
 8000378:	d907      	bls.n	800038a <__udivmoddi4+0x1d2>
 800037a:	193c      	adds	r4, r7, r4
 800037c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000380:	d267      	bcs.n	8000452 <__udivmoddi4+0x29a>
 8000382:	45a4      	cmp	ip, r4
 8000384:	d965      	bls.n	8000452 <__udivmoddi4+0x29a>
 8000386:	3b02      	subs	r3, #2
 8000388:	443c      	add	r4, r7
 800038a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800038e:	fba0 9302 	umull	r9, r3, r0, r2
 8000392:	eba4 040c 	sub.w	r4, r4, ip
 8000396:	429c      	cmp	r4, r3
 8000398:	46ce      	mov	lr, r9
 800039a:	469c      	mov	ip, r3
 800039c:	d351      	bcc.n	8000442 <__udivmoddi4+0x28a>
 800039e:	d04e      	beq.n	800043e <__udivmoddi4+0x286>
 80003a0:	b155      	cbz	r5, 80003b8 <__udivmoddi4+0x200>
 80003a2:	ebb8 030e 	subs.w	r3, r8, lr
 80003a6:	eb64 040c 	sbc.w	r4, r4, ip
 80003aa:	fa04 f606 	lsl.w	r6, r4, r6
 80003ae:	40cb      	lsrs	r3, r1
 80003b0:	431e      	orrs	r6, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c5 6400 	strd	r6, r4, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e750      	b.n	800025e <__udivmoddi4+0xa6>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f103 	lsr.w	r1, r0, r3
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	fa24 f303 	lsr.w	r3, r4, r3
 80003cc:	4094      	lsls	r4, r2
 80003ce:	430c      	orrs	r4, r1
 80003d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d4:	fa00 fe02 	lsl.w	lr, r0, r2
 80003d8:	fa1f f78c 	uxth.w	r7, ip
 80003dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e0:	fb08 3110 	mls	r1, r8, r0, r3
 80003e4:	0c23      	lsrs	r3, r4, #16
 80003e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ea:	fb00 f107 	mul.w	r1, r0, r7
 80003ee:	4299      	cmp	r1, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x24c>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f100 36ff 	add.w	r6, r0, #4294967295
 80003fa:	d22c      	bcs.n	8000456 <__udivmoddi4+0x29e>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	d92a      	bls.n	8000456 <__udivmoddi4+0x29e>
 8000400:	3802      	subs	r0, #2
 8000402:	4463      	add	r3, ip
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb3 f1f8 	udiv	r1, r3, r8
 800040c:	fb08 3311 	mls	r3, r8, r1, r3
 8000410:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000414:	fb01 f307 	mul.w	r3, r1, r7
 8000418:	42a3      	cmp	r3, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x276>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f101 36ff 	add.w	r6, r1, #4294967295
 8000424:	d213      	bcs.n	800044e <__udivmoddi4+0x296>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d911      	bls.n	800044e <__udivmoddi4+0x296>
 800042a:	3902      	subs	r1, #2
 800042c:	4464      	add	r4, ip
 800042e:	1ae4      	subs	r4, r4, r3
 8000430:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000434:	e739      	b.n	80002aa <__udivmoddi4+0xf2>
 8000436:	4604      	mov	r4, r0
 8000438:	e6f0      	b.n	800021c <__udivmoddi4+0x64>
 800043a:	4608      	mov	r0, r1
 800043c:	e706      	b.n	800024c <__udivmoddi4+0x94>
 800043e:	45c8      	cmp	r8, r9
 8000440:	d2ae      	bcs.n	80003a0 <__udivmoddi4+0x1e8>
 8000442:	ebb9 0e02 	subs.w	lr, r9, r2
 8000446:	eb63 0c07 	sbc.w	ip, r3, r7
 800044a:	3801      	subs	r0, #1
 800044c:	e7a8      	b.n	80003a0 <__udivmoddi4+0x1e8>
 800044e:	4631      	mov	r1, r6
 8000450:	e7ed      	b.n	800042e <__udivmoddi4+0x276>
 8000452:	4603      	mov	r3, r0
 8000454:	e799      	b.n	800038a <__udivmoddi4+0x1d2>
 8000456:	4630      	mov	r0, r6
 8000458:	e7d4      	b.n	8000404 <__udivmoddi4+0x24c>
 800045a:	46d6      	mov	lr, sl
 800045c:	e77f      	b.n	800035e <__udivmoddi4+0x1a6>
 800045e:	4463      	add	r3, ip
 8000460:	3802      	subs	r0, #2
 8000462:	e74d      	b.n	8000300 <__udivmoddi4+0x148>
 8000464:	4606      	mov	r6, r0
 8000466:	4623      	mov	r3, r4
 8000468:	4608      	mov	r0, r1
 800046a:	e70f      	b.n	800028c <__udivmoddi4+0xd4>
 800046c:	3e02      	subs	r6, #2
 800046e:	4463      	add	r3, ip
 8000470:	e730      	b.n	80002d4 <__udivmoddi4+0x11c>
 8000472:	bf00      	nop

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000484:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000486:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4313      	orrs	r3, r2
 800048e:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000494:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4013      	ands	r3, r2
 800049a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800049c:	68fb      	ldr	r3, [r7, #12]
}
 800049e:	bf00      	nop
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr

080004a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80004ac:	2004      	movs	r0, #4
 80004ae:	f7ff ffe3 	bl	8000478 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004b2:	2001      	movs	r0, #1
 80004b4:	f7ff ffe0 	bl	8000478 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2100      	movs	r1, #0
 80004bc:	200b      	movs	r0, #11
 80004be:	f001 fb94 	bl	8001bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004c2:	200b      	movs	r0, #11
 80004c4:	f001 fbab 	bl	8001c1e <HAL_NVIC_EnableIRQ>

}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}

080004cc <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4313      	orrs	r3, r2
 80004e2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4013      	ands	r3, r2
 80004ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004f0:	68fb      	ldr	r3, [r7, #12]
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr

080004fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000510:	2001      	movs	r0, #1
 8000512:	f7ff ffdb 	bl	80004cc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	2002      	movs	r0, #2
 8000518:	f7ff ffd8 	bl	80004cc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051c:	2004      	movs	r0, #4
 800051e:	f7ff ffd5 	bl	80004cc <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PROB2_Pin|PROB1_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000528:	4810      	ldr	r0, [pc, #64]	@ (800056c <MX_GPIO_Init+0x70>)
 800052a:	f002 f9c5 	bl	80028b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 800052e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000532:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000534:	2301      	movs	r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800053c:	2303      	movs	r3, #3
 800053e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	4619      	mov	r1, r3
 8000544:	4809      	ldr	r0, [pc, #36]	@ (800056c <MX_GPIO_Init+0x70>)
 8000546:	f001 ff89 	bl	800245c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800054a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800054e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	4619      	mov	r1, r3
 800055c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000560:	f001 ff7c 	bl	800245c <HAL_GPIO_Init>

}
 8000564:	bf00      	nop
 8000566:	3718      	adds	r7, #24
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	48000400 	.word	0x48000400

08000570 <LL_AHB2_GRP1_EnableClock>:
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800057c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800057e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4313      	orrs	r3, r2
 8000586:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000588:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800058c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4013      	ands	r3, r2
 8000592:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000594:	68fb      	ldr	r3, [r7, #12]
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80005a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80005ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80005b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4013      	ands	r3, r2
 80005c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005c4:	68fb      	ldr	r3, [r7, #12]
}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000644 <MX_I2C2_Init+0x74>)
 80005d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000648 <MX_I2C2_Init+0x78>)
 80005d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10805D88;
 80005da:	4b1a      	ldr	r3, [pc, #104]	@ (8000644 <MX_I2C2_Init+0x74>)
 80005dc:	4a1b      	ldr	r2, [pc, #108]	@ (800064c <MX_I2C2_Init+0x7c>)
 80005de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80005e0:	4b18      	ldr	r3, [pc, #96]	@ (8000644 <MX_I2C2_Init+0x74>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e6:	4b17      	ldr	r3, [pc, #92]	@ (8000644 <MX_I2C2_Init+0x74>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ec:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <MX_I2C2_Init+0x74>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80005f2:	4b14      	ldr	r3, [pc, #80]	@ (8000644 <MX_I2C2_Init+0x74>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005f8:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <MX_I2C2_Init+0x74>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005fe:	4b11      	ldr	r3, [pc, #68]	@ (8000644 <MX_I2C2_Init+0x74>)
 8000600:	2200      	movs	r2, #0
 8000602:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000604:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <MX_I2C2_Init+0x74>)
 8000606:	2200      	movs	r2, #0
 8000608:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800060a:	480e      	ldr	r0, [pc, #56]	@ (8000644 <MX_I2C2_Init+0x74>)
 800060c:	f002 f96b 	bl	80028e6 <HAL_I2C_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000616:	f000 f9c9 	bl	80009ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800061a:	2100      	movs	r1, #0
 800061c:	4809      	ldr	r0, [pc, #36]	@ (8000644 <MX_I2C2_Init+0x74>)
 800061e:	f003 fcd6 	bl	8003fce <HAL_I2CEx_ConfigAnalogFilter>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000628:	f000 f9c0 	bl	80009ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800062c:	2100      	movs	r1, #0
 800062e:	4805      	ldr	r0, [pc, #20]	@ (8000644 <MX_I2C2_Init+0x74>)
 8000630:	f003 fd17 	bl	8004062 <HAL_I2CEx_ConfigDigitalFilter>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800063a:	f000 f9b7 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	2000004c 	.word	0x2000004c
 8000648:	40005800 	.word	0x40005800
 800064c:	10805d88 	.word	0x10805d88

08000650 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b096      	sub	sp, #88	@ 0x58
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2238      	movs	r2, #56	@ 0x38
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f00d f997 	bl	800d9a4 <memset>
  if(i2cHandle->Instance==I2C2)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a29      	ldr	r2, [pc, #164]	@ (8000720 <HAL_I2C_MspInit+0xd0>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d14b      	bne.n	8000718 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000680:	2380      	movs	r3, #128	@ 0x80
 8000682:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000684:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000688:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	4618      	mov	r0, r3
 8000690:	f004 ffa2 	bl	80055d8 <HAL_RCCEx_PeriphCLKConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800069a:	f000 f987 	bl	80009ac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	2001      	movs	r0, #1
 80006a0:	f7ff ff66 	bl	8000570 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a4:	2002      	movs	r0, #2
 80006a6:	f7ff ff63 	bl	8000570 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80006aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006ae:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006b0:	2312      	movs	r3, #18
 80006b2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2300      	movs	r3, #0
 80006ba:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80006bc:	2304      	movs	r3, #4
 80006be:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80006c4:	4619      	mov	r1, r3
 80006c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ca:	f001 fec7 	bl	800245c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80006ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006d2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006d4:	2312      	movs	r3, #18
 80006d6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80006e0:	2304      	movs	r3, #4
 80006e2:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80006e8:	4619      	mov	r1, r3
 80006ea:	480e      	ldr	r0, [pc, #56]	@ (8000724 <HAL_I2C_MspInit+0xd4>)
 80006ec:	f001 feb6 	bl	800245c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006f0:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80006f4:	f7ff ff54 	bl	80005a0 <LL_APB1_GRP1_EnableClock>

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2100      	movs	r1, #0
 80006fc:	2020      	movs	r0, #32
 80006fe:	f001 fa74 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000702:	2020      	movs	r0, #32
 8000704:	f001 fa8b 	bl	8001c1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000708:	2200      	movs	r2, #0
 800070a:	2100      	movs	r1, #0
 800070c:	2021      	movs	r0, #33	@ 0x21
 800070e:	f001 fa6c 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000712:	2021      	movs	r0, #33	@ 0x21
 8000714:	f001 fa83 	bl	8001c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000718:	bf00      	nop
 800071a:	3758      	adds	r7, #88	@ 0x58
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40005800 	.word	0x40005800
 8000724:	48000400 	.word	0x48000400

08000728 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000730:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000738:	f023 0218 	bic.w	r2, r3, #24
 800073c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4313      	orrs	r3, r2
 8000744:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
	...

08000754 <HAL_I2C_MasterRxCpltCallback>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

//Received all data, print it in log
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af02      	add	r7, sp, #8
 800075a:	6078      	str	r0, [r7, #4]

	uint8_t i;
	char BuffCharSended[4];

	RecievedCtr++; //interrup counter only for debug
 800075c:	4b13      	ldr	r3, [pc, #76]	@ (80007ac <HAL_I2C_MasterRxCpltCallback+0x58>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	3301      	adds	r3, #1
 8000762:	b29a      	uxth	r2, r3
 8000764:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <HAL_I2C_MasterRxCpltCallback+0x58>)
 8000766:	801a      	strh	r2, [r3, #0]
	  for(i=0; i < 6; i++)
 8000768:	2300      	movs	r3, #0
 800076a:	73fb      	strb	r3, [r7, #15]
 800076c:	e015      	b.n	800079a <HAL_I2C_MasterRxCpltCallback+0x46>
	  {
		  itoa(RecievedData[i],BuffCharSended,10);
 800076e:	7bfb      	ldrb	r3, [r7, #15]
 8000770:	4a0f      	ldr	r2, [pc, #60]	@ (80007b0 <HAL_I2C_MasterRxCpltCallback+0x5c>)
 8000772:	5cd3      	ldrb	r3, [r2, r3]
 8000774:	4618      	mov	r0, r3
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	220a      	movs	r2, #10
 800077c:	4619      	mov	r1, r3
 800077e:	f00d f8cd 	bl	800d91c <itoa>
		  APP_LOG(TS_OFF, VLEVEL_L,  " %s \n\r", BuffCharSended);
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <HAL_I2C_MasterRxCpltCallback+0x60>)
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	2001      	movs	r0, #1
 8000790:	f00b fe18 	bl	800c3c4 <UTIL_ADV_TRACE_COND_FSend>
	  for(i=0; i < 6; i++)
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	3301      	adds	r3, #1
 8000798:	73fb      	strb	r3, [r7, #15]
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	2b05      	cmp	r3, #5
 800079e:	d9e6      	bls.n	800076e <HAL_I2C_MasterRxCpltCallback+0x1a>
	  }
}
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200000d6 	.word	0x200000d6
 80007b0:	200000d0 	.word	0x200000d0
 80007b4:	0800da14 	.word	0x0800da14

080007b8 <HAL_I2C_MasterTxCpltCallback>:
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	//if command sended start counting down to launch receiver task
	TransmitCtr++;//interrup counter only for debug
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <HAL_I2C_MasterTxCpltCallback+0x24>)
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <HAL_I2C_MasterTxCpltCallback+0x24>)
 80007ca:	801a      	strh	r2, [r3, #0]
	UTIL_TIMER_Start(&I2Creciever);
 80007cc:	4804      	ldr	r0, [pc, #16]	@ (80007e0 <HAL_I2C_MasterTxCpltCallback+0x28>)
 80007ce:	f00c fbdd 	bl	800cf8c <UTIL_TIMER_Start>
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000d8 	.word	0x200000d8
 80007e0:	200000b8 	.word	0x200000b8

080007e4 <SendI2C>:

//This taks send periodically command to SHT30 by I2C
void SendI2C(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	// Send Data to SHT30 with interrupts
	HAL_I2C_Master_Transmit_IT(&hi2c2,  0x45<<1, SendedData, 2);
 80007e8:	2302      	movs	r3, #2
 80007ea:	4a03      	ldr	r2, [pc, #12]	@ (80007f8 <SendI2C+0x14>)
 80007ec:	218a      	movs	r1, #138	@ 0x8a
 80007ee:	4803      	ldr	r0, [pc, #12]	@ (80007fc <SendI2C+0x18>)
 80007f0:	f002 f908 	bl	8002a04 <HAL_I2C_Master_Transmit_IT>

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000000 	.word	0x20000000
 80007fc:	2000004c 	.word	0x2000004c

08000800 <RecieveI2C>:
void RecieveI2C(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	// send request for new data
	HAL_I2C_Master_Receive_IT(&hi2c2,  0x45<<1, RecievedData, 6);
 8000804:	2306      	movs	r3, #6
 8000806:	4a03      	ldr	r2, [pc, #12]	@ (8000814 <RecieveI2C+0x14>)
 8000808:	218a      	movs	r1, #138	@ 0x8a
 800080a:	4803      	ldr	r0, [pc, #12]	@ (8000818 <RecieveI2C+0x18>)
 800080c:	f002 f96a 	bl	8002ae4 <HAL_I2C_Master_Receive_IT>

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200000d0 	.word	0x200000d0
 8000818:	2000004c 	.word	0x2000004c

0800081c <SendI2CTimer>:
void SendI2CTimer(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	Flags=1;
 8000820:	4b04      	ldr	r3, [pc, #16]	@ (8000834 <SendI2CTimer+0x18>)
 8000822:	2201      	movs	r2, #1
 8000824:	701a      	strb	r2, [r3, #0]
	//trigger sender task
	  UTIL_SEQ_SetTask(1<<I2C_sender, I2C_senderPrio1);
 8000826:	2101      	movs	r1, #1
 8000828:	2002      	movs	r0, #2
 800082a:	f00c fa87 	bl	800cd3c <UTIL_SEQ_SetTask>
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000da 	.word	0x200000da

08000838 <RecieveI2CTimer>:
void RecieveI2CTimer(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	//trigger reciever task
	UTIL_SEQ_SetTask(1<<I2C_reciever, I2C_recieverPrio2);
 800083c:	2102      	movs	r1, #2
 800083e:	2004      	movs	r0, #4
 8000840:	f00c fa7c 	bl	800cd3c <UTIL_SEQ_SetTask>
	Flags=2;
 8000844:	4b02      	ldr	r3, [pc, #8]	@ (8000850 <RecieveI2CTimer+0x18>)
 8000846:	2202      	movs	r2, #2
 8000848:	701a      	strb	r2, [r3, #0]
	//UTIL_SEQ_SetTask(1<<I2CRecieveHandler, 0);
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000da 	.word	0x200000da

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085a:	f001 f831 	bl	80018c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085e:	f000 f84b 	bl	80008f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000862:	f7ff fe4b 	bl	80004fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000866:	f7ff fe1f 	bl	80004a8 <MX_DMA_Init>
  MX_SubGHz_Phy_Init();
 800086a:	f00b fc68 	bl	800c13e <MX_SubGHz_Phy_Init>
  MX_USART1_UART_Init();
 800086e:	f000 fddd 	bl	800142c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000872:	f7ff fead 	bl	80005d0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  UTIL_SEQ_Init();
 8000876:	f00c f8fd 	bl	800ca74 <UTIL_SEQ_Init>

  // create periodic timmer wich will triger Sending command to SHT30 by I2C
  UTIL_TIMER_Create(&I2Csender, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, SendI2CTimer, NULL);
 800087a:	2300      	movs	r3, #0
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	4b16      	ldr	r3, [pc, #88]	@ (80008d8 <main+0x84>)
 8000880:	2201      	movs	r2, #1
 8000882:	f04f 31ff 	mov.w	r1, #4294967295
 8000886:	4815      	ldr	r0, [pc, #84]	@ (80008dc <main+0x88>)
 8000888:	f00c fb4a 	bl	800cf20 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&I2Csender, I2Ctransmitperiod);
 800088c:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <main+0x8c>)
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	4619      	mov	r1, r3
 8000892:	4812      	ldr	r0, [pc, #72]	@ (80008dc <main+0x88>)
 8000894:	f00c fc58 	bl	800d148 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&I2Csender);
 8000898:	4810      	ldr	r0, [pc, #64]	@ (80008dc <main+0x88>)
 800089a:	f00c fb77 	bl	800cf8c <UTIL_TIMER_Start>


  //create task wich will wait for process recieved command by SHT30 from STM32 and ask for data
  UTIL_TIMER_Create(&I2Creciever, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, RecieveI2CTimer, NULL);
 800089e:	2300      	movs	r3, #0
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	4b10      	ldr	r3, [pc, #64]	@ (80008e4 <main+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	f04f 31ff 	mov.w	r1, #4294967295
 80008aa:	480f      	ldr	r0, [pc, #60]	@ (80008e8 <main+0x94>)
 80008ac:	f00c fb38 	bl	800cf20 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&I2Creciever, I2Crecieveperiod);
 80008b0:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <main+0x98>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	4619      	mov	r1, r3
 80008b6:	480c      	ldr	r0, [pc, #48]	@ (80008e8 <main+0x94>)
 80008b8:	f00c fc46 	bl	800d148 <UTIL_TIMER_SetPeriod>

  // Register tasks
  UTIL_SEQ_RegTask(1<<I2C_sender, 0, SendI2C);
 80008bc:	4a0c      	ldr	r2, [pc, #48]	@ (80008f0 <main+0x9c>)
 80008be:	2100      	movs	r1, #0
 80008c0:	2002      	movs	r0, #2
 80008c2:	f00c fa19 	bl	800ccf8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<<I2C_reciever,0,RecieveI2C);
 80008c6:	4a0b      	ldr	r2, [pc, #44]	@ (80008f4 <main+0xa0>)
 80008c8:	2100      	movs	r1, #0
 80008ca:	2004      	movs	r0, #4
 80008cc:	f00c fa14 	bl	800ccf8 <UTIL_SEQ_RegTask>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 80008d0:	f00b fc3d 	bl	800c14e <MX_SubGHz_Phy_Process>
 80008d4:	e7fc      	b.n	80008d0 <main+0x7c>
 80008d6:	bf00      	nop
 80008d8:	0800081d 	.word	0x0800081d
 80008dc:	200000a0 	.word	0x200000a0
 80008e0:	20000002 	.word	0x20000002
 80008e4:	08000839 	.word	0x08000839
 80008e8:	200000b8 	.word	0x200000b8
 80008ec:	20000004 	.word	0x20000004
 80008f0:	080007e5 	.word	0x080007e5
 80008f4:	08000801 	.word	0x08000801

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b09a      	sub	sp, #104	@ 0x68
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 0320 	add.w	r3, r7, #32
 8000902:	2248      	movs	r2, #72	@ 0x48
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f00d f84c 	bl	800d9a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	f107 0308 	add.w	r3, r7, #8
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
 800091c:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800091e:	f003 fbeb 	bl	80040f8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000922:	2000      	movs	r0, #0
 8000924:	f7ff ff00 	bl	8000728 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000928:	4b1f      	ldr	r3, [pc, #124]	@ (80009a8 <SystemClock_Config+0xb0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000930:	4a1d      	ldr	r2, [pc, #116]	@ (80009a8 <SystemClock_Config+0xb0>)
 8000932:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000936:	6013      	str	r3, [r2, #0]
 8000938:	4b1b      	ldr	r3, [pc, #108]	@ (80009a8 <SystemClock_Config+0xb0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000944:	2324      	movs	r3, #36	@ 0x24
 8000946:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000948:	2381      	movs	r3, #129	@ 0x81
 800094a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800094c:	2301      	movs	r3, #1
 800094e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000950:	2300      	movs	r3, #0
 8000952:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000954:	23b0      	movs	r3, #176	@ 0xb0
 8000956:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000958:	2300      	movs	r3, #0
 800095a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095c:	f107 0320 	add.w	r3, r7, #32
 8000960:	4618      	mov	r0, r3
 8000962:	f003 ff15 	bl	8004790 <HAL_RCC_OscConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800096c:	f000 f81e 	bl	80009ac <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000970:	234f      	movs	r3, #79	@ 0x4f
 8000972:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	2102      	movs	r1, #2
 800098e:	4618      	mov	r0, r3
 8000990:	f004 fa80 	bl	8004e94 <HAL_RCC_ClockConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800099a:	f000 f807 	bl	80009ac <Error_Handler>
  }
}
 800099e:	bf00      	nop
 80009a0:	3768      	adds	r7, #104	@ 0x68
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	58000400 	.word	0x58000400

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <Error_Handler+0x8>

080009b8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80009bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80009c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <LL_APB1_GRP1_EnableClock>:
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80009e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80009e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80009f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4013      	ands	r3, r2
 80009fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009fc:	68fb      	ldr	r3, [r7, #12]
}
 80009fe:	bf00      	nop
 8000a00:	3714      	adds	r7, #20
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr

08000a08 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08c      	sub	sp, #48	@ 0x30
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	222c      	movs	r2, #44	@ 0x2c
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f00c ffc5 	bl	800d9a4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a1a:	4b22      	ldr	r3, [pc, #136]	@ (8000aa4 <MX_RTC_Init+0x9c>)
 8000a1c:	4a22      	ldr	r2, [pc, #136]	@ (8000aa8 <MX_RTC_Init+0xa0>)
 8000a1e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8000a20:	4b20      	ldr	r3, [pc, #128]	@ (8000aa4 <MX_RTC_Init+0x9c>)
 8000a22:	221f      	movs	r2, #31
 8000a24:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a26:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <MX_RTC_Init+0x9c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa4 <MX_RTC_Init+0x9c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa4 <MX_RTC_Init+0x9c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a38:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa4 <MX_RTC_Init+0x9c>)
 8000a3a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a3e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000a40:	4b18      	ldr	r3, [pc, #96]	@ (8000aa4 <MX_RTC_Init+0x9c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8000a46:	4b17      	ldr	r3, [pc, #92]	@ (8000aa4 <MX_RTC_Init+0x9c>)
 8000a48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a4c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a4e:	4815      	ldr	r0, [pc, #84]	@ (8000aa4 <MX_RTC_Init+0x9c>)
 8000a50:	f004 fedc 	bl	800580c <HAL_RTC_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8000a5a:	f7ff ffa7 	bl	80009ac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8000a5e:	4811      	ldr	r0, [pc, #68]	@ (8000aa4 <MX_RTC_Init+0x9c>)
 8000a60:	f005 f9d2 	bl	8005e08 <HAL_RTCEx_SetSSRU_IT>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000a6a:	f7ff ff9f 	bl	80009ac <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000a7a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000a7e:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8000a80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2200      	movs	r2, #0
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <MX_RTC_Init+0x9c>)
 8000a8e:	f004 ff3f 	bl	8005910 <HAL_RTC_SetAlarm_IT>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000a98:	f7ff ff88 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	3730      	adds	r7, #48	@ 0x30
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200000dc 	.word	0x200000dc
 8000aa8:	40002800 	.word	0x40002800

08000aac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b090      	sub	sp, #64	@ 0x40
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ab4:	f107 0308 	add.w	r3, r7, #8
 8000ab8:	2238      	movs	r2, #56	@ 0x38
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f00c ff71 	bl	800d9a4 <memset>
  if(rtcHandle->Instance==RTC)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a16      	ldr	r2, [pc, #88]	@ (8000b20 <HAL_RTC_MspInit+0x74>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d125      	bne.n	8000b18 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000acc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ad0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ad2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ad8:	f107 0308 	add.w	r3, r7, #8
 8000adc:	4618      	mov	r0, r3
 8000ade:	f004 fd7b 	bl	80055d8 <HAL_RCCEx_PeriphCLKConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000ae8:	f7ff ff60 	bl	80009ac <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000aec:	f7ff ff64 	bl	80009b8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000af0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000af4:	f7ff ff70 	bl	80009d8 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2100      	movs	r1, #0
 8000afc:	2002      	movs	r0, #2
 8000afe:	f001 f874 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8000b02:	2002      	movs	r0, #2
 8000b04:	f001 f88b 	bl	8001c1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	202a      	movs	r0, #42	@ 0x2a
 8000b0e:	f001 f86c 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000b12:	202a      	movs	r0, #42	@ 0x2a
 8000b14:	f001 f883 	bl	8001c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000b18:	bf00      	nop
 8000b1a:	3740      	adds	r7, #64	@ 0x40
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40002800 	.word	0x40002800

08000b24 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8000b28:	4b03      	ldr	r3, [pc, #12]	@ (8000b38 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	58000400 	.word	0x58000400

08000b3c <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8000b58:	f000 ff1e 	bl	8001998 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8000b5c:	f7ff ffe2 	bl	8000b24 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8000b60:	2001      	movs	r0, #1
 8000b62:	f003 fb5b 	bl	800421c <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8000b6e:	f000 ff21 	bl	80019b4 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8000b72:	f000 fdfb 	bl	800176c <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8000b7e:	f000 ff0b 	bl	8001998 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000b82:	2101      	movs	r1, #1
 8000b84:	2000      	movs	r0, #0
 8000b86:	f003 fac5 	bl	8004114 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8000b92:	f000 ff0f 	bl	80019b4 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr

08000ba6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000baa:	bf00      	nop
 8000bac:	e7fd      	b.n	8000baa <NMI_Handler+0x4>

08000bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb2:	bf00      	nop
 8000bb4:	e7fd      	b.n	8000bb2 <HardFault_Handler+0x4>

08000bb6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bba:	bf00      	nop
 8000bbc:	e7fd      	b.n	8000bba <MemManage_Handler+0x4>

08000bbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc2:	bf00      	nop
 8000bc4:	e7fd      	b.n	8000bc2 <BusFault_Handler+0x4>

08000bc6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bca:	bf00      	nop
 8000bcc:	e7fd      	b.n	8000bca <UsageFault_Handler+0x4>

08000bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr

08000be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr

08000bf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf6:	f000 febd 	bl	8001974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8000c04:	4802      	ldr	r0, [pc, #8]	@ (8000c10 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8000c06:	f005 f93b 	bl	8005e80 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200000dc 	.word	0x200000dc

08000c14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000c18:	4802      	ldr	r0, [pc, #8]	@ (8000c24 <DMA1_Channel1_IRQHandler+0x10>)
 8000c1a:	f001 faa3 	bl	8002164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200001bc 	.word	0x200001bc

08000c28 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event Interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000c2c:	4802      	ldr	r0, [pc, #8]	@ (8000c38 <I2C2_EV_IRQHandler+0x10>)
 8000c2e:	f001 ffc9 	bl	8002bc4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2000004c 	.word	0x2000004c

08000c3c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error Interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000c40:	4802      	ldr	r0, [pc, #8]	@ (8000c4c <I2C2_ER_IRQHandler+0x10>)
 8000c42:	f001 ffd9 	bl	8002bf8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2000004c 	.word	0x2000004c

08000c50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c54:	4802      	ldr	r0, [pc, #8]	@ (8000c60 <USART1_IRQHandler+0x10>)
 8000c56:	f005 ff5d 	bl	8006b14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000128 	.word	0x20000128

08000c64 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000c68:	4802      	ldr	r0, [pc, #8]	@ (8000c74 <RTC_Alarm_IRQHandler+0x10>)
 8000c6a:	f004 ffb9 	bl	8005be0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200000dc 	.word	0x200000dc

08000c78 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000c7c:	4802      	ldr	r0, [pc, #8]	@ (8000c88 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000c7e:	f005 fc6d 	bl	800655c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000114 	.word	0x20000114

08000c8c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000c94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c98:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000c9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ca8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4013      	ands	r3, r2
 8000cae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
}
 8000cb2:	bf00      	nop
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr

08000cbc <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <MX_SUBGHZ_Init+0x20>)
 8000cc2:	2208      	movs	r2, #8
 8000cc4:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000cc6:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <MX_SUBGHZ_Init+0x20>)
 8000cc8:	f005 f9c6 	bl	8006058 <HAL_SUBGHZ_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000cd2:	f7ff fe6b 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000114 	.word	0x20000114

08000ce0 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f7ff ffcf 	bl	8000c8c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2032      	movs	r0, #50	@ 0x32
 8000cf4:	f000 ff79 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000cf8:	2032      	movs	r0, #50	@ 0x32
 8000cfa:	f000 ff90 	bl	8001c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000d0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000d18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	608b      	str	r3, [r1, #8]
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8000d30:	2000      	movs	r0, #0
 8000d32:	f7ff ffe8 	bl	8000d06 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8000d36:	f00c f8e3 	bl	800cf00 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d64 <SystemApp_Init+0x38>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8000d40:	f000 f8ac 	bl	8000e9c <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8000d44:	f00b fb22 	bl	800c38c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8000d48:	4807      	ldr	r0, [pc, #28]	@ (8000d68 <SystemApp_Init+0x3c>)
 8000d4a:	f00b fbbb 	bl	800c4c4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8000d4e:	2002      	movs	r0, #2
 8000d50:	f00b fbc6 	bl	800c4e0 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8000d54:	f00b fdae 	bl	800c8b4 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000d58:	2101      	movs	r1, #1
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f00b fdea 	bl	800c934 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000120 	.word	0x20000120
 8000d68:	08000d79 	.word	0x08000d79

08000d6c <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8000d70:	f00b fe10 	bl	800c994 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af02      	add	r7, sp, #8
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8000d82:	f107 0308 	add.w	r3, r7, #8
 8000d86:	4618      	mov	r0, r3
 8000d88:	f00c f882 	bl	800ce90 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000d92:	9200      	str	r2, [sp, #0]
 8000d94:	4a07      	ldr	r2, [pc, #28]	@ (8000db4 <TimestampNow+0x3c>)
 8000d96:	2110      	movs	r1, #16
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f000 f81d 	bl	8000dd8 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff f9ea 	bl	8000178 <strlen>
 8000da4:	4603      	mov	r3, r0
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	0800da1c 	.word	0x0800da1c

08000db8 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	f00b fd88 	bl	800c8d4 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2002      	movs	r0, #2
 8000dd0:	f00b fd80 	bl	800c8d4 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8000dd8:	b40c      	push	{r2, r3}
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b084      	sub	sp, #16
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
 8000de2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000dea:	6839      	ldr	r1, [r7, #0]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f00c fc29 	bl	800d648 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e00:	b002      	add	sp, #8
 8000e02:	4770      	bx	lr

08000e04 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000e0e:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <HAL_GetTick+0x24>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d002      	beq.n	8000e1c <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8000e16:	f000 f945 	bl	80010a4 <TIMER_IF_GetTimerValue>
 8000e1a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8000e1c:	687b      	ldr	r3, [r7, #4]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000120 	.word	0x20000120

08000e2c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f9bb 	bl	80011b2 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <LL_AHB2_GRP1_EnableClock>:
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e50:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e60:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4013      	ands	r3, r2
 8000e66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e68:	68fb      	ldr	r3, [r7, #12]
}
 8000e6a:	bf00      	nop
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <LL_EXTI_EnableIT_32_63+0x24>)
 8000e7e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000e82:	4905      	ldr	r1, [pc, #20]	@ (8000e98 <LL_EXTI_EnableIT_32_63+0x24>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	58000800 	.word	0x58000800

08000e9c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8000ea2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000ea6:	f7ff ffe5 	bl	8000e74 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000eaa:	f000 fd91 	bl	80019d0 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000eae:	f000 fd95 	bl	80019dc <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8000eb2:	f000 fd99 	bl	80019e8 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8000ed0:	2002      	movs	r0, #2
 8000ed2:	f7ff ffb7 	bl	8000e44 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	f7ff ffb4 	bl	8000e44 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8000edc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ee0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480d      	ldr	r0, [pc, #52]	@ (8000f1c <DBG_Init+0x80>)
 8000ee8:	f001 fab8 	bl	800245c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8000eec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ef0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4809      	ldr	r0, [pc, #36]	@ (8000f1c <DBG_Init+0x80>)
 8000ef8:	f001 fab0 	bl	800245c <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f02:	4806      	ldr	r0, [pc, #24]	@ (8000f1c <DBG_Init+0x80>)
 8000f04:	f001 fcd8 	bl	80028b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f0e:	4803      	ldr	r0, [pc, #12]	@ (8000f1c <DBG_Init+0x80>)
 8000f10:	f001 fcd2 	bl	80028b8 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8000f14:	bf00      	nop
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	48000400 	.word	0x48000400

08000f20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
	...

08000f44 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8000f4e:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <TIMER_IF_Init+0x5c>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	f083 0301 	eor.w	r3, r3, #1
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d01b      	beq.n	8000f94 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <TIMER_IF_Init+0x60>)
 8000f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f62:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8000f64:	f7ff fd50 	bl	8000a08 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8000f68:	f000 f856 	bl	8001018 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000f6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f70:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <TIMER_IF_Init+0x60>)
 8000f72:	f004 fdd9 	bl	8005b28 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <TIMER_IF_Init+0x60>)
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7c:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8000f7e:	4809      	ldr	r0, [pc, #36]	@ (8000fa4 <TIMER_IF_Init+0x60>)
 8000f80:	f004 ff10 	bl	8005da4 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8000f84:	2000      	movs	r0, #0
 8000f86:	f000 f9d3 	bl	8001330 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8000f8a:	f000 f85f 	bl	800104c <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8000f8e:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <TIMER_IF_Init+0x5c>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8000f94:	79fb      	ldrb	r3, [r7, #7]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000121 	.word	0x20000121
 8000fa4:	200000dc 	.word	0x200000dc

08000fa8 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08e      	sub	sp, #56	@ 0x38
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	222c      	movs	r2, #44	@ 0x2c
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f00c fcf0 	bl	800d9a4 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8000fc4:	f000 f828 	bl	8001018 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <TIMER_IF_StartTimer+0x68>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	4413      	add	r3, r2
 8000fd0:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000fe0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000fe4:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000fe6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fea:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4807      	ldr	r0, [pc, #28]	@ (8001014 <TIMER_IF_StartTimer+0x6c>)
 8000ff6:	f004 fc8b 	bl	8005910 <HAL_RTC_SetAlarm_IT>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001000:	f7ff fcd4 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001004:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001008:	4618      	mov	r0, r3
 800100a:	3738      	adds	r7, #56	@ 0x38
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000124 	.word	0x20000124
 8001014:	200000dc 	.word	0x200000dc

08001018 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001022:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <TIMER_IF_StopTimer+0x2c>)
 8001024:	2201      	movs	r2, #1
 8001026:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001028:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800102c:	4806      	ldr	r0, [pc, #24]	@ (8001048 <TIMER_IF_StopTimer+0x30>)
 800102e:	f004 fd7b 	bl	8005b28 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001032:	4b05      	ldr	r3, [pc, #20]	@ (8001048 <TIMER_IF_StopTimer+0x30>)
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 800103a:	79fb      	ldrb	r3, [r7, #7]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40002800 	.word	0x40002800
 8001048:	200000dc 	.word	0x200000dc

0800104c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001050:	f000 f98e 	bl	8001370 <GetTimerTicks>
 8001054:	4603      	mov	r3, r0
 8001056:	4a03      	ldr	r2, [pc, #12]	@ (8001064 <TIMER_IF_SetTimerContext+0x18>)
 8001058:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800105a:	4b02      	ldr	r3, [pc, #8]	@ (8001064 <TIMER_IF_SetTimerContext+0x18>)
 800105c:	681b      	ldr	r3, [r3, #0]
}
 800105e:	4618      	mov	r0, r3
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000124 	.word	0x20000124

08001068 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800106c:	4b02      	ldr	r3, [pc, #8]	@ (8001078 <TIMER_IF_GetTimerContext+0x10>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr
 8001078:	20000124 	.word	0x20000124

0800107c <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001086:	f000 f973 	bl	8001370 <GetTimerTicks>
 800108a:	4602      	mov	r2, r0
 800108c:	4b04      	ldr	r3, [pc, #16]	@ (80010a0 <TIMER_IF_GetTimerElapsedTime+0x24>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001094:	687b      	ldr	r3, [r7, #4]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000124 	.word	0x20000124

080010a4 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80010ae:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <TIMER_IF_GetTimerValue+0x24>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d002      	beq.n	80010bc <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80010b6:	f000 f95b 	bl	8001370 <GetTimerTicks>
 80010ba:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80010bc:	687b      	ldr	r3, [r7, #4]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000121 	.word	0x20000121

080010cc <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80010d6:	2303      	movs	r3, #3
 80010d8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 80010da:	687b      	ldr	r3, [r7, #4]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr

080010e6 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80010e6:	b5b0      	push	{r4, r5, r7, lr}
 80010e8:	b084      	sub	sp, #16
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80010ee:	2100      	movs	r1, #0
 80010f0:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	2000      	movs	r0, #0
 80010f6:	460a      	mov	r2, r1
 80010f8:	4603      	mov	r3, r0
 80010fa:	0d95      	lsrs	r5, r2, #22
 80010fc:	0294      	lsls	r4, r2, #10
 80010fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	4620      	mov	r0, r4
 8001108:	4629      	mov	r1, r5
 800110a:	f7ff f83d 	bl	8000188 <__aeabi_uldivmod>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4613      	mov	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8001116:	68fb      	ldr	r3, [r7, #12]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bdb0      	pop	{r4, r5, r7, pc}

08001120 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001120:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001124:	b085      	sub	sp, #20
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800112a:	2100      	movs	r1, #0
 800112c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	2000      	movs	r0, #0
 8001132:	460c      	mov	r4, r1
 8001134:	4605      	mov	r5, r0
 8001136:	4620      	mov	r0, r4
 8001138:	4629      	mov	r1, r5
 800113a:	f04f 0a00 	mov.w	sl, #0
 800113e:	f04f 0b00 	mov.w	fp, #0
 8001142:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001146:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800114a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800114e:	4650      	mov	r0, sl
 8001150:	4659      	mov	r1, fp
 8001152:	1b02      	subs	r2, r0, r4
 8001154:	eb61 0305 	sbc.w	r3, r1, r5
 8001158:	f04f 0000 	mov.w	r0, #0
 800115c:	f04f 0100 	mov.w	r1, #0
 8001160:	0099      	lsls	r1, r3, #2
 8001162:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001166:	0090      	lsls	r0, r2, #2
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	eb12 0804 	adds.w	r8, r2, r4
 8001170:	eb43 0905 	adc.w	r9, r3, r5
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	f04f 0300 	mov.w	r3, #0
 800117c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001180:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001184:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001188:	4690      	mov	r8, r2
 800118a:	4699      	mov	r9, r3
 800118c:	4640      	mov	r0, r8
 800118e:	4649      	mov	r1, r9
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	f04f 0300 	mov.w	r3, #0
 8001198:	0a82      	lsrs	r2, r0, #10
 800119a:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800119e:	0a8b      	lsrs	r3, r1, #10
 80011a0:	4613      	mov	r3, r2
 80011a2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80011a4:	68fb      	ldr	r3, [r7, #12]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80011b0:	4770      	bx	lr

080011b2 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ff93 	bl	80010e6 <TIMER_IF_Convert_ms2Tick>
 80011c0:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 80011c2:	f000 f8d5 	bl	8001370 <GetTimerTicks>
 80011c6:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80011c8:	e000      	b.n	80011cc <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 80011ca:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80011cc:	f000 f8d0 	bl	8001370 <GetTimerTicks>
 80011d0:	4602      	mov	r2, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d8f6      	bhi.n	80011ca <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80011ee:	f00b ffd5 	bl	800d19c <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b084      	sub	sp, #16
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001202:	f000 f8a5 	bl	8001350 <TIMER_IF_BkUp_Read_MSBticks>
 8001206:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	3301      	adds	r3, #1
 800120c:	4618      	mov	r0, r3
 800120e:	f000 f88f 	bl	8001330 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 800121a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800121e:	b08c      	sub	sp, #48	@ 0x30
 8001220:	af00      	add	r7, sp, #0
 8001222:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8001228:	f000 f8a2 	bl	8001370 <GetTimerTicks>
 800122c:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800122e:	f000 f88f 	bl	8001350 <TIMER_IF_BkUp_Read_MSBticks>
 8001232:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001236:	2200      	movs	r2, #0
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	60fa      	str	r2, [r7, #12]
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	000b      	movs	r3, r1
 8001248:	2200      	movs	r2, #0
 800124a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800124c:	2000      	movs	r0, #0
 800124e:	460c      	mov	r4, r1
 8001250:	4605      	mov	r5, r0
 8001252:	eb12 0804 	adds.w	r8, r2, r4
 8001256:	eb43 0905 	adc.w	r9, r3, r5
 800125a:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800125e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	f04f 0300 	mov.w	r3, #0
 800126a:	0a82      	lsrs	r2, r0, #10
 800126c:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001270:	0a8b      	lsrs	r3, r1, #10
 8001272:	4613      	mov	r3, r2
 8001274:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	2200      	movs	r2, #0
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8001284:	f04f 0b00 	mov.w	fp, #0
 8001288:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff46 	bl	8001120 <TIMER_IF_Convert_Tick2ms>
 8001294:	4603      	mov	r3, r0
 8001296:	b29a      	uxth	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 800129c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3730      	adds	r7, #48	@ 0x30
 80012a2:	46bd      	mov	sp, r7
 80012a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080012a8 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	2100      	movs	r1, #0
 80012b4:	4803      	ldr	r0, [pc, #12]	@ (80012c4 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 80012b6:	f004 fe07 	bl	8005ec8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200000dc 	.word	0x200000dc

080012c8 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	2101      	movs	r1, #1
 80012d4:	4803      	ldr	r0, [pc, #12]	@ (80012e4 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80012d6:	f004 fdf7 	bl	8005ec8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200000dc 	.word	0x200000dc

080012e8 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80012f2:	2100      	movs	r1, #0
 80012f4:	4804      	ldr	r0, [pc, #16]	@ (8001308 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80012f6:	f004 fdff 	bl	8005ef8 <HAL_RTCEx_BKUPRead>
 80012fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80012fc:	687b      	ldr	r3, [r7, #4]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200000dc 	.word	0x200000dc

0800130c <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001316:	2101      	movs	r1, #1
 8001318:	4804      	ldr	r0, [pc, #16]	@ (800132c <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800131a:	f004 fded 	bl	8005ef8 <HAL_RTCEx_BKUPRead>
 800131e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8001320:	687b      	ldr	r3, [r7, #4]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200000dc 	.word	0x200000dc

08001330 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	2102      	movs	r1, #2
 800133c:	4803      	ldr	r0, [pc, #12]	@ (800134c <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800133e:	f004 fdc3 	bl	8005ec8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200000dc 	.word	0x200000dc

08001350 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001356:	2102      	movs	r1, #2
 8001358:	4804      	ldr	r0, [pc, #16]	@ (800136c <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800135a:	f004 fdcd 	bl	8005ef8 <HAL_RTCEx_BKUPRead>
 800135e:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8001360:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200000dc 	.word	0x200000dc

08001370 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8001376:	480b      	ldr	r0, [pc, #44]	@ (80013a4 <GetTimerTicks+0x34>)
 8001378:	f7ff fdd8 	bl	8000f2c <LL_RTC_TIME_GetSubSecond>
 800137c:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800137e:	e003      	b.n	8001388 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8001380:	4808      	ldr	r0, [pc, #32]	@ (80013a4 <GetTimerTicks+0x34>)
 8001382:	f7ff fdd3 	bl	8000f2c <LL_RTC_TIME_GetSubSecond>
 8001386:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001388:	4806      	ldr	r0, [pc, #24]	@ (80013a4 <GetTimerTicks+0x34>)
 800138a:	f7ff fdcf 	bl	8000f2c <LL_RTC_TIME_GetSubSecond>
 800138e:	4602      	mov	r2, r0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4293      	cmp	r3, r2
 8001394:	d1f4      	bne.n	8001380 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40002800 	.word	0x40002800

080013a8 <LL_AHB2_GRP1_EnableClock>:
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4313      	orrs	r3, r2
 80013be:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4013      	ands	r3, r2
 80013ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013cc:	68fb      	ldr	r3, [r7, #12]
}
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <LL_APB2_GRP1_EnableClock>:
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80013e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4013      	ands	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013fc:	68fb      	ldr	r3, [r7, #12]
}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <LL_APB2_GRP1_DisableClock>:
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001414:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	43db      	mvns	r3, r3
 800141a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800141e:	4013      	ands	r3, r2
 8001420:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001430:	4b22      	ldr	r3, [pc, #136]	@ (80014bc <MX_USART1_UART_Init+0x90>)
 8001432:	4a23      	ldr	r2, [pc, #140]	@ (80014c0 <MX_USART1_UART_Init+0x94>)
 8001434:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001436:	4b21      	ldr	r3, [pc, #132]	@ (80014bc <MX_USART1_UART_Init+0x90>)
 8001438:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800143c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b1f      	ldr	r3, [pc, #124]	@ (80014bc <MX_USART1_UART_Init+0x90>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <MX_USART1_UART_Init+0x90>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800144a:	4b1c      	ldr	r3, [pc, #112]	@ (80014bc <MX_USART1_UART_Init+0x90>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <MX_USART1_UART_Init+0x90>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b19      	ldr	r3, [pc, #100]	@ (80014bc <MX_USART1_UART_Init+0x90>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800145c:	4b17      	ldr	r3, [pc, #92]	@ (80014bc <MX_USART1_UART_Init+0x90>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001462:	4b16      	ldr	r3, [pc, #88]	@ (80014bc <MX_USART1_UART_Init+0x90>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001468:	4b14      	ldr	r3, [pc, #80]	@ (80014bc <MX_USART1_UART_Init+0x90>)
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800146e:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <MX_USART1_UART_Init+0x90>)
 8001470:	2200      	movs	r2, #0
 8001472:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001474:	4811      	ldr	r0, [pc, #68]	@ (80014bc <MX_USART1_UART_Init+0x90>)
 8001476:	f005 fa30 	bl	80068da <HAL_UART_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001480:	f7ff fa94 	bl	80009ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001484:	2100      	movs	r1, #0
 8001486:	480d      	ldr	r0, [pc, #52]	@ (80014bc <MX_USART1_UART_Init+0x90>)
 8001488:	f007 fb50 	bl	8008b2c <HAL_UARTEx_SetTxFifoThreshold>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001492:	f7ff fa8b 	bl	80009ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001496:	2100      	movs	r1, #0
 8001498:	4808      	ldr	r0, [pc, #32]	@ (80014bc <MX_USART1_UART_Init+0x90>)
 800149a:	f007 fb85 	bl	8008ba8 <HAL_UARTEx_SetRxFifoThreshold>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80014a4:	f7ff fa82 	bl	80009ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80014a8:	4804      	ldr	r0, [pc, #16]	@ (80014bc <MX_USART1_UART_Init+0x90>)
 80014aa:	f007 fb07 	bl	8008abc <HAL_UARTEx_DisableFifoMode>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80014b4:	f7ff fa7a 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000128 	.word	0x20000128
 80014c0:	40013800 	.word	0x40013800

080014c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b096      	sub	sp, #88	@ 0x58
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	2238      	movs	r2, #56	@ 0x38
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f00c fa5d 	bl	800d9a4 <memset>
  if(uartHandle->Instance==USART1)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a2f      	ldr	r2, [pc, #188]	@ (80015ac <HAL_UART_MspInit+0xe8>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d156      	bne.n	80015a2 <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014f4:	2301      	movs	r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014f8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80014fc:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014fe:	f107 030c 	add.w	r3, r7, #12
 8001502:	4618      	mov	r0, r3
 8001504:	f004 f868 	bl	80055d8 <HAL_RCCEx_PeriphCLKConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800150e:	f7ff fa4d 	bl	80009ac <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001512:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001516:	f7ff ff5f 	bl	80013d8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	2002      	movs	r0, #2
 800151c:	f7ff ff44 	bl	80013a8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001520:	23c0      	movs	r3, #192	@ 0xc0
 8001522:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001530:	2307      	movs	r3, #7
 8001532:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001534:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001538:	4619      	mov	r1, r3
 800153a:	481d      	ldr	r0, [pc, #116]	@ (80015b0 <HAL_UART_MspInit+0xec>)
 800153c:	f000 ff8e 	bl	800245c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8001540:	4b1c      	ldr	r3, [pc, #112]	@ (80015b4 <HAL_UART_MspInit+0xf0>)
 8001542:	4a1d      	ldr	r2, [pc, #116]	@ (80015b8 <HAL_UART_MspInit+0xf4>)
 8001544:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001546:	4b1b      	ldr	r3, [pc, #108]	@ (80015b4 <HAL_UART_MspInit+0xf0>)
 8001548:	2212      	movs	r2, #18
 800154a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800154c:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <HAL_UART_MspInit+0xf0>)
 800154e:	2210      	movs	r2, #16
 8001550:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001552:	4b18      	ldr	r3, [pc, #96]	@ (80015b4 <HAL_UART_MspInit+0xf0>)
 8001554:	2200      	movs	r2, #0
 8001556:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001558:	4b16      	ldr	r3, [pc, #88]	@ (80015b4 <HAL_UART_MspInit+0xf0>)
 800155a:	2280      	movs	r2, #128	@ 0x80
 800155c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800155e:	4b15      	ldr	r3, [pc, #84]	@ (80015b4 <HAL_UART_MspInit+0xf0>)
 8001560:	2200      	movs	r2, #0
 8001562:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001564:	4b13      	ldr	r3, [pc, #76]	@ (80015b4 <HAL_UART_MspInit+0xf0>)
 8001566:	2200      	movs	r2, #0
 8001568:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800156a:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <HAL_UART_MspInit+0xf0>)
 800156c:	2200      	movs	r2, #0
 800156e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001570:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <HAL_UART_MspInit+0xf0>)
 8001572:	2200      	movs	r2, #0
 8001574:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001576:	480f      	ldr	r0, [pc, #60]	@ (80015b4 <HAL_UART_MspInit+0xf0>)
 8001578:	f000 fb7a 	bl	8001c70 <HAL_DMA_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8001582:	f7ff fa13 	bl	80009ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a0a      	ldr	r2, [pc, #40]	@ (80015b4 <HAL_UART_MspInit+0xf0>)
 800158a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800158c:	4a09      	ldr	r2, [pc, #36]	@ (80015b4 <HAL_UART_MspInit+0xf0>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	2024      	movs	r0, #36	@ 0x24
 8001598:	f000 fb27 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800159c:	2024      	movs	r0, #36	@ 0x24
 800159e:	f000 fb3e 	bl	8001c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80015a2:	bf00      	nop
 80015a4:	3758      	adds	r7, #88	@ 0x58
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40013800 	.word	0x40013800
 80015b0:	48000400 	.word	0x48000400
 80015b4:	200001bc 	.word	0x200001bc
 80015b8:	40020008 	.word	0x40020008

080015bc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0b      	ldr	r2, [pc, #44]	@ (80015f8 <HAL_UART_MspDeInit+0x3c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d10f      	bne.n	80015ee <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80015ce:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80015d2:	f7ff ff19 	bl	8001408 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7|GPIO_PIN_6);
 80015d6:	21c0      	movs	r1, #192	@ 0xc0
 80015d8:	4808      	ldr	r0, [pc, #32]	@ (80015fc <HAL_UART_MspDeInit+0x40>)
 80015da:	f001 f89f 	bl	800271c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 fbec 	bl	8001dc0 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80015e8:	2024      	movs	r0, #36	@ 0x24
 80015ea:	f000 fb26 	bl	8001c3a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40013800 	.word	0x40013800
 80015fc:	48000400 	.word	0x48000400

08001600 <LL_APB2_GRP1_ForceReset>:
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8001608:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800160c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800160e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4313      	orrs	r3, r2
 8001616:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <LL_APB2_GRP1_ReleaseReset>:
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800162a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800162e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	43db      	mvns	r3, r3
 8001634:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001638:	4013      	ands	r3, r2
 800163a:	640b      	str	r3, [r1, #64]	@ 0x40
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
	...

08001648 <LL_EXTI_EnableIT_0_31>:
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001650:	4b06      	ldr	r3, [pc, #24]	@ (800166c <LL_EXTI_EnableIT_0_31+0x24>)
 8001652:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001656:	4905      	ldr	r1, [pc, #20]	@ (800166c <LL_EXTI_EnableIT_0_31+0x24>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4313      	orrs	r3, r2
 800165c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	58000800 	.word	0x58000800

08001670 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001678:	4a07      	ldr	r2, [pc, #28]	@ (8001698 <vcom_Init+0x28>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 800167e:	f7fe ff13 	bl	80004a8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001682:	f7ff fed3 	bl	800142c <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8001686:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800168a:	f7ff ffdd 	bl	8001648 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800168e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000220 	.word	0x20000220

0800169c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80016a0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80016a4:	f7ff ffac 	bl	8001600 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80016a8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80016ac:	f7ff ffb9 	bl	8001622 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 80016b0:	4804      	ldr	r0, [pc, #16]	@ (80016c4 <vcom_DeInit+0x28>)
 80016b2:	f7ff ff83 	bl	80015bc <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80016b6:	200f      	movs	r0, #15
 80016b8:	f000 fabf 	bl	8001c3a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80016bc:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80016be:	4618      	mov	r0, r3
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000128 	.word	0x20000128

080016c8 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80016d4:	887b      	ldrh	r3, [r7, #2]
 80016d6:	461a      	mov	r2, r3
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	4804      	ldr	r0, [pc, #16]	@ (80016ec <vcom_Trace_DMA+0x24>)
 80016dc:	f005 f99a 	bl	8006a14 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80016e0:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000128 	.word	0x20000128

080016f0 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80016f8:	4a19      	ldr	r2, [pc, #100]	@ (8001760 <vcom_ReceiveInit+0x70>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80016fe:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001702:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8001704:	f107 0308 	add.w	r3, r7, #8
 8001708:	e893 0006 	ldmia.w	r3, {r1, r2}
 800170c:	4815      	ldr	r0, [pc, #84]	@ (8001764 <vcom_ReceiveInit+0x74>)
 800170e:	f007 f948 	bl	80089a2 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8001712:	bf00      	nop
 8001714:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <vcom_ReceiveInit+0x74>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800171e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001722:	d0f7      	beq.n	8001714 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8001724:	bf00      	nop
 8001726:	4b0f      	ldr	r3, [pc, #60]	@ (8001764 <vcom_ReceiveInit+0x74>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001730:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001734:	d1f7      	bne.n	8001726 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001736:	4b0b      	ldr	r3, [pc, #44]	@ (8001764 <vcom_ReceiveInit+0x74>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <vcom_ReceiveInit+0x74>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001744:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8001746:	4807      	ldr	r0, [pc, #28]	@ (8001764 <vcom_ReceiveInit+0x74>)
 8001748:	f007 f986 	bl	8008a58 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 800174c:	2201      	movs	r2, #1
 800174e:	4906      	ldr	r1, [pc, #24]	@ (8001768 <vcom_ReceiveInit+0x78>)
 8001750:	4804      	ldr	r0, [pc, #16]	@ (8001764 <vcom_ReceiveInit+0x74>)
 8001752:	f005 f913 	bl	800697c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8001756:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000224 	.word	0x20000224
 8001764:	20000128 	.word	0x20000128
 8001768:	2000021c 	.word	0x2000021c

0800176c <vcom_Resume>:

void vcom_Resume(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001770:	4808      	ldr	r0, [pc, #32]	@ (8001794 <vcom_Resume+0x28>)
 8001772:	f005 f8b2 	bl	80068da <HAL_UART_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <vcom_Resume+0x14>
  {
    Error_Handler();
 800177c:	f7ff f916 	bl	80009ac <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001780:	4805      	ldr	r0, [pc, #20]	@ (8001798 <vcom_Resume+0x2c>)
 8001782:	f000 fa75 	bl	8001c70 <HAL_DMA_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <vcom_Resume+0x24>
  {
    Error_Handler();
 800178c:	f7ff f90e 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000128 	.word	0x20000128
 8001798:	200001bc 	.word	0x200001bc

0800179c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a05      	ldr	r2, [pc, #20]	@ (80017c0 <HAL_UART_TxCpltCallback+0x24>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d103      	bne.n	80017b6 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80017ae:	4b05      	ldr	r3, [pc, #20]	@ (80017c4 <HAL_UART_TxCpltCallback+0x28>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2000      	movs	r0, #0
 80017b4:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40013800 	.word	0x40013800
 80017c4:	20000220 	.word	0x20000220

080017c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0d      	ldr	r2, [pc, #52]	@ (800180c <HAL_UART_RxCpltCallback+0x44>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d113      	bne.n	8001802 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80017da:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <HAL_UART_RxCpltCallback+0x48>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00a      	beq.n	80017f8 <HAL_UART_RxCpltCallback+0x30>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d105      	bne.n	80017f8 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80017ec:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <HAL_UART_RxCpltCallback+0x48>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2200      	movs	r2, #0
 80017f2:	2101      	movs	r1, #1
 80017f4:	4807      	ldr	r0, [pc, #28]	@ (8001814 <HAL_UART_RxCpltCallback+0x4c>)
 80017f6:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80017f8:	2201      	movs	r2, #1
 80017fa:	4906      	ldr	r1, [pc, #24]	@ (8001814 <HAL_UART_RxCpltCallback+0x4c>)
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f005 f8bd 	bl	800697c <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40013800 	.word	0x40013800
 8001810:	20000224 	.word	0x20000224
 8001814:	2000021c 	.word	0x2000021c

08001818 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001818:	480d      	ldr	r0, [pc, #52]	@ (8001850 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800181a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800181c:	f7ff fb80 	bl	8000f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001820:	480c      	ldr	r0, [pc, #48]	@ (8001854 <LoopForever+0x6>)
  ldr r1, =_edata
 8001822:	490d      	ldr	r1, [pc, #52]	@ (8001858 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001824:	4a0d      	ldr	r2, [pc, #52]	@ (800185c <LoopForever+0xe>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001828:	e002      	b.n	8001830 <LoopCopyDataInit>

0800182a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800182a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800182c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182e:	3304      	adds	r3, #4

08001830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001834:	d3f9      	bcc.n	800182a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001836:	4a0a      	ldr	r2, [pc, #40]	@ (8001860 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001838:	4c0a      	ldr	r4, [pc, #40]	@ (8001864 <LoopForever+0x16>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800183c:	e001      	b.n	8001842 <LoopFillZerobss>

0800183e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001840:	3204      	adds	r2, #4

08001842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001844:	d3fb      	bcc.n	800183e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001846:	f00c f8b5 	bl	800d9b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800184a:	f7ff f803 	bl	8000854 <main>

0800184e <LoopForever>:

LoopForever:
    b LoopForever
 800184e:	e7fe      	b.n	800184e <LoopForever>
  ldr   r0, =_estack
 8001850:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001858:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 800185c:	0800dde4 	.word	0x0800dde4
  ldr r2, =_sbss
 8001860:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001864:	2000075c 	.word	0x2000075c

08001868 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001868:	e7fe      	b.n	8001868 <ADC_IRQHandler>
	...

0800186c <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001870:	4b04      	ldr	r3, [pc, #16]	@ (8001884 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4a03      	ldr	r2, [pc, #12]	@ (8001884 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6053      	str	r3, [r2, #4]
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	e0042000 	.word	0xe0042000

08001888 <LL_DBGMCU_EnableDBGStopMode>:
  *        in Stop mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800188c:	4b04      	ldr	r3, [pc, #16]	@ (80018a0 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	4a03      	ldr	r2, [pc, #12]	@ (80018a0 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8001892:	f043 0302 	orr.w	r3, r3, #2
 8001896:	6053      	str	r3, [r2, #4]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	e0042000 	.word	0xe0042000

080018a4 <LL_DBGMCU_EnableDBGStandbyMode>:
  *        in Standby mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_EnableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStandbyMode(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80018a8:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	4a03      	ldr	r2, [pc, #12]	@ (80018bc <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80018ae:	f043 0304 	orr.w	r3, r3, #4
 80018b2:	6053      	str	r3, [r2, #4]
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	e0042000 	.word	0xe0042000

080018c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ca:	2003      	movs	r0, #3
 80018cc:	f000 f982 	bl	8001bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80018d0:	f003 fca4 	bl	800521c <HAL_RCC_GetHCLKFreq>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4a09      	ldr	r2, [pc, #36]	@ (80018fc <HAL_Init+0x3c>)
 80018d8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018da:	200f      	movs	r0, #15
 80018dc:	f000 f810 	bl	8001900 <HAL_InitTick>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	71fb      	strb	r3, [r7, #7]
 80018ea:	e001      	b.n	80018f0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018ec:	f7ff f955 	bl	8000b9a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018f0:	79fb      	ldrb	r3, [r7, #7]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000008 	.word	0x20000008

08001900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001908:	2300      	movs	r3, #0
 800190a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800190c:	4b17      	ldr	r3, [pc, #92]	@ (800196c <HAL_InitTick+0x6c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d024      	beq.n	800195e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001914:	f003 fc82 	bl	800521c <HAL_RCC_GetHCLKFreq>
 8001918:	4602      	mov	r2, r0
 800191a:	4b14      	ldr	r3, [pc, #80]	@ (800196c <HAL_InitTick+0x6c>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	4619      	mov	r1, r3
 8001920:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001924:	fbb3 f3f1 	udiv	r3, r3, r1
 8001928:	fbb2 f3f3 	udiv	r3, r2, r3
 800192c:	4618      	mov	r0, r3
 800192e:	f000 f992 	bl	8001c56 <HAL_SYSTICK_Config>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10f      	bne.n	8001958 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b0f      	cmp	r3, #15
 800193c:	d809      	bhi.n	8001952 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800193e:	2200      	movs	r2, #0
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	f04f 30ff 	mov.w	r0, #4294967295
 8001946:	f000 f950 	bl	8001bea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800194a:	4a09      	ldr	r2, [pc, #36]	@ (8001970 <HAL_InitTick+0x70>)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	e007      	b.n	8001962 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	73fb      	strb	r3, [r7, #15]
 8001956:	e004      	b.n	8001962 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
 800195c:	e001      	b.n	8001962 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001962:	7bfb      	ldrb	r3, [r7, #15]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000010 	.word	0x20000010
 8001970:	2000000c 	.word	0x2000000c

08001974 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001978:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <HAL_IncTick+0x1c>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b05      	ldr	r3, [pc, #20]	@ (8001994 <HAL_IncTick+0x20>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4413      	add	r3, r2
 8001984:	4a03      	ldr	r2, [pc, #12]	@ (8001994 <HAL_IncTick+0x20>)
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr
 8001990:	20000010 	.word	0x20000010
 8001994:	20000228 	.word	0x20000228

08001998 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800199c:	4b04      	ldr	r3, [pc, #16]	@ (80019b0 <HAL_SuspendTick+0x18>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a03      	ldr	r2, [pc, #12]	@ (80019b0 <HAL_SuspendTick+0x18>)
 80019a2:	f023 0302 	bic.w	r3, r3, #2
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	e000e010 	.word	0xe000e010

080019b4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80019b8:	4b04      	ldr	r3, [pc, #16]	@ (80019cc <HAL_ResumeTick+0x18>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a03      	ldr	r2, [pc, #12]	@ (80019cc <HAL_ResumeTick+0x18>)
 80019be:	f043 0302 	orr.w	r3, r3, #2
 80019c2:	6013      	str	r3, [r2, #0]
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	e000e010 	.word	0xe000e010

080019d0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80019d4:	f7ff ff4a 	bl	800186c <LL_DBGMCU_EnableDBGSleepMode>
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80019e0:	f7ff ff52 	bl	8001888 <LL_DBGMCU_EnableDBGStopMode>
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 80019ec:	f7ff ff5a 	bl	80018a4 <LL_DBGMCU_EnableDBGStandbyMode>
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a04:	4b0c      	ldr	r3, [pc, #48]	@ (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a10:	4013      	ands	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a26:	4a04      	ldr	r2, [pc, #16]	@ (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	60d3      	str	r3, [r2, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a40:	4b04      	ldr	r3, [pc, #16]	@ (8001a54 <__NVIC_GetPriorityGrouping+0x18>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	f003 0307 	and.w	r3, r3, #7
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	db0b      	blt.n	8001a82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	f003 021f 	and.w	r2, r3, #31
 8001a70:	4906      	ldr	r1, [pc, #24]	@ (8001a8c <__NVIC_EnableIRQ+0x34>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	2001      	movs	r0, #1
 8001a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	e000e100 	.word	0xe000e100

08001a90 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	db12      	blt.n	8001ac8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	f003 021f 	and.w	r2, r3, #31
 8001aa8:	490a      	ldr	r1, [pc, #40]	@ (8001ad4 <__NVIC_DisableIRQ+0x44>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	095b      	lsrs	r3, r3, #5
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab6:	3320      	adds	r3, #32
 8001ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001abc:	f3bf 8f4f 	dsb	sy
}
 8001ac0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ac2:	f3bf 8f6f 	isb	sy
}
 8001ac6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000e100 	.word	0xe000e100

08001ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	6039      	str	r1, [r7, #0]
 8001ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	db0a      	blt.n	8001b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	490c      	ldr	r1, [pc, #48]	@ (8001b24 <__NVIC_SetPriority+0x4c>)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	0112      	lsls	r2, r2, #4
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	440b      	add	r3, r1
 8001afc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b00:	e00a      	b.n	8001b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	4908      	ldr	r1, [pc, #32]	@ (8001b28 <__NVIC_SetPriority+0x50>)
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	3b04      	subs	r3, #4
 8001b10:	0112      	lsls	r2, r2, #4
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	440b      	add	r3, r1
 8001b16:	761a      	strb	r2, [r3, #24]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000e100 	.word	0xe000e100
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b089      	sub	sp, #36	@ 0x24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f1c3 0307 	rsb	r3, r3, #7
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	bf28      	it	cs
 8001b4a:	2304      	movcs	r3, #4
 8001b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3304      	adds	r3, #4
 8001b52:	2b06      	cmp	r3, #6
 8001b54:	d902      	bls.n	8001b5c <NVIC_EncodePriority+0x30>
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3b03      	subs	r3, #3
 8001b5a:	e000      	b.n	8001b5e <NVIC_EncodePriority+0x32>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b60:	f04f 32ff 	mov.w	r2, #4294967295
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	401a      	ands	r2, r3
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b74:	f04f 31ff 	mov.w	r1, #4294967295
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7e:	43d9      	mvns	r1, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	4313      	orrs	r3, r2
         );
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3724      	adds	r7, #36	@ 0x24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ba0:	d301      	bcc.n	8001ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e00f      	b.n	8001bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd0 <SysTick_Config+0x40>)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bae:	210f      	movs	r1, #15
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb4:	f7ff ff90 	bl	8001ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb8:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <SysTick_Config+0x40>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bbe:	4b04      	ldr	r3, [pc, #16]	@ (8001bd0 <SysTick_Config+0x40>)
 8001bc0:	2207      	movs	r2, #7
 8001bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	e000e010 	.word	0xe000e010

08001bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ff09 	bl	80019f4 <__NVIC_SetPriorityGrouping>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b086      	sub	sp, #24
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
 8001bf6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf8:	f7ff ff20 	bl	8001a3c <__NVIC_GetPriorityGrouping>
 8001bfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	6978      	ldr	r0, [r7, #20]
 8001c04:	f7ff ff92 	bl	8001b2c <NVIC_EncodePriority>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff61 	bl	8001ad8 <__NVIC_SetPriority>
}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff13 	bl	8001a58 <__NVIC_EnableIRQ>
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	4603      	mov	r3, r0
 8001c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff21 	bl	8001a90 <__NVIC_DisableIRQ>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ff96 	bl	8001b90 <SysTick_Config>
 8001c64:	4603      	mov	r3, r0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e08e      	b.n	8001da0 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	4b47      	ldr	r3, [pc, #284]	@ (8001da8 <HAL_DMA_Init+0x138>)
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d80f      	bhi.n	8001cae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	4b45      	ldr	r3, [pc, #276]	@ (8001dac <HAL_DMA_Init+0x13c>)
 8001c96:	4413      	add	r3, r2
 8001c98:	4a45      	ldr	r2, [pc, #276]	@ (8001db0 <HAL_DMA_Init+0x140>)
 8001c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9e:	091b      	lsrs	r3, r3, #4
 8001ca0:	009a      	lsls	r2, r3, #2
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a42      	ldr	r2, [pc, #264]	@ (8001db4 <HAL_DMA_Init+0x144>)
 8001caa:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cac:	e00e      	b.n	8001ccc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b40      	ldr	r3, [pc, #256]	@ (8001db8 <HAL_DMA_Init+0x148>)
 8001cb6:	4413      	add	r3, r2
 8001cb8:	4a3d      	ldr	r2, [pc, #244]	@ (8001db0 <HAL_DMA_Init+0x140>)
 8001cba:	fba2 2303 	umull	r2, r3, r2, r3
 8001cbe:	091b      	lsrs	r3, r3, #4
 8001cc0:	009a      	lsls	r2, r3, #2
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a3c      	ldr	r2, [pc, #240]	@ (8001dbc <HAL_DMA_Init+0x14c>)
 8001cca:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ce6:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6819      	ldr	r1, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	431a      	orrs	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 fb30 	bl	8002384 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d2c:	d102      	bne.n	8001d34 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d3c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d40:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d4a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d010      	beq.n	8001d76 <HAL_DMA_Init+0x106>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d80c      	bhi.n	8001d76 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 fb59 	bl	8002414 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	e008      	b.n	8001d88 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40020407 	.word	0x40020407
 8001dac:	bffdfff8 	.word	0xbffdfff8
 8001db0:	cccccccd 	.word	0xcccccccd
 8001db4:	40020000 	.word	0x40020000
 8001db8:	bffdfbf8 	.word	0xbffdfbf8
 8001dbc:	40020400 	.word	0x40020400

08001dc0 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e07b      	b.n	8001eca <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0201 	bic.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ed4 <HAL_DMA_DeInit+0x114>)
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d80f      	bhi.n	8001e0e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	4b38      	ldr	r3, [pc, #224]	@ (8001ed8 <HAL_DMA_DeInit+0x118>)
 8001df6:	4413      	add	r3, r2
 8001df8:	4a38      	ldr	r2, [pc, #224]	@ (8001edc <HAL_DMA_DeInit+0x11c>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	091b      	lsrs	r3, r3, #4
 8001e00:	009a      	lsls	r2, r3, #2
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a35      	ldr	r2, [pc, #212]	@ (8001ee0 <HAL_DMA_DeInit+0x120>)
 8001e0a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e0c:	e00e      	b.n	8001e2c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	4b33      	ldr	r3, [pc, #204]	@ (8001ee4 <HAL_DMA_DeInit+0x124>)
 8001e16:	4413      	add	r3, r2
 8001e18:	4a30      	ldr	r2, [pc, #192]	@ (8001edc <HAL_DMA_DeInit+0x11c>)
 8001e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1e:	091b      	lsrs	r3, r3, #4
 8001e20:	009a      	lsls	r2, r3, #2
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a2f      	ldr	r2, [pc, #188]	@ (8001ee8 <HAL_DMA_DeInit+0x128>)
 8001e2a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e38:	f003 021c 	and.w	r2, r3, #28
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e40:	2101      	movs	r1, #1
 8001e42:	fa01 f202 	lsl.w	r2, r1, r2
 8001e46:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 fa9b 	bl	8002384 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e5e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00f      	beq.n	8001e88 <HAL_DMA_DeInit+0xc8>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d80b      	bhi.n	8001e88 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 facf 	bl	8002414 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001e86:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40020407 	.word	0x40020407
 8001ed8:	bffdfff8 	.word	0xbffdfff8
 8001edc:	cccccccd 	.word	0xcccccccd
 8001ee0:	40020000 	.word	0x40020000
 8001ee4:	bffdfbf8 	.word	0xbffdfbf8
 8001ee8:	40020400 	.word	0x40020400

08001eec <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
 8001ef8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <HAL_DMA_Start_IT+0x20>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e069      	b.n	8001fe0 <HAL_DMA_Start_IT+0xf4>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d155      	bne.n	8001fcc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0201 	bic.w	r2, r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	68b9      	ldr	r1, [r7, #8]
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f000 f9e0 	bl	800230a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d008      	beq.n	8001f64 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 020e 	orr.w	r2, r2, #14
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	e00f      	b.n	8001f84 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0204 	bic.w	r2, r2, #4
 8001f72:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 020a 	orr.w	r2, r2, #10
 8001f82:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d007      	beq.n	8001fa2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fa0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d007      	beq.n	8001fba <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fb8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0201 	orr.w	r2, r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	e008      	b.n	8001fde <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2280      	movs	r2, #128	@ 0x80
 8001fd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e04f      	b.n	800209a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d008      	beq.n	8002018 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2204      	movs	r2, #4
 800200a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e040      	b.n	800209a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 020e 	bic.w	r2, r2, #14
 8002026:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002032:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002036:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0201 	bic.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204c:	f003 021c 	and.w	r2, r3, #28
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002054:	2101      	movs	r1, #1
 8002056:	fa01 f202 	lsl.w	r2, r1, r2
 800205a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002064:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00c      	beq.n	8002088 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002078:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800207c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002086:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d005      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2204      	movs	r2, #4
 80020c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	73fb      	strb	r3, [r7, #15]
 80020c6:	e047      	b.n	8002158 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 020e 	bic.w	r2, r2, #14
 80020d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0201 	bic.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fc:	f003 021c 	and.w	r2, r3, #28
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002104:	2101      	movs	r1, #1
 8002106:	fa01 f202 	lsl.w	r2, r1, r2
 800210a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002114:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00c      	beq.n	8002138 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002128:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800212c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002136:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	4798      	blx	r3
    }
  }
  return status;
 8002158:	7bfb      	ldrb	r3, [r7, #15]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002180:	f003 031c 	and.w	r3, r3, #28
 8002184:	2204      	movs	r2, #4
 8002186:	409a      	lsls	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4013      	ands	r3, r2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d027      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x7c>
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b00      	cmp	r3, #0
 8002198:	d022      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0320 	and.w	r3, r3, #32
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d107      	bne.n	80021b8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0204 	bic.w	r2, r2, #4
 80021b6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021bc:	f003 021c 	and.w	r2, r3, #28
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c4:	2104      	movs	r1, #4
 80021c6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ca:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 8081 	beq.w	80022d8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80021de:	e07b      	b.n	80022d8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e4:	f003 031c 	and.w	r3, r3, #28
 80021e8:	2202      	movs	r2, #2
 80021ea:	409a      	lsls	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d03d      	beq.n	8002270 <HAL_DMA_IRQHandler+0x10c>
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d038      	beq.n	8002270 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0320 	and.w	r3, r3, #32
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10b      	bne.n	8002224 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 020a 	bic.w	r2, r2, #10
 800221a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	4b2e      	ldr	r3, [pc, #184]	@ (80022e4 <HAL_DMA_IRQHandler+0x180>)
 800222c:	429a      	cmp	r2, r3
 800222e:	d909      	bls.n	8002244 <HAL_DMA_IRQHandler+0xe0>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002234:	f003 031c 	and.w	r3, r3, #28
 8002238:	4a2b      	ldr	r2, [pc, #172]	@ (80022e8 <HAL_DMA_IRQHandler+0x184>)
 800223a:	2102      	movs	r1, #2
 800223c:	fa01 f303 	lsl.w	r3, r1, r3
 8002240:	6053      	str	r3, [r2, #4]
 8002242:	e008      	b.n	8002256 <HAL_DMA_IRQHandler+0xf2>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002248:	f003 031c 	and.w	r3, r3, #28
 800224c:	4a27      	ldr	r2, [pc, #156]	@ (80022ec <HAL_DMA_IRQHandler+0x188>)
 800224e:	2102      	movs	r1, #2
 8002250:	fa01 f303 	lsl.w	r3, r1, r3
 8002254:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002262:	2b00      	cmp	r3, #0
 8002264:	d038      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800226e:	e033      	b.n	80022d8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002274:	f003 031c 	and.w	r3, r3, #28
 8002278:	2208      	movs	r2, #8
 800227a:	409a      	lsls	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4013      	ands	r3, r2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d02a      	beq.n	80022da <HAL_DMA_IRQHandler+0x176>
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d025      	beq.n	80022da <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 020e 	bic.w	r2, r2, #14
 800229c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a2:	f003 021c 	and.w	r2, r3, #28
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	2101      	movs	r1, #1
 80022ac:	fa01 f202 	lsl.w	r2, r1, r2
 80022b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d004      	beq.n	80022da <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
}
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40020080 	.word	0x40020080
 80022e8:	40020400 	.word	0x40020400
 80022ec:	40020000 	.word	0x40020000

080022f0 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80022fe:	b2db      	uxtb	r3, r3
}
 8002300:	4618      	mov	r0, r3
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr

0800230a <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800230a:	b480      	push	{r7}
 800230c:	b085      	sub	sp, #20
 800230e:	af00      	add	r7, sp, #0
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002320:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002326:	2b00      	cmp	r3, #0
 8002328:	d004      	beq.n	8002334 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002332:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002338:	f003 021c 	and.w	r2, r3, #28
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002340:	2101      	movs	r1, #1
 8002342:	fa01 f202 	lsl.w	r2, r1, r2
 8002346:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2b10      	cmp	r3, #16
 8002356:	d108      	bne.n	800236a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002368:	e007      	b.n	800237a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	60da      	str	r2, [r3, #12]
}
 800237a:	bf00      	nop
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr

08002384 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	4b1c      	ldr	r3, [pc, #112]	@ (8002404 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8002394:	429a      	cmp	r2, r3
 8002396:	d813      	bhi.n	80023c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239c:	089b      	lsrs	r3, r3, #2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80023a4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	3b08      	subs	r3, #8
 80023b4:	4a14      	ldr	r2, [pc, #80]	@ (8002408 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	091b      	lsrs	r3, r3, #4
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	e011      	b.n	80023e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c4:	089b      	lsrs	r3, r3, #2
 80023c6:	009a      	lsls	r2, r3, #2
 80023c8:	4b10      	ldr	r3, [pc, #64]	@ (800240c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80023ca:	4413      	add	r3, r2
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	3b08      	subs	r3, #8
 80023d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002408 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	091b      	lsrs	r3, r3, #4
 80023e0:	3307      	adds	r3, #7
 80023e2:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002410 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80023e8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f003 031f 	and.w	r3, r3, #31
 80023f0:	2201      	movs	r2, #1
 80023f2:	409a      	lsls	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40020407 	.word	0x40020407
 8002408:	cccccccd 	.word	0xcccccccd
 800240c:	4002081c 	.word	0x4002081c
 8002410:	40020880 	.word	0x40020880

08002414 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002424:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	4b0a      	ldr	r3, [pc, #40]	@ (8002454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	461a      	mov	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a08      	ldr	r2, [pc, #32]	@ (8002458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002438:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	3b01      	subs	r3, #1
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	2201      	movs	r2, #1
 8002444:	409a      	lsls	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800244a:	bf00      	nop
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr
 8002454:	1000823f 	.word	0x1000823f
 8002458:	40020940 	.word	0x40020940

0800245c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246a:	e140      	b.n	80026ee <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	2101      	movs	r1, #1
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	fa01 f303 	lsl.w	r3, r1, r3
 8002478:	4013      	ands	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 8132 	beq.w	80026e8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	2b01      	cmp	r3, #1
 800248e:	d005      	beq.n	800249c <HAL_GPIO_Init+0x40>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d130      	bne.n	80024fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	2203      	movs	r2, #3
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024d2:	2201      	movs	r2, #1
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4013      	ands	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	f003 0201 	and.w	r2, r3, #1
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b03      	cmp	r3, #3
 8002508:	d017      	beq.n	800253a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	2203      	movs	r2, #3
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4013      	ands	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d123      	bne.n	800258e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	08da      	lsrs	r2, r3, #3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3208      	adds	r2, #8
 800254e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002552:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	220f      	movs	r2, #15
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4013      	ands	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	08da      	lsrs	r2, r3, #3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3208      	adds	r2, #8
 8002588:	6939      	ldr	r1, [r7, #16]
 800258a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	2203      	movs	r2, #3
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43db      	mvns	r3, r3
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4013      	ands	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 0203 	and.w	r2, r3, #3
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 808c 	beq.w	80026e8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80025d0:	4a4e      	ldr	r2, [pc, #312]	@ (800270c <HAL_GPIO_Init+0x2b0>)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	089b      	lsrs	r3, r3, #2
 80025d6:	3302      	adds	r3, #2
 80025d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	2207      	movs	r2, #7
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4013      	ands	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80025fa:	d00d      	beq.n	8002618 <HAL_GPIO_Init+0x1bc>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a44      	ldr	r2, [pc, #272]	@ (8002710 <HAL_GPIO_Init+0x2b4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d007      	beq.n	8002614 <HAL_GPIO_Init+0x1b8>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a43      	ldr	r2, [pc, #268]	@ (8002714 <HAL_GPIO_Init+0x2b8>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d101      	bne.n	8002610 <HAL_GPIO_Init+0x1b4>
 800260c:	2302      	movs	r3, #2
 800260e:	e004      	b.n	800261a <HAL_GPIO_Init+0x1be>
 8002610:	2307      	movs	r3, #7
 8002612:	e002      	b.n	800261a <HAL_GPIO_Init+0x1be>
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <HAL_GPIO_Init+0x1be>
 8002618:	2300      	movs	r3, #0
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	f002 0203 	and.w	r2, r2, #3
 8002620:	0092      	lsls	r2, r2, #2
 8002622:	4093      	lsls	r3, r2
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800262a:	4938      	ldr	r1, [pc, #224]	@ (800270c <HAL_GPIO_Init+0x2b0>)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	089b      	lsrs	r3, r3, #2
 8002630:	3302      	adds	r3, #2
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002638:	4b37      	ldr	r3, [pc, #220]	@ (8002718 <HAL_GPIO_Init+0x2bc>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	43db      	mvns	r3, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800265c:	4a2e      	ldr	r2, [pc, #184]	@ (8002718 <HAL_GPIO_Init+0x2bc>)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002662:	4b2d      	ldr	r3, [pc, #180]	@ (8002718 <HAL_GPIO_Init+0x2bc>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	43db      	mvns	r3, r3
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4013      	ands	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002686:	4a24      	ldr	r2, [pc, #144]	@ (8002718 <HAL_GPIO_Init+0x2bc>)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800268c:	4b22      	ldr	r3, [pc, #136]	@ (8002718 <HAL_GPIO_Init+0x2bc>)
 800268e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002692:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	43db      	mvns	r3, r3
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4013      	ands	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80026b2:	4a19      	ldr	r2, [pc, #100]	@ (8002718 <HAL_GPIO_Init+0x2bc>)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80026ba:	4b17      	ldr	r3, [pc, #92]	@ (8002718 <HAL_GPIO_Init+0x2bc>)
 80026bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026c0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80026e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002718 <HAL_GPIO_Init+0x2bc>)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	3301      	adds	r3, #1
 80026ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f47f aeb7 	bne.w	800246c <HAL_GPIO_Init+0x10>
  }
}
 80026fe:	bf00      	nop
 8002700:	bf00      	nop
 8002702:	371c      	adds	r7, #28
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40010000 	.word	0x40010000
 8002710:	48000400 	.word	0x48000400
 8002714:	48000800 	.word	0x48000800
 8002718:	58000800 	.word	0x58000800

0800271c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800271c:	b480      	push	{r7}
 800271e:	b087      	sub	sp, #28
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800272a:	e0af      	b.n	800288c <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800272c:	2201      	movs	r2, #1
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 80a2 	beq.w	8002886 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002742:	4a59      	ldr	r2, [pc, #356]	@ (80028a8 <HAL_GPIO_DeInit+0x18c>)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	089b      	lsrs	r3, r3, #2
 8002748:	3302      	adds	r3, #2
 800274a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	2207      	movs	r2, #7
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4013      	ands	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800276a:	d00d      	beq.n	8002788 <HAL_GPIO_DeInit+0x6c>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a4f      	ldr	r2, [pc, #316]	@ (80028ac <HAL_GPIO_DeInit+0x190>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d007      	beq.n	8002784 <HAL_GPIO_DeInit+0x68>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a4e      	ldr	r2, [pc, #312]	@ (80028b0 <HAL_GPIO_DeInit+0x194>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d101      	bne.n	8002780 <HAL_GPIO_DeInit+0x64>
 800277c:	2302      	movs	r3, #2
 800277e:	e004      	b.n	800278a <HAL_GPIO_DeInit+0x6e>
 8002780:	2307      	movs	r3, #7
 8002782:	e002      	b.n	800278a <HAL_GPIO_DeInit+0x6e>
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <HAL_GPIO_DeInit+0x6e>
 8002788:	2300      	movs	r3, #0
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	f002 0203 	and.w	r2, r2, #3
 8002790:	0092      	lsls	r2, r2, #2
 8002792:	4093      	lsls	r3, r2
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	429a      	cmp	r2, r3
 8002798:	d136      	bne.n	8002808 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800279a:	4b46      	ldr	r3, [pc, #280]	@ (80028b4 <HAL_GPIO_DeInit+0x198>)
 800279c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	4943      	ldr	r1, [pc, #268]	@ (80028b4 <HAL_GPIO_DeInit+0x198>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80027ac:	4b41      	ldr	r3, [pc, #260]	@ (80028b4 <HAL_GPIO_DeInit+0x198>)
 80027ae:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	43db      	mvns	r3, r3
 80027b6:	493f      	ldr	r1, [pc, #252]	@ (80028b4 <HAL_GPIO_DeInit+0x198>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80027be:	4b3d      	ldr	r3, [pc, #244]	@ (80028b4 <HAL_GPIO_DeInit+0x198>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	493b      	ldr	r1, [pc, #236]	@ (80028b4 <HAL_GPIO_DeInit+0x198>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80027cc:	4b39      	ldr	r3, [pc, #228]	@ (80028b4 <HAL_GPIO_DeInit+0x198>)
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	4937      	ldr	r1, [pc, #220]	@ (80028b4 <HAL_GPIO_DeInit+0x198>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	2207      	movs	r2, #7
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80027ea:	4a2f      	ldr	r2, [pc, #188]	@ (80028a8 <HAL_GPIO_DeInit+0x18c>)
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	089b      	lsrs	r3, r3, #2
 80027f0:	3302      	adds	r3, #2
 80027f2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	43da      	mvns	r2, r3
 80027fa:	482b      	ldr	r0, [pc, #172]	@ (80028a8 <HAL_GPIO_DeInit+0x18c>)
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	089b      	lsrs	r3, r3, #2
 8002800:	400a      	ands	r2, r1
 8002802:	3302      	adds	r3, #2
 8002804:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	2103      	movs	r1, #3
 8002812:	fa01 f303 	lsl.w	r3, r1, r3
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	08da      	lsrs	r2, r3, #3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3208      	adds	r2, #8
 8002824:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	220f      	movs	r2, #15
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	08d2      	lsrs	r2, r2, #3
 800283c:	4019      	ands	r1, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3208      	adds	r2, #8
 8002842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	2103      	movs	r1, #3
 8002850:	fa01 f303 	lsl.w	r3, r1, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	401a      	ands	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	2101      	movs	r1, #1
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	fa01 f303 	lsl.w	r3, r1, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	401a      	ands	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	2103      	movs	r1, #3
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	401a      	ands	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	3301      	adds	r3, #1
 800288a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	fa22 f303 	lsr.w	r3, r2, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	f47f af49 	bne.w	800272c <HAL_GPIO_DeInit+0x10>
  }
}
 800289a:	bf00      	nop
 800289c:	bf00      	nop
 800289e:	371c      	adds	r7, #28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	40010000 	.word	0x40010000
 80028ac:	48000400 	.word	0x48000400
 80028b0:	48000800 	.word	0x48000800
 80028b4:	58000800 	.word	0x58000800

080028b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	807b      	strh	r3, [r7, #2]
 80028c4:	4613      	mov	r3, r2
 80028c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028c8:	787b      	ldrb	r3, [r7, #1]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028ce:	887a      	ldrh	r2, [r7, #2]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028d4:	e002      	b.n	80028dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028d6:	887a      	ldrh	r2, [r7, #2]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e081      	b.n	80029fc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d106      	bne.n	8002912 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7fd fe9f 	bl	8000650 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2224      	movs	r2, #36	@ 0x24
 8002916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0201 	bic.w	r2, r2, #1
 8002928:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002936:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002946:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d107      	bne.n	8002960 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800295c:	609a      	str	r2, [r3, #8]
 800295e:	e006      	b.n	800296e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800296c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d104      	bne.n	8002980 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800297e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6812      	ldr	r2, [r2, #0]
 800298a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800298e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002992:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029a2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69d9      	ldr	r1, [r3, #28]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1a      	ldr	r2, [r3, #32]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 0201 	orr.w	r2, r2, #1
 80029dc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af02      	add	r7, sp, #8
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	460b      	mov	r3, r1
 8002a12:	817b      	strh	r3, [r7, #10]
 8002a14:	4613      	mov	r3, r2
 8002a16:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b20      	cmp	r3, #32
 8002a22:	d153      	bne.n	8002acc <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a32:	d101      	bne.n	8002a38 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8002a34:	2302      	movs	r3, #2
 8002a36:	e04a      	b.n	8002ace <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d101      	bne.n	8002a46 <HAL_I2C_Master_Transmit_IT+0x42>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e043      	b.n	8002ace <HAL_I2C_Master_Transmit_IT+0xca>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2221      	movs	r2, #33	@ 0x21
 8002a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2210      	movs	r2, #16
 8002a5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	893a      	ldrh	r2, [r7, #8]
 8002a6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4a19      	ldr	r2, [pc, #100]	@ (8002ad8 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8002a74:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4a18      	ldr	r2, [pc, #96]	@ (8002adc <HAL_I2C_Master_Transmit_IT+0xd8>)
 8002a7a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	2bff      	cmp	r3, #255	@ 0xff
 8002a84:	d906      	bls.n	8002a94 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	22ff      	movs	r2, #255	@ 0xff
 8002a8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002a8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	e007      	b.n	8002aa4 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002a9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aa2:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	8979      	ldrh	r1, [r7, #10]
 8002aac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae0 <HAL_I2C_Master_Transmit_IT+0xdc>)
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f001 f994 	bl	8003de0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f001 f9bc 	bl	8003e40 <I2C_Enable_IRQ>

    return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	e000      	b.n	8002ace <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002acc:	2302      	movs	r3, #2
  }
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	ffff0000 	.word	0xffff0000
 8002adc:	08002d47 	.word	0x08002d47
 8002ae0:	80002000 	.word	0x80002000

08002ae4 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af02      	add	r7, sp, #8
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	461a      	mov	r2, r3
 8002af0:	460b      	mov	r3, r1
 8002af2:	817b      	strh	r3, [r7, #10]
 8002af4:	4613      	mov	r3, r2
 8002af6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b20      	cmp	r3, #32
 8002b02:	d153      	bne.n	8002bac <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b12:	d101      	bne.n	8002b18 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8002b14:	2302      	movs	r3, #2
 8002b16:	e04a      	b.n	8002bae <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d101      	bne.n	8002b26 <HAL_I2C_Master_Receive_IT+0x42>
 8002b22:	2302      	movs	r3, #2
 8002b24:	e043      	b.n	8002bae <HAL_I2C_Master_Receive_IT+0xca>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2222      	movs	r2, #34	@ 0x22
 8002b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2210      	movs	r2, #16
 8002b3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	893a      	ldrh	r2, [r7, #8]
 8002b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4a19      	ldr	r2, [pc, #100]	@ (8002bb8 <HAL_I2C_Master_Receive_IT+0xd4>)
 8002b54:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4a18      	ldr	r2, [pc, #96]	@ (8002bbc <HAL_I2C_Master_Receive_IT+0xd8>)
 8002b5a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	2bff      	cmp	r3, #255	@ 0xff
 8002b64:	d906      	bls.n	8002b74 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	22ff      	movs	r2, #255	@ 0xff
 8002b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002b6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	e007      	b.n	8002b84 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002b7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b82:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	8979      	ldrh	r1, [r7, #10]
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc0 <HAL_I2C_Master_Receive_IT+0xdc>)
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f001 f924 	bl	8003de0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002ba0:	2102      	movs	r1, #2
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f001 f94c 	bl	8003e40 <I2C_Enable_IRQ>

    return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	e000      	b.n	8002bae <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002bac:	2302      	movs	r3, #2
  }
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	ffff0000 	.word	0xffff0000
 8002bbc:	08002d47 	.word	0x08002d47
 8002bc0:	80002400 	.word	0x80002400

08002bc4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	68f9      	ldr	r1, [r7, #12]
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	4798      	blx	r3
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00f      	beq.n	8002c3a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00a      	beq.n	8002c3a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c28:	f043 0201 	orr.w	r2, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c38:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00f      	beq.n	8002c64 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c52:	f043 0208 	orr.w	r2, r3, #8
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c62:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00f      	beq.n	8002c8e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00a      	beq.n	8002c8e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7c:	f043 0202 	orr.w	r2, r3, #2
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c8c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 030b 	and.w	r3, r3, #11
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002c9e:	68f9      	ldr	r1, [r7, #12]
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 ff65 	bl	8003b70 <I2C_ITError>
  }
}
 8002ca6:	bf00      	nop
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	460b      	mov	r3, r1
 8002cdc:	70fb      	strb	r3, [r7, #3]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr

08002cfe <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr

08002d10 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr

08002d34 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr

08002d46 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b088      	sub	sp, #32
 8002d4a:	af02      	add	r7, sp, #8
 8002d4c:	60f8      	str	r0, [r7, #12]
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <I2C_Master_ISR_IT+0x1e>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e108      	b.n	8002f76 <I2C_Master_ISR_IT+0x230>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f003 0310 	and.w	r3, r3, #16
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d012      	beq.n	8002d9c <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00d      	beq.n	8002d9c <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2210      	movs	r2, #16
 8002d86:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8c:	f043 0204 	orr.w	r2, r3, #4
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 ffe2 	bl	8003d5e <I2C_Flush_TXDR>
 8002d9a:	e0d9      	b.n	8002f50 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d022      	beq.n	8002dec <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d01d      	beq.n	8002dec <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f023 0304 	bic.w	r3, r3, #4
 8002db6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002dea:	e0b1      	b.n	8002f50 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d01d      	beq.n	8002e32 <I2C_Master_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d018      	beq.n	8002e32 <I2C_Master_ISR_IT+0xec>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e04:	781a      	ldrb	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e30:	e08e      	b.n	8002f50 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d05c      	beq.n	8002ef6 <I2C_Master_ISR_IT+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d057      	beq.n	8002ef6 <I2C_Master_ISR_IT+0x1b0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d040      	beq.n	8002ed2 <I2C_Master_ISR_IT+0x18c>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d13c      	bne.n	8002ed2 <I2C_Master_ISR_IT+0x18c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e64:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	2bff      	cmp	r3, #255	@ 0xff
 8002e6e:	d90e      	bls.n	8002e8e <I2C_Master_ISR_IT+0x148>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	22ff      	movs	r2, #255	@ 0xff
 8002e74:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	8a79      	ldrh	r1, [r7, #18]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 ffaa 	bl	8003de0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e8c:	e032      	b.n	8002ef4 <I2C_Master_ISR_IT+0x1ae>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ea0:	d00b      	beq.n	8002eba <I2C_Master_ISR_IT+0x174>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea6:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002eac:	8a79      	ldrh	r1, [r7, #18]
 8002eae:	2000      	movs	r0, #0
 8002eb0:	9000      	str	r0, [sp, #0]
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 ff94 	bl	8003de0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eb8:	e01c      	b.n	8002ef4 <I2C_Master_ISR_IT+0x1ae>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	8a79      	ldrh	r1, [r7, #18]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 ff88 	bl	8003de0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ed0:	e010      	b.n	8002ef4 <I2C_Master_ISR_IT+0x1ae>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002edc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ee0:	d003      	beq.n	8002eea <I2C_Master_ISR_IT+0x1a4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 fb88 	bl	80035f8 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ee8:	e032      	b.n	8002f50 <I2C_Master_ISR_IT+0x20a>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002eea:	2140      	movs	r1, #64	@ 0x40
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 fe3f 	bl	8003b70 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ef2:	e02d      	b.n	8002f50 <I2C_Master_ISR_IT+0x20a>
 8002ef4:	e02c      	b.n	8002f50 <I2C_Master_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d027      	beq.n	8002f50 <I2C_Master_ISR_IT+0x20a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d022      	beq.n	8002f50 <I2C_Master_ISR_IT+0x20a>
  {
    if (hi2c->XferCount == 0U)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d119      	bne.n	8002f48 <I2C_Master_ISR_IT+0x202>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f22:	d015      	beq.n	8002f50 <I2C_Master_ISR_IT+0x20a>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f2c:	d108      	bne.n	8002f40 <I2C_Master_ISR_IT+0x1fa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	e007      	b.n	8002f50 <I2C_Master_ISR_IT+0x20a>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 fb59 	bl	80035f8 <I2C_ITMasterSeqCplt>
 8002f46:	e003      	b.n	8002f50 <I2C_Master_ISR_IT+0x20a>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002f48:	2140      	movs	r1, #64	@ 0x40
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 fe10 	bl	8003b70 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f003 0320 	and.w	r3, r3, #32
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d008      	beq.n	8002f6c <I2C_Master_ISR_IT+0x226>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <I2C_Master_ISR_IT+0x226>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002f64:	6979      	ldr	r1, [r7, #20]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 fbe0 	bl	800372c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b086      	sub	sp, #24
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <I2C_Slave_ISR_IT+0x24>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e0e1      	b.n	8003166 <I2C_Slave_ISR_IT+0x1e8>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d008      	beq.n	8002fc6 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002fbe:	6939      	ldr	r1, [r7, #16]
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 fc7b 	bl	80038bc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d04b      	beq.n	8003068 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d046      	beq.n	8003068 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d128      	bne.n	8003036 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b28      	cmp	r3, #40	@ 0x28
 8002fee:	d108      	bne.n	8003002 <I2C_Slave_ISR_IT+0x84>
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ff6:	d104      	bne.n	8003002 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002ff8:	6939      	ldr	r1, [r7, #16]
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 fd64 	bl	8003ac8 <I2C_ITListenCplt>
 8003000:	e031      	b.n	8003066 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b29      	cmp	r3, #41	@ 0x29
 800300c:	d10e      	bne.n	800302c <I2C_Slave_ISR_IT+0xae>
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003014:	d00a      	beq.n	800302c <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2210      	movs	r2, #16
 800301c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 fe9d 	bl	8003d5e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 fb24 	bl	8003672 <I2C_ITSlaveSeqCplt>
 800302a:	e01c      	b.n	8003066 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2210      	movs	r2, #16
 8003032:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003034:	e08f      	b.n	8003156 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2210      	movs	r2, #16
 800303c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003042:	f043 0204 	orr.w	r2, r3, #4
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <I2C_Slave_ISR_IT+0xda>
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003056:	d17e      	bne.n	8003156 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305c:	4619      	mov	r1, r3
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 fd86 	bl	8003b70 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003064:	e077      	b.n	8003156 <I2C_Slave_ISR_IT+0x1d8>
 8003066:	e076      	b.n	8003156 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b00      	cmp	r3, #0
 8003070:	d02f      	beq.n	80030d2 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003078:	2b00      	cmp	r3, #0
 800307a:	d02a      	beq.n	80030d2 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003080:	b29b      	uxth	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d018      	beq.n	80030b8 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030bc:	b29b      	uxth	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d14b      	bne.n	800315a <I2C_Slave_ISR_IT+0x1dc>
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030c8:	d047      	beq.n	800315a <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 fad1 	bl	8003672 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80030d0:	e043      	b.n	800315a <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d009      	beq.n	80030f0 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d004      	beq.n	80030f0 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80030e6:	6939      	ldr	r1, [r7, #16]
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 fa01 	bl	80034f0 <I2C_ITAddrCplt>
 80030ee:	e035      	b.n	800315c <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d030      	beq.n	800315c <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003100:	2b00      	cmp	r3, #0
 8003102:	d02b      	beq.n	800315c <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003108:	b29b      	uxth	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d018      	beq.n	8003140 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003112:	781a      	ldrb	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003128:	b29b      	uxth	r3, r3
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800313e:	e00d      	b.n	800315c <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003146:	d002      	beq.n	800314e <I2C_Slave_ISR_IT+0x1d0>
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d106      	bne.n	800315c <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fa8f 	bl	8003672 <I2C_ITSlaveSeqCplt>
 8003154:	e002      	b.n	800315c <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8003156:	bf00      	nop
 8003158:	e000      	b.n	800315c <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 800315a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b088      	sub	sp, #32
 8003172:	af02      	add	r7, sp, #8
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <I2C_Master_ISR_DMA+0x1a>
 8003184:	2302      	movs	r3, #2
 8003186:	e0d9      	b.n	800333c <I2C_Master_ISR_DMA+0x1ce>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f003 0310 	and.w	r3, r3, #16
 8003196:	2b00      	cmp	r3, #0
 8003198:	d016      	beq.n	80031c8 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d011      	beq.n	80031c8 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2210      	movs	r2, #16
 80031aa:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b0:	f043 0204 	orr.w	r2, r3, #4
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80031b8:	2120      	movs	r1, #32
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 fe40 	bl	8003e40 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 fdcc 	bl	8003d5e <I2C_Flush_TXDR>
 80031c6:	e0b4      	b.n	8003332 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d071      	beq.n	80032b6 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d06c      	beq.n	80032b6 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031ea:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d04e      	beq.n	8003294 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003202:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	2bff      	cmp	r3, #255	@ 0xff
 800320c:	d906      	bls.n	800321c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	22ff      	movs	r2, #255	@ 0xff
 8003212:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8003214:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	e010      	b.n	800323e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800322e:	d003      	beq.n	8003238 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003234:	617b      	str	r3, [r7, #20]
 8003236:	e002      	b.n	800323e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003238:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800323c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003242:	b2da      	uxtb	r2, r3
 8003244:	8a79      	ldrh	r1, [r7, #18]
 8003246:	2300      	movs	r3, #0
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 fdc7 	bl	8003de0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b22      	cmp	r3, #34	@ 0x22
 800326e:	d108      	bne.n	8003282 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800327e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003280:	e057      	b.n	8003332 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003290:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003292:	e04e      	b.n	8003332 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800329e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032a2:	d003      	beq.n	80032ac <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f9a7 	bl	80035f8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80032aa:	e042      	b.n	8003332 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80032ac:	2140      	movs	r1, #64	@ 0x40
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 fc5e 	bl	8003b70 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80032b4:	e03d      	b.n	8003332 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d028      	beq.n	8003312 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d023      	beq.n	8003312 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d119      	bne.n	8003308 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032e2:	d025      	beq.n	8003330 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032ec:	d108      	bne.n	8003300 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032fc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80032fe:	e017      	b.n	8003330 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 f979 	bl	80035f8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003306:	e013      	b.n	8003330 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003308:	2140      	movs	r1, #64	@ 0x40
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 fc30 	bl	8003b70 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003310:	e00e      	b.n	8003330 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f003 0320 	and.w	r3, r3, #32
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003326:	68b9      	ldr	r1, [r7, #8]
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 f9ff 	bl	800372c <I2C_ITMasterCplt>
 800332e:	e000      	b.n	8003332 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8003330:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b088      	sub	sp, #32
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003354:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <I2C_Slave_ISR_DMA+0x24>
 8003364:	2302      	movs	r3, #2
 8003366:	e0bf      	b.n	80034e8 <I2C_Slave_ISR_DMA+0x1a4>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f003 0320 	and.w	r3, r3, #32
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003384:	68b9      	ldr	r1, [r7, #8]
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 fa98 	bl	80038bc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 8095 	beq.w	80034c2 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 808f 	beq.w	80034c2 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d104      	bne.n	80033b8 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d07d      	beq.n	80034b4 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00c      	beq.n	80033da <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d007      	beq.n	80033da <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 80033d6:	2301      	movs	r3, #1
 80033d8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00c      	beq.n	80033fc <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d007      	beq.n	80033fc <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 80033f8:	2301      	movs	r3, #1
 80033fa:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d128      	bne.n	8003454 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b28      	cmp	r3, #40	@ 0x28
 800340c:	d108      	bne.n	8003420 <I2C_Slave_ISR_DMA+0xdc>
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003414:	d104      	bne.n	8003420 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003416:	68b9      	ldr	r1, [r7, #8]
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fb55 	bl	8003ac8 <I2C_ITListenCplt>
 800341e:	e048      	b.n	80034b2 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b29      	cmp	r3, #41	@ 0x29
 800342a:	d10e      	bne.n	800344a <I2C_Slave_ISR_DMA+0x106>
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003432:	d00a      	beq.n	800344a <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2210      	movs	r2, #16
 800343a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 fc8e 	bl	8003d5e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 f915 	bl	8003672 <I2C_ITSlaveSeqCplt>
 8003448:	e033      	b.n	80034b2 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2210      	movs	r2, #16
 8003450:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003452:	e034      	b.n	80034be <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2210      	movs	r2, #16
 800345a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003460:	f043 0204 	orr.w	r2, r3, #4
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800346e:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <I2C_Slave_ISR_DMA+0x13a>
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800347c:	d11f      	bne.n	80034be <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800347e:	7dfb      	ldrb	r3, [r7, #23]
 8003480:	2b21      	cmp	r3, #33	@ 0x21
 8003482:	d002      	beq.n	800348a <I2C_Slave_ISR_DMA+0x146>
 8003484:	7dfb      	ldrb	r3, [r7, #23]
 8003486:	2b29      	cmp	r3, #41	@ 0x29
 8003488:	d103      	bne.n	8003492 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2221      	movs	r2, #33	@ 0x21
 800348e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003490:	e008      	b.n	80034a4 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003492:	7dfb      	ldrb	r3, [r7, #23]
 8003494:	2b22      	cmp	r3, #34	@ 0x22
 8003496:	d002      	beq.n	800349e <I2C_Slave_ISR_DMA+0x15a>
 8003498:	7dfb      	ldrb	r3, [r7, #23]
 800349a:	2b2a      	cmp	r3, #42	@ 0x2a
 800349c:	d102      	bne.n	80034a4 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2222      	movs	r2, #34	@ 0x22
 80034a2:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a8:	4619      	mov	r1, r3
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 fb60 	bl	8003b70 <I2C_ITError>
      if (treatdmanack == 1U)
 80034b0:	e005      	b.n	80034be <I2C_Slave_ISR_DMA+0x17a>
 80034b2:	e004      	b.n	80034be <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2210      	movs	r2, #16
 80034ba:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80034bc:	e00f      	b.n	80034de <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 80034be:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80034c0:	e00d      	b.n	80034de <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80034d6:	68b9      	ldr	r1, [r7, #8]
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f809 	bl	80034f0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3720      	adds	r7, #32
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003500:	b2db      	uxtb	r3, r3
 8003502:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003506:	2b28      	cmp	r3, #40	@ 0x28
 8003508:	d16a      	bne.n	80035e0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	0c1b      	lsrs	r3, r3, #16
 8003512:	b2db      	uxtb	r3, r3
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	0c1b      	lsrs	r3, r3, #16
 8003522:	b29b      	uxth	r3, r3
 8003524:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003528:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	b29b      	uxth	r3, r3
 8003532:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003536:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	b29b      	uxth	r3, r3
 8003540:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003544:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	2b02      	cmp	r3, #2
 800354c:	d138      	bne.n	80035c0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800354e:	897b      	ldrh	r3, [r7, #10]
 8003550:	09db      	lsrs	r3, r3, #7
 8003552:	b29a      	uxth	r2, r3
 8003554:	89bb      	ldrh	r3, [r7, #12]
 8003556:	4053      	eors	r3, r2
 8003558:	b29b      	uxth	r3, r3
 800355a:	f003 0306 	and.w	r3, r3, #6
 800355e:	2b00      	cmp	r3, #0
 8003560:	d11c      	bne.n	800359c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003562:	897b      	ldrh	r3, [r7, #10]
 8003564:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003574:	2b02      	cmp	r3, #2
 8003576:	d13b      	bne.n	80035f0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2208      	movs	r2, #8
 8003584:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800358e:	89ba      	ldrh	r2, [r7, #12]
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	4619      	mov	r1, r3
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff fb9c 	bl	8002cd2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800359a:	e029      	b.n	80035f0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800359c:	893b      	ldrh	r3, [r7, #8]
 800359e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80035a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 fcb5 	bl	8003f14 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80035b2:	89ba      	ldrh	r2, [r7, #12]
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
 80035b6:	4619      	mov	r1, r3
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff fb8a 	bl	8002cd2 <HAL_I2C_AddrCallback>
}
 80035be:	e017      	b.n	80035f0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80035c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 fca5 	bl	8003f14 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80035d2:	89ba      	ldrh	r2, [r7, #12]
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	4619      	mov	r1, r3
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff fb7a 	bl	8002cd2 <HAL_I2C_AddrCallback>
}
 80035de:	e007      	b.n	80035f0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2208      	movs	r2, #8
 80035e6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80035f0:	bf00      	nop
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b21      	cmp	r3, #33	@ 0x21
 8003612:	d115      	bne.n	8003640 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2211      	movs	r2, #17
 8003620:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003628:	2101      	movs	r1, #1
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fc72 	bl	8003f14 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7fd f8bd 	bl	80007b8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800363e:	e014      	b.n	800366a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2212      	movs	r2, #18
 800364c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003654:	2102      	movs	r1, #2
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fc5c 	bl	8003f14 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7fd f875 	bl	8000754 <HAL_I2C_MasterRxCpltCallback>
}
 800366a:	bf00      	nop
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b084      	sub	sp, #16
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	e00c      	b.n	80036c0 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036be:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b29      	cmp	r3, #41	@ 0x29
 80036ca:	d112      	bne.n	80036f2 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2228      	movs	r2, #40	@ 0x28
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2221      	movs	r2, #33	@ 0x21
 80036d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80036da:	2101      	movs	r1, #1
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fc19 	bl	8003f14 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff fadf 	bl	8002cae <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80036f0:	e017      	b.n	8003722 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80036fc:	d111      	bne.n	8003722 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2228      	movs	r2, #40	@ 0x28
 8003702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2222      	movs	r2, #34	@ 0x22
 800370a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800370c:	2102      	movs	r1, #2
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fc00 	bl	8003f14 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff facf 	bl	8002cc0 <HAL_I2C_SlaveRxCpltCallback>
}
 8003722:	bf00      	nop
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2220      	movs	r2, #32
 8003740:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b21      	cmp	r3, #33	@ 0x21
 800374c:	d107      	bne.n	800375e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800374e:	2101      	movs	r1, #1
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 fbdf 	bl	8003f14 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2211      	movs	r2, #17
 800375a:	631a      	str	r2, [r3, #48]	@ 0x30
 800375c:	e00c      	b.n	8003778 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b22      	cmp	r3, #34	@ 0x22
 8003768:	d106      	bne.n	8003778 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800376a:	2102      	movs	r1, #2
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 fbd1 	bl	8003f14 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2212      	movs	r2, #18
 8003776:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6859      	ldr	r1, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	4b4c      	ldr	r3, [pc, #304]	@ (80038b4 <I2C_ITMasterCplt+0x188>)
 8003784:	400b      	ands	r3, r1
 8003786:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a49      	ldr	r2, [pc, #292]	@ (80038b8 <I2C_ITMasterCplt+0x18c>)
 8003792:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f003 0310 	and.w	r3, r3, #16
 800379a:	2b00      	cmp	r3, #0
 800379c:	d009      	beq.n	80037b2 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2210      	movs	r2, #16
 80037a4:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037aa:	f043 0204 	orr.w	r2, r3, #4
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b60      	cmp	r3, #96	@ 0x60
 80037bc:	d10a      	bne.n	80037d4 <I2C_ITMasterCplt+0xa8>
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80037d2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fac2 	bl	8003d5e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037de:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b60      	cmp	r3, #96	@ 0x60
 80037ea:	d002      	beq.n	80037f2 <I2C_ITMasterCplt+0xc6>
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d006      	beq.n	8003800 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f6:	4619      	mov	r1, r3
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f9b9 	bl	8003b70 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80037fe:	e054      	b.n	80038aa <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b21      	cmp	r3, #33	@ 0x21
 800380a:	d124      	bne.n	8003856 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b40      	cmp	r3, #64	@ 0x40
 8003824:	d10b      	bne.n	800383e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7ff fa61 	bl	8002cfe <HAL_I2C_MemTxCpltCallback>
}
 800383c:	e035      	b.n	80038aa <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fc ffb2 	bl	80007b8 <HAL_I2C_MasterTxCpltCallback>
}
 8003854:	e029      	b.n	80038aa <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b22      	cmp	r3, #34	@ 0x22
 8003860:	d123      	bne.n	80038aa <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b40      	cmp	r3, #64	@ 0x40
 800387a:	d10b      	bne.n	8003894 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff fa3f 	bl	8002d10 <HAL_I2C_MemRxCpltCallback>
}
 8003892:	e00a      	b.n	80038aa <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7fc ff55 	bl	8000754 <HAL_I2C_MasterRxCpltCallback>
}
 80038aa:	bf00      	nop
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	fe00e800 	.word	0xfe00e800
 80038b8:	ffff0000 	.word	0xffff0000

080038bc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038d8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2220      	movs	r2, #32
 80038e0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
 80038e4:	2b21      	cmp	r3, #33	@ 0x21
 80038e6:	d002      	beq.n	80038ee <I2C_ITSlaveCplt+0x32>
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	2b29      	cmp	r3, #41	@ 0x29
 80038ec:	d108      	bne.n	8003900 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80038ee:	f248 0101 	movw	r1, #32769	@ 0x8001
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 fb0e 	bl	8003f14 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2221      	movs	r2, #33	@ 0x21
 80038fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80038fe:	e00d      	b.n	800391c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	2b22      	cmp	r3, #34	@ 0x22
 8003904:	d002      	beq.n	800390c <I2C_ITSlaveCplt+0x50>
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	2b2a      	cmp	r3, #42	@ 0x2a
 800390a:	d107      	bne.n	800391c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800390c:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 faff 	bl	8003f14 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2222      	movs	r2, #34	@ 0x22
 800391a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800392a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6859      	ldr	r1, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	4b62      	ldr	r3, [pc, #392]	@ (8003ac0 <I2C_ITSlaveCplt+0x204>)
 8003938:	400b      	ands	r3, r1
 800393a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 fa0e 	bl	8003d5e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d013      	beq.n	8003974 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800395a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003960:	2b00      	cmp	r3, #0
 8003962:	d01f      	beq.n	80039a4 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	b29a      	uxth	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003972:	e017      	b.n	80039a4 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d012      	beq.n	80039a4 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800398c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003992:	2b00      	cmp	r3, #0
 8003994:	d006      	beq.n	80039a4 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	b29a      	uxth	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d020      	beq.n	80039f0 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f023 0304 	bic.w	r3, r3, #4
 80039b4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00c      	beq.n	80039f0 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fe:	f043 0204 	orr.w	r2, r3, #4
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d010      	beq.n	8003a3e <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a20:	4619      	mov	r1, r3
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f8a4 	bl	8003b70 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b28      	cmp	r3, #40	@ 0x28
 8003a32:	d141      	bne.n	8003ab8 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003a34:	6979      	ldr	r1, [r7, #20]
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f846 	bl	8003ac8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a3c:	e03c      	b.n	8003ab8 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a42:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a46:	d014      	beq.n	8003a72 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff fe12 	bl	8003672 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a1c      	ldr	r2, [pc, #112]	@ (8003ac4 <I2C_ITSlaveCplt+0x208>)
 8003a52:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff f93e 	bl	8002cec <HAL_I2C_ListenCpltCallback>
}
 8003a70:	e022      	b.n	8003ab8 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b22      	cmp	r3, #34	@ 0x22
 8003a7c:	d10e      	bne.n	8003a9c <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff f913 	bl	8002cc0 <HAL_I2C_SlaveRxCpltCallback>
}
 8003a9a:	e00d      	b.n	8003ab8 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff f8fb 	bl	8002cae <HAL_I2C_SlaveTxCpltCallback>
}
 8003ab8:	bf00      	nop
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	fe00e800 	.word	0xfe00e800
 8003ac4:	ffff0000 	.word	0xffff0000

08003ac8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a25      	ldr	r2, [pc, #148]	@ (8003b6c <I2C_ITListenCplt+0xa4>)
 8003ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d022      	beq.n	8003b44 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d012      	beq.n	8003b44 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3c:	f043 0204 	orr.w	r2, r3, #4
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b44:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f9e3 	bl	8003f14 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2210      	movs	r2, #16
 8003b54:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff f8c4 	bl	8002cec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003b64:	bf00      	nop
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	ffff0000 	.word	0xffff0000

08003b70 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a5d      	ldr	r2, [pc, #372]	@ (8003d04 <I2C_ITError+0x194>)
 8003b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
 8003ba4:	2b28      	cmp	r3, #40	@ 0x28
 8003ba6:	d005      	beq.n	8003bb4 <I2C_ITError+0x44>
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	2b29      	cmp	r3, #41	@ 0x29
 8003bac:	d002      	beq.n	8003bb4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003bae:	7bfb      	ldrb	r3, [r7, #15]
 8003bb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bb2:	d10b      	bne.n	8003bcc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003bb4:	2103      	movs	r1, #3
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f9ac 	bl	8003f14 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2228      	movs	r2, #40	@ 0x28
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a50      	ldr	r2, [pc, #320]	@ (8003d08 <I2C_ITError+0x198>)
 8003bc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003bca:	e011      	b.n	8003bf0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003bcc:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f99f 	bl	8003f14 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b60      	cmp	r3, #96	@ 0x60
 8003be0:	d003      	beq.n	8003bea <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    }
    hi2c->XferISR       = NULL;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d039      	beq.n	8003c72 <I2C_ITError+0x102>
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b11      	cmp	r3, #17
 8003c02:	d002      	beq.n	8003c0a <I2C_ITError+0x9a>
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b21      	cmp	r3, #33	@ 0x21
 8003c08:	d133      	bne.n	8003c72 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c18:	d107      	bne.n	8003c2a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003c28:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fe fb5e 	bl	80022f0 <HAL_DMA_GetState>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d017      	beq.n	8003c6a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c3e:	4a33      	ldr	r2, [pc, #204]	@ (8003d0c <I2C_ITError+0x19c>)
 8003c40:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fe fa28 	bl	80020a4 <HAL_DMA_Abort_IT>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d04d      	beq.n	8003cf6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c64:	4610      	mov	r0, r2
 8003c66:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c68:	e045      	b.n	8003cf6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f850 	bl	8003d10 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c70:	e041      	b.n	8003cf6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d039      	beq.n	8003cee <I2C_ITError+0x17e>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b12      	cmp	r3, #18
 8003c7e:	d002      	beq.n	8003c86 <I2C_ITError+0x116>
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2b22      	cmp	r3, #34	@ 0x22
 8003c84:	d133      	bne.n	8003cee <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c94:	d107      	bne.n	8003ca6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ca4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fe fb20 	bl	80022f0 <HAL_DMA_GetState>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d017      	beq.n	8003ce6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cba:	4a14      	ldr	r2, [pc, #80]	@ (8003d0c <I2C_ITError+0x19c>)
 8003cbc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fe f9ea 	bl	80020a4 <HAL_DMA_Abort_IT>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d011      	beq.n	8003cfa <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ce4:	e009      	b.n	8003cfa <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f812 	bl	8003d10 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cec:	e005      	b.n	8003cfa <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f80e 	bl	8003d10 <I2C_TreatErrorCallback>
  }
}
 8003cf4:	e002      	b.n	8003cfc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003cf6:	bf00      	nop
 8003cf8:	e000      	b.n	8003cfc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cfa:	bf00      	nop
}
 8003cfc:	bf00      	nop
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	ffff0000 	.word	0xffff0000
 8003d08:	08002f7f 	.word	0x08002f7f
 8003d0c:	08003da5 	.word	0x08003da5

08003d10 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b60      	cmp	r3, #96	@ 0x60
 8003d22:	d10e      	bne.n	8003d42 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fe fffa 	bl	8002d34 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d40:	e009      	b.n	8003d56 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7fe ffe6 	bl	8002d22 <HAL_I2C_ErrorCallback>
}
 8003d56:	bf00      	nop
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d103      	bne.n	8003d7c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d007      	beq.n	8003d9a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	699a      	ldr	r2, [r3, #24]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f042 0201 	orr.w	r2, r2, #1
 8003d98:	619a      	str	r2, [r3, #24]
  }
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr

08003da4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db0:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dce:	2200      	movs	r2, #0
 8003dd0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f7ff ff9c 	bl	8003d10 <I2C_TreatErrorCallback>
}
 8003dd8:	bf00      	nop
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	607b      	str	r3, [r7, #4]
 8003dea:	460b      	mov	r3, r1
 8003dec:	817b      	strh	r3, [r7, #10]
 8003dee:	4613      	mov	r3, r2
 8003df0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003df2:	897b      	ldrh	r3, [r7, #10]
 8003df4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003df8:	7a7b      	ldrb	r3, [r7, #9]
 8003dfa:	041b      	lsls	r3, r3, #16
 8003dfc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e00:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e0e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	0d5b      	lsrs	r3, r3, #21
 8003e1a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003e1e:	4b07      	ldr	r3, [pc, #28]	@ (8003e3c <I2C_TransferConfig+0x5c>)
 8003e20:	430b      	orrs	r3, r1
 8003e22:	43db      	mvns	r3, r3
 8003e24:	ea02 0103 	and.w	r1, r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e32:	bf00      	nop
 8003e34:	371c      	adds	r7, #28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr
 8003e3c:	03ff63ff 	.word	0x03ff63ff

08003e40 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e54:	4a2d      	ldr	r2, [pc, #180]	@ (8003f0c <I2C_Enable_IRQ+0xcc>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d004      	beq.n	8003e64 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003e5e:	4a2c      	ldr	r2, [pc, #176]	@ (8003f10 <I2C_Enable_IRQ+0xd0>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d11d      	bne.n	8003ea0 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003e64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	da03      	bge.n	8003e74 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003e72:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003e74:	887b      	ldrh	r3, [r7, #2]
 8003e76:	2b10      	cmp	r3, #16
 8003e78:	d103      	bne.n	8003e82 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003e80:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003e82:	887b      	ldrh	r3, [r7, #2]
 8003e84:	2b20      	cmp	r3, #32
 8003e86:	d103      	bne.n	8003e90 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003e8e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003e90:	887b      	ldrh	r3, [r7, #2]
 8003e92:	2b40      	cmp	r3, #64	@ 0x40
 8003e94:	d12c      	bne.n	8003ef0 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e9c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003e9e:	e027      	b.n	8003ef0 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003ea0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	da03      	bge.n	8003eb0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003eae:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003eb0:	887b      	ldrh	r3, [r7, #2]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003ec0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003ec2:	887b      	ldrh	r3, [r7, #2]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003ed2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003ed4:	887b      	ldrh	r3, [r7, #2]
 8003ed6:	2b10      	cmp	r3, #16
 8003ed8:	d103      	bne.n	8003ee2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003ee0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003ee2:	887b      	ldrh	r3, [r7, #2]
 8003ee4:	2b20      	cmp	r3, #32
 8003ee6:	d103      	bne.n	8003ef0 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f043 0320 	orr.w	r3, r3, #32
 8003eee:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6819      	ldr	r1, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	601a      	str	r2, [r3, #0]
}
 8003f00:	bf00      	nop
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bc80      	pop	{r7}
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	0800316f 	.word	0x0800316f
 8003f10:	08003345 	.word	0x08003345

08003f14 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003f24:	887b      	ldrh	r3, [r7, #2]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00f      	beq.n	8003f4e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003f34:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003f42:	2b28      	cmp	r3, #40	@ 0x28
 8003f44:	d003      	beq.n	8003f4e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003f4c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003f4e:	887b      	ldrh	r3, [r7, #2]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00f      	beq.n	8003f78 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003f5e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003f6c:	2b28      	cmp	r3, #40	@ 0x28
 8003f6e:	d003      	beq.n	8003f78 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003f76:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003f78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	da03      	bge.n	8003f88 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003f86:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003f88:	887b      	ldrh	r3, [r7, #2]
 8003f8a:	2b10      	cmp	r3, #16
 8003f8c:	d103      	bne.n	8003f96 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003f94:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003f96:	887b      	ldrh	r3, [r7, #2]
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d103      	bne.n	8003fa4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f043 0320 	orr.w	r3, r3, #32
 8003fa2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003fa4:	887b      	ldrh	r3, [r7, #2]
 8003fa6:	2b40      	cmp	r3, #64	@ 0x40
 8003fa8:	d103      	bne.n	8003fb2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fb0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6819      	ldr	r1, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	43da      	mvns	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	400a      	ands	r2, r1
 8003fc2:	601a      	str	r2, [r3, #0]
}
 8003fc4:	bf00      	nop
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bc80      	pop	{r7}
 8003fcc:	4770      	bx	lr

08003fce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b20      	cmp	r3, #32
 8003fe2:	d138      	bne.n	8004056 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e032      	b.n	8004058 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2224      	movs	r2, #36	@ 0x24
 8003ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0201 	bic.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004020:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6819      	ldr	r1, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0201 	orr.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	e000      	b.n	8004058 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004056:	2302      	movs	r3, #2
  }
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr

08004062 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004062:	b480      	push	{r7}
 8004064:	b085      	sub	sp, #20
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b20      	cmp	r3, #32
 8004076:	d139      	bne.n	80040ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800407e:	2b01      	cmp	r3, #1
 8004080:	d101      	bne.n	8004086 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004082:	2302      	movs	r3, #2
 8004084:	e033      	b.n	80040ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2224      	movs	r2, #36	@ 0x24
 8004092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0201 	bic.w	r2, r2, #1
 80040a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80040b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	021b      	lsls	r3, r3, #8
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0201 	orr.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2220      	movs	r2, #32
 80040dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040e8:	2300      	movs	r3, #0
 80040ea:	e000      	b.n	80040ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040ec:	2302      	movs	r3, #2
  }
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr

080040f8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040fc:	4b04      	ldr	r3, [pc, #16]	@ (8004110 <HAL_PWR_EnableBkUpAccess+0x18>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a03      	ldr	r2, [pc, #12]	@ (8004110 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004102:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004106:	6013      	str	r3, [r2, #0]
}
 8004108:	bf00      	nop
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr
 8004110:	58000400 	.word	0x58000400

08004114 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10c      	bne.n	8004140 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004126:	4b13      	ldr	r3, [pc, #76]	@ (8004174 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800412e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004132:	d10d      	bne.n	8004150 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004134:	f000 f83c 	bl	80041b0 <HAL_PWREx_DisableLowPowerRunMode>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d008      	beq.n	8004150 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 800413e:	e015      	b.n	800416c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004140:	4b0c      	ldr	r3, [pc, #48]	@ (8004174 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800414c:	f000 f822 	bl	8004194 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004150:	4b09      	ldr	r3, [pc, #36]	@ (8004178 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	4a08      	ldr	r2, [pc, #32]	@ (8004178 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004156:	f023 0304 	bic.w	r3, r3, #4
 800415a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d101      	bne.n	8004166 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004162:	bf30      	wfi
 8004164:	e002      	b.n	800416c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004166:	bf40      	sev
    __WFE();
 8004168:	bf20      	wfe
    __WFE();
 800416a:	bf20      	wfe
  }
}
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	58000400 	.word	0x58000400
 8004178:	e000ed00 	.word	0xe000ed00

0800417c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004180:	4b03      	ldr	r3, [pc, #12]	@ (8004190 <HAL_PWREx_GetVoltageRange+0x14>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004188:	4618      	mov	r0, r3
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr
 8004190:	58000400 	.word	0x58000400

08004194 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004198:	4b04      	ldr	r3, [pc, #16]	@ (80041ac <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a03      	ldr	r2, [pc, #12]	@ (80041ac <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800419e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041a2:	6013      	str	r3, [r2, #0]
}
 80041a4:	bf00      	nop
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr
 80041ac:	58000400 	.word	0x58000400

080041b0 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80041b6:	4b16      	ldr	r3, [pc, #88]	@ (8004210 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a15      	ldr	r2, [pc, #84]	@ (8004210 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80041bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041c0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80041c2:	4b14      	ldr	r3, [pc, #80]	@ (8004214 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2232      	movs	r2, #50	@ 0x32
 80041c8:	fb02 f303 	mul.w	r3, r2, r3
 80041cc:	4a12      	ldr	r2, [pc, #72]	@ (8004218 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	0c9b      	lsrs	r3, r3, #18
 80041d4:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80041d6:	e002      	b.n	80041de <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3b01      	subs	r3, #1
 80041dc:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80041de:	4b0c      	ldr	r3, [pc, #48]	@ (8004210 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041ea:	d102      	bne.n	80041f2 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f2      	bne.n	80041d8 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80041f2:	4b07      	ldr	r3, [pc, #28]	@ (8004210 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041fe:	d101      	bne.n	8004204 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e000      	b.n	8004206 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr
 8004210:	58000400 	.word	0x58000400
 8004214:	20000008 	.word	0x20000008
 8004218:	431bde83 	.word	0x431bde83

0800421c <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	4603      	mov	r3, r0
 8004224:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8004226:	4b10      	ldr	r3, [pc, #64]	@ (8004268 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f023 0307 	bic.w	r3, r3, #7
 800422e:	4a0e      	ldr	r2, [pc, #56]	@ (8004268 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004230:	f043 0302 	orr.w	r3, r3, #2
 8004234:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004236:	4b0d      	ldr	r3, [pc, #52]	@ (800426c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	4a0c      	ldr	r2, [pc, #48]	@ (800426c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800423c:	f043 0304 	orr.w	r3, r3, #4
 8004240:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004248:	bf30      	wfi
 800424a:	e002      	b.n	8004252 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800424c:	bf40      	sev
    __WFE();
 800424e:	bf20      	wfe
    __WFE();
 8004250:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004252:	4b06      	ldr	r3, [pc, #24]	@ (800426c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	4a05      	ldr	r2, [pc, #20]	@ (800426c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004258:	f023 0304 	bic.w	r3, r3, #4
 800425c:	6113      	str	r3, [r2, #16]
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr
 8004268:	58000400 	.word	0x58000400
 800426c:	e000ed00 	.word	0xe000ed00

08004270 <LL_PWR_IsEnabledBkUpAccess>:
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004274:	4b06      	ldr	r3, [pc, #24]	@ (8004290 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800427c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004280:	d101      	bne.n	8004286 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8004282:	2301      	movs	r3, #1
 8004284:	e000      	b.n	8004288 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	bc80      	pop	{r7}
 800428e:	4770      	bx	lr
 8004290:	58000400 	.word	0x58000400

08004294 <LL_RCC_HSE_EnableTcxo>:
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80042a6:	6013      	str	r3, [r2, #0]
}
 80042a8:	bf00      	nop
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bc80      	pop	{r7}
 80042ae:	4770      	bx	lr

080042b0 <LL_RCC_HSE_DisableTcxo>:
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80042b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80042c2:	6013      	str	r3, [r2, #0]
}
 80042c4:	bf00      	nop
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <LL_RCC_HSE_IsEnabledDiv2>:
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80042d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042de:	d101      	bne.n	80042e4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80042e0:	2301      	movs	r3, #1
 80042e2:	e000      	b.n	80042e6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bc80      	pop	{r7}
 80042ec:	4770      	bx	lr

080042ee <LL_RCC_HSE_Enable>:
{
 80042ee:	b480      	push	{r7}
 80042f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80042f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004300:	6013      	str	r3, [r2, #0]
}
 8004302:	bf00      	nop
 8004304:	46bd      	mov	sp, r7
 8004306:	bc80      	pop	{r7}
 8004308:	4770      	bx	lr

0800430a <LL_RCC_HSE_Disable>:
{
 800430a:	b480      	push	{r7}
 800430c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800430e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004318:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800431c:	6013      	str	r3, [r2, #0]
}
 800431e:	bf00      	nop
 8004320:	46bd      	mov	sp, r7
 8004322:	bc80      	pop	{r7}
 8004324:	4770      	bx	lr

08004326 <LL_RCC_HSE_IsReady>:
{
 8004326:	b480      	push	{r7}
 8004328:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800432a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004334:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004338:	d101      	bne.n	800433e <LL_RCC_HSE_IsReady+0x18>
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <LL_RCC_HSE_IsReady+0x1a>
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	46bd      	mov	sp, r7
 8004344:	bc80      	pop	{r7}
 8004346:	4770      	bx	lr

08004348 <LL_RCC_HSI_Enable>:
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800434c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004356:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800435a:	6013      	str	r3, [r2, #0]
}
 800435c:	bf00      	nop
 800435e:	46bd      	mov	sp, r7
 8004360:	bc80      	pop	{r7}
 8004362:	4770      	bx	lr

08004364 <LL_RCC_HSI_Disable>:
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004368:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004372:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004376:	6013      	str	r3, [r2, #0]
}
 8004378:	bf00      	nop
 800437a:	46bd      	mov	sp, r7
 800437c:	bc80      	pop	{r7}
 800437e:	4770      	bx	lr

08004380 <LL_RCC_HSI_IsReady>:
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004384:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800438e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004392:	d101      	bne.n	8004398 <LL_RCC_HSI_IsReady+0x18>
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <LL_RCC_HSI_IsReady+0x1a>
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	46bd      	mov	sp, r7
 800439e:	bc80      	pop	{r7}
 80043a0:	4770      	bx	lr

080043a2 <LL_RCC_HSI_SetCalibTrimming>:
{
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80043aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	061b      	lsls	r3, r3, #24
 80043b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043bc:	4313      	orrs	r3, r2
 80043be:	604b      	str	r3, [r1, #4]
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bc80      	pop	{r7}
 80043c8:	4770      	bx	lr

080043ca <LL_RCC_LSE_IsReady>:
{
 80043ca:	b480      	push	{r7}
 80043cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80043ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d101      	bne.n	80043e2 <LL_RCC_LSE_IsReady+0x18>
 80043de:	2301      	movs	r3, #1
 80043e0:	e000      	b.n	80043e4 <LL_RCC_LSE_IsReady+0x1a>
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr

080043ec <LL_RCC_LSI_Enable>:
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80043f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043fc:	f043 0301 	orr.w	r3, r3, #1
 8004400:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004404:	bf00      	nop
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr

0800440c <LL_RCC_LSI_Disable>:
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004414:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004418:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800441c:	f023 0301 	bic.w	r3, r3, #1
 8004420:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004424:	bf00      	nop
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <LL_RCC_LSI_IsReady>:
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004430:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004434:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b02      	cmp	r3, #2
 800443e:	d101      	bne.n	8004444 <LL_RCC_LSI_IsReady+0x18>
 8004440:	2301      	movs	r3, #1
 8004442:	e000      	b.n	8004446 <LL_RCC_LSI_IsReady+0x1a>
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr

0800444e <LL_RCC_MSI_Enable>:
{
 800444e:	b480      	push	{r7}
 8004450:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004452:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800445c:	f043 0301 	orr.w	r3, r3, #1
 8004460:	6013      	str	r3, [r2, #0]
}
 8004462:	bf00      	nop
 8004464:	46bd      	mov	sp, r7
 8004466:	bc80      	pop	{r7}
 8004468:	4770      	bx	lr

0800446a <LL_RCC_MSI_Disable>:
{
 800446a:	b480      	push	{r7}
 800446c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800446e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004478:	f023 0301 	bic.w	r3, r3, #1
 800447c:	6013      	str	r3, [r2, #0]
}
 800447e:	bf00      	nop
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr

08004486 <LL_RCC_MSI_IsReady>:
{
 8004486:	b480      	push	{r7}
 8004488:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800448a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b02      	cmp	r3, #2
 8004496:	d101      	bne.n	800449c <LL_RCC_MSI_IsReady+0x16>
 8004498:	2301      	movs	r3, #1
 800449a:	e000      	b.n	800449e <LL_RCC_MSI_IsReady+0x18>
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bc80      	pop	{r7}
 80044a4:	4770      	bx	lr

080044a6 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80044a6:	b480      	push	{r7}
 80044a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80044aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d101      	bne.n	80044bc <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80044b8:	2301      	movs	r3, #1
 80044ba:	e000      	b.n	80044be <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	4770      	bx	lr

080044c6 <LL_RCC_MSI_GetRange>:
{
 80044c6:	b480      	push	{r7}
 80044c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80044ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr

080044dc <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80044e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044e8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr

080044f4 <LL_RCC_MSI_SetCalibTrimming>:
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80044fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	021b      	lsls	r3, r3, #8
 800450a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800450e:	4313      	orrs	r3, r2
 8004510:	604b      	str	r3, [r1, #4]
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr

0800451c <LL_RCC_SetSysClkSource>:
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004524:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f023 0203 	bic.w	r2, r3, #3
 800452e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4313      	orrs	r3, r2
 8004536:	608b      	str	r3, [r1, #8]
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	bc80      	pop	{r7}
 8004540:	4770      	bx	lr

08004542 <LL_RCC_GetSysClkSource>:
{
 8004542:	b480      	push	{r7}
 8004544:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 030c 	and.w	r3, r3, #12
}
 8004550:	4618      	mov	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr

08004558 <LL_RCC_SetAHBPrescaler>:
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004560:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800456a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4313      	orrs	r3, r2
 8004572:	608b      	str	r3, [r1, #8]
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr

0800457e <LL_RCC_SetAHB3Prescaler>:
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004586:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800458a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800458e:	f023 020f 	bic.w	r2, r3, #15
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	091b      	lsrs	r3, r3, #4
 8004596:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800459a:	4313      	orrs	r3, r2
 800459c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	4770      	bx	lr

080045aa <LL_RCC_SetAPB1Prescaler>:
{
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80045b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	608b      	str	r3, [r1, #8]
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr

080045d0 <LL_RCC_SetAPB2Prescaler>:
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80045d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80045e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	608b      	str	r3, [r1, #8]
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bc80      	pop	{r7}
 80045f4:	4770      	bx	lr

080045f6 <LL_RCC_GetAHBPrescaler>:
{
 80045f6:	b480      	push	{r7}
 80045f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80045fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004604:	4618      	mov	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr

0800460c <LL_RCC_GetAHB3Prescaler>:
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004610:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004614:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800461e:	4618      	mov	r0, r3
 8004620:	46bd      	mov	sp, r7
 8004622:	bc80      	pop	{r7}
 8004624:	4770      	bx	lr

08004626 <LL_RCC_GetAPB1Prescaler>:
{
 8004626:	b480      	push	{r7}
 8004628:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800462a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8004634:	4618      	mov	r0, r3
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr

0800463c <LL_RCC_GetAPB2Prescaler>:
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004640:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800464a:	4618      	mov	r0, r3
 800464c:	46bd      	mov	sp, r7
 800464e:	bc80      	pop	{r7}
 8004650:	4770      	bx	lr

08004652 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004652:	b480      	push	{r7}
 8004654:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004656:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004660:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004664:	6013      	str	r3, [r2, #0]
}
 8004666:	bf00      	nop
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr

0800466e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800466e:	b480      	push	{r7}
 8004670:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004672:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800467c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004680:	6013      	str	r3, [r2, #0]
}
 8004682:	bf00      	nop
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr

0800468a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800468a:	b480      	push	{r7}
 800468c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800468e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004698:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800469c:	d101      	bne.n	80046a2 <LL_RCC_PLL_IsReady+0x18>
 800469e:	2301      	movs	r3, #1
 80046a0:	e000      	b.n	80046a4 <LL_RCC_PLL_IsReady+0x1a>
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr

080046ac <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80046b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	0a1b      	lsrs	r3, r3, #8
 80046b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80046bc:	4618      	mov	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr

080046c4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80046c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bc80      	pop	{r7}
 80046d8:	4770      	bx	lr

080046da <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80046da:	b480      	push	{r7}
 80046dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80046de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr

080046f0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80046f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f003 0303 	and.w	r3, r3, #3
}
 80046fe:	4618      	mov	r0, r3
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr

08004706 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004706:	b480      	push	{r7}
 8004708:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800470a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004718:	d101      	bne.n	800471e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	bc80      	pop	{r7}
 8004726:	4770      	bx	lr

08004728 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800472c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004730:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004734:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800473c:	d101      	bne.n	8004742 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800473e:	2301      	movs	r3, #1
 8004740:	e000      	b.n	8004744 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	46bd      	mov	sp, r7
 8004748:	bc80      	pop	{r7}
 800474a:	4770      	bx	lr

0800474c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800475a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800475e:	d101      	bne.n	8004764 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004760:	2301      	movs	r3, #1
 8004762:	e000      	b.n	8004766 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr

0800476e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800476e:	b480      	push	{r7}
 8004770:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004772:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800477c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004780:	d101      	bne.n	8004786 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	46bd      	mov	sp, r7
 800478c:	bc80      	pop	{r7}
 800478e:	4770      	bx	lr

08004790 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b088      	sub	sp, #32
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e36f      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047a2:	f7ff fece 	bl	8004542 <LL_RCC_GetSysClkSource>
 80047a6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047a8:	f7ff ffa2 	bl	80046f0 <LL_RCC_PLL_GetMainSource>
 80047ac:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0320 	and.w	r3, r3, #32
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80c4 	beq.w	8004944 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d005      	beq.n	80047ce <HAL_RCC_OscConfig+0x3e>
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	2b0c      	cmp	r3, #12
 80047c6:	d176      	bne.n	80048b6 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d173      	bne.n	80048b6 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e353      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0308 	and.w	r3, r3, #8
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_RCC_OscConfig+0x68>
 80047ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047f6:	e006      	b.n	8004806 <HAL_RCC_OscConfig+0x76>
 80047f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004800:	091b      	lsrs	r3, r3, #4
 8004802:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004806:	4293      	cmp	r3, r2
 8004808:	d222      	bcs.n	8004850 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fd3c 	bl	800528c <RCC_SetFlashLatencyFromMSIRange>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e331      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800481e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004828:	f043 0308 	orr.w	r3, r3, #8
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004840:	4313      	orrs	r3, r2
 8004842:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff fe53 	bl	80044f4 <LL_RCC_MSI_SetCalibTrimming>
 800484e:	e021      	b.n	8004894 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800485a:	f043 0308 	orr.w	r3, r3, #8
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800486e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004872:	4313      	orrs	r3, r2
 8004874:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff fe3a 	bl	80044f4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004884:	4618      	mov	r0, r3
 8004886:	f000 fd01 	bl	800528c <RCC_SetFlashLatencyFromMSIRange>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d001      	beq.n	8004894 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e2f6      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004894:	f000 fcc2 	bl	800521c <HAL_RCC_GetHCLKFreq>
 8004898:	4603      	mov	r3, r0
 800489a:	4aa7      	ldr	r2, [pc, #668]	@ (8004b38 <HAL_RCC_OscConfig+0x3a8>)
 800489c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800489e:	4ba7      	ldr	r3, [pc, #668]	@ (8004b3c <HAL_RCC_OscConfig+0x3ac>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fd f82c 	bl	8001900 <HAL_InitTick>
 80048a8:	4603      	mov	r3, r0
 80048aa:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80048ac:	7cfb      	ldrb	r3, [r7, #19]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d047      	beq.n	8004942 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80048b2:	7cfb      	ldrb	r3, [r7, #19]
 80048b4:	e2e5      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d02c      	beq.n	8004918 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048be:	f7ff fdc6 	bl	800444e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048c2:	f7fc fa9f 	bl	8000e04 <HAL_GetTick>
 80048c6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80048c8:	e008      	b.n	80048dc <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048ca:	f7fc fa9b 	bl	8000e04 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e2d2      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80048dc:	f7ff fdd3 	bl	8004486 <LL_RCC_MSI_IsReady>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0f1      	beq.n	80048ca <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048f0:	f043 0308 	orr.w	r3, r3, #8
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004904:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004908:	4313      	orrs	r3, r2
 800490a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff fdef 	bl	80044f4 <LL_RCC_MSI_SetCalibTrimming>
 8004916:	e015      	b.n	8004944 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004918:	f7ff fda7 	bl	800446a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800491c:	f7fc fa72 	bl	8000e04 <HAL_GetTick>
 8004920:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004924:	f7fc fa6e 	bl	8000e04 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e2a5      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004936:	f7ff fda6 	bl	8004486 <LL_RCC_MSI_IsReady>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1f1      	bne.n	8004924 <HAL_RCC_OscConfig+0x194>
 8004940:	e000      	b.n	8004944 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004942:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d058      	beq.n	8004a02 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	2b08      	cmp	r3, #8
 8004954:	d005      	beq.n	8004962 <HAL_RCC_OscConfig+0x1d2>
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	2b0c      	cmp	r3, #12
 800495a:	d108      	bne.n	800496e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	2b03      	cmp	r3, #3
 8004960:	d105      	bne.n	800496e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d14b      	bne.n	8004a02 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e289      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800496e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004980:	4313      	orrs	r3, r2
 8004982:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800498c:	d102      	bne.n	8004994 <HAL_RCC_OscConfig+0x204>
 800498e:	f7ff fcae 	bl	80042ee <LL_RCC_HSE_Enable>
 8004992:	e00d      	b.n	80049b0 <HAL_RCC_OscConfig+0x220>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 800499c:	d104      	bne.n	80049a8 <HAL_RCC_OscConfig+0x218>
 800499e:	f7ff fc79 	bl	8004294 <LL_RCC_HSE_EnableTcxo>
 80049a2:	f7ff fca4 	bl	80042ee <LL_RCC_HSE_Enable>
 80049a6:	e003      	b.n	80049b0 <HAL_RCC_OscConfig+0x220>
 80049a8:	f7ff fcaf 	bl	800430a <LL_RCC_HSE_Disable>
 80049ac:	f7ff fc80 	bl	80042b0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d012      	beq.n	80049de <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b8:	f7fc fa24 	bl	8000e04 <HAL_GetTick>
 80049bc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049c0:	f7fc fa20 	bl	8000e04 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b64      	cmp	r3, #100	@ 0x64
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e257      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80049d2:	f7ff fca8 	bl	8004326 <LL_RCC_HSE_IsReady>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0f1      	beq.n	80049c0 <HAL_RCC_OscConfig+0x230>
 80049dc:	e011      	b.n	8004a02 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049de:	f7fc fa11 	bl	8000e04 <HAL_GetTick>
 80049e2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049e6:	f7fc fa0d 	bl	8000e04 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b64      	cmp	r3, #100	@ 0x64
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e244      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80049f8:	f7ff fc95 	bl	8004326 <LL_RCC_HSE_IsReady>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1f1      	bne.n	80049e6 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d046      	beq.n	8004a9c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d005      	beq.n	8004a20 <HAL_RCC_OscConfig+0x290>
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	2b0c      	cmp	r3, #12
 8004a18:	d10e      	bne.n	8004a38 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d10b      	bne.n	8004a38 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e22a      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff fcb6 	bl	80043a2 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004a36:	e031      	b.n	8004a9c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d019      	beq.n	8004a74 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a40:	f7ff fc82 	bl	8004348 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a44:	f7fc f9de 	bl	8000e04 <HAL_GetTick>
 8004a48:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a4c:	f7fc f9da 	bl	8000e04 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e211      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004a5e:	f7ff fc8f 	bl	8004380 <LL_RCC_HSI_IsReady>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0f1      	beq.n	8004a4c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7ff fc98 	bl	80043a2 <LL_RCC_HSI_SetCalibTrimming>
 8004a72:	e013      	b.n	8004a9c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a74:	f7ff fc76 	bl	8004364 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a78:	f7fc f9c4 	bl	8000e04 <HAL_GetTick>
 8004a7c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a80:	f7fc f9c0 	bl	8000e04 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e1f7      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004a92:	f7ff fc75 	bl	8004380 <LL_RCC_HSI_IsReady>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1f1      	bne.n	8004a80 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0308 	and.w	r3, r3, #8
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d06e      	beq.n	8004b86 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d056      	beq.n	8004b5e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8004ab0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ab8:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69da      	ldr	r2, [r3, #28]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d031      	beq.n	8004b2c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d006      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e1d0      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d013      	beq.n	8004b12 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8004aea:	f7ff fc8f 	bl	800440c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004aee:	f7fc f989 	bl	8000e04 <HAL_GetTick>
 8004af2:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8004af4:	e008      	b.n	8004b08 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004af6:	f7fc f985 	bl	8000e04 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b11      	cmp	r3, #17
 8004b02:	d901      	bls.n	8004b08 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e1bc      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8004b08:	f7ff fc90 	bl	800442c <LL_RCC_LSI_IsReady>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1f1      	bne.n	8004af6 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8004b12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b1a:	f023 0210 	bic.w	r2, r3, #16
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b2c:	f7ff fc5e 	bl	80043ec <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b30:	f7fc f968 	bl	8000e04 <HAL_GetTick>
 8004b34:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8004b36:	e00c      	b.n	8004b52 <HAL_RCC_OscConfig+0x3c2>
 8004b38:	20000008 	.word	0x20000008
 8004b3c:	2000000c 	.word	0x2000000c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b40:	f7fc f960 	bl	8000e04 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b11      	cmp	r3, #17
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e197      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8004b52:	f7ff fc6b 	bl	800442c <LL_RCC_LSI_IsReady>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0f1      	beq.n	8004b40 <HAL_RCC_OscConfig+0x3b0>
 8004b5c:	e013      	b.n	8004b86 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b5e:	f7ff fc55 	bl	800440c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b62:	f7fc f94f 	bl	8000e04 <HAL_GetTick>
 8004b66:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b6a:	f7fc f94b 	bl	8000e04 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b11      	cmp	r3, #17
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e182      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8004b7c:	f7ff fc56 	bl	800442c <LL_RCC_LSI_IsReady>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f1      	bne.n	8004b6a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 80d8 	beq.w	8004d44 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004b94:	f7ff fb6c 	bl	8004270 <LL_PWR_IsEnabledBkUpAccess>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d113      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004b9e:	f7ff faab 	bl	80040f8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ba2:	f7fc f92f 	bl	8000e04 <HAL_GetTick>
 8004ba6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004baa:	f7fc f92b 	bl	8000e04 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e162      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004bbc:	f7ff fb58 	bl	8004270 <LL_PWR_IsEnabledBkUpAccess>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0f1      	beq.n	8004baa <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d07b      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	2b85      	cmp	r3, #133	@ 0x85
 8004bd4:	d003      	beq.n	8004bde <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	2b05      	cmp	r3, #5
 8004bdc:	d109      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004bde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004be6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bea:	f043 0304 	orr.w	r3, r3, #4
 8004bee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf2:	f7fc f907 	bl	8000e04 <HAL_GetTick>
 8004bf6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004bf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c04:	f043 0301 	orr.w	r3, r3, #1
 8004c08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004c0c:	e00a      	b.n	8004c24 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c0e:	f7fc f8f9 	bl	8000e04 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e12e      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004c24:	f7ff fbd1 	bl	80043ca <LL_RCC_LSE_IsReady>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0ef      	beq.n	8004c0e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	2b81      	cmp	r3, #129	@ 0x81
 8004c34:	d003      	beq.n	8004c3e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	2b85      	cmp	r3, #133	@ 0x85
 8004c3c:	d121      	bne.n	8004c82 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3e:	f7fc f8e1 	bl	8000e04 <HAL_GetTick>
 8004c42:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004c58:	e00a      	b.n	8004c70 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c5a:	f7fc f8d3 	bl	8000e04 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e108      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004c70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0ec      	beq.n	8004c5a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004c80:	e060      	b.n	8004d44 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c82:	f7fc f8bf 	bl	8000e04 <HAL_GetTick>
 8004c86:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004c88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004c9c:	e00a      	b.n	8004cb4 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c9e:	f7fc f8b1 	bl	8000e04 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e0e6      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004cb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1ec      	bne.n	8004c9e <HAL_RCC_OscConfig+0x50e>
 8004cc4:	e03e      	b.n	8004d44 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cc6:	f7fc f89d 	bl	8000e04 <HAL_GetTick>
 8004cca:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004ccc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004cd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004ce0:	e00a      	b.n	8004cf8 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce2:	f7fc f88f 	bl	8000e04 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e0c4      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004cf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1ec      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d08:	f7fc f87c 	bl	8000e04 <HAL_GetTick>
 8004d0c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d1a:	f023 0301 	bic.w	r3, r3, #1
 8004d1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004d22:	e00a      	b.n	8004d3a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d24:	f7fc f86e 	bl	8000e04 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e0a3      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004d3a:	f7ff fb46 	bl	80043ca <LL_RCC_LSE_IsReady>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1ef      	bne.n	8004d24 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 8099 	beq.w	8004e80 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	2b0c      	cmp	r3, #12
 8004d52:	d06c      	beq.n	8004e2e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d14b      	bne.n	8004df4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d5c:	f7ff fc87 	bl	800466e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d60:	f7fc f850 	bl	8000e04 <HAL_GetTick>
 8004d64:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d68:	f7fc f84c 	bl	8000e04 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b0a      	cmp	r3, #10
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e083      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004d7a:	f7ff fc86 	bl	800468a <LL_RCC_PLL_IsReady>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1f1      	bne.n	8004d68 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	4b40      	ldr	r3, [pc, #256]	@ (8004e8c <HAL_RCC_OscConfig+0x6fc>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004d96:	4311      	orrs	r1, r2
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d9c:	0212      	lsls	r2, r2, #8
 8004d9e:	4311      	orrs	r1, r2
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004da4:	4311      	orrs	r1, r2
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004daa:	4311      	orrs	r1, r2
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004db0:	430a      	orrs	r2, r1
 8004db2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dba:	f7ff fc4a 	bl	8004652 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004dbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dcc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dce:	f7fc f819 	bl	8000e04 <HAL_GetTick>
 8004dd2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004dd4:	e008      	b.n	8004de8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd6:	f7fc f815 	bl	8000e04 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b0a      	cmp	r3, #10
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e04c      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004de8:	f7ff fc4f 	bl	800468a <LL_RCC_PLL_IsReady>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0f1      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x646>
 8004df2:	e045      	b.n	8004e80 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004df4:	f7ff fc3b 	bl	800466e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df8:	f7fc f804 	bl	8000e04 <HAL_GetTick>
 8004dfc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e00:	f7fc f800 	bl	8000e04 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b0a      	cmp	r3, #10
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e037      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004e12:	f7ff fc3a 	bl	800468a <LL_RCC_PLL_IsReady>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1f1      	bne.n	8004e00 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004e1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e26:	4b1a      	ldr	r3, [pc, #104]	@ (8004e90 <HAL_RCC_OscConfig+0x700>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	60cb      	str	r3, [r1, #12]
 8004e2c:	e028      	b.n	8004e80 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d101      	bne.n	8004e3a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e023      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	f003 0203 	and.w	r2, r3, #3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d115      	bne.n	8004e7c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d10e      	bne.n	8004e7c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e68:	021b      	lsls	r3, r3, #8
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d106      	bne.n	8004e7c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d001      	beq.n	8004e80 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e000      	b.n	8004e82 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3720      	adds	r7, #32
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	11c1808c 	.word	0x11c1808c
 8004e90:	eefefffc 	.word	0xeefefffc

08004e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e10f      	b.n	80050c8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ea8:	4b89      	ldr	r3, [pc, #548]	@ (80050d0 <HAL_RCC_ClockConfig+0x23c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0307 	and.w	r3, r3, #7
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d91b      	bls.n	8004eee <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eb6:	4b86      	ldr	r3, [pc, #536]	@ (80050d0 <HAL_RCC_ClockConfig+0x23c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f023 0207 	bic.w	r2, r3, #7
 8004ebe:	4984      	ldr	r1, [pc, #528]	@ (80050d0 <HAL_RCC_ClockConfig+0x23c>)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ec6:	f7fb ff9d 	bl	8000e04 <HAL_GetTick>
 8004eca:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ece:	f7fb ff99 	bl	8000e04 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e0f3      	b.n	80050c8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee0:	4b7b      	ldr	r3, [pc, #492]	@ (80050d0 <HAL_RCC_ClockConfig+0x23c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0307 	and.w	r3, r3, #7
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d1ef      	bne.n	8004ece <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d016      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7ff fb2a 	bl	8004558 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f04:	f7fb ff7e 	bl	8000e04 <HAL_GetTick>
 8004f08:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f0c:	f7fb ff7a 	bl	8000e04 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e0d4      	b.n	80050c8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004f1e:	f7ff fbf2 	bl	8004706 <LL_RCC_IsActiveFlag_HPRE>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0f1      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d016      	beq.n	8004f62 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7ff fb20 	bl	800457e <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f3e:	f7fb ff61 	bl	8000e04 <HAL_GetTick>
 8004f42:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004f44:	e008      	b.n	8004f58 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f46:	f7fb ff5d 	bl	8000e04 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e0b7      	b.n	80050c8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004f58:	f7ff fbe6 	bl	8004728 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0f1      	beq.n	8004f46 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d016      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7ff fb19 	bl	80045aa <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f78:	f7fb ff44 	bl	8000e04 <HAL_GetTick>
 8004f7c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f80:	f7fb ff40 	bl	8000e04 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e09a      	b.n	80050c8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004f92:	f7ff fbdb 	bl	800474c <LL_RCC_IsActiveFlag_PPRE1>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d0f1      	beq.n	8004f80 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0308 	and.w	r3, r3, #8
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d017      	beq.n	8004fd8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7ff fb0e 	bl	80045d0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004fb4:	f7fb ff26 	bl	8000e04 <HAL_GetTick>
 8004fb8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004fbc:	f7fb ff22 	bl	8000e04 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e07c      	b.n	80050c8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004fce:	f7ff fbce 	bl	800476e <LL_RCC_IsActiveFlag_PPRE2>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0f1      	beq.n	8004fbc <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d043      	beq.n	800506c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d106      	bne.n	8004ffa <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004fec:	f7ff f99b 	bl	8004326 <LL_RCC_HSE_IsReady>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d11e      	bne.n	8005034 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e066      	b.n	80050c8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	d106      	bne.n	8005010 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005002:	f7ff fb42 	bl	800468a <LL_RCC_PLL_IsReady>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d113      	bne.n	8005034 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e05b      	b.n	80050c8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d106      	bne.n	8005026 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005018:	f7ff fa35 	bl	8004486 <LL_RCC_MSI_IsReady>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d108      	bne.n	8005034 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e050      	b.n	80050c8 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005026:	f7ff f9ab 	bl	8004380 <LL_RCC_HSI_IsReady>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e049      	b.n	80050c8 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff fa6f 	bl	800451c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800503e:	f7fb fee1 	bl	8000e04 <HAL_GetTick>
 8005042:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005044:	e00a      	b.n	800505c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005046:	f7fb fedd 	bl	8000e04 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005054:	4293      	cmp	r3, r2
 8005056:	d901      	bls.n	800505c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e035      	b.n	80050c8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800505c:	f7ff fa71 	bl	8004542 <LL_RCC_GetSysClkSource>
 8005060:	4602      	mov	r2, r0
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	429a      	cmp	r2, r3
 800506a:	d1ec      	bne.n	8005046 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800506c:	4b18      	ldr	r3, [pc, #96]	@ (80050d0 <HAL_RCC_ClockConfig+0x23c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d21b      	bcs.n	80050b2 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800507a:	4b15      	ldr	r3, [pc, #84]	@ (80050d0 <HAL_RCC_ClockConfig+0x23c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f023 0207 	bic.w	r2, r3, #7
 8005082:	4913      	ldr	r1, [pc, #76]	@ (80050d0 <HAL_RCC_ClockConfig+0x23c>)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	4313      	orrs	r3, r2
 8005088:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800508a:	f7fb febb 	bl	8000e04 <HAL_GetTick>
 800508e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005090:	e008      	b.n	80050a4 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005092:	f7fb feb7 	bl	8000e04 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d901      	bls.n	80050a4 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e011      	b.n	80050c8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050a4:	4b0a      	ldr	r3, [pc, #40]	@ (80050d0 <HAL_RCC_ClockConfig+0x23c>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d1ef      	bne.n	8005092 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80050b2:	f000 f8b3 	bl	800521c <HAL_RCC_GetHCLKFreq>
 80050b6:	4603      	mov	r3, r0
 80050b8:	4a06      	ldr	r2, [pc, #24]	@ (80050d4 <HAL_RCC_ClockConfig+0x240>)
 80050ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80050bc:	4b06      	ldr	r3, [pc, #24]	@ (80050d8 <HAL_RCC_ClockConfig+0x244>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fc fc1d 	bl	8001900 <HAL_InitTick>
 80050c6:	4603      	mov	r3, r0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	58004000 	.word	0x58004000
 80050d4:	20000008 	.word	0x20000008
 80050d8:	2000000c 	.word	0x2000000c

080050dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050dc:	b590      	push	{r4, r7, lr}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ea:	f7ff fa2a 	bl	8004542 <LL_RCC_GetSysClkSource>
 80050ee:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050f0:	f7ff fafe 	bl	80046f0 <LL_RCC_PLL_GetMainSource>
 80050f4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d005      	beq.n	8005108 <HAL_RCC_GetSysClockFreq+0x2c>
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2b0c      	cmp	r3, #12
 8005100:	d139      	bne.n	8005176 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d136      	bne.n	8005176 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005108:	f7ff f9cd 	bl	80044a6 <LL_RCC_MSI_IsEnabledRangeSelect>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d115      	bne.n	800513e <HAL_RCC_GetSysClockFreq+0x62>
 8005112:	f7ff f9c8 	bl	80044a6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005116:	4603      	mov	r3, r0
 8005118:	2b01      	cmp	r3, #1
 800511a:	d106      	bne.n	800512a <HAL_RCC_GetSysClockFreq+0x4e>
 800511c:	f7ff f9d3 	bl	80044c6 <LL_RCC_MSI_GetRange>
 8005120:	4603      	mov	r3, r0
 8005122:	0a1b      	lsrs	r3, r3, #8
 8005124:	f003 030f 	and.w	r3, r3, #15
 8005128:	e005      	b.n	8005136 <HAL_RCC_GetSysClockFreq+0x5a>
 800512a:	f7ff f9d7 	bl	80044dc <LL_RCC_MSI_GetRangeAfterStandby>
 800512e:	4603      	mov	r3, r0
 8005130:	0a1b      	lsrs	r3, r3, #8
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	4a36      	ldr	r2, [pc, #216]	@ (8005210 <HAL_RCC_GetSysClockFreq+0x134>)
 8005138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800513c:	e014      	b.n	8005168 <HAL_RCC_GetSysClockFreq+0x8c>
 800513e:	f7ff f9b2 	bl	80044a6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005142:	4603      	mov	r3, r0
 8005144:	2b01      	cmp	r3, #1
 8005146:	d106      	bne.n	8005156 <HAL_RCC_GetSysClockFreq+0x7a>
 8005148:	f7ff f9bd 	bl	80044c6 <LL_RCC_MSI_GetRange>
 800514c:	4603      	mov	r3, r0
 800514e:	091b      	lsrs	r3, r3, #4
 8005150:	f003 030f 	and.w	r3, r3, #15
 8005154:	e005      	b.n	8005162 <HAL_RCC_GetSysClockFreq+0x86>
 8005156:	f7ff f9c1 	bl	80044dc <LL_RCC_MSI_GetRangeAfterStandby>
 800515a:	4603      	mov	r3, r0
 800515c:	091b      	lsrs	r3, r3, #4
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	4a2b      	ldr	r2, [pc, #172]	@ (8005210 <HAL_RCC_GetSysClockFreq+0x134>)
 8005164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005168:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d115      	bne.n	800519c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005174:	e012      	b.n	800519c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2b04      	cmp	r3, #4
 800517a:	d102      	bne.n	8005182 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800517c:	4b25      	ldr	r3, [pc, #148]	@ (8005214 <HAL_RCC_GetSysClockFreq+0x138>)
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	e00c      	b.n	800519c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2b08      	cmp	r3, #8
 8005186:	d109      	bne.n	800519c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005188:	f7ff f8a0 	bl	80042cc <LL_RCC_HSE_IsEnabledDiv2>
 800518c:	4603      	mov	r3, r0
 800518e:	2b01      	cmp	r3, #1
 8005190:	d102      	bne.n	8005198 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005192:	4b20      	ldr	r3, [pc, #128]	@ (8005214 <HAL_RCC_GetSysClockFreq+0x138>)
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	e001      	b.n	800519c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005198:	4b1f      	ldr	r3, [pc, #124]	@ (8005218 <HAL_RCC_GetSysClockFreq+0x13c>)
 800519a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800519c:	f7ff f9d1 	bl	8004542 <LL_RCC_GetSysClkSource>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b0c      	cmp	r3, #12
 80051a4:	d12f      	bne.n	8005206 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80051a6:	f7ff faa3 	bl	80046f0 <LL_RCC_PLL_GetMainSource>
 80051aa:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d003      	beq.n	80051ba <HAL_RCC_GetSysClockFreq+0xde>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b03      	cmp	r3, #3
 80051b6:	d003      	beq.n	80051c0 <HAL_RCC_GetSysClockFreq+0xe4>
 80051b8:	e00d      	b.n	80051d6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80051ba:	4b16      	ldr	r3, [pc, #88]	@ (8005214 <HAL_RCC_GetSysClockFreq+0x138>)
 80051bc:	60fb      	str	r3, [r7, #12]
        break;
 80051be:	e00d      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80051c0:	f7ff f884 	bl	80042cc <LL_RCC_HSE_IsEnabledDiv2>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d102      	bne.n	80051d0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80051ca:	4b12      	ldr	r3, [pc, #72]	@ (8005214 <HAL_RCC_GetSysClockFreq+0x138>)
 80051cc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80051ce:	e005      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80051d0:	4b11      	ldr	r3, [pc, #68]	@ (8005218 <HAL_RCC_GetSysClockFreq+0x13c>)
 80051d2:	60fb      	str	r3, [r7, #12]
        break;
 80051d4:	e002      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	60fb      	str	r3, [r7, #12]
        break;
 80051da:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80051dc:	f7ff fa66 	bl	80046ac <LL_RCC_PLL_GetN>
 80051e0:	4602      	mov	r2, r0
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	fb03 f402 	mul.w	r4, r3, r2
 80051e8:	f7ff fa77 	bl	80046da <LL_RCC_PLL_GetDivider>
 80051ec:	4603      	mov	r3, r0
 80051ee:	091b      	lsrs	r3, r3, #4
 80051f0:	3301      	adds	r3, #1
 80051f2:	fbb4 f4f3 	udiv	r4, r4, r3
 80051f6:	f7ff fa65 	bl	80046c4 <LL_RCC_PLL_GetR>
 80051fa:	4603      	mov	r3, r0
 80051fc:	0f5b      	lsrs	r3, r3, #29
 80051fe:	3301      	adds	r3, #1
 8005200:	fbb4 f3f3 	udiv	r3, r4, r3
 8005204:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005206:	697b      	ldr	r3, [r7, #20]
}
 8005208:	4618      	mov	r0, r3
 800520a:	371c      	adds	r7, #28
 800520c:	46bd      	mov	sp, r7
 800520e:	bd90      	pop	{r4, r7, pc}
 8005210:	0800dba4 	.word	0x0800dba4
 8005214:	00f42400 	.word	0x00f42400
 8005218:	01e84800 	.word	0x01e84800

0800521c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800521c:	b598      	push	{r3, r4, r7, lr}
 800521e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005220:	f7ff ff5c 	bl	80050dc <HAL_RCC_GetSysClockFreq>
 8005224:	4604      	mov	r4, r0
 8005226:	f7ff f9e6 	bl	80045f6 <LL_RCC_GetAHBPrescaler>
 800522a:	4603      	mov	r3, r0
 800522c:	091b      	lsrs	r3, r3, #4
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	4a03      	ldr	r2, [pc, #12]	@ (8005240 <HAL_RCC_GetHCLKFreq+0x24>)
 8005234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005238:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800523c:	4618      	mov	r0, r3
 800523e:	bd98      	pop	{r3, r4, r7, pc}
 8005240:	0800db44 	.word	0x0800db44

08005244 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005244:	b598      	push	{r3, r4, r7, lr}
 8005246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005248:	f7ff ffe8 	bl	800521c <HAL_RCC_GetHCLKFreq>
 800524c:	4604      	mov	r4, r0
 800524e:	f7ff f9ea 	bl	8004626 <LL_RCC_GetAPB1Prescaler>
 8005252:	4603      	mov	r3, r0
 8005254:	0a1b      	lsrs	r3, r3, #8
 8005256:	4a03      	ldr	r2, [pc, #12]	@ (8005264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800525c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005260:	4618      	mov	r0, r3
 8005262:	bd98      	pop	{r3, r4, r7, pc}
 8005264:	0800db84 	.word	0x0800db84

08005268 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005268:	b598      	push	{r3, r4, r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800526c:	f7ff ffd6 	bl	800521c <HAL_RCC_GetHCLKFreq>
 8005270:	4604      	mov	r4, r0
 8005272:	f7ff f9e3 	bl	800463c <LL_RCC_GetAPB2Prescaler>
 8005276:	4603      	mov	r3, r0
 8005278:	0adb      	lsrs	r3, r3, #11
 800527a:	4a03      	ldr	r2, [pc, #12]	@ (8005288 <HAL_RCC_GetPCLK2Freq+0x20>)
 800527c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005280:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005284:	4618      	mov	r0, r3
 8005286:	bd98      	pop	{r3, r4, r7, pc}
 8005288:	0800db84 	.word	0x0800db84

0800528c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800528c:	b590      	push	{r4, r7, lr}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	091b      	lsrs	r3, r3, #4
 8005298:	f003 030f 	and.w	r3, r3, #15
 800529c:	4a10      	ldr	r2, [pc, #64]	@ (80052e0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800529e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80052a4:	f7ff f9b2 	bl	800460c <LL_RCC_GetAHB3Prescaler>
 80052a8:	4603      	mov	r3, r0
 80052aa:	091b      	lsrs	r3, r3, #4
 80052ac:	f003 030f 	and.w	r3, r3, #15
 80052b0:	4a0c      	ldr	r2, [pc, #48]	@ (80052e4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80052b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052bc:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	4a09      	ldr	r2, [pc, #36]	@ (80052e8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80052c2:	fba2 2303 	umull	r2, r3, r2, r3
 80052c6:	0c9c      	lsrs	r4, r3, #18
 80052c8:	f7fe ff58 	bl	800417c <HAL_PWREx_GetVoltageRange>
 80052cc:	4603      	mov	r3, r0
 80052ce:	4619      	mov	r1, r3
 80052d0:	4620      	mov	r0, r4
 80052d2:	f000 f80b 	bl	80052ec <RCC_SetFlashLatency>
 80052d6:	4603      	mov	r3, r0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd90      	pop	{r4, r7, pc}
 80052e0:	0800dba4 	.word	0x0800dba4
 80052e4:	0800db44 	.word	0x0800db44
 80052e8:	431bde83 	.word	0x431bde83

080052ec <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b08e      	sub	sp, #56	@ 0x38
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80052f6:	4a3a      	ldr	r2, [pc, #232]	@ (80053e0 <RCC_SetFlashLatency+0xf4>)
 80052f8:	f107 0320 	add.w	r3, r7, #32
 80052fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005300:	6018      	str	r0, [r3, #0]
 8005302:	3304      	adds	r3, #4
 8005304:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005306:	4a37      	ldr	r2, [pc, #220]	@ (80053e4 <RCC_SetFlashLatency+0xf8>)
 8005308:	f107 0318 	add.w	r3, r7, #24
 800530c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005310:	6018      	str	r0, [r3, #0]
 8005312:	3304      	adds	r3, #4
 8005314:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005316:	4a34      	ldr	r2, [pc, #208]	@ (80053e8 <RCC_SetFlashLatency+0xfc>)
 8005318:	f107 030c 	add.w	r3, r7, #12
 800531c:	ca07      	ldmia	r2, {r0, r1, r2}
 800531e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005322:	2300      	movs	r3, #0
 8005324:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800532c:	d11b      	bne.n	8005366 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800532e:	2300      	movs	r3, #0
 8005330:	633b      	str	r3, [r7, #48]	@ 0x30
 8005332:	e014      	b.n	800535e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	3338      	adds	r3, #56	@ 0x38
 800533a:	443b      	add	r3, r7
 800533c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005340:	461a      	mov	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4293      	cmp	r3, r2
 8005346:	d807      	bhi.n	8005358 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	3338      	adds	r3, #56	@ 0x38
 800534e:	443b      	add	r3, r7
 8005350:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005354:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005356:	e021      	b.n	800539c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535a:	3301      	adds	r3, #1
 800535c:	633b      	str	r3, [r7, #48]	@ 0x30
 800535e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005360:	2b02      	cmp	r3, #2
 8005362:	d9e7      	bls.n	8005334 <RCC_SetFlashLatency+0x48>
 8005364:	e01a      	b.n	800539c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005366:	2300      	movs	r3, #0
 8005368:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800536a:	e014      	b.n	8005396 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800536c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800536e:	005b      	lsls	r3, r3, #1
 8005370:	3338      	adds	r3, #56	@ 0x38
 8005372:	443b      	add	r3, r7
 8005374:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8005378:	461a      	mov	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4293      	cmp	r3, r2
 800537e:	d807      	bhi.n	8005390 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	3338      	adds	r3, #56	@ 0x38
 8005386:	443b      	add	r3, r7
 8005388:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800538c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800538e:	e005      	b.n	800539c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005392:	3301      	adds	r3, #1
 8005394:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005398:	2b02      	cmp	r3, #2
 800539a:	d9e7      	bls.n	800536c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800539c:	4b13      	ldr	r3, [pc, #76]	@ (80053ec <RCC_SetFlashLatency+0x100>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f023 0207 	bic.w	r2, r3, #7
 80053a4:	4911      	ldr	r1, [pc, #68]	@ (80053ec <RCC_SetFlashLatency+0x100>)
 80053a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a8:	4313      	orrs	r3, r2
 80053aa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80053ac:	f7fb fd2a 	bl	8000e04 <HAL_GetTick>
 80053b0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80053b2:	e008      	b.n	80053c6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80053b4:	f7fb fd26 	bl	8000e04 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e007      	b.n	80053d6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80053c6:	4b09      	ldr	r3, [pc, #36]	@ (80053ec <RCC_SetFlashLatency+0x100>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d1ef      	bne.n	80053b4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3738      	adds	r7, #56	@ 0x38
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	0800da28 	.word	0x0800da28
 80053e4:	0800da30 	.word	0x0800da30
 80053e8:	0800da38 	.word	0x0800da38
 80053ec:	58004000 	.word	0x58004000

080053f0 <LL_RCC_LSE_IsReady>:
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80053f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b02      	cmp	r3, #2
 8005402:	d101      	bne.n	8005408 <LL_RCC_LSE_IsReady+0x18>
 8005404:	2301      	movs	r3, #1
 8005406:	e000      	b.n	800540a <LL_RCC_LSE_IsReady+0x1a>
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	46bd      	mov	sp, r7
 800540e:	bc80      	pop	{r7}
 8005410:	4770      	bx	lr

08005412 <LL_RCC_SetUSARTClockSource>:
{
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800541a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800541e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	0c1b      	lsrs	r3, r3, #16
 8005426:	43db      	mvns	r3, r3
 8005428:	401a      	ands	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	b29b      	uxth	r3, r3
 800542e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005432:	4313      	orrs	r3, r2
 8005434:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	bc80      	pop	{r7}
 8005440:	4770      	bx	lr

08005442 <LL_RCC_SetI2SClockSource>:
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800544a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800544e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005452:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005456:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4313      	orrs	r3, r2
 800545e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	bc80      	pop	{r7}
 800546a:	4770      	bx	lr

0800546c <LL_RCC_SetLPUARTClockSource>:
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800547c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005480:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4313      	orrs	r3, r2
 8005488:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	bc80      	pop	{r7}
 8005494:	4770      	bx	lr

08005496 <LL_RCC_SetI2CClockSource>:
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800549e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	091b      	lsrs	r3, r3, #4
 80054aa:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80054ae:	43db      	mvns	r3, r3
 80054b0:	401a      	ands	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80054ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054be:	4313      	orrs	r3, r2
 80054c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bc80      	pop	{r7}
 80054cc:	4770      	bx	lr

080054ce <LL_RCC_SetLPTIMClockSource>:
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80054d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054da:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	0c1b      	lsrs	r3, r3, #16
 80054e2:	041b      	lsls	r3, r3, #16
 80054e4:	43db      	mvns	r3, r3
 80054e6:	401a      	ands	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	041b      	lsls	r3, r3, #16
 80054ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054f0:	4313      	orrs	r3, r2
 80054f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bc80      	pop	{r7}
 80054fe:	4770      	bx	lr

08005500 <LL_RCC_SetRNGClockSource>:
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005508:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800550c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005510:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005514:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4313      	orrs	r3, r2
 800551c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	bc80      	pop	{r7}
 8005528:	4770      	bx	lr

0800552a <LL_RCC_SetADCClockSource>:
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005532:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800553a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800553e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4313      	orrs	r3, r2
 8005546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800554a:	bf00      	nop
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr

08005554 <LL_RCC_SetRTCClockSource>:
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800555c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005564:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005568:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4313      	orrs	r3, r2
 8005570:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	bc80      	pop	{r7}
 800557c:	4770      	bx	lr

0800557e <LL_RCC_GetRTCClockSource>:
{
 800557e:	b480      	push	{r7}
 8005580:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005582:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800558a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800558e:	4618      	mov	r0, r3
 8005590:	46bd      	mov	sp, r7
 8005592:	bc80      	pop	{r7}
 8005594:	4770      	bx	lr

08005596 <LL_RCC_ForceBackupDomainReset>:
{
 8005596:	b480      	push	{r7}
 8005598:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800559a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800559e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80055ae:	bf00      	nop
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bc80      	pop	{r7}
 80055b4:	4770      	bx	lr

080055b6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80055b6:	b480      	push	{r7}
 80055b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80055ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80055ce:	bf00      	nop
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bc80      	pop	{r7}
 80055d4:	4770      	bx	lr
	...

080055d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80055e0:	2300      	movs	r3, #0
 80055e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80055e4:	2300      	movs	r3, #0
 80055e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80055e8:	2300      	movs	r3, #0
 80055ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d058      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80055f8:	f7fe fd7e 	bl	80040f8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055fc:	f7fb fc02 	bl	8000e04 <HAL_GetTick>
 8005600:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005602:	e009      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005604:	f7fb fbfe 	bl	8000e04 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d902      	bls.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	74fb      	strb	r3, [r7, #19]
        break;
 8005616:	e006      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005618:	4b7b      	ldr	r3, [pc, #492]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005620:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005624:	d1ee      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8005626:	7cfb      	ldrb	r3, [r7, #19]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d13c      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800562c:	f7ff ffa7 	bl	800557e <LL_RCC_GetRTCClockSource>
 8005630:	4602      	mov	r2, r0
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005636:	429a      	cmp	r2, r3
 8005638:	d00f      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800563a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800563e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005642:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005646:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005648:	f7ff ffa5 	bl	8005596 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800564c:	f7ff ffb3 	bl	80055b6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005650:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d014      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005664:	f7fb fbce 	bl	8000e04 <HAL_GetTick>
 8005668:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800566a:	e00b      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800566c:	f7fb fbca 	bl	8000e04 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800567a:	4293      	cmp	r3, r2
 800567c:	d902      	bls.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	74fb      	strb	r3, [r7, #19]
            break;
 8005682:	e004      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8005684:	f7ff feb4 	bl	80053f0 <LL_RCC_LSE_IsReady>
 8005688:	4603      	mov	r3, r0
 800568a:	2b01      	cmp	r3, #1
 800568c:	d1ee      	bne.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800568e:	7cfb      	ldrb	r3, [r7, #19]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d105      	bne.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff ff5b 	bl	8005554 <LL_RCC_SetRTCClockSource>
 800569e:	e004      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056a0:	7cfb      	ldrb	r3, [r7, #19]
 80056a2:	74bb      	strb	r3, [r7, #18]
 80056a4:	e001      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a6:	7cfb      	ldrb	r3, [r7, #19]
 80056a8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d004      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7ff fea9 	bl	8005412 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d004      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7ff fe9e 	bl	8005412 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0320 	and.w	r3, r3, #32
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d004      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7ff fec0 	bl	800546c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d004      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7ff fee6 	bl	80054ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800570a:	2b00      	cmp	r3, #0
 800570c:	d004      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005712:	4618      	mov	r0, r3
 8005714:	f7ff fedb 	bl	80054ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005720:	2b00      	cmp	r3, #0
 8005722:	d004      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005728:	4618      	mov	r0, r3
 800572a:	f7ff fed0 	bl	80054ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005736:	2b00      	cmp	r3, #0
 8005738:	d004      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	4618      	mov	r0, r3
 8005740:	f7ff fea9 	bl	8005496 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800574c:	2b00      	cmp	r3, #0
 800574e:	d004      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	4618      	mov	r0, r3
 8005756:	f7ff fe9e 	bl	8005496 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005762:	2b00      	cmp	r3, #0
 8005764:	d004      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff fe93 	bl	8005496 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0310 	and.w	r3, r3, #16
 8005778:	2b00      	cmp	r3, #0
 800577a:	d011      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	4618      	mov	r0, r3
 8005782:	f7ff fe5e 	bl	8005442 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800578e:	d107      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800579a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800579e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d010      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7ff fea5 	bl	8005500 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d107      	bne.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80057be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057cc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d011      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057de:	4618      	mov	r0, r3
 80057e0:	f7ff fea3 	bl	800552a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057ec:	d107      	bne.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057fc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80057fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	58000400 	.word	0x58000400

0800580c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d071      	beq.n	8005902 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d106      	bne.n	8005838 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fb f93a 	bl	8000aac <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005840:	4b32      	ldr	r3, [pc, #200]	@ (800590c <HAL_RTC_Init+0x100>)
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	f003 0310 	and.w	r3, r3, #16
 8005848:	2b10      	cmp	r3, #16
 800584a:	d051      	beq.n	80058f0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800584c:	4b2f      	ldr	r3, [pc, #188]	@ (800590c <HAL_RTC_Init+0x100>)
 800584e:	22ca      	movs	r2, #202	@ 0xca
 8005850:	625a      	str	r2, [r3, #36]	@ 0x24
 8005852:	4b2e      	ldr	r3, [pc, #184]	@ (800590c <HAL_RTC_Init+0x100>)
 8005854:	2253      	movs	r2, #83	@ 0x53
 8005856:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 fa11 	bl	8005c80 <RTC_EnterInitMode>
 800585e:	4603      	mov	r3, r0
 8005860:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8005862:	7bfb      	ldrb	r3, [r7, #15]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d13f      	bne.n	80058e8 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005868:	4b28      	ldr	r3, [pc, #160]	@ (800590c <HAL_RTC_Init+0x100>)
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	4a27      	ldr	r2, [pc, #156]	@ (800590c <HAL_RTC_Init+0x100>)
 800586e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8005872:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005876:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005878:	4b24      	ldr	r3, [pc, #144]	@ (800590c <HAL_RTC_Init+0x100>)
 800587a:	699a      	ldr	r2, [r3, #24]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6859      	ldr	r1, [r3, #4]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	4319      	orrs	r1, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	430b      	orrs	r3, r1
 800588c:	491f      	ldr	r1, [pc, #124]	@ (800590c <HAL_RTC_Init+0x100>)
 800588e:	4313      	orrs	r3, r2
 8005890:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68da      	ldr	r2, [r3, #12]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	041b      	lsls	r3, r3, #16
 800589c:	491b      	ldr	r1, [pc, #108]	@ (800590c <HAL_RTC_Init+0x100>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80058a2:	4b1a      	ldr	r3, [pc, #104]	@ (800590c <HAL_RTC_Init+0x100>)
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b2:	430b      	orrs	r3, r1
 80058b4:	4915      	ldr	r1, [pc, #84]	@ (800590c <HAL_RTC_Init+0x100>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fa14 	bl	8005ce8 <RTC_ExitInitMode>
 80058c0:	4603      	mov	r3, r0
 80058c2:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10e      	bne.n	80058e8 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80058ca:	4b10      	ldr	r3, [pc, #64]	@ (800590c <HAL_RTC_Init+0x100>)
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a19      	ldr	r1, [r3, #32]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	4319      	orrs	r1, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	430b      	orrs	r3, r1
 80058e2:	490a      	ldr	r1, [pc, #40]	@ (800590c <HAL_RTC_Init+0x100>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058e8:	4b08      	ldr	r3, [pc, #32]	@ (800590c <HAL_RTC_Init+0x100>)
 80058ea:	22ff      	movs	r2, #255	@ 0xff
 80058ec:	625a      	str	r2, [r3, #36]	@ 0x24
 80058ee:	e001      	b.n	80058f4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80058f0:	2300      	movs	r3, #0
 80058f2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d103      	bne.n	8005902 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8005902:	7bfb      	ldrb	r3, [r7, #15]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	40002800 	.word	0x40002800

08005910 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005910:	b590      	push	{r4, r7, lr}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800591c:	2300      	movs	r3, #0
 800591e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005926:	2b01      	cmp	r3, #1
 8005928:	d101      	bne.n	800592e <HAL_RTC_SetAlarm_IT+0x1e>
 800592a:	2302      	movs	r3, #2
 800592c:	e0f3      	b.n	8005b16 <HAL_RTC_SetAlarm_IT+0x206>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2202      	movs	r2, #2
 800593a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800593e:	4b78      	ldr	r3, [pc, #480]	@ (8005b20 <HAL_RTC_SetAlarm_IT+0x210>)
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005946:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800594e:	d06a      	beq.n	8005a26 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d13a      	bne.n	80059cc <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005956:	4b72      	ldr	r3, [pc, #456]	@ (8005b20 <HAL_RTC_SetAlarm_IT+0x210>)
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800595e:	2b00      	cmp	r3, #0
 8005960:	d102      	bne.n	8005968 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2200      	movs	r2, #0
 8005966:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	4618      	mov	r0, r3
 8005976:	f000 f9f5 	bl	8005d64 <RTC_ByteToBcd2>
 800597a:	4603      	mov	r3, r0
 800597c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	785b      	ldrb	r3, [r3, #1]
 8005982:	4618      	mov	r0, r3
 8005984:	f000 f9ee 	bl	8005d64 <RTC_ByteToBcd2>
 8005988:	4603      	mov	r3, r0
 800598a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800598c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	789b      	ldrb	r3, [r3, #2]
 8005992:	4618      	mov	r0, r3
 8005994:	f000 f9e6 	bl	8005d64 <RTC_ByteToBcd2>
 8005998:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800599a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	78db      	ldrb	r3, [r3, #3]
 80059a2:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80059a4:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 f9d8 	bl	8005d64 <RTC_ByteToBcd2>
 80059b4:	4603      	mov	r3, r0
 80059b6:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80059b8:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80059c0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80059c6:	4313      	orrs	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]
 80059ca:	e02c      	b.n	8005a26 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 80059d4:	d00d      	beq.n	80059f2 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80059de:	d008      	beq.n	80059f2 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80059e0:	4b4f      	ldr	r3, [pc, #316]	@ (8005b20 <HAL_RTC_SetAlarm_IT+0x210>)
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d102      	bne.n	80059f2 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2200      	movs	r2, #0
 80059f0:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	785b      	ldrb	r3, [r3, #1]
 80059fc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80059fe:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005a04:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	78db      	ldrb	r3, [r3, #3]
 8005a0a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005a0c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005a14:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005a16:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005a1c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005a22:	4313      	orrs	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a26:	4b3e      	ldr	r3, [pc, #248]	@ (8005b20 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a28:	22ca      	movs	r2, #202	@ 0xca
 8005a2a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a2c:	4b3c      	ldr	r3, [pc, #240]	@ (8005b20 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a2e:	2253      	movs	r2, #83	@ 0x53
 8005a30:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a3a:	d12c      	bne.n	8005a96 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005a3c:	4b38      	ldr	r3, [pc, #224]	@ (8005b20 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	4a37      	ldr	r2, [pc, #220]	@ (8005b20 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a42:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005a46:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005a48:	4b35      	ldr	r3, [pc, #212]	@ (8005b20 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a54:	d107      	bne.n	8005a66 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	699a      	ldr	r2, [r3, #24]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	4930      	ldr	r1, [pc, #192]	@ (8005b20 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	644b      	str	r3, [r1, #68]	@ 0x44
 8005a64:	e006      	b.n	8005a74 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8005a66:	4a2e      	ldr	r2, [pc, #184]	@ (8005b20 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8005a6c:	4a2c      	ldr	r2, [pc, #176]	@ (8005b20 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8005a74:	4a2a      	ldr	r2, [pc, #168]	@ (8005b20 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a80:	f043 0201 	orr.w	r2, r3, #1
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005a88:	4b25      	ldr	r3, [pc, #148]	@ (8005b20 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	4a24      	ldr	r2, [pc, #144]	@ (8005b20 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a8e:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8005a92:	6193      	str	r3, [r2, #24]
 8005a94:	e02b      	b.n	8005aee <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005a96:	4b22      	ldr	r3, [pc, #136]	@ (8005b20 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	4a21      	ldr	r2, [pc, #132]	@ (8005b20 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a9c:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8005aa0:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8005b20 <HAL_RTC_SetAlarm_IT+0x210>)
 8005aa4:	2202      	movs	r2, #2
 8005aa6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005aae:	d107      	bne.n	8005ac0 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	699a      	ldr	r2, [r3, #24]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	4919      	ldr	r1, [pc, #100]	@ (8005b20 <HAL_RTC_SetAlarm_IT+0x210>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8005abe:	e006      	b.n	8005ace <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8005ac0:	4a17      	ldr	r2, [pc, #92]	@ (8005b20 <HAL_RTC_SetAlarm_IT+0x210>)
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8005ac6:	4a16      	ldr	r2, [pc, #88]	@ (8005b20 <HAL_RTC_SetAlarm_IT+0x210>)
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8005ace:	4a14      	ldr	r2, [pc, #80]	@ (8005b20 <HAL_RTC_SetAlarm_IT+0x210>)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ada:	f043 0202 	orr.w	r2, r3, #2
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8005b20 <HAL_RTC_SetAlarm_IT+0x210>)
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8005b20 <HAL_RTC_SetAlarm_IT+0x210>)
 8005ae8:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8005aec:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005aee:	4b0d      	ldr	r3, [pc, #52]	@ (8005b24 <HAL_RTC_SetAlarm_IT+0x214>)
 8005af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005af4:	4a0b      	ldr	r2, [pc, #44]	@ (8005b24 <HAL_RTC_SetAlarm_IT+0x214>)
 8005af6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005afa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005afe:	4b08      	ldr	r3, [pc, #32]	@ (8005b20 <HAL_RTC_SetAlarm_IT+0x210>)
 8005b00:	22ff      	movs	r2, #255	@ 0xff
 8005b02:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	371c      	adds	r7, #28
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd90      	pop	{r4, r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	40002800 	.word	0x40002800
 8005b24:	58000800 	.word	0x58000800

08005b28 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d101      	bne.n	8005b40 <HAL_RTC_DeactivateAlarm+0x18>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e048      	b.n	8005bd2 <HAL_RTC_DeactivateAlarm+0xaa>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b50:	4b22      	ldr	r3, [pc, #136]	@ (8005bdc <HAL_RTC_DeactivateAlarm+0xb4>)
 8005b52:	22ca      	movs	r2, #202	@ 0xca
 8005b54:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b56:	4b21      	ldr	r3, [pc, #132]	@ (8005bdc <HAL_RTC_DeactivateAlarm+0xb4>)
 8005b58:	2253      	movs	r2, #83	@ 0x53
 8005b5a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b62:	d115      	bne.n	8005b90 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005b64:	4b1d      	ldr	r3, [pc, #116]	@ (8005bdc <HAL_RTC_DeactivateAlarm+0xb4>)
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	4a1c      	ldr	r2, [pc, #112]	@ (8005bdc <HAL_RTC_DeactivateAlarm+0xb4>)
 8005b6a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005b6e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8005b70:	4b1a      	ldr	r3, [pc, #104]	@ (8005bdc <HAL_RTC_DeactivateAlarm+0xb4>)
 8005b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b74:	4a19      	ldr	r2, [pc, #100]	@ (8005bdc <HAL_RTC_DeactivateAlarm+0xb4>)
 8005b76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b7a:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b80:	f023 0201 	bic.w	r2, r3, #1
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005b88:	4b14      	ldr	r3, [pc, #80]	@ (8005bdc <HAL_RTC_DeactivateAlarm+0xb4>)
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b8e:	e014      	b.n	8005bba <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005b90:	4b12      	ldr	r3, [pc, #72]	@ (8005bdc <HAL_RTC_DeactivateAlarm+0xb4>)
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	4a11      	ldr	r2, [pc, #68]	@ (8005bdc <HAL_RTC_DeactivateAlarm+0xb4>)
 8005b96:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8005b9a:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8005b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8005bdc <HAL_RTC_DeactivateAlarm+0xb4>)
 8005b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ba0:	4a0e      	ldr	r2, [pc, #56]	@ (8005bdc <HAL_RTC_DeactivateAlarm+0xb4>)
 8005ba2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ba6:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bac:	f023 0202 	bic.w	r2, r3, #2
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005bb4:	4b09      	ldr	r3, [pc, #36]	@ (8005bdc <HAL_RTC_DeactivateAlarm+0xb4>)
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bba:	4b08      	ldr	r3, [pc, #32]	@ (8005bdc <HAL_RTC_DeactivateAlarm+0xb4>)
 8005bbc:	22ff      	movs	r2, #255	@ 0xff
 8005bbe:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bc80      	pop	{r7}
 8005bda:	4770      	bx	lr
 8005bdc:	40002800 	.word	0x40002800

08005be0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8005be8:	4b11      	ldr	r3, [pc, #68]	@ (8005c30 <HAL_RTC_AlarmIRQHandler+0x50>)
 8005bea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d005      	beq.n	8005c0a <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8005c30 <HAL_RTC_AlarmIRQHandler+0x50>)
 8005c00:	2201      	movs	r2, #1
 8005c02:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7fb faee 	bl	80011e6 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f003 0302 	and.w	r3, r3, #2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d005      	beq.n	8005c20 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005c14:	4b06      	ldr	r3, [pc, #24]	@ (8005c30 <HAL_RTC_AlarmIRQHandler+0x50>)
 8005c16:	2202      	movs	r2, #2
 8005c18:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f94a 	bl	8005eb4 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8005c28:	bf00      	nop
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	40002800 	.word	0x40002800

08005c34 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8005c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8005c7c <HAL_RTC_WaitForSynchro+0x48>)
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	4a0e      	ldr	r2, [pc, #56]	@ (8005c7c <HAL_RTC_WaitForSynchro+0x48>)
 8005c42:	f023 0320 	bic.w	r3, r3, #32
 8005c46:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005c48:	f7fb f8dc 	bl	8000e04 <HAL_GetTick>
 8005c4c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005c4e:	e009      	b.n	8005c64 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c50:	f7fb f8d8 	bl	8000e04 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c5e:	d901      	bls.n	8005c64 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e006      	b.n	8005c72 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005c64:	4b05      	ldr	r3, [pc, #20]	@ (8005c7c <HAL_RTC_WaitForSynchro+0x48>)
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f003 0320 	and.w	r3, r3, #32
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d0ef      	beq.n	8005c50 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	40002800 	.word	0x40002800

08005c80 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005c8c:	4b15      	ldr	r3, [pc, #84]	@ (8005ce4 <RTC_EnterInitMode+0x64>)
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d120      	bne.n	8005cda <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005c98:	4b12      	ldr	r3, [pc, #72]	@ (8005ce4 <RTC_EnterInitMode+0x64>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	4a11      	ldr	r2, [pc, #68]	@ (8005ce4 <RTC_EnterInitMode+0x64>)
 8005c9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ca2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005ca4:	f7fb f8ae 	bl	8000e04 <HAL_GetTick>
 8005ca8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005caa:	e00d      	b.n	8005cc8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005cac:	f7fb f8aa 	bl	8000e04 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005cba:	d905      	bls.n	8005cc8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2203      	movs	r2, #3
 8005cc4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005cc8:	4b06      	ldr	r3, [pc, #24]	@ (8005ce4 <RTC_EnterInitMode+0x64>)
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d102      	bne.n	8005cda <RTC_EnterInitMode+0x5a>
 8005cd4:	7bfb      	ldrb	r3, [r7, #15]
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	d1e8      	bne.n	8005cac <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	40002800 	.word	0x40002800

08005ce8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8005d60 <RTC_ExitInitMode+0x78>)
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	4a19      	ldr	r2, [pc, #100]	@ (8005d60 <RTC_ExitInitMode+0x78>)
 8005cfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cfe:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005d00:	4b17      	ldr	r3, [pc, #92]	@ (8005d60 <RTC_ExitInitMode+0x78>)
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	f003 0320 	and.w	r3, r3, #32
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10c      	bne.n	8005d26 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7ff ff91 	bl	8005c34 <HAL_RTC_WaitForSynchro>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d01e      	beq.n	8005d56 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2203      	movs	r2, #3
 8005d1c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	73fb      	strb	r3, [r7, #15]
 8005d24:	e017      	b.n	8005d56 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005d26:	4b0e      	ldr	r3, [pc, #56]	@ (8005d60 <RTC_ExitInitMode+0x78>)
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	4a0d      	ldr	r2, [pc, #52]	@ (8005d60 <RTC_ExitInitMode+0x78>)
 8005d2c:	f023 0320 	bic.w	r3, r3, #32
 8005d30:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7ff ff7e 	bl	8005c34 <HAL_RTC_WaitForSynchro>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d005      	beq.n	8005d4a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2203      	movs	r2, #3
 8005d42:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005d4a:	4b05      	ldr	r3, [pc, #20]	@ (8005d60 <RTC_ExitInitMode+0x78>)
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	4a04      	ldr	r2, [pc, #16]	@ (8005d60 <RTC_ExitInitMode+0x78>)
 8005d50:	f043 0320 	orr.w	r3, r3, #32
 8005d54:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	40002800 	.word	0x40002800

08005d64 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8005d72:	79fb      	ldrb	r3, [r7, #7]
 8005d74:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8005d76:	e005      	b.n	8005d84 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8005d7e:	7afb      	ldrb	r3, [r7, #11]
 8005d80:	3b0a      	subs	r3, #10
 8005d82:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8005d84:	7afb      	ldrb	r3, [r7, #11]
 8005d86:	2b09      	cmp	r3, #9
 8005d88:	d8f6      	bhi.n	8005d78 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	7afb      	ldrb	r3, [r7, #11]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	b2db      	uxtb	r3, r3
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bc80      	pop	{r7}
 8005da0:	4770      	bx	lr
	...

08005da4 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d101      	bne.n	8005dba <HAL_RTCEx_EnableBypassShadow+0x16>
 8005db6:	2302      	movs	r3, #2
 8005db8:	e01f      	b.n	8005dfa <HAL_RTCEx_EnableBypassShadow+0x56>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dca:	4b0e      	ldr	r3, [pc, #56]	@ (8005e04 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8005dcc:	22ca      	movs	r2, #202	@ 0xca
 8005dce:	625a      	str	r2, [r3, #36]	@ 0x24
 8005dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8005e04 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8005dd2:	2253      	movs	r2, #83	@ 0x53
 8005dd4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005e04 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	4a0a      	ldr	r2, [pc, #40]	@ (8005e04 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8005ddc:	f043 0320 	orr.w	r3, r3, #32
 8005de0:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005de2:	4b08      	ldr	r3, [pc, #32]	@ (8005e04 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8005de4:	22ff      	movs	r2, #255	@ 0xff
 8005de6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bc80      	pop	{r7}
 8005e02:	4770      	bx	lr
 8005e04:	40002800 	.word	0x40002800

08005e08 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d101      	bne.n	8005e1e <HAL_RTCEx_SetSSRU_IT+0x16>
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	e027      	b.n	8005e6e <HAL_RTCEx_SetSSRU_IT+0x66>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2202      	movs	r2, #2
 8005e2a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e2e:	4b12      	ldr	r3, [pc, #72]	@ (8005e78 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8005e30:	22ca      	movs	r2, #202	@ 0xca
 8005e32:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e34:	4b10      	ldr	r3, [pc, #64]	@ (8005e78 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8005e36:	2253      	movs	r2, #83	@ 0x53
 8005e38:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8005e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8005e78 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	4a0e      	ldr	r2, [pc, #56]	@ (8005e78 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8005e40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e44:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8005e46:	4b0d      	ldr	r3, [pc, #52]	@ (8005e7c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8005e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8005e7c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8005e4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e52:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e56:	4b08      	ldr	r3, [pc, #32]	@ (8005e78 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8005e58:	22ff      	movs	r2, #255	@ 0xff
 8005e5a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bc80      	pop	{r7}
 8005e76:	4770      	bx	lr
 8005e78:	40002800 	.word	0x40002800
 8005e7c:	58000800 	.word	0x58000800

08005e80 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8005e88:	4b09      	ldr	r3, [pc, #36]	@ (8005eb0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8005e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d005      	beq.n	8005ea0 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8005e94:	4b06      	ldr	r3, [pc, #24]	@ (8005eb0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8005e96:	2240      	movs	r2, #64	@ 0x40
 8005e98:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7fb f9ad 	bl	80011fa <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8005ea8:	bf00      	nop
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	40002800 	.word	0x40002800

08005eb4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bc80      	pop	{r7}
 8005ec4:	4770      	bx	lr
	...

08005ec8 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8005ed4:	4b07      	ldr	r3, [pc, #28]	@ (8005ef4 <HAL_RTCEx_BKUPWrite+0x2c>)
 8005ed6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	4413      	add	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	601a      	str	r2, [r3, #0]
}
 8005ee8:	bf00      	nop
 8005eea:	371c      	adds	r7, #28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bc80      	pop	{r7}
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	4000b100 	.word	0x4000b100

08005ef8 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8005f02:	4b07      	ldr	r3, [pc, #28]	@ (8005f20 <HAL_RTCEx_BKUPRead+0x28>)
 8005f04:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bc80      	pop	{r7}
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	4000b100 	.word	0x4000b100

08005f24 <LL_PWR_SetRadioBusyTrigger>:
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8005f2c:	4b06      	ldr	r3, [pc, #24]	@ (8005f48 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005f34:	4904      	ldr	r1, [pc, #16]	@ (8005f48 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	608b      	str	r3, [r1, #8]
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bc80      	pop	{r7}
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	58000400 	.word	0x58000400

08005f4c <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005f50:	4b05      	ldr	r3, [pc, #20]	@ (8005f68 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8005f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f56:	4a04      	ldr	r2, [pc, #16]	@ (8005f68 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8005f58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005f60:	bf00      	nop
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bc80      	pop	{r7}
 8005f66:	4770      	bx	lr
 8005f68:	58000400 	.word	0x58000400

08005f6c <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005f70:	4b05      	ldr	r3, [pc, #20]	@ (8005f88 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8005f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f76:	4a04      	ldr	r2, [pc, #16]	@ (8005f88 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8005f78:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005f7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005f80:	bf00      	nop
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bc80      	pop	{r7}
 8005f86:	4770      	bx	lr
 8005f88:	58000400 	.word	0x58000400

08005f8c <LL_PWR_ClearFlag_RFBUSY>:
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005f90:	4b03      	ldr	r3, [pc, #12]	@ (8005fa0 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8005f92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f96:	619a      	str	r2, [r3, #24]
}
 8005f98:	bf00      	nop
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bc80      	pop	{r7}
 8005f9e:	4770      	bx	lr
 8005fa0:	58000400 	.word	0x58000400

08005fa4 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005fa8:	4b06      	ldr	r3, [pc, #24]	@ (8005fc4 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d101      	bne.n	8005fb8 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e000      	b.n	8005fba <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bc80      	pop	{r7}
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	58000400 	.word	0x58000400

08005fc8 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8005fc8:	b480      	push	{r7}
 8005fca:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8005fcc:	4b06      	ldr	r3, [pc, #24]	@ (8005fe8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	2b04      	cmp	r3, #4
 8005fd6:	d101      	bne.n	8005fdc <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e000      	b.n	8005fde <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bc80      	pop	{r7}
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	58000400 	.word	0x58000400

08005fec <LL_RCC_RF_DisableReset>:
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005ff0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ff8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ffc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006000:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006004:	bf00      	nop
 8006006:	46bd      	mov	sp, r7
 8006008:	bc80      	pop	{r7}
 800600a:	4770      	bx	lr

0800600c <LL_RCC_IsRFUnderReset>:
{
 800600c:	b480      	push	{r7}
 800600e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006010:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006014:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006018:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800601c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006020:	d101      	bne.n	8006026 <LL_RCC_IsRFUnderReset+0x1a>
 8006022:	2301      	movs	r3, #1
 8006024:	e000      	b.n	8006028 <LL_RCC_IsRFUnderReset+0x1c>
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	46bd      	mov	sp, r7
 800602c:	bc80      	pop	{r7}
 800602e:	4770      	bx	lr

08006030 <LL_EXTI_EnableIT_32_63>:
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006038:	4b06      	ldr	r3, [pc, #24]	@ (8006054 <LL_EXTI_EnableIT_32_63+0x24>)
 800603a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800603e:	4905      	ldr	r1, [pc, #20]	@ (8006054 <LL_EXTI_EnableIT_32_63+0x24>)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4313      	orrs	r3, r2
 8006044:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	bc80      	pop	{r7}
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	58000800 	.word	0x58000800

08006058 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d103      	bne.n	800606e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	73fb      	strb	r3, [r7, #15]
    return status;
 800606a:	7bfb      	ldrb	r3, [r7, #15]
 800606c:	e052      	b.n	8006114 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	799b      	ldrb	r3, [r3, #6]
 8006076:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8006078:	7bbb      	ldrb	r3, [r7, #14]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d002      	beq.n	8006084 <HAL_SUBGHZ_Init+0x2c>
 800607e:	7bbb      	ldrb	r3, [r7, #14]
 8006080:	2b03      	cmp	r3, #3
 8006082:	d109      	bne.n	8006098 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7fa fe28 	bl	8000ce0 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8006090:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006094:	f7ff ffcc 	bl	8006030 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8006098:	7bbb      	ldrb	r3, [r7, #14]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d126      	bne.n	80060ec <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2202      	movs	r2, #2
 80060a2:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80060a4:	f7ff ffa2 	bl	8005fec <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80060a8:	4b1c      	ldr	r3, [pc, #112]	@ (800611c <HAL_SUBGHZ_Init+0xc4>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	4613      	mov	r3, r2
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	1a9b      	subs	r3, r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	0cdb      	lsrs	r3, r3, #19
 80060b6:	2264      	movs	r2, #100	@ 0x64
 80060b8:	fb02 f303 	mul.w	r3, r2, r3
 80060bc:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d105      	bne.n	80060d0 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	609a      	str	r2, [r3, #8]
        break;
 80060ce:	e007      	b.n	80060e0 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	3b01      	subs	r3, #1
 80060d4:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80060d6:	f7ff ff99 	bl	800600c <LL_RCC_IsRFUnderReset>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1ee      	bne.n	80060be <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80060e0:	f7ff ff34 	bl	8005f4c <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80060e4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80060e8:	f7ff ff1c 	bl	8005f24 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80060ec:	f7ff ff4e 	bl	8005f8c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10a      	bne.n	800610c <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 faac 	bl	8006658 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	719a      	strb	r2, [r3, #6]

  return status;
 8006112:	7bfb      	ldrb	r3, [r7, #15]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	20000008 	.word	0x20000008

08006120 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	607a      	str	r2, [r7, #4]
 800612a:	461a      	mov	r2, r3
 800612c:	460b      	mov	r3, r1
 800612e:	817b      	strh	r3, [r7, #10]
 8006130:	4613      	mov	r3, r2
 8006132:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	799b      	ldrb	r3, [r3, #6]
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b01      	cmp	r3, #1
 800613c:	d14a      	bne.n	80061d4 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	795b      	ldrb	r3, [r3, #5]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d101      	bne.n	800614a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8006146:	2302      	movs	r3, #2
 8006148:	e045      	b.n	80061d6 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2201      	movs	r2, #1
 800614e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2202      	movs	r2, #2
 8006154:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f000 fb4c 	bl	80067f4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800615c:	f7ff ff06 	bl	8005f6c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006160:	210d      	movs	r1, #13
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 fa98 	bl	8006698 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006168:	897b      	ldrh	r3, [r7, #10]
 800616a:	0a1b      	lsrs	r3, r3, #8
 800616c:	b29b      	uxth	r3, r3
 800616e:	b2db      	uxtb	r3, r3
 8006170:	4619      	mov	r1, r3
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 fa90 	bl	8006698 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006178:	897b      	ldrh	r3, [r7, #10]
 800617a:	b2db      	uxtb	r3, r3
 800617c:	4619      	mov	r1, r3
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f000 fa8a 	bl	8006698 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006184:	2300      	movs	r3, #0
 8006186:	82bb      	strh	r3, [r7, #20]
 8006188:	e00a      	b.n	80061a0 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800618a:	8abb      	ldrh	r3, [r7, #20]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	4413      	add	r3, r2
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	4619      	mov	r1, r3
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 fa7f 	bl	8006698 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800619a:	8abb      	ldrh	r3, [r7, #20]
 800619c:	3301      	adds	r3, #1
 800619e:	82bb      	strh	r3, [r7, #20]
 80061a0:	8aba      	ldrh	r2, [r7, #20]
 80061a2:	893b      	ldrh	r3, [r7, #8]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d3f0      	bcc.n	800618a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80061a8:	f7ff fed0 	bl	8005f4c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f000 fb45 	bl	800683c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	75fb      	strb	r3, [r7, #23]
 80061be:	e001      	b.n	80061c4 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2201      	movs	r2, #1
 80061c8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	715a      	strb	r2, [r3, #5]

    return status;
 80061d0:	7dfb      	ldrb	r3, [r7, #23]
 80061d2:	e000      	b.n	80061d6 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80061d4:	2302      	movs	r3, #2
  }
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3718      	adds	r7, #24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b088      	sub	sp, #32
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	60f8      	str	r0, [r7, #12]
 80061e6:	607a      	str	r2, [r7, #4]
 80061e8:	461a      	mov	r2, r3
 80061ea:	460b      	mov	r3, r1
 80061ec:	817b      	strh	r3, [r7, #10]
 80061ee:	4613      	mov	r3, r2
 80061f0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	799b      	ldrb	r3, [r3, #6]
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d14a      	bne.n	8006296 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	795b      	ldrb	r3, [r3, #5]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8006208:	2302      	movs	r3, #2
 800620a:	e045      	b.n	8006298 <HAL_SUBGHZ_ReadRegisters+0xba>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2201      	movs	r2, #1
 8006210:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 faee 	bl	80067f4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006218:	f7ff fea8 	bl	8005f6c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800621c:	211d      	movs	r1, #29
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 fa3a 	bl	8006698 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006224:	897b      	ldrh	r3, [r7, #10]
 8006226:	0a1b      	lsrs	r3, r3, #8
 8006228:	b29b      	uxth	r3, r3
 800622a:	b2db      	uxtb	r3, r3
 800622c:	4619      	mov	r1, r3
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 fa32 	bl	8006698 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006234:	897b      	ldrh	r3, [r7, #10]
 8006236:	b2db      	uxtb	r3, r3
 8006238:	4619      	mov	r1, r3
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f000 fa2c 	bl	8006698 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006240:	2100      	movs	r1, #0
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f000 fa28 	bl	8006698 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006248:	2300      	movs	r3, #0
 800624a:	82fb      	strh	r3, [r7, #22]
 800624c:	e009      	b.n	8006262 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800624e:	69b9      	ldr	r1, [r7, #24]
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 fa77 	bl	8006744 <SUBGHZSPI_Receive>
      pData++;
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	3301      	adds	r3, #1
 800625a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800625c:	8afb      	ldrh	r3, [r7, #22]
 800625e:	3301      	adds	r3, #1
 8006260:	82fb      	strh	r3, [r7, #22]
 8006262:	8afa      	ldrh	r2, [r7, #22]
 8006264:	893b      	ldrh	r3, [r7, #8]
 8006266:	429a      	cmp	r2, r3
 8006268:	d3f1      	bcc.n	800624e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800626a:	f7ff fe6f 	bl	8005f4c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f000 fae4 	bl	800683c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	77fb      	strb	r3, [r7, #31]
 8006280:	e001      	b.n	8006286 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2201      	movs	r2, #1
 800628a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	715a      	strb	r2, [r3, #5]

    return status;
 8006292:	7ffb      	ldrb	r3, [r7, #31]
 8006294:	e000      	b.n	8006298 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8006296:	2302      	movs	r3, #2
  }
}
 8006298:	4618      	mov	r0, r3
 800629a:	3720      	adds	r7, #32
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	607a      	str	r2, [r7, #4]
 80062aa:	461a      	mov	r2, r3
 80062ac:	460b      	mov	r3, r1
 80062ae:	72fb      	strb	r3, [r7, #11]
 80062b0:	4613      	mov	r3, r2
 80062b2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	799b      	ldrb	r3, [r3, #6]
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d14a      	bne.n	8006354 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	795b      	ldrb	r3, [r3, #5]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d101      	bne.n	80062ca <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80062c6:	2302      	movs	r3, #2
 80062c8:	e045      	b.n	8006356 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2201      	movs	r2, #1
 80062ce:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f000 fa8f 	bl	80067f4 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80062d6:	7afb      	ldrb	r3, [r7, #11]
 80062d8:	2b84      	cmp	r3, #132	@ 0x84
 80062da:	d002      	beq.n	80062e2 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80062dc:	7afb      	ldrb	r3, [r7, #11]
 80062de:	2b94      	cmp	r3, #148	@ 0x94
 80062e0:	d103      	bne.n	80062ea <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2201      	movs	r2, #1
 80062e6:	711a      	strb	r2, [r3, #4]
 80062e8:	e002      	b.n	80062f0 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80062f0:	f7ff fe3c 	bl	8005f6c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80062f4:	7afb      	ldrb	r3, [r7, #11]
 80062f6:	4619      	mov	r1, r3
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 f9cd 	bl	8006698 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80062fe:	2300      	movs	r3, #0
 8006300:	82bb      	strh	r3, [r7, #20]
 8006302:	e00a      	b.n	800631a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006304:	8abb      	ldrh	r3, [r7, #20]
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	4413      	add	r3, r2
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	4619      	mov	r1, r3
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f000 f9c2 	bl	8006698 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006314:	8abb      	ldrh	r3, [r7, #20]
 8006316:	3301      	adds	r3, #1
 8006318:	82bb      	strh	r3, [r7, #20]
 800631a:	8aba      	ldrh	r2, [r7, #20]
 800631c:	893b      	ldrh	r3, [r7, #8]
 800631e:	429a      	cmp	r2, r3
 8006320:	d3f0      	bcc.n	8006304 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006322:	f7ff fe13 	bl	8005f4c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8006326:	7afb      	ldrb	r3, [r7, #11]
 8006328:	2b84      	cmp	r3, #132	@ 0x84
 800632a:	d002      	beq.n	8006332 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 fa85 	bl	800683c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d002      	beq.n	8006340 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	75fb      	strb	r3, [r7, #23]
 800633e:	e001      	b.n	8006344 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006340:	2300      	movs	r3, #0
 8006342:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2201      	movs	r2, #1
 8006348:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	715a      	strb	r2, [r3, #5]

    return status;
 8006350:	7dfb      	ldrb	r3, [r7, #23]
 8006352:	e000      	b.n	8006356 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006354:	2302      	movs	r3, #2
  }
}
 8006356:	4618      	mov	r0, r3
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b088      	sub	sp, #32
 8006362:	af00      	add	r7, sp, #0
 8006364:	60f8      	str	r0, [r7, #12]
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	461a      	mov	r2, r3
 800636a:	460b      	mov	r3, r1
 800636c:	72fb      	strb	r3, [r7, #11]
 800636e:	4613      	mov	r3, r2
 8006370:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	799b      	ldrb	r3, [r3, #6]
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b01      	cmp	r3, #1
 800637e:	d13d      	bne.n	80063fc <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	795b      	ldrb	r3, [r3, #5]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d101      	bne.n	800638c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8006388:	2302      	movs	r3, #2
 800638a:	e038      	b.n	80063fe <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2201      	movs	r2, #1
 8006390:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 fa2e 	bl	80067f4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006398:	f7ff fde8 	bl	8005f6c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800639c:	7afb      	ldrb	r3, [r7, #11]
 800639e:	4619      	mov	r1, r3
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 f979 	bl	8006698 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80063a6:	2100      	movs	r1, #0
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f000 f975 	bl	8006698 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80063ae:	2300      	movs	r3, #0
 80063b0:	82fb      	strh	r3, [r7, #22]
 80063b2:	e009      	b.n	80063c8 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80063b4:	69b9      	ldr	r1, [r7, #24]
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f000 f9c4 	bl	8006744 <SUBGHZSPI_Receive>
      pData++;
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	3301      	adds	r3, #1
 80063c0:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80063c2:	8afb      	ldrh	r3, [r7, #22]
 80063c4:	3301      	adds	r3, #1
 80063c6:	82fb      	strh	r3, [r7, #22]
 80063c8:	8afa      	ldrh	r2, [r7, #22]
 80063ca:	893b      	ldrh	r3, [r7, #8]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d3f1      	bcc.n	80063b4 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80063d0:	f7ff fdbc 	bl	8005f4c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 fa31 	bl	800683c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	77fb      	strb	r3, [r7, #31]
 80063e6:	e001      	b.n	80063ec <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2201      	movs	r2, #1
 80063f0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	715a      	strb	r2, [r3, #5]

    return status;
 80063f8:	7ffb      	ldrb	r3, [r7, #31]
 80063fa:	e000      	b.n	80063fe <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80063fc:	2302      	movs	r3, #2
  }
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3720      	adds	r7, #32
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b086      	sub	sp, #24
 800640a:	af00      	add	r7, sp, #0
 800640c:	60f8      	str	r0, [r7, #12]
 800640e:	607a      	str	r2, [r7, #4]
 8006410:	461a      	mov	r2, r3
 8006412:	460b      	mov	r3, r1
 8006414:	72fb      	strb	r3, [r7, #11]
 8006416:	4613      	mov	r3, r2
 8006418:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	799b      	ldrb	r3, [r3, #6]
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b01      	cmp	r3, #1
 8006422:	d13e      	bne.n	80064a2 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	795b      	ldrb	r3, [r3, #5]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d101      	bne.n	8006430 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800642c:	2302      	movs	r3, #2
 800642e:	e039      	b.n	80064a4 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2201      	movs	r2, #1
 8006434:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f000 f9dc 	bl	80067f4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800643c:	f7ff fd96 	bl	8005f6c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8006440:	210e      	movs	r1, #14
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 f928 	bl	8006698 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006448:	7afb      	ldrb	r3, [r7, #11]
 800644a:	4619      	mov	r1, r3
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f000 f923 	bl	8006698 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006452:	2300      	movs	r3, #0
 8006454:	82bb      	strh	r3, [r7, #20]
 8006456:	e00a      	b.n	800646e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006458:	8abb      	ldrh	r3, [r7, #20]
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	4413      	add	r3, r2
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	4619      	mov	r1, r3
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 f918 	bl	8006698 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006468:	8abb      	ldrh	r3, [r7, #20]
 800646a:	3301      	adds	r3, #1
 800646c:	82bb      	strh	r3, [r7, #20]
 800646e:	8aba      	ldrh	r2, [r7, #20]
 8006470:	893b      	ldrh	r3, [r7, #8]
 8006472:	429a      	cmp	r2, r3
 8006474:	d3f0      	bcc.n	8006458 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006476:	f7ff fd69 	bl	8005f4c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f000 f9de 	bl	800683c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d002      	beq.n	800648e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	75fb      	strb	r3, [r7, #23]
 800648c:	e001      	b.n	8006492 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2201      	movs	r2, #1
 8006496:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	715a      	strb	r2, [r3, #5]

    return status;
 800649e:	7dfb      	ldrb	r3, [r7, #23]
 80064a0:	e000      	b.n	80064a4 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80064a2:	2302      	movs	r3, #2
  }
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	607a      	str	r2, [r7, #4]
 80064b6:	461a      	mov	r2, r3
 80064b8:	460b      	mov	r3, r1
 80064ba:	72fb      	strb	r3, [r7, #11]
 80064bc:	4613      	mov	r3, r2
 80064be:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	799b      	ldrb	r3, [r3, #6]
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d141      	bne.n	8006552 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	795b      	ldrb	r3, [r3, #5]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d101      	bne.n	80064da <HAL_SUBGHZ_ReadBuffer+0x2e>
 80064d6:	2302      	movs	r3, #2
 80064d8:	e03c      	b.n	8006554 <HAL_SUBGHZ_ReadBuffer+0xa8>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2201      	movs	r2, #1
 80064de:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 f987 	bl	80067f4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80064e6:	f7ff fd41 	bl	8005f6c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80064ea:	211e      	movs	r1, #30
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 f8d3 	bl	8006698 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80064f2:	7afb      	ldrb	r3, [r7, #11]
 80064f4:	4619      	mov	r1, r3
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f000 f8ce 	bl	8006698 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80064fc:	2100      	movs	r1, #0
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f000 f8ca 	bl	8006698 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006504:	2300      	movs	r3, #0
 8006506:	82fb      	strh	r3, [r7, #22]
 8006508:	e009      	b.n	800651e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800650a:	69b9      	ldr	r1, [r7, #24]
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 f919 	bl	8006744 <SUBGHZSPI_Receive>
      pData++;
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	3301      	adds	r3, #1
 8006516:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006518:	8afb      	ldrh	r3, [r7, #22]
 800651a:	3301      	adds	r3, #1
 800651c:	82fb      	strh	r3, [r7, #22]
 800651e:	8afa      	ldrh	r2, [r7, #22]
 8006520:	893b      	ldrh	r3, [r7, #8]
 8006522:	429a      	cmp	r2, r3
 8006524:	d3f1      	bcc.n	800650a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006526:	f7ff fd11 	bl	8005f4c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 f986 	bl	800683c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	77fb      	strb	r3, [r7, #31]
 800653c:	e001      	b.n	8006542 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2201      	movs	r2, #1
 8006546:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	715a      	strb	r2, [r3, #5]

    return status;
 800654e:	7ffb      	ldrb	r3, [r7, #31]
 8006550:	e000      	b.n	8006554 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006552:	2302      	movs	r3, #2
  }
}
 8006554:	4618      	mov	r0, r3
 8006556:	3720      	adds	r7, #32
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8006564:	2300      	movs	r3, #0
 8006566:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8006568:	f107 020c 	add.w	r2, r7, #12
 800656c:	2302      	movs	r3, #2
 800656e:	2112      	movs	r1, #18
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff fef4 	bl	800635e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8006576:	7b3b      	ldrb	r3, [r7, #12]
 8006578:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800657a:	89fb      	ldrh	r3, [r7, #14]
 800657c:	021b      	lsls	r3, r3, #8
 800657e:	b21a      	sxth	r2, r3
 8006580:	7b7b      	ldrb	r3, [r7, #13]
 8006582:	b21b      	sxth	r3, r3
 8006584:	4313      	orrs	r3, r2
 8006586:	b21b      	sxth	r3, r3
 8006588:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800658a:	f107 020c 	add.w	r2, r7, #12
 800658e:	2302      	movs	r3, #2
 8006590:	2102      	movs	r1, #2
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7ff fe84 	bl	80062a0 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8006598:	89fb      	ldrh	r3, [r7, #14]
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d002      	beq.n	80065a8 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f005 fbf0 	bl	800bd88 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80065a8:	89fb      	ldrh	r3, [r7, #14]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f005 fbf6 	bl	800bda4 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80065b8:	89fb      	ldrh	r3, [r7, #14]
 80065ba:	f003 0304 	and.w	r3, r3, #4
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d002      	beq.n	80065c8 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f005 fc46 	bl	800be54 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80065c8:	89fb      	ldrh	r3, [r7, #14]
 80065ca:	f003 0308 	and.w	r3, r3, #8
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f005 fc4c 	bl	800be70 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80065d8:	89fb      	ldrh	r3, [r7, #14]
 80065da:	f003 0310 	and.w	r3, r3, #16
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f005 fc52 	bl	800be8c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80065e8:	89fb      	ldrh	r3, [r7, #14]
 80065ea:	f003 0320 	and.w	r3, r3, #32
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f005 fc20 	bl	800be38 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80065f8:	89fb      	ldrh	r3, [r7, #14]
 80065fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f005 fbdc 	bl	800bdc0 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8006608:	89fb      	ldrh	r3, [r7, #14]
 800660a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00d      	beq.n	800662e <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8006612:	89fb      	ldrh	r3, [r7, #14]
 8006614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006618:	2b00      	cmp	r3, #0
 800661a:	d004      	beq.n	8006626 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800661c:	2101      	movs	r1, #1
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f005 fbdc 	bl	800bddc <HAL_SUBGHZ_CADStatusCallback>
 8006624:	e003      	b.n	800662e <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8006626:	2100      	movs	r1, #0
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f005 fbd7 	bl	800bddc <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800662e:	89fb      	ldrh	r3, [r7, #14]
 8006630:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f005 fbed 	bl	800be18 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800663e:	89fb      	ldrh	r3, [r7, #14]
 8006640:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d002      	beq.n	800664e <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f005 fc2d 	bl	800bea8 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800664e:	bf00      	nop
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
	...

08006658 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006660:	4b0c      	ldr	r3, [pc, #48]	@ (8006694 <SUBGHZSPI_Init+0x3c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a0b      	ldr	r2, [pc, #44]	@ (8006694 <SUBGHZSPI_Init+0x3c>)
 8006666:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800666a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800666c:	4a09      	ldr	r2, [pc, #36]	@ (8006694 <SUBGHZSPI_Init+0x3c>)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8006674:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8006676:	4b07      	ldr	r3, [pc, #28]	@ (8006694 <SUBGHZSPI_Init+0x3c>)
 8006678:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 800667c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800667e:	4b05      	ldr	r3, [pc, #20]	@ (8006694 <SUBGHZSPI_Init+0x3c>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a04      	ldr	r2, [pc, #16]	@ (8006694 <SUBGHZSPI_Init+0x3c>)
 8006684:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006688:	6013      	str	r3, [r2, #0]
}
 800668a:	bf00      	nop
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	bc80      	pop	{r7}
 8006692:	4770      	bx	lr
 8006694:	58010000 	.word	0x58010000

08006698 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006698:	b480      	push	{r7}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	460b      	mov	r3, r1
 80066a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80066a4:	2300      	movs	r3, #0
 80066a6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80066a8:	4b23      	ldr	r3, [pc, #140]	@ (8006738 <SUBGHZSPI_Transmit+0xa0>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	4613      	mov	r3, r2
 80066ae:	00db      	lsls	r3, r3, #3
 80066b0:	1a9b      	subs	r3, r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	0cdb      	lsrs	r3, r3, #19
 80066b6:	2264      	movs	r2, #100	@ 0x64
 80066b8:	fb02 f303 	mul.w	r3, r2, r3
 80066bc:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d105      	bne.n	80066d0 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	609a      	str	r2, [r3, #8]
      break;
 80066ce:	e008      	b.n	80066e2 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	3b01      	subs	r3, #1
 80066d4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80066d6:	4b19      	ldr	r3, [pc, #100]	@ (800673c <SUBGHZSPI_Transmit+0xa4>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d1ed      	bne.n	80066be <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80066e2:	4b17      	ldr	r3, [pc, #92]	@ (8006740 <SUBGHZSPI_Transmit+0xa8>)
 80066e4:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	78fa      	ldrb	r2, [r7, #3]
 80066ea:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80066ec:	4b12      	ldr	r3, [pc, #72]	@ (8006738 <SUBGHZSPI_Transmit+0xa0>)
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	4613      	mov	r3, r2
 80066f2:	00db      	lsls	r3, r3, #3
 80066f4:	1a9b      	subs	r3, r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	0cdb      	lsrs	r3, r3, #19
 80066fa:	2264      	movs	r2, #100	@ 0x64
 80066fc:	fb02 f303 	mul.w	r3, r2, r3
 8006700:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d105      	bne.n	8006714 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	609a      	str	r2, [r3, #8]
      break;
 8006712:	e008      	b.n	8006726 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	3b01      	subs	r3, #1
 8006718:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800671a:	4b08      	ldr	r3, [pc, #32]	@ (800673c <SUBGHZSPI_Transmit+0xa4>)
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b01      	cmp	r3, #1
 8006724:	d1ed      	bne.n	8006702 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006726:	4b05      	ldr	r3, [pc, #20]	@ (800673c <SUBGHZSPI_Transmit+0xa4>)
 8006728:	68db      	ldr	r3, [r3, #12]

  return status;
 800672a:	7dfb      	ldrb	r3, [r7, #23]
}
 800672c:	4618      	mov	r0, r3
 800672e:	371c      	adds	r7, #28
 8006730:	46bd      	mov	sp, r7
 8006732:	bc80      	pop	{r7}
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	20000008 	.word	0x20000008
 800673c:	58010000 	.word	0x58010000
 8006740:	5801000c 	.word	0x5801000c

08006744 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800674e:	2300      	movs	r3, #0
 8006750:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006752:	4b25      	ldr	r3, [pc, #148]	@ (80067e8 <SUBGHZSPI_Receive+0xa4>)
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	4613      	mov	r3, r2
 8006758:	00db      	lsls	r3, r3, #3
 800675a:	1a9b      	subs	r3, r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	0cdb      	lsrs	r3, r3, #19
 8006760:	2264      	movs	r2, #100	@ 0x64
 8006762:	fb02 f303 	mul.w	r3, r2, r3
 8006766:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d105      	bne.n	800677a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	609a      	str	r2, [r3, #8]
      break;
 8006778:	e008      	b.n	800678c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	3b01      	subs	r3, #1
 800677e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006780:	4b1a      	ldr	r3, [pc, #104]	@ (80067ec <SUBGHZSPI_Receive+0xa8>)
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	2b02      	cmp	r3, #2
 800678a:	d1ed      	bne.n	8006768 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800678c:	4b18      	ldr	r3, [pc, #96]	@ (80067f0 <SUBGHZSPI_Receive+0xac>)
 800678e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	22ff      	movs	r2, #255	@ 0xff
 8006794:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006796:	4b14      	ldr	r3, [pc, #80]	@ (80067e8 <SUBGHZSPI_Receive+0xa4>)
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	4613      	mov	r3, r2
 800679c:	00db      	lsls	r3, r3, #3
 800679e:	1a9b      	subs	r3, r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	0cdb      	lsrs	r3, r3, #19
 80067a4:	2264      	movs	r2, #100	@ 0x64
 80067a6:	fb02 f303 	mul.w	r3, r2, r3
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d105      	bne.n	80067be <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	609a      	str	r2, [r3, #8]
      break;
 80067bc:	e008      	b.n	80067d0 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	3b01      	subs	r3, #1
 80067c2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80067c4:	4b09      	ldr	r3, [pc, #36]	@ (80067ec <SUBGHZSPI_Receive+0xa8>)
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d1ed      	bne.n	80067ac <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80067d0:	4b06      	ldr	r3, [pc, #24]	@ (80067ec <SUBGHZSPI_Receive+0xa8>)
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	701a      	strb	r2, [r3, #0]

  return status;
 80067da:	7dfb      	ldrb	r3, [r7, #23]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	371c      	adds	r7, #28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bc80      	pop	{r7}
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	20000008 	.word	0x20000008
 80067ec:	58010000 	.word	0x58010000
 80067f0:	5801000c 	.word	0x5801000c

080067f4 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	791b      	ldrb	r3, [r3, #4]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d111      	bne.n	8006828 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8006804:	4b0c      	ldr	r3, [pc, #48]	@ (8006838 <SUBGHZ_CheckDeviceReady+0x44>)
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	4613      	mov	r3, r2
 800680a:	005b      	lsls	r3, r3, #1
 800680c:	4413      	add	r3, r2
 800680e:	00db      	lsls	r3, r3, #3
 8006810:	0c1b      	lsrs	r3, r3, #16
 8006812:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006814:	f7ff fbaa 	bl	8005f6c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3b01      	subs	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1f9      	bne.n	8006818 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006824:	f7ff fb92 	bl	8005f4c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f807 	bl	800683c <SUBGHZ_WaitOnBusy>
 800682e:	4603      	mov	r3, r0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	20000008 	.word	0x20000008

0800683c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8006844:	2300      	movs	r3, #0
 8006846:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8006848:	4b12      	ldr	r3, [pc, #72]	@ (8006894 <SUBGHZ_WaitOnBusy+0x58>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	4613      	mov	r3, r2
 800684e:	005b      	lsls	r3, r3, #1
 8006850:	4413      	add	r3, r2
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	0d1b      	lsrs	r3, r3, #20
 8006856:	2264      	movs	r2, #100	@ 0x64
 8006858:	fb02 f303 	mul.w	r3, r2, r3
 800685c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800685e:	f7ff fbb3 	bl	8005fc8 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8006862:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d105      	bne.n	8006876 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2202      	movs	r2, #2
 8006872:	609a      	str	r2, [r3, #8]
      break;
 8006874:	e009      	b.n	800688a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	3b01      	subs	r3, #1
 800687a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800687c:	f7ff fb92 	bl	8005fa4 <LL_PWR_IsActiveFlag_RFBUSYS>
 8006880:	4602      	mov	r2, r0
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	4013      	ands	r3, r2
 8006886:	2b01      	cmp	r3, #1
 8006888:	d0e9      	beq.n	800685e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800688a:	7dfb      	ldrb	r3, [r7, #23]
}
 800688c:	4618      	mov	r0, r3
 800688e:	3718      	adds	r7, #24
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	20000008 	.word	0x20000008

08006898 <LL_RCC_GetUSARTClockSource>:
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80068a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	401a      	ands	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	041b      	lsls	r3, r3, #16
 80068b0:	4313      	orrs	r3, r2
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bc80      	pop	{r7}
 80068ba:	4770      	bx	lr

080068bc <LL_RCC_GetLPUARTClockSource>:
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80068c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4013      	ands	r3, r2
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bc80      	pop	{r7}
 80068d8:	4770      	bx	lr

080068da <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b082      	sub	sp, #8
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e042      	b.n	8006972 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d106      	bne.n	8006904 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7fa fde0 	bl	80014c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2224      	movs	r2, #36	@ 0x24
 8006908:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 0201 	bic.w	r2, r2, #1
 800691a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fc3b 	bl	8007198 <UART_SetConfig>
 8006922:	4603      	mov	r3, r0
 8006924:	2b01      	cmp	r3, #1
 8006926:	d101      	bne.n	800692c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e022      	b.n	8006972 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fea3 	bl	8007680 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006948:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006958:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f042 0201 	orr.w	r2, r2, #1
 8006968:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 ff29 	bl	80077c2 <UART_CheckIdleState>
 8006970:	4603      	mov	r3, r0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
	...

0800697c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b08a      	sub	sp, #40	@ 0x28
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	4613      	mov	r3, r2
 8006988:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006990:	2b20      	cmp	r3, #32
 8006992:	d137      	bne.n	8006a04 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d002      	beq.n	80069a0 <HAL_UART_Receive_IT+0x24>
 800699a:	88fb      	ldrh	r3, [r7, #6]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e030      	b.n	8006a06 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a18      	ldr	r2, [pc, #96]	@ (8006a10 <HAL_UART_Receive_IT+0x94>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d01f      	beq.n	80069f4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d018      	beq.n	80069f4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	e853 3f00 	ldrex	r3, [r3]
 80069ce:	613b      	str	r3, [r7, #16]
   return(result);
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80069d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	461a      	mov	r2, r3
 80069de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e0:	623b      	str	r3, [r7, #32]
 80069e2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e4:	69f9      	ldr	r1, [r7, #28]
 80069e6:	6a3a      	ldr	r2, [r7, #32]
 80069e8:	e841 2300 	strex	r3, r2, [r1]
 80069ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1e6      	bne.n	80069c2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80069f4:	88fb      	ldrh	r3, [r7, #6]
 80069f6:	461a      	mov	r2, r3
 80069f8:	68b9      	ldr	r1, [r7, #8]
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f000 fff8 	bl	80079f0 <UART_Start_Receive_IT>
 8006a00:	4603      	mov	r3, r0
 8006a02:	e000      	b.n	8006a06 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006a04:	2302      	movs	r3, #2
  }
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3728      	adds	r7, #40	@ 0x28
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	40008000 	.word	0x40008000

08006a14 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b08a      	sub	sp, #40	@ 0x28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a28:	2b20      	cmp	r3, #32
 8006a2a:	d167      	bne.n	8006afc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d002      	beq.n	8006a38 <HAL_UART_Transmit_DMA+0x24>
 8006a32:	88fb      	ldrh	r3, [r7, #6]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e060      	b.n	8006afe <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	88fa      	ldrh	r2, [r7, #6]
 8006a46:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	88fa      	ldrh	r2, [r7, #6]
 8006a4e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2221      	movs	r2, #33	@ 0x21
 8006a5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d028      	beq.n	8006abc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a6e:	4a26      	ldr	r2, [pc, #152]	@ (8006b08 <HAL_UART_Transmit_DMA+0xf4>)
 8006a70:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a76:	4a25      	ldr	r2, [pc, #148]	@ (8006b0c <HAL_UART_Transmit_DMA+0xf8>)
 8006a78:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a7e:	4a24      	ldr	r2, [pc, #144]	@ (8006b10 <HAL_UART_Transmit_DMA+0xfc>)
 8006a80:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a86:	2200      	movs	r2, #0
 8006a88:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a92:	4619      	mov	r1, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3328      	adds	r3, #40	@ 0x28
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	88fb      	ldrh	r3, [r7, #6]
 8006a9e:	f7fb fa25 	bl	8001eec <HAL_DMA_Start_IT>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d009      	beq.n	8006abc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2210      	movs	r2, #16
 8006aac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e020      	b.n	8006afe <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2240      	movs	r2, #64	@ 0x40
 8006ac2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	3308      	adds	r3, #8
 8006aca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	e853 3f00 	ldrex	r3, [r3]
 8006ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ada:	627b      	str	r3, [r7, #36]	@ 0x24
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	3308      	adds	r3, #8
 8006ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ae4:	623a      	str	r2, [r7, #32]
 8006ae6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	69f9      	ldr	r1, [r7, #28]
 8006aea:	6a3a      	ldr	r2, [r7, #32]
 8006aec:	e841 2300 	strex	r3, r2, [r1]
 8006af0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e5      	bne.n	8006ac4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	e000      	b.n	8006afe <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006afc:	2302      	movs	r3, #2
  }
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3728      	adds	r7, #40	@ 0x28
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	08007d7b 	.word	0x08007d7b
 8006b0c:	08007e15 	.word	0x08007e15
 8006b10:	08007e31 	.word	0x08007e31

08006b14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b0ba      	sub	sp, #232	@ 0xe8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006b3e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006b42:	4013      	ands	r3, r2
 8006b44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006b48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d11b      	bne.n	8006b88 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b54:	f003 0320 	and.w	r3, r3, #32
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d015      	beq.n	8006b88 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b60:	f003 0320 	and.w	r3, r3, #32
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d105      	bne.n	8006b74 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d009      	beq.n	8006b88 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 82e3 	beq.w	8007144 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	4798      	blx	r3
      }
      return;
 8006b86:	e2dd      	b.n	8007144 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 8123 	beq.w	8006dd8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006b92:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006b96:	4b8d      	ldr	r3, [pc, #564]	@ (8006dcc <HAL_UART_IRQHandler+0x2b8>)
 8006b98:	4013      	ands	r3, r2
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d106      	bne.n	8006bac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006b9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006ba2:	4b8b      	ldr	r3, [pc, #556]	@ (8006dd0 <HAL_UART_IRQHandler+0x2bc>)
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f000 8116 	beq.w	8006dd8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bb0:	f003 0301 	and.w	r3, r3, #1
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d011      	beq.n	8006bdc <HAL_UART_IRQHandler+0xc8>
 8006bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00b      	beq.n	8006bdc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bd2:	f043 0201 	orr.w	r2, r3, #1
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006be0:	f003 0302 	and.w	r3, r3, #2
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d011      	beq.n	8006c0c <HAL_UART_IRQHandler+0xf8>
 8006be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00b      	beq.n	8006c0c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c02:	f043 0204 	orr.w	r2, r3, #4
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c10:	f003 0304 	and.w	r3, r3, #4
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d011      	beq.n	8006c3c <HAL_UART_IRQHandler+0x128>
 8006c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00b      	beq.n	8006c3c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2204      	movs	r2, #4
 8006c2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c32:	f043 0202 	orr.w	r2, r3, #2
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c40:	f003 0308 	and.w	r3, r3, #8
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d017      	beq.n	8006c78 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c4c:	f003 0320 	and.w	r3, r3, #32
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d105      	bne.n	8006c60 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006c54:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006c58:	4b5c      	ldr	r3, [pc, #368]	@ (8006dcc <HAL_UART_IRQHandler+0x2b8>)
 8006c5a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00b      	beq.n	8006c78 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2208      	movs	r2, #8
 8006c66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c6e:	f043 0208 	orr.w	r2, r3, #8
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d012      	beq.n	8006caa <HAL_UART_IRQHandler+0x196>
 8006c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00c      	beq.n	8006caa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ca0:	f043 0220 	orr.w	r2, r3, #32
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 8249 	beq.w	8007148 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cba:	f003 0320 	and.w	r3, r3, #32
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d013      	beq.n	8006cea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cc6:	f003 0320 	and.w	r3, r3, #32
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d105      	bne.n	8006cda <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d007      	beq.n	8006cea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cf0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cfe:	2b40      	cmp	r3, #64	@ 0x40
 8006d00:	d005      	beq.n	8006d0e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d06:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d054      	beq.n	8006db8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 ffce 	bl	8007cb0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d1e:	2b40      	cmp	r3, #64	@ 0x40
 8006d20:	d146      	bne.n	8006db0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3308      	adds	r3, #8
 8006d28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006d30:	e853 3f00 	ldrex	r3, [r3]
 8006d34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006d38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	3308      	adds	r3, #8
 8006d4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006d4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006d52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006d5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006d66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1d9      	bne.n	8006d22 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d017      	beq.n	8006da8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d7e:	4a15      	ldr	r2, [pc, #84]	@ (8006dd4 <HAL_UART_IRQHandler+0x2c0>)
 8006d80:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7fb f98b 	bl	80020a4 <HAL_DMA_Abort_IT>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d019      	beq.n	8006dc8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006da2:	4610      	mov	r0, r2
 8006da4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da6:	e00f      	b.n	8006dc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 f9e0 	bl	800716e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dae:	e00b      	b.n	8006dc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 f9dc 	bl	800716e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db6:	e007      	b.n	8006dc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f9d8 	bl	800716e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006dc6:	e1bf      	b.n	8007148 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc8:	bf00      	nop
    return;
 8006dca:	e1bd      	b.n	8007148 <HAL_UART_IRQHandler+0x634>
 8006dcc:	10000001 	.word	0x10000001
 8006dd0:	04000120 	.word	0x04000120
 8006dd4:	08007eb1 	.word	0x08007eb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	f040 8153 	bne.w	8007088 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006de6:	f003 0310 	and.w	r3, r3, #16
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f000 814c 	beq.w	8007088 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006df4:	f003 0310 	and.w	r3, r3, #16
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f000 8145 	beq.w	8007088 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2210      	movs	r2, #16
 8006e04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e10:	2b40      	cmp	r3, #64	@ 0x40
 8006e12:	f040 80bb 	bne.w	8006f8c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 818f 	beq.w	800714c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	f080 8187 	bcs.w	800714c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0320 	and.w	r3, r3, #32
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f040 8087 	bne.w	8006f6a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006e70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	461a      	mov	r2, r3
 8006e82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006e8a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006e92:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1da      	bne.n	8006e5c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	3308      	adds	r3, #8
 8006eac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006eb0:	e853 3f00 	ldrex	r3, [r3]
 8006eb4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006eb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006eb8:	f023 0301 	bic.w	r3, r3, #1
 8006ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3308      	adds	r3, #8
 8006ec6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006eca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006ece:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006ed2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006ed6:	e841 2300 	strex	r3, r2, [r1]
 8006eda:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006edc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1e1      	bne.n	8006ea6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	3308      	adds	r3, #8
 8006ee8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006eec:	e853 3f00 	ldrex	r3, [r3]
 8006ef0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006ef2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ef4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	3308      	adds	r3, #8
 8006f02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006f06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006f08:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006f0c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006f0e:	e841 2300 	strex	r3, r2, [r1]
 8006f12:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006f14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1e3      	bne.n	8006ee2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f30:	e853 3f00 	ldrex	r3, [r3]
 8006f34:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f38:	f023 0310 	bic.w	r3, r3, #16
 8006f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	461a      	mov	r2, r3
 8006f46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f4c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f52:	e841 2300 	strex	r3, r2, [r1]
 8006f56:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1e4      	bne.n	8006f28 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fb f83f 	bl	8001fe8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	4619      	mov	r1, r3
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f8fb 	bl	8007180 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f8a:	e0df      	b.n	800714c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 80d1 	beq.w	8007150 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006fae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f000 80cc 	beq.w	8007150 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc0:	e853 3f00 	ldrex	r3, [r3]
 8006fc4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fcc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006fda:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fdc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fde:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006fe0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fe2:	e841 2300 	strex	r3, r2, [r1]
 8006fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1e4      	bne.n	8006fb8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3308      	adds	r3, #8
 8006ff4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff8:	e853 3f00 	ldrex	r3, [r3]
 8006ffc:	623b      	str	r3, [r7, #32]
   return(result);
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007004:	f023 0301 	bic.w	r3, r3, #1
 8007008:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	3308      	adds	r3, #8
 8007012:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007016:	633a      	str	r2, [r7, #48]	@ 0x30
 8007018:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800701c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800701e:	e841 2300 	strex	r3, r2, [r1]
 8007022:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1e1      	bne.n	8006fee <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2220      	movs	r2, #32
 800702e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	e853 3f00 	ldrex	r3, [r3]
 800704a:	60fb      	str	r3, [r7, #12]
   return(result);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f023 0310 	bic.w	r3, r3, #16
 8007052:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	461a      	mov	r2, r3
 800705c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007060:	61fb      	str	r3, [r7, #28]
 8007062:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007064:	69b9      	ldr	r1, [r7, #24]
 8007066:	69fa      	ldr	r2, [r7, #28]
 8007068:	e841 2300 	strex	r3, r2, [r1]
 800706c:	617b      	str	r3, [r7, #20]
   return(result);
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1e4      	bne.n	800703e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800707a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f87d 	bl	8007180 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007086:	e063      	b.n	8007150 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800708c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00e      	beq.n	80070b2 <HAL_UART_IRQHandler+0x59e>
 8007094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007098:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d008      	beq.n	80070b2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80070a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f001 fc5e 	bl	800896c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070b0:	e051      	b.n	8007156 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80070b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d014      	beq.n	80070e8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80070be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d105      	bne.n	80070d6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80070ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d008      	beq.n	80070e8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d03a      	beq.n	8007154 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	4798      	blx	r3
    }
    return;
 80070e6:	e035      	b.n	8007154 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80070e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d009      	beq.n	8007108 <HAL_UART_IRQHandler+0x5f4>
 80070f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d003      	beq.n	8007108 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 feeb 	bl	8007edc <UART_EndTransmit_IT>
    return;
 8007106:	e026      	b.n	8007156 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800710c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d009      	beq.n	8007128 <HAL_UART_IRQHandler+0x614>
 8007114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007118:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d003      	beq.n	8007128 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 fc35 	bl	8008990 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007126:	e016      	b.n	8007156 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800712c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007130:	2b00      	cmp	r3, #0
 8007132:	d010      	beq.n	8007156 <HAL_UART_IRQHandler+0x642>
 8007134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007138:	2b00      	cmp	r3, #0
 800713a:	da0c      	bge.n	8007156 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 fc1e 	bl	800897e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007142:	e008      	b.n	8007156 <HAL_UART_IRQHandler+0x642>
      return;
 8007144:	bf00      	nop
 8007146:	e006      	b.n	8007156 <HAL_UART_IRQHandler+0x642>
    return;
 8007148:	bf00      	nop
 800714a:	e004      	b.n	8007156 <HAL_UART_IRQHandler+0x642>
      return;
 800714c:	bf00      	nop
 800714e:	e002      	b.n	8007156 <HAL_UART_IRQHandler+0x642>
      return;
 8007150:	bf00      	nop
 8007152:	e000      	b.n	8007156 <HAL_UART_IRQHandler+0x642>
    return;
 8007154:	bf00      	nop
  }
}
 8007156:	37e8      	adds	r7, #232	@ 0xe8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	bc80      	pop	{r7}
 800716c:	4770      	bx	lr

0800716e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800716e:	b480      	push	{r7}
 8007170:	b083      	sub	sp, #12
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007176:	bf00      	nop
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	bc80      	pop	{r7}
 800717e:	4770      	bx	lr

08007180 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	460b      	mov	r3, r1
 800718a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	bc80      	pop	{r7}
 8007194:	4770      	bx	lr
	...

08007198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800719c:	b08c      	sub	sp, #48	@ 0x30
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	689a      	ldr	r2, [r3, #8]
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	431a      	orrs	r2, r3
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	431a      	orrs	r2, r3
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	4313      	orrs	r3, r2
 80071be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	4b94      	ldr	r3, [pc, #592]	@ (8007418 <UART_SetConfig+0x280>)
 80071c8:	4013      	ands	r3, r2
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	6812      	ldr	r2, [r2, #0]
 80071ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071d0:	430b      	orrs	r3, r1
 80071d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	68da      	ldr	r2, [r3, #12]
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a89      	ldr	r2, [pc, #548]	@ (800741c <UART_SetConfig+0x284>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d004      	beq.n	8007204 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007200:	4313      	orrs	r3, r2
 8007202:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800720e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	6812      	ldr	r2, [r2, #0]
 8007216:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007218:	430b      	orrs	r3, r1
 800721a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007222:	f023 010f 	bic.w	r1, r3, #15
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a7a      	ldr	r2, [pc, #488]	@ (8007420 <UART_SetConfig+0x288>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d127      	bne.n	800728c <UART_SetConfig+0xf4>
 800723c:	2003      	movs	r0, #3
 800723e:	f7ff fb2b 	bl	8006898 <LL_RCC_GetUSARTClockSource>
 8007242:	4603      	mov	r3, r0
 8007244:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8007248:	2b03      	cmp	r3, #3
 800724a:	d81b      	bhi.n	8007284 <UART_SetConfig+0xec>
 800724c:	a201      	add	r2, pc, #4	@ (adr r2, 8007254 <UART_SetConfig+0xbc>)
 800724e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007252:	bf00      	nop
 8007254:	08007265 	.word	0x08007265
 8007258:	08007275 	.word	0x08007275
 800725c:	0800726d 	.word	0x0800726d
 8007260:	0800727d 	.word	0x0800727d
 8007264:	2301      	movs	r3, #1
 8007266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800726a:	e080      	b.n	800736e <UART_SetConfig+0x1d6>
 800726c:	2302      	movs	r3, #2
 800726e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007272:	e07c      	b.n	800736e <UART_SetConfig+0x1d6>
 8007274:	2304      	movs	r3, #4
 8007276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800727a:	e078      	b.n	800736e <UART_SetConfig+0x1d6>
 800727c:	2308      	movs	r3, #8
 800727e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007282:	e074      	b.n	800736e <UART_SetConfig+0x1d6>
 8007284:	2310      	movs	r3, #16
 8007286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800728a:	e070      	b.n	800736e <UART_SetConfig+0x1d6>
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a64      	ldr	r2, [pc, #400]	@ (8007424 <UART_SetConfig+0x28c>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d138      	bne.n	8007308 <UART_SetConfig+0x170>
 8007296:	200c      	movs	r0, #12
 8007298:	f7ff fafe 	bl	8006898 <LL_RCC_GetUSARTClockSource>
 800729c:	4603      	mov	r3, r0
 800729e:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80072a2:	2b0c      	cmp	r3, #12
 80072a4:	d82c      	bhi.n	8007300 <UART_SetConfig+0x168>
 80072a6:	a201      	add	r2, pc, #4	@ (adr r2, 80072ac <UART_SetConfig+0x114>)
 80072a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ac:	080072e1 	.word	0x080072e1
 80072b0:	08007301 	.word	0x08007301
 80072b4:	08007301 	.word	0x08007301
 80072b8:	08007301 	.word	0x08007301
 80072bc:	080072f1 	.word	0x080072f1
 80072c0:	08007301 	.word	0x08007301
 80072c4:	08007301 	.word	0x08007301
 80072c8:	08007301 	.word	0x08007301
 80072cc:	080072e9 	.word	0x080072e9
 80072d0:	08007301 	.word	0x08007301
 80072d4:	08007301 	.word	0x08007301
 80072d8:	08007301 	.word	0x08007301
 80072dc:	080072f9 	.word	0x080072f9
 80072e0:	2300      	movs	r3, #0
 80072e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072e6:	e042      	b.n	800736e <UART_SetConfig+0x1d6>
 80072e8:	2302      	movs	r3, #2
 80072ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072ee:	e03e      	b.n	800736e <UART_SetConfig+0x1d6>
 80072f0:	2304      	movs	r3, #4
 80072f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072f6:	e03a      	b.n	800736e <UART_SetConfig+0x1d6>
 80072f8:	2308      	movs	r3, #8
 80072fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072fe:	e036      	b.n	800736e <UART_SetConfig+0x1d6>
 8007300:	2310      	movs	r3, #16
 8007302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007306:	e032      	b.n	800736e <UART_SetConfig+0x1d6>
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a43      	ldr	r2, [pc, #268]	@ (800741c <UART_SetConfig+0x284>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d12a      	bne.n	8007368 <UART_SetConfig+0x1d0>
 8007312:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8007316:	f7ff fad1 	bl	80068bc <LL_RCC_GetLPUARTClockSource>
 800731a:	4603      	mov	r3, r0
 800731c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007320:	d01a      	beq.n	8007358 <UART_SetConfig+0x1c0>
 8007322:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007326:	d81b      	bhi.n	8007360 <UART_SetConfig+0x1c8>
 8007328:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800732c:	d00c      	beq.n	8007348 <UART_SetConfig+0x1b0>
 800732e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007332:	d815      	bhi.n	8007360 <UART_SetConfig+0x1c8>
 8007334:	2b00      	cmp	r3, #0
 8007336:	d003      	beq.n	8007340 <UART_SetConfig+0x1a8>
 8007338:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800733c:	d008      	beq.n	8007350 <UART_SetConfig+0x1b8>
 800733e:	e00f      	b.n	8007360 <UART_SetConfig+0x1c8>
 8007340:	2300      	movs	r3, #0
 8007342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007346:	e012      	b.n	800736e <UART_SetConfig+0x1d6>
 8007348:	2302      	movs	r3, #2
 800734a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800734e:	e00e      	b.n	800736e <UART_SetConfig+0x1d6>
 8007350:	2304      	movs	r3, #4
 8007352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007356:	e00a      	b.n	800736e <UART_SetConfig+0x1d6>
 8007358:	2308      	movs	r3, #8
 800735a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800735e:	e006      	b.n	800736e <UART_SetConfig+0x1d6>
 8007360:	2310      	movs	r3, #16
 8007362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007366:	e002      	b.n	800736e <UART_SetConfig+0x1d6>
 8007368:	2310      	movs	r3, #16
 800736a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a2a      	ldr	r2, [pc, #168]	@ (800741c <UART_SetConfig+0x284>)
 8007374:	4293      	cmp	r3, r2
 8007376:	f040 80a4 	bne.w	80074c2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800737a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800737e:	2b08      	cmp	r3, #8
 8007380:	d823      	bhi.n	80073ca <UART_SetConfig+0x232>
 8007382:	a201      	add	r2, pc, #4	@ (adr r2, 8007388 <UART_SetConfig+0x1f0>)
 8007384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007388:	080073ad 	.word	0x080073ad
 800738c:	080073cb 	.word	0x080073cb
 8007390:	080073b5 	.word	0x080073b5
 8007394:	080073cb 	.word	0x080073cb
 8007398:	080073bb 	.word	0x080073bb
 800739c:	080073cb 	.word	0x080073cb
 80073a0:	080073cb 	.word	0x080073cb
 80073a4:	080073cb 	.word	0x080073cb
 80073a8:	080073c3 	.word	0x080073c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073ac:	f7fd ff4a 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 80073b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073b2:	e010      	b.n	80073d6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073b4:	4b1c      	ldr	r3, [pc, #112]	@ (8007428 <UART_SetConfig+0x290>)
 80073b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80073b8:	e00d      	b.n	80073d6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073ba:	f7fd fe8f 	bl	80050dc <HAL_RCC_GetSysClockFreq>
 80073be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073c0:	e009      	b.n	80073d6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80073c8:	e005      	b.n	80073d6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80073ca:	2300      	movs	r3, #0
 80073cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80073d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 8137 	beq.w	800764c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e2:	4a12      	ldr	r2, [pc, #72]	@ (800742c <UART_SetConfig+0x294>)
 80073e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073e8:	461a      	mov	r2, r3
 80073ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80073f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	4613      	mov	r3, r2
 80073f8:	005b      	lsls	r3, r3, #1
 80073fa:	4413      	add	r3, r2
 80073fc:	69ba      	ldr	r2, [r7, #24]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d305      	bcc.n	800740e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007408:	69ba      	ldr	r2, [r7, #24]
 800740a:	429a      	cmp	r2, r3
 800740c:	d910      	bls.n	8007430 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007414:	e11a      	b.n	800764c <UART_SetConfig+0x4b4>
 8007416:	bf00      	nop
 8007418:	cfff69f3 	.word	0xcfff69f3
 800741c:	40008000 	.word	0x40008000
 8007420:	40013800 	.word	0x40013800
 8007424:	40004400 	.word	0x40004400
 8007428:	00f42400 	.word	0x00f42400
 800742c:	0800dc34 	.word	0x0800dc34
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007432:	2200      	movs	r2, #0
 8007434:	60bb      	str	r3, [r7, #8]
 8007436:	60fa      	str	r2, [r7, #12]
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800743c:	4a8e      	ldr	r2, [pc, #568]	@ (8007678 <UART_SetConfig+0x4e0>)
 800743e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007442:	b29b      	uxth	r3, r3
 8007444:	2200      	movs	r2, #0
 8007446:	603b      	str	r3, [r7, #0]
 8007448:	607a      	str	r2, [r7, #4]
 800744a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800744e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007452:	f7f8 fe99 	bl	8000188 <__aeabi_uldivmod>
 8007456:	4602      	mov	r2, r0
 8007458:	460b      	mov	r3, r1
 800745a:	4610      	mov	r0, r2
 800745c:	4619      	mov	r1, r3
 800745e:	f04f 0200 	mov.w	r2, #0
 8007462:	f04f 0300 	mov.w	r3, #0
 8007466:	020b      	lsls	r3, r1, #8
 8007468:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800746c:	0202      	lsls	r2, r0, #8
 800746e:	6979      	ldr	r1, [r7, #20]
 8007470:	6849      	ldr	r1, [r1, #4]
 8007472:	0849      	lsrs	r1, r1, #1
 8007474:	2000      	movs	r0, #0
 8007476:	460c      	mov	r4, r1
 8007478:	4605      	mov	r5, r0
 800747a:	eb12 0804 	adds.w	r8, r2, r4
 800747e:	eb43 0905 	adc.w	r9, r3, r5
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	469a      	mov	sl, r3
 800748a:	4693      	mov	fp, r2
 800748c:	4652      	mov	r2, sl
 800748e:	465b      	mov	r3, fp
 8007490:	4640      	mov	r0, r8
 8007492:	4649      	mov	r1, r9
 8007494:	f7f8 fe78 	bl	8000188 <__aeabi_uldivmod>
 8007498:	4602      	mov	r2, r0
 800749a:	460b      	mov	r3, r1
 800749c:	4613      	mov	r3, r2
 800749e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074a6:	d308      	bcc.n	80074ba <UART_SetConfig+0x322>
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074ae:	d204      	bcs.n	80074ba <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	6a3a      	ldr	r2, [r7, #32]
 80074b6:	60da      	str	r2, [r3, #12]
 80074b8:	e0c8      	b.n	800764c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80074c0:	e0c4      	b.n	800764c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	69db      	ldr	r3, [r3, #28]
 80074c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074ca:	d167      	bne.n	800759c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80074cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80074d0:	2b08      	cmp	r3, #8
 80074d2:	d828      	bhi.n	8007526 <UART_SetConfig+0x38e>
 80074d4:	a201      	add	r2, pc, #4	@ (adr r2, 80074dc <UART_SetConfig+0x344>)
 80074d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074da:	bf00      	nop
 80074dc:	08007501 	.word	0x08007501
 80074e0:	08007509 	.word	0x08007509
 80074e4:	08007511 	.word	0x08007511
 80074e8:	08007527 	.word	0x08007527
 80074ec:	08007517 	.word	0x08007517
 80074f0:	08007527 	.word	0x08007527
 80074f4:	08007527 	.word	0x08007527
 80074f8:	08007527 	.word	0x08007527
 80074fc:	0800751f 	.word	0x0800751f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007500:	f7fd fea0 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 8007504:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007506:	e014      	b.n	8007532 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007508:	f7fd feae 	bl	8005268 <HAL_RCC_GetPCLK2Freq>
 800750c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800750e:	e010      	b.n	8007532 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007510:	4b5a      	ldr	r3, [pc, #360]	@ (800767c <UART_SetConfig+0x4e4>)
 8007512:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007514:	e00d      	b.n	8007532 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007516:	f7fd fde1 	bl	80050dc <HAL_RCC_GetSysClockFreq>
 800751a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800751c:	e009      	b.n	8007532 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800751e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007522:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007524:	e005      	b.n	8007532 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8007526:	2300      	movs	r3, #0
 8007528:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007530:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 8089 	beq.w	800764c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800753e:	4a4e      	ldr	r2, [pc, #312]	@ (8007678 <UART_SetConfig+0x4e0>)
 8007540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007544:	461a      	mov	r2, r3
 8007546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007548:	fbb3 f3f2 	udiv	r3, r3, r2
 800754c:	005a      	lsls	r2, r3, #1
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	085b      	lsrs	r3, r3, #1
 8007554:	441a      	add	r2, r3
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	fbb2 f3f3 	udiv	r3, r2, r3
 800755e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007560:	6a3b      	ldr	r3, [r7, #32]
 8007562:	2b0f      	cmp	r3, #15
 8007564:	d916      	bls.n	8007594 <UART_SetConfig+0x3fc>
 8007566:	6a3b      	ldr	r3, [r7, #32]
 8007568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800756c:	d212      	bcs.n	8007594 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800756e:	6a3b      	ldr	r3, [r7, #32]
 8007570:	b29b      	uxth	r3, r3
 8007572:	f023 030f 	bic.w	r3, r3, #15
 8007576:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	085b      	lsrs	r3, r3, #1
 800757c:	b29b      	uxth	r3, r3
 800757e:	f003 0307 	and.w	r3, r3, #7
 8007582:	b29a      	uxth	r2, r3
 8007584:	8bfb      	ldrh	r3, [r7, #30]
 8007586:	4313      	orrs	r3, r2
 8007588:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	8bfa      	ldrh	r2, [r7, #30]
 8007590:	60da      	str	r2, [r3, #12]
 8007592:	e05b      	b.n	800764c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800759a:	e057      	b.n	800764c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800759c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80075a0:	2b08      	cmp	r3, #8
 80075a2:	d828      	bhi.n	80075f6 <UART_SetConfig+0x45e>
 80075a4:	a201      	add	r2, pc, #4	@ (adr r2, 80075ac <UART_SetConfig+0x414>)
 80075a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075aa:	bf00      	nop
 80075ac:	080075d1 	.word	0x080075d1
 80075b0:	080075d9 	.word	0x080075d9
 80075b4:	080075e1 	.word	0x080075e1
 80075b8:	080075f7 	.word	0x080075f7
 80075bc:	080075e7 	.word	0x080075e7
 80075c0:	080075f7 	.word	0x080075f7
 80075c4:	080075f7 	.word	0x080075f7
 80075c8:	080075f7 	.word	0x080075f7
 80075cc:	080075ef 	.word	0x080075ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075d0:	f7fd fe38 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 80075d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075d6:	e014      	b.n	8007602 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075d8:	f7fd fe46 	bl	8005268 <HAL_RCC_GetPCLK2Freq>
 80075dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075de:	e010      	b.n	8007602 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075e0:	4b26      	ldr	r3, [pc, #152]	@ (800767c <UART_SetConfig+0x4e4>)
 80075e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80075e4:	e00d      	b.n	8007602 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075e6:	f7fd fd79 	bl	80050dc <HAL_RCC_GetSysClockFreq>
 80075ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075ec:	e009      	b.n	8007602 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80075f4:	e005      	b.n	8007602 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80075f6:	2300      	movs	r3, #0
 80075f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007600:	bf00      	nop
    }

    if (pclk != 0U)
 8007602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007604:	2b00      	cmp	r3, #0
 8007606:	d021      	beq.n	800764c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800760c:	4a1a      	ldr	r2, [pc, #104]	@ (8007678 <UART_SetConfig+0x4e0>)
 800760e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007612:	461a      	mov	r2, r3
 8007614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007616:	fbb3 f2f2 	udiv	r2, r3, r2
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	085b      	lsrs	r3, r3, #1
 8007620:	441a      	add	r2, r3
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	fbb2 f3f3 	udiv	r3, r2, r3
 800762a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800762c:	6a3b      	ldr	r3, [r7, #32]
 800762e:	2b0f      	cmp	r3, #15
 8007630:	d909      	bls.n	8007646 <UART_SetConfig+0x4ae>
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007638:	d205      	bcs.n	8007646 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800763a:	6a3b      	ldr	r3, [r7, #32]
 800763c:	b29a      	uxth	r2, r3
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	60da      	str	r2, [r3, #12]
 8007644:	e002      	b.n	800764c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	2201      	movs	r2, #1
 8007650:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	2201      	movs	r2, #1
 8007658:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	2200      	movs	r2, #0
 8007660:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	2200      	movs	r2, #0
 8007666:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007668:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800766c:	4618      	mov	r0, r3
 800766e:	3730      	adds	r7, #48	@ 0x30
 8007670:	46bd      	mov	sp, r7
 8007672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007676:	bf00      	nop
 8007678:	0800dc34 	.word	0x0800dc34
 800767c:	00f42400 	.word	0x00f42400

08007680 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00a      	beq.n	80076aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00a      	beq.n	80076cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d0:	f003 0304 	and.w	r3, r3, #4
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00a      	beq.n	80076ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	430a      	orrs	r2, r1
 80076ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076f2:	f003 0308 	and.w	r3, r3, #8
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00a      	beq.n	8007710 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	430a      	orrs	r2, r1
 800770e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007714:	f003 0310 	and.w	r3, r3, #16
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00a      	beq.n	8007732 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	430a      	orrs	r2, r1
 8007730:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007736:	f003 0320 	and.w	r3, r3, #32
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00a      	beq.n	8007754 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	430a      	orrs	r2, r1
 8007752:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800775c:	2b00      	cmp	r3, #0
 800775e:	d01a      	beq.n	8007796 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	430a      	orrs	r2, r1
 8007774:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800777a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800777e:	d10a      	bne.n	8007796 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	430a      	orrs	r2, r1
 8007794:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800779a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00a      	beq.n	80077b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	430a      	orrs	r2, r1
 80077b6:	605a      	str	r2, [r3, #4]
  }
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	bc80      	pop	{r7}
 80077c0:	4770      	bx	lr

080077c2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b086      	sub	sp, #24
 80077c6:	af02      	add	r7, sp, #8
 80077c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077d2:	f7f9 fb17 	bl	8000e04 <HAL_GetTick>
 80077d6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0308 	and.w	r3, r3, #8
 80077e2:	2b08      	cmp	r3, #8
 80077e4:	d10e      	bne.n	8007804 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f832 	bl	800785e <UART_WaitOnFlagUntilTimeout>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e028      	b.n	8007856 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0304 	and.w	r3, r3, #4
 800780e:	2b04      	cmp	r3, #4
 8007810:	d10e      	bne.n	8007830 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007812:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f81c 	bl	800785e <UART_WaitOnFlagUntilTimeout>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d001      	beq.n	8007830 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	e012      	b.n	8007856 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2220      	movs	r2, #32
 8007834:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2220      	movs	r2, #32
 800783c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b09c      	sub	sp, #112	@ 0x70
 8007862:	af00      	add	r7, sp, #0
 8007864:	60f8      	str	r0, [r7, #12]
 8007866:	60b9      	str	r1, [r7, #8]
 8007868:	603b      	str	r3, [r7, #0]
 800786a:	4613      	mov	r3, r2
 800786c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800786e:	e0a9      	b.n	80079c4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007870:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007876:	f000 80a5 	beq.w	80079c4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800787a:	f7f9 fac3 	bl	8000e04 <HAL_GetTick>
 800787e:	4602      	mov	r2, r0
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007886:	429a      	cmp	r2, r3
 8007888:	d302      	bcc.n	8007890 <UART_WaitOnFlagUntilTimeout+0x32>
 800788a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800788c:	2b00      	cmp	r3, #0
 800788e:	d140      	bne.n	8007912 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007896:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007898:	e853 3f00 	ldrex	r3, [r3]
 800789c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800789e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078a0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80078a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	461a      	mov	r2, r3
 80078ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078b0:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80078b4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80078b6:	e841 2300 	strex	r3, r2, [r1]
 80078ba:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80078bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1e6      	bne.n	8007890 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3308      	adds	r3, #8
 80078c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078cc:	e853 3f00 	ldrex	r3, [r3]
 80078d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d4:	f023 0301 	bic.w	r3, r3, #1
 80078d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3308      	adds	r3, #8
 80078e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80078e2:	64ba      	str	r2, [r7, #72]	@ 0x48
 80078e4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80078e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078ea:	e841 2300 	strex	r3, r2, [r1]
 80078ee:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80078f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1e5      	bne.n	80078c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2220      	movs	r2, #32
 80078fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2220      	movs	r2, #32
 8007902:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e069      	b.n	80079e6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 0304 	and.w	r3, r3, #4
 800791c:	2b00      	cmp	r3, #0
 800791e:	d051      	beq.n	80079c4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	69db      	ldr	r3, [r3, #28]
 8007926:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800792a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800792e:	d149      	bne.n	80079c4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007938:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007942:	e853 3f00 	ldrex	r3, [r3]
 8007946:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800794e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	461a      	mov	r2, r3
 8007956:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007958:	637b      	str	r3, [r7, #52]	@ 0x34
 800795a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800795e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007960:	e841 2300 	strex	r3, r2, [r1]
 8007964:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1e6      	bne.n	800793a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	3308      	adds	r3, #8
 8007972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	e853 3f00 	ldrex	r3, [r3]
 800797a:	613b      	str	r3, [r7, #16]
   return(result);
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	f023 0301 	bic.w	r3, r3, #1
 8007982:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3308      	adds	r3, #8
 800798a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800798c:	623a      	str	r2, [r7, #32]
 800798e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007990:	69f9      	ldr	r1, [r7, #28]
 8007992:	6a3a      	ldr	r2, [r7, #32]
 8007994:	e841 2300 	strex	r3, r2, [r1]
 8007998:	61bb      	str	r3, [r7, #24]
   return(result);
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1e5      	bne.n	800796c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2220      	movs	r2, #32
 80079a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2220      	movs	r2, #32
 80079ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2220      	movs	r2, #32
 80079b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e010      	b.n	80079e6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	69da      	ldr	r2, [r3, #28]
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	4013      	ands	r3, r2
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	bf0c      	ite	eq
 80079d4:	2301      	moveq	r3, #1
 80079d6:	2300      	movne	r3, #0
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	461a      	mov	r2, r3
 80079dc:	79fb      	ldrb	r3, [r7, #7]
 80079de:	429a      	cmp	r2, r3
 80079e0:	f43f af46 	beq.w	8007870 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3770      	adds	r7, #112	@ 0x70
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
	...

080079f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b0a3      	sub	sp, #140	@ 0x8c
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	4613      	mov	r3, r2
 80079fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	88fa      	ldrh	r2, [r7, #6]
 8007a08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	88fa      	ldrh	r2, [r7, #6]
 8007a10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a22:	d10e      	bne.n	8007a42 <UART_Start_Receive_IT+0x52>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d105      	bne.n	8007a38 <UART_Start_Receive_IT+0x48>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007a32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007a36:	e02d      	b.n	8007a94 <UART_Start_Receive_IT+0xa4>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	22ff      	movs	r2, #255	@ 0xff
 8007a3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007a40:	e028      	b.n	8007a94 <UART_Start_Receive_IT+0xa4>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10d      	bne.n	8007a66 <UART_Start_Receive_IT+0x76>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d104      	bne.n	8007a5c <UART_Start_Receive_IT+0x6c>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	22ff      	movs	r2, #255	@ 0xff
 8007a56:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007a5a:	e01b      	b.n	8007a94 <UART_Start_Receive_IT+0xa4>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	227f      	movs	r2, #127	@ 0x7f
 8007a60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007a64:	e016      	b.n	8007a94 <UART_Start_Receive_IT+0xa4>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a6e:	d10d      	bne.n	8007a8c <UART_Start_Receive_IT+0x9c>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d104      	bne.n	8007a82 <UART_Start_Receive_IT+0x92>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	227f      	movs	r2, #127	@ 0x7f
 8007a7c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007a80:	e008      	b.n	8007a94 <UART_Start_Receive_IT+0xa4>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	223f      	movs	r2, #63	@ 0x3f
 8007a86:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007a8a:	e003      	b.n	8007a94 <UART_Start_Receive_IT+0xa4>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2222      	movs	r2, #34	@ 0x22
 8007aa0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3308      	adds	r3, #8
 8007aaa:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007aae:	e853 3f00 	ldrex	r3, [r3]
 8007ab2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007ab4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ab6:	f043 0301 	orr.w	r3, r3, #1
 8007aba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3308      	adds	r3, #8
 8007ac4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007ac8:	673a      	str	r2, [r7, #112]	@ 0x70
 8007aca:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007acc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007ace:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007ad0:	e841 2300 	strex	r3, r2, [r1]
 8007ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007ad6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1e3      	bne.n	8007aa4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ae0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ae4:	d14f      	bne.n	8007b86 <UART_Start_Receive_IT+0x196>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007aec:	88fa      	ldrh	r2, [r7, #6]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d349      	bcc.n	8007b86 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007afa:	d107      	bne.n	8007b0c <UART_Start_Receive_IT+0x11c>
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d103      	bne.n	8007b0c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	4a46      	ldr	r2, [pc, #280]	@ (8007c20 <UART_Start_Receive_IT+0x230>)
 8007b08:	675a      	str	r2, [r3, #116]	@ 0x74
 8007b0a:	e002      	b.n	8007b12 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4a45      	ldr	r2, [pc, #276]	@ (8007c24 <UART_Start_Receive_IT+0x234>)
 8007b10:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d01a      	beq.n	8007b50 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b22:	e853 3f00 	ldrex	r3, [r3]
 8007b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007b28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	461a      	mov	r2, r3
 8007b38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007b3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b3e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b40:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007b42:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007b44:	e841 2300 	strex	r3, r2, [r1]
 8007b48:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007b4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1e4      	bne.n	8007b1a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	3308      	adds	r3, #8
 8007b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b5a:	e853 3f00 	ldrex	r3, [r3]
 8007b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b66:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3308      	adds	r3, #8
 8007b6e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007b70:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007b72:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b74:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007b76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b78:	e841 2300 	strex	r3, r2, [r1]
 8007b7c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007b7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1e5      	bne.n	8007b50 <UART_Start_Receive_IT+0x160>
 8007b84:	e046      	b.n	8007c14 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b8e:	d107      	bne.n	8007ba0 <UART_Start_Receive_IT+0x1b0>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d103      	bne.n	8007ba0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	4a23      	ldr	r2, [pc, #140]	@ (8007c28 <UART_Start_Receive_IT+0x238>)
 8007b9c:	675a      	str	r2, [r3, #116]	@ 0x74
 8007b9e:	e002      	b.n	8007ba6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	4a22      	ldr	r2, [pc, #136]	@ (8007c2c <UART_Start_Receive_IT+0x23c>)
 8007ba4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d019      	beq.n	8007be2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb6:	e853 3f00 	ldrex	r3, [r3]
 8007bba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bbe:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007bc2:	677b      	str	r3, [r7, #116]	@ 0x74
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	461a      	mov	r2, r3
 8007bca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007bcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bce:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007bd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007bd4:	e841 2300 	strex	r3, r2, [r1]
 8007bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1e6      	bne.n	8007bae <UART_Start_Receive_IT+0x1be>
 8007be0:	e018      	b.n	8007c14 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	e853 3f00 	ldrex	r3, [r3]
 8007bee:	613b      	str	r3, [r7, #16]
   return(result);
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	f043 0320 	orr.w	r3, r3, #32
 8007bf6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c00:	623b      	str	r3, [r7, #32]
 8007c02:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c04:	69f9      	ldr	r1, [r7, #28]
 8007c06:	6a3a      	ldr	r2, [r7, #32]
 8007c08:	e841 2300 	strex	r3, r2, [r1]
 8007c0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1e6      	bne.n	8007be2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	378c      	adds	r7, #140	@ 0x8c
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bc80      	pop	{r7}
 8007c1e:	4770      	bx	lr
 8007c20:	08008605 	.word	0x08008605
 8007c24:	080082a5 	.word	0x080082a5
 8007c28:	080080ed 	.word	0x080080ed
 8007c2c:	08007f35 	.word	0x08007f35

08007c30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b08f      	sub	sp, #60	@ 0x3c
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3e:	6a3b      	ldr	r3, [r7, #32]
 8007c40:	e853 3f00 	ldrex	r3, [r3]
 8007c44:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	461a      	mov	r2, r3
 8007c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c58:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c5e:	e841 2300 	strex	r3, r2, [r1]
 8007c62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1e6      	bne.n	8007c38 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	3308      	adds	r3, #8
 8007c70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	e853 3f00 	ldrex	r3, [r3]
 8007c78:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007c80:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	3308      	adds	r3, #8
 8007c88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c8a:	61ba      	str	r2, [r7, #24]
 8007c8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8e:	6979      	ldr	r1, [r7, #20]
 8007c90:	69ba      	ldr	r2, [r7, #24]
 8007c92:	e841 2300 	strex	r3, r2, [r1]
 8007c96:	613b      	str	r3, [r7, #16]
   return(result);
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1e5      	bne.n	8007c6a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2220      	movs	r2, #32
 8007ca2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007ca6:	bf00      	nop
 8007ca8:	373c      	adds	r7, #60	@ 0x3c
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bc80      	pop	{r7}
 8007cae:	4770      	bx	lr

08007cb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b095      	sub	sp, #84	@ 0x54
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ccc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cd8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007cdc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007cde:	e841 2300 	strex	r3, r2, [r1]
 8007ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1e6      	bne.n	8007cb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3308      	adds	r3, #8
 8007cf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf2:	6a3b      	ldr	r3, [r7, #32]
 8007cf4:	e853 3f00 	ldrex	r3, [r3]
 8007cf8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d00:	f023 0301 	bic.w	r3, r3, #1
 8007d04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3308      	adds	r3, #8
 8007d0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d16:	e841 2300 	strex	r3, r2, [r1]
 8007d1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1e3      	bne.n	8007cea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d118      	bne.n	8007d5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	e853 3f00 	ldrex	r3, [r3]
 8007d36:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	f023 0310 	bic.w	r3, r3, #16
 8007d3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	461a      	mov	r2, r3
 8007d46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d48:	61bb      	str	r3, [r7, #24]
 8007d4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4c:	6979      	ldr	r1, [r7, #20]
 8007d4e:	69ba      	ldr	r2, [r7, #24]
 8007d50:	e841 2300 	strex	r3, r2, [r1]
 8007d54:	613b      	str	r3, [r7, #16]
   return(result);
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1e6      	bne.n	8007d2a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2220      	movs	r2, #32
 8007d60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007d70:	bf00      	nop
 8007d72:	3754      	adds	r7, #84	@ 0x54
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bc80      	pop	{r7}
 8007d78:	4770      	bx	lr

08007d7a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b090      	sub	sp, #64	@ 0x40
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d86:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0320 	and.w	r3, r3, #32
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d137      	bne.n	8007e06 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	3308      	adds	r3, #8
 8007da4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da8:	e853 3f00 	ldrex	r3, [r3]
 8007dac:	623b      	str	r3, [r7, #32]
   return(result);
 8007dae:	6a3b      	ldr	r3, [r7, #32]
 8007db0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007db4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	3308      	adds	r3, #8
 8007dbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007dbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8007dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007dc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dc6:	e841 2300 	strex	r3, r2, [r1]
 8007dca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1e5      	bne.n	8007d9e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	e853 3f00 	ldrex	r3, [r3]
 8007dde:	60fb      	str	r3, [r7, #12]
   return(result);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	461a      	mov	r2, r3
 8007dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007df0:	61fb      	str	r3, [r7, #28]
 8007df2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df4:	69b9      	ldr	r1, [r7, #24]
 8007df6:	69fa      	ldr	r2, [r7, #28]
 8007df8:	e841 2300 	strex	r3, r2, [r1]
 8007dfc:	617b      	str	r3, [r7, #20]
   return(result);
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1e6      	bne.n	8007dd2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e04:	e002      	b.n	8007e0c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007e06:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007e08:	f7f9 fcc8 	bl	800179c <HAL_UART_TxCpltCallback>
}
 8007e0c:	bf00      	nop
 8007e0e:	3740      	adds	r7, #64	@ 0x40
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e20:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f7ff f99a 	bl	800715c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e28:	bf00      	nop
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e3c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e44:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e4c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e58:	2b80      	cmp	r3, #128	@ 0x80
 8007e5a:	d109      	bne.n	8007e70 <UART_DMAError+0x40>
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	2b21      	cmp	r3, #33	@ 0x21
 8007e60:	d106      	bne.n	8007e70 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007e6a:	6978      	ldr	r0, [r7, #20]
 8007e6c:	f7ff fee0 	bl	8007c30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e7a:	2b40      	cmp	r3, #64	@ 0x40
 8007e7c:	d109      	bne.n	8007e92 <UART_DMAError+0x62>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2b22      	cmp	r3, #34	@ 0x22
 8007e82:	d106      	bne.n	8007e92 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007e8c:	6978      	ldr	r0, [r7, #20]
 8007e8e:	f7ff ff0f 	bl	8007cb0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e98:	f043 0210 	orr.w	r2, r3, #16
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ea2:	6978      	ldr	r0, [r7, #20]
 8007ea4:	f7ff f963 	bl	800716e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ea8:	bf00      	nop
 8007eaa:	3718      	adds	r7, #24
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ebc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f7ff f94d 	bl	800716e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ed4:	bf00      	nop
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b088      	sub	sp, #32
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	e853 3f00 	ldrex	r3, [r3]
 8007ef0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ef8:	61fb      	str	r3, [r7, #28]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	461a      	mov	r2, r3
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	61bb      	str	r3, [r7, #24]
 8007f04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f06:	6979      	ldr	r1, [r7, #20]
 8007f08:	69ba      	ldr	r2, [r7, #24]
 8007f0a:	e841 2300 	strex	r3, r2, [r1]
 8007f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1e6      	bne.n	8007ee4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2220      	movs	r2, #32
 8007f1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f7f9 fc39 	bl	800179c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f2a:	bf00      	nop
 8007f2c:	3720      	adds	r7, #32
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
	...

08007f34 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b09c      	sub	sp, #112	@ 0x70
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007f42:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f4c:	2b22      	cmp	r3, #34	@ 0x22
 8007f4e:	f040 80be 	bne.w	80080ce <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f58:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007f60:	b2d9      	uxtb	r1, r3
 8007f62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007f66:	b2da      	uxtb	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f6c:	400a      	ands	r2, r1
 8007f6e:	b2d2      	uxtb	r2, r2
 8007f70:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f76:	1c5a      	adds	r2, r3, #1
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	3b01      	subs	r3, #1
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f040 80a1 	bne.w	80080de <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fa4:	e853 3f00 	ldrex	r3, [r3]
 8007fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007faa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007fba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007fbc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007fc0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007fc2:	e841 2300 	strex	r3, r2, [r1]
 8007fc6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007fc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1e6      	bne.n	8007f9c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	3308      	adds	r3, #8
 8007fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd8:	e853 3f00 	ldrex	r3, [r3]
 8007fdc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fe0:	f023 0301 	bic.w	r3, r3, #1
 8007fe4:	667b      	str	r3, [r7, #100]	@ 0x64
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	3308      	adds	r3, #8
 8007fec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007fee:	647a      	str	r2, [r7, #68]	@ 0x44
 8007ff0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ff4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ff6:	e841 2300 	strex	r3, r2, [r1]
 8007ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1e5      	bne.n	8007fce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2220      	movs	r2, #32
 8008006:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a33      	ldr	r2, [pc, #204]	@ (80080e8 <UART_RxISR_8BIT+0x1b4>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d01f      	beq.n	8008060 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d018      	beq.n	8008060 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008036:	e853 3f00 	ldrex	r3, [r3]
 800803a:	623b      	str	r3, [r7, #32]
   return(result);
 800803c:	6a3b      	ldr	r3, [r7, #32]
 800803e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008042:	663b      	str	r3, [r7, #96]	@ 0x60
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	461a      	mov	r2, r3
 800804a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800804c:	633b      	str	r3, [r7, #48]	@ 0x30
 800804e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008050:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008052:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008054:	e841 2300 	strex	r3, r2, [r1]
 8008058:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800805a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1e6      	bne.n	800802e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008064:	2b01      	cmp	r3, #1
 8008066:	d12e      	bne.n	80080c6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	e853 3f00 	ldrex	r3, [r3]
 800807a:	60fb      	str	r3, [r7, #12]
   return(result);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f023 0310 	bic.w	r3, r3, #16
 8008082:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	461a      	mov	r2, r3
 800808a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800808c:	61fb      	str	r3, [r7, #28]
 800808e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008090:	69b9      	ldr	r1, [r7, #24]
 8008092:	69fa      	ldr	r2, [r7, #28]
 8008094:	e841 2300 	strex	r3, r2, [r1]
 8008098:	617b      	str	r3, [r7, #20]
   return(result);
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d1e6      	bne.n	800806e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	f003 0310 	and.w	r3, r3, #16
 80080aa:	2b10      	cmp	r3, #16
 80080ac:	d103      	bne.n	80080b6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2210      	movs	r2, #16
 80080b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80080bc:	4619      	mov	r1, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7ff f85e 	bl	8007180 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080c4:	e00b      	b.n	80080de <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7f9 fb7e 	bl	80017c8 <HAL_UART_RxCpltCallback>
}
 80080cc:	e007      	b.n	80080de <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	699a      	ldr	r2, [r3, #24]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f042 0208 	orr.w	r2, r2, #8
 80080dc:	619a      	str	r2, [r3, #24]
}
 80080de:	bf00      	nop
 80080e0:	3770      	adds	r7, #112	@ 0x70
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	40008000 	.word	0x40008000

080080ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b09c      	sub	sp, #112	@ 0x70
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80080fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008104:	2b22      	cmp	r3, #34	@ 0x22
 8008106:	f040 80be 	bne.w	8008286 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008110:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008118:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800811a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800811e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008122:	4013      	ands	r3, r2
 8008124:	b29a      	uxth	r2, r3
 8008126:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008128:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800812e:	1c9a      	adds	r2, r3, #2
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800813a:	b29b      	uxth	r3, r3
 800813c:	3b01      	subs	r3, #1
 800813e:	b29a      	uxth	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800814c:	b29b      	uxth	r3, r3
 800814e:	2b00      	cmp	r3, #0
 8008150:	f040 80a1 	bne.w	8008296 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800815c:	e853 3f00 	ldrex	r3, [r3]
 8008160:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008162:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008164:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008168:	667b      	str	r3, [r7, #100]	@ 0x64
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	461a      	mov	r2, r3
 8008170:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008172:	657b      	str	r3, [r7, #84]	@ 0x54
 8008174:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008176:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008178:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800817a:	e841 2300 	strex	r3, r2, [r1]
 800817e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008180:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1e6      	bne.n	8008154 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	3308      	adds	r3, #8
 800818c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008190:	e853 3f00 	ldrex	r3, [r3]
 8008194:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008198:	f023 0301 	bic.w	r3, r3, #1
 800819c:	663b      	str	r3, [r7, #96]	@ 0x60
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	3308      	adds	r3, #8
 80081a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80081a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80081a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80081ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80081ae:	e841 2300 	strex	r3, r2, [r1]
 80081b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80081b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1e5      	bne.n	8008186 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2220      	movs	r2, #32
 80081be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a33      	ldr	r2, [pc, #204]	@ (80082a0 <UART_RxISR_16BIT+0x1b4>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d01f      	beq.n	8008218 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d018      	beq.n	8008218 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ec:	6a3b      	ldr	r3, [r7, #32]
 80081ee:	e853 3f00 	ldrex	r3, [r3]
 80081f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80081fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	461a      	mov	r2, r3
 8008202:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008204:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008206:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008208:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800820a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800820c:	e841 2300 	strex	r3, r2, [r1]
 8008210:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008214:	2b00      	cmp	r3, #0
 8008216:	d1e6      	bne.n	80081e6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800821c:	2b01      	cmp	r3, #1
 800821e:	d12e      	bne.n	800827e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	e853 3f00 	ldrex	r3, [r3]
 8008232:	60bb      	str	r3, [r7, #8]
   return(result);
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	f023 0310 	bic.w	r3, r3, #16
 800823a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	461a      	mov	r2, r3
 8008242:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008244:	61bb      	str	r3, [r7, #24]
 8008246:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008248:	6979      	ldr	r1, [r7, #20]
 800824a:	69ba      	ldr	r2, [r7, #24]
 800824c:	e841 2300 	strex	r3, r2, [r1]
 8008250:	613b      	str	r3, [r7, #16]
   return(result);
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1e6      	bne.n	8008226 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	69db      	ldr	r3, [r3, #28]
 800825e:	f003 0310 	and.w	r3, r3, #16
 8008262:	2b10      	cmp	r3, #16
 8008264:	d103      	bne.n	800826e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2210      	movs	r2, #16
 800826c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008274:	4619      	mov	r1, r3
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f7fe ff82 	bl	8007180 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800827c:	e00b      	b.n	8008296 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f7f9 faa2 	bl	80017c8 <HAL_UART_RxCpltCallback>
}
 8008284:	e007      	b.n	8008296 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	699a      	ldr	r2, [r3, #24]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f042 0208 	orr.w	r2, r2, #8
 8008294:	619a      	str	r2, [r3, #24]
}
 8008296:	bf00      	nop
 8008298:	3770      	adds	r7, #112	@ 0x70
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	40008000 	.word	0x40008000

080082a4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b0ac      	sub	sp, #176	@ 0xb0
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80082b2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	69db      	ldr	r3, [r3, #28]
 80082bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082da:	2b22      	cmp	r3, #34	@ 0x22
 80082dc:	f040 8182 	bne.w	80085e4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80082e6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80082ea:	e125      	b.n	8008538 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80082f6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80082fa:	b2d9      	uxtb	r1, r3
 80082fc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008300:	b2da      	uxtb	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008306:	400a      	ands	r2, r1
 8008308:	b2d2      	uxtb	r2, r2
 800830a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008310:	1c5a      	adds	r2, r3, #1
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800831c:	b29b      	uxth	r3, r3
 800831e:	3b01      	subs	r3, #1
 8008320:	b29a      	uxth	r2, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	69db      	ldr	r3, [r3, #28]
 800832e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008332:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008336:	f003 0307 	and.w	r3, r3, #7
 800833a:	2b00      	cmp	r3, #0
 800833c:	d053      	beq.n	80083e6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800833e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	2b00      	cmp	r3, #0
 8008348:	d011      	beq.n	800836e <UART_RxISR_8BIT_FIFOEN+0xca>
 800834a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800834e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00b      	beq.n	800836e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2201      	movs	r2, #1
 800835c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008364:	f043 0201 	orr.w	r2, r3, #1
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800836e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008372:	f003 0302 	and.w	r3, r3, #2
 8008376:	2b00      	cmp	r3, #0
 8008378:	d011      	beq.n	800839e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800837a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800837e:	f003 0301 	and.w	r3, r3, #1
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00b      	beq.n	800839e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2202      	movs	r2, #2
 800838c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008394:	f043 0204 	orr.w	r2, r3, #4
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800839e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083a2:	f003 0304 	and.w	r3, r3, #4
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d011      	beq.n	80083ce <UART_RxISR_8BIT_FIFOEN+0x12a>
 80083aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80083ae:	f003 0301 	and.w	r3, r3, #1
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00b      	beq.n	80083ce <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2204      	movs	r2, #4
 80083bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083c4:	f043 0202 	orr.w	r2, r3, #2
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d006      	beq.n	80083e6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f7fe fec8 	bl	800716e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f040 80a2 	bne.w	8008538 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80083fc:	e853 3f00 	ldrex	r3, [r3]
 8008400:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008408:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	461a      	mov	r2, r3
 8008412:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008416:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008418:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800841c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800841e:	e841 2300 	strex	r3, r2, [r1]
 8008422:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008424:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1e4      	bne.n	80083f4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	3308      	adds	r3, #8
 8008430:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008432:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008434:	e853 3f00 	ldrex	r3, [r3]
 8008438:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800843a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800843c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008440:	f023 0301 	bic.w	r3, r3, #1
 8008444:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	3308      	adds	r3, #8
 800844e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008452:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008454:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008456:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008458:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800845a:	e841 2300 	strex	r3, r2, [r1]
 800845e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008460:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1e1      	bne.n	800842a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2220      	movs	r2, #32
 800846a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a5f      	ldr	r2, [pc, #380]	@ (80085fc <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d021      	beq.n	80084c8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d01a      	beq.n	80084c8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008498:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800849a:	e853 3f00 	ldrex	r3, [r3]
 800849e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80084a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80084a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	461a      	mov	r2, r3
 80084b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80084b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80084b6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80084ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80084bc:	e841 2300 	strex	r3, r2, [r1]
 80084c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80084c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d1e4      	bne.n	8008492 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d130      	bne.n	8008532 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084de:	e853 3f00 	ldrex	r3, [r3]
 80084e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80084e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e6:	f023 0310 	bic.w	r3, r3, #16
 80084ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	461a      	mov	r2, r3
 80084f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80084fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80084fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008500:	e841 2300 	strex	r3, r2, [r1]
 8008504:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1e4      	bne.n	80084d6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	69db      	ldr	r3, [r3, #28]
 8008512:	f003 0310 	and.w	r3, r3, #16
 8008516:	2b10      	cmp	r3, #16
 8008518:	d103      	bne.n	8008522 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2210      	movs	r2, #16
 8008520:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008528:	4619      	mov	r1, r3
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f7fe fe28 	bl	8007180 <HAL_UARTEx_RxEventCallback>
 8008530:	e002      	b.n	8008538 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7f9 f948 	bl	80017c8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008538:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800853c:	2b00      	cmp	r3, #0
 800853e:	d006      	beq.n	800854e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008540:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008544:	f003 0320 	and.w	r3, r3, #32
 8008548:	2b00      	cmp	r3, #0
 800854a:	f47f aecf 	bne.w	80082ec <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008554:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008558:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800855c:	2b00      	cmp	r3, #0
 800855e:	d049      	beq.n	80085f4 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008566:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800856a:	429a      	cmp	r2, r3
 800856c:	d242      	bcs.n	80085f4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	3308      	adds	r3, #8
 8008574:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008576:	6a3b      	ldr	r3, [r7, #32]
 8008578:	e853 3f00 	ldrex	r3, [r3]
 800857c:	61fb      	str	r3, [r7, #28]
   return(result);
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008584:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	3308      	adds	r3, #8
 800858e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008592:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008594:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008596:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008598:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800859a:	e841 2300 	strex	r3, r2, [r1]
 800859e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1e3      	bne.n	800856e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a15      	ldr	r2, [pc, #84]	@ (8008600 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80085aa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	e853 3f00 	ldrex	r3, [r3]
 80085b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	f043 0320 	orr.w	r3, r3, #32
 80085c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	461a      	mov	r2, r3
 80085ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80085ce:	61bb      	str	r3, [r7, #24]
 80085d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d2:	6979      	ldr	r1, [r7, #20]
 80085d4:	69ba      	ldr	r2, [r7, #24]
 80085d6:	e841 2300 	strex	r3, r2, [r1]
 80085da:	613b      	str	r3, [r7, #16]
   return(result);
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1e4      	bne.n	80085ac <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085e2:	e007      	b.n	80085f4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	699a      	ldr	r2, [r3, #24]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f042 0208 	orr.w	r2, r2, #8
 80085f2:	619a      	str	r2, [r3, #24]
}
 80085f4:	bf00      	nop
 80085f6:	37b0      	adds	r7, #176	@ 0xb0
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	40008000 	.word	0x40008000
 8008600:	08007f35 	.word	0x08007f35

08008604 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b0ae      	sub	sp, #184	@ 0xb8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008612:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	69db      	ldr	r3, [r3, #28]
 800861c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800863a:	2b22      	cmp	r3, #34	@ 0x22
 800863c:	f040 8186 	bne.w	800894c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008646:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800864a:	e129      	b.n	80088a0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008652:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800865a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800865e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008662:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008666:	4013      	ands	r3, r2
 8008668:	b29a      	uxth	r2, r3
 800866a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800866e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008674:	1c9a      	adds	r2, r3, #2
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008680:	b29b      	uxth	r3, r3
 8008682:	3b01      	subs	r3, #1
 8008684:	b29a      	uxth	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008696:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800869a:	f003 0307 	and.w	r3, r3, #7
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d053      	beq.n	800874a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d011      	beq.n	80086d2 <UART_RxISR_16BIT_FIFOEN+0xce>
 80086ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00b      	beq.n	80086d2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2201      	movs	r2, #1
 80086c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086c8:	f043 0201 	orr.w	r2, r3, #1
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d011      	beq.n	8008702 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80086de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80086e2:	f003 0301 	and.w	r3, r3, #1
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00b      	beq.n	8008702 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2202      	movs	r2, #2
 80086f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086f8:	f043 0204 	orr.w	r2, r3, #4
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008702:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008706:	f003 0304 	and.w	r3, r3, #4
 800870a:	2b00      	cmp	r3, #0
 800870c:	d011      	beq.n	8008732 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800870e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008712:	f003 0301 	and.w	r3, r3, #1
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00b      	beq.n	8008732 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2204      	movs	r2, #4
 8008720:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008728:	f043 0202 	orr.w	r2, r3, #2
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008738:	2b00      	cmp	r3, #0
 800873a:	d006      	beq.n	800874a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f7fe fd16 	bl	800716e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008750:	b29b      	uxth	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	f040 80a4 	bne.w	80088a0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008760:	e853 3f00 	ldrex	r3, [r3]
 8008764:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008766:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008768:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800876c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	461a      	mov	r2, r3
 8008776:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800877a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800877e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008780:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008782:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008786:	e841 2300 	strex	r3, r2, [r1]
 800878a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800878c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1e2      	bne.n	8008758 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	3308      	adds	r3, #8
 8008798:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800879c:	e853 3f00 	ldrex	r3, [r3]
 80087a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80087a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80087a8:	f023 0301 	bic.w	r3, r3, #1
 80087ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	3308      	adds	r3, #8
 80087b6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80087ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80087bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80087c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80087c2:	e841 2300 	strex	r3, r2, [r1]
 80087c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80087c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1e1      	bne.n	8008792 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2220      	movs	r2, #32
 80087d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a5f      	ldr	r2, [pc, #380]	@ (8008964 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d021      	beq.n	8008830 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d01a      	beq.n	8008830 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008800:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008802:	e853 3f00 	ldrex	r3, [r3]
 8008806:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008808:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800880a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800880e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	461a      	mov	r2, r3
 8008818:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800881c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800881e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008820:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008822:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008824:	e841 2300 	strex	r3, r2, [r1]
 8008828:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800882a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1e4      	bne.n	80087fa <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008834:	2b01      	cmp	r3, #1
 8008836:	d130      	bne.n	800889a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008846:	e853 3f00 	ldrex	r3, [r3]
 800884a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800884c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800884e:	f023 0310 	bic.w	r3, r3, #16
 8008852:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	461a      	mov	r2, r3
 800885c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008860:	647b      	str	r3, [r7, #68]	@ 0x44
 8008862:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008864:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008866:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008868:	e841 2300 	strex	r3, r2, [r1]
 800886c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800886e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1e4      	bne.n	800883e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	f003 0310 	and.w	r3, r3, #16
 800887e:	2b10      	cmp	r3, #16
 8008880:	d103      	bne.n	800888a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2210      	movs	r2, #16
 8008888:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008890:	4619      	mov	r1, r3
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7fe fc74 	bl	8007180 <HAL_UARTEx_RxEventCallback>
 8008898:	e002      	b.n	80088a0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f7f8 ff94 	bl	80017c8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80088a0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d006      	beq.n	80088b6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80088a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80088ac:	f003 0320 	and.w	r3, r3, #32
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f47f aecb 	bne.w	800864c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088bc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80088c0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d049      	beq.n	800895c <UART_RxISR_16BIT_FIFOEN+0x358>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80088ce:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d242      	bcs.n	800895c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	3308      	adds	r3, #8
 80088dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e0:	e853 3f00 	ldrex	r3, [r3]
 80088e4:	623b      	str	r3, [r7, #32]
   return(result);
 80088e6:	6a3b      	ldr	r3, [r7, #32]
 80088e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3308      	adds	r3, #8
 80088f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80088fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80088fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008900:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008902:	e841 2300 	strex	r3, r2, [r1]
 8008906:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1e3      	bne.n	80088d6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a15      	ldr	r2, [pc, #84]	@ (8008968 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008912:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	e853 3f00 	ldrex	r3, [r3]
 8008920:	60fb      	str	r3, [r7, #12]
   return(result);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f043 0320 	orr.w	r3, r3, #32
 8008928:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	461a      	mov	r2, r3
 8008932:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008936:	61fb      	str	r3, [r7, #28]
 8008938:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893a:	69b9      	ldr	r1, [r7, #24]
 800893c:	69fa      	ldr	r2, [r7, #28]
 800893e:	e841 2300 	strex	r3, r2, [r1]
 8008942:	617b      	str	r3, [r7, #20]
   return(result);
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1e4      	bne.n	8008914 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800894a:	e007      	b.n	800895c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	699a      	ldr	r2, [r3, #24]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f042 0208 	orr.w	r2, r2, #8
 800895a:	619a      	str	r2, [r3, #24]
}
 800895c:	bf00      	nop
 800895e:	37b8      	adds	r7, #184	@ 0xb8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	40008000 	.word	0x40008000
 8008968:	080080ed 	.word	0x080080ed

0800896c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008974:	bf00      	nop
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	bc80      	pop	{r7}
 800897c:	4770      	bx	lr

0800897e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800897e:	b480      	push	{r7}
 8008980:	b083      	sub	sp, #12
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008986:	bf00      	nop
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	bc80      	pop	{r7}
 800898e:	4770      	bx	lr

08008990 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008998:	bf00      	nop
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	bc80      	pop	{r7}
 80089a0:	4770      	bx	lr

080089a2 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b088      	sub	sp, #32
 80089a6:	af02      	add	r7, sp, #8
 80089a8:	60f8      	str	r0, [r7, #12]
 80089aa:	1d3b      	adds	r3, r7, #4
 80089ac:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 80089b0:	2300      	movs	r3, #0
 80089b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d101      	bne.n	80089c2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 80089be:	2302      	movs	r3, #2
 80089c0:	e046      	b.n	8008a50 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2224      	movs	r2, #36	@ 0x24
 80089ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f022 0201 	bic.w	r2, r2, #1
 80089e0:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	430a      	orrs	r2, r1
 80089f4:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d105      	bne.n	8008a08 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80089fc:	1d3b      	adds	r3, r7, #4
 80089fe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f000 f90e 	bl	8008c24 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f042 0201 	orr.w	r2, r2, #1
 8008a16:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a18:	f7f8 f9f4 	bl	8000e04 <HAL_GetTick>
 8008a1c:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a1e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f7fe ff16 	bl	800785e <UART_WaitOnFlagUntilTimeout>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d002      	beq.n	8008a3e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	75fb      	strb	r3, [r7, #23]
 8008a3c:	e003      	b.n	8008a46 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2220      	movs	r2, #32
 8008a42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 8008a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3718      	adds	r7, #24
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b089      	sub	sp, #36	@ 0x24
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d101      	bne.n	8008a6e <HAL_UARTEx_EnableStopMode+0x16>
 8008a6a:	2302      	movs	r3, #2
 8008a6c:	e021      	b.n	8008ab2 <HAL_UARTEx_EnableStopMode+0x5a>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2201      	movs	r2, #1
 8008a72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	e853 3f00 	ldrex	r3, [r3]
 8008a82:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	f043 0302 	orr.w	r3, r3, #2
 8008a8a:	61fb      	str	r3, [r7, #28]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	461a      	mov	r2, r3
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	61bb      	str	r3, [r7, #24]
 8008a96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a98:	6979      	ldr	r1, [r7, #20]
 8008a9a:	69ba      	ldr	r2, [r7, #24]
 8008a9c:	e841 2300 	strex	r3, r2, [r1]
 8008aa0:	613b      	str	r3, [r7, #16]
   return(result);
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1e6      	bne.n	8008a76 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3724      	adds	r7, #36	@ 0x24
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bc80      	pop	{r7}
 8008aba:	4770      	bx	lr

08008abc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d101      	bne.n	8008ad2 <HAL_UARTEx_DisableFifoMode+0x16>
 8008ace:	2302      	movs	r3, #2
 8008ad0:	e027      	b.n	8008b22 <HAL_UARTEx_DisableFifoMode+0x66>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2224      	movs	r2, #36	@ 0x24
 8008ade:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f022 0201 	bic.w	r2, r2, #1
 8008af8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008b00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2220      	movs	r2, #32
 8008b14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3714      	adds	r7, #20
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bc80      	pop	{r7}
 8008b2a:	4770      	bx	lr

08008b2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d101      	bne.n	8008b44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008b40:	2302      	movs	r3, #2
 8008b42:	e02d      	b.n	8008ba0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2224      	movs	r2, #36	@ 0x24
 8008b50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f022 0201 	bic.w	r2, r2, #1
 8008b6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	683a      	ldr	r2, [r7, #0]
 8008b7c:	430a      	orrs	r2, r1
 8008b7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f871 	bl	8008c68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2220      	movs	r2, #32
 8008b92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d101      	bne.n	8008bc0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	e02d      	b.n	8008c1c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2224      	movs	r2, #36	@ 0x24
 8008bcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f022 0201 	bic.w	r2, r2, #1
 8008be6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	683a      	ldr	r2, [r7, #0]
 8008bf8:	430a      	orrs	r2, r1
 8008bfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f833 	bl	8008c68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2220      	movs	r2, #32
 8008c0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	1d3b      	adds	r3, r7, #4
 8008c2e:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	f023 0210 	bic.w	r2, r3, #16
 8008c3c:	893b      	ldrh	r3, [r7, #8]
 8008c3e:	4619      	mov	r1, r3
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	430a      	orrs	r2, r1
 8008c46:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 8008c52:	7abb      	ldrb	r3, [r7, #10]
 8008c54:	061a      	lsls	r2, r3, #24
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	430a      	orrs	r2, r1
 8008c5c:	605a      	str	r2, [r3, #4]
}
 8008c5e:	bf00      	nop
 8008c60:	3714      	adds	r7, #20
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bc80      	pop	{r7}
 8008c66:	4770      	bx	lr

08008c68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d108      	bne.n	8008c8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008c88:	e031      	b.n	8008cee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008c8a:	2308      	movs	r3, #8
 8008c8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008c8e:	2308      	movs	r3, #8
 8008c90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	0e5b      	lsrs	r3, r3, #25
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	f003 0307 	and.w	r3, r3, #7
 8008ca0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	0f5b      	lsrs	r3, r3, #29
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	f003 0307 	and.w	r3, r3, #7
 8008cb0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cb2:	7bbb      	ldrb	r3, [r7, #14]
 8008cb4:	7b3a      	ldrb	r2, [r7, #12]
 8008cb6:	4910      	ldr	r1, [pc, #64]	@ (8008cf8 <UARTEx_SetNbDataToProcess+0x90>)
 8008cb8:	5c8a      	ldrb	r2, [r1, r2]
 8008cba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008cbe:	7b3a      	ldrb	r2, [r7, #12]
 8008cc0:	490e      	ldr	r1, [pc, #56]	@ (8008cfc <UARTEx_SetNbDataToProcess+0x94>)
 8008cc2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
 8008cd2:	7b7a      	ldrb	r2, [r7, #13]
 8008cd4:	4908      	ldr	r1, [pc, #32]	@ (8008cf8 <UARTEx_SetNbDataToProcess+0x90>)
 8008cd6:	5c8a      	ldrb	r2, [r1, r2]
 8008cd8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008cdc:	7b7a      	ldrb	r2, [r7, #13]
 8008cde:	4907      	ldr	r1, [pc, #28]	@ (8008cfc <UARTEx_SetNbDataToProcess+0x94>)
 8008ce0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ce2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008cee:	bf00      	nop
 8008cf0:	3714      	adds	r7, #20
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bc80      	pop	{r7}
 8008cf6:	4770      	bx	lr
 8008cf8:	0800dc4c 	.word	0x0800dc4c
 8008cfc:	0800dc54 	.word	0x0800dc54

08008d00 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af02      	add	r7, sp, #8
 8008d06:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8008d08:	4a24      	ldr	r2, [pc, #144]	@ (8008d9c <RadioInit+0x9c>)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8008d0e:	4b24      	ldr	r3, [pc, #144]	@ (8008da0 <RadioInit+0xa0>)
 8008d10:	2200      	movs	r2, #0
 8008d12:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8008d14:	4b22      	ldr	r3, [pc, #136]	@ (8008da0 <RadioInit+0xa0>)
 8008d16:	2200      	movs	r2, #0
 8008d18:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8008d1a:	4b21      	ldr	r3, [pc, #132]	@ (8008da0 <RadioInit+0xa0>)
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008d20:	4b1f      	ldr	r3, [pc, #124]	@ (8008da0 <RadioInit+0xa0>)
 8008d22:	2200      	movs	r2, #0
 8008d24:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8008d26:	481f      	ldr	r0, [pc, #124]	@ (8008da4 <RadioInit+0xa4>)
 8008d28:	f001 ffc0 	bl	800acac <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8008d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8008da0 <RadioInit+0xa0>)
 8008d2e:	2200      	movs	r2, #0
 8008d30:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8008d32:	4b1b      	ldr	r3, [pc, #108]	@ (8008da0 <RadioInit+0xa0>)
 8008d34:	2200      	movs	r2, #0
 8008d36:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8008d38:	f002 fa54 	bl	800b1e4 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	2000      	movs	r0, #0
 8008d40:	f002 fe20 	bl	800b984 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8008d44:	2204      	movs	r2, #4
 8008d46:	2100      	movs	r1, #0
 8008d48:	2001      	movs	r0, #1
 8008d4a:	f002 fbdd 	bl	800b508 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008d4e:	2300      	movs	r3, #0
 8008d50:	2200      	movs	r2, #0
 8008d52:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8008d56:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8008d5a:	f002 fb0d 	bl	800b378 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8008d5e:	f000 fe99 	bl	8009a94 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8008d62:	2300      	movs	r3, #0
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	4b10      	ldr	r3, [pc, #64]	@ (8008da8 <RadioInit+0xa8>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f04f 31ff 	mov.w	r1, #4294967295
 8008d6e:	480f      	ldr	r0, [pc, #60]	@ (8008dac <RadioInit+0xac>)
 8008d70:	f004 f8d6 	bl	800cf20 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8008d74:	2300      	movs	r3, #0
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	4b0d      	ldr	r3, [pc, #52]	@ (8008db0 <RadioInit+0xb0>)
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8008d80:	480c      	ldr	r0, [pc, #48]	@ (8008db4 <RadioInit+0xb4>)
 8008d82:	f004 f8cd 	bl	800cf20 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8008d86:	4809      	ldr	r0, [pc, #36]	@ (8008dac <RadioInit+0xac>)
 8008d88:	f004 f96e 	bl	800d068 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8008d8c:	4809      	ldr	r0, [pc, #36]	@ (8008db4 <RadioInit+0xb4>)
 8008d8e:	f004 f96b 	bl	800d068 <UTIL_TIMER_Stop>
}
 8008d92:	bf00      	nop
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	2000032c 	.word	0x2000032c
 8008da0:	20000330 	.word	0x20000330
 8008da4:	08009e89 	.word	0x08009e89
 8008da8:	08009e11 	.word	0x08009e11
 8008dac:	2000038c 	.word	0x2000038c
 8008db0:	08009e25 	.word	0x08009e25
 8008db4:	200003a4 	.word	0x200003a4

08008db8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8008dbc:	f001 ffbe 	bl	800ad3c <SUBGRF_GetOperatingMode>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b07      	cmp	r3, #7
 8008dc4:	d00a      	beq.n	8008ddc <RadioGetStatus+0x24>
 8008dc6:	2b07      	cmp	r3, #7
 8008dc8:	dc0a      	bgt.n	8008de0 <RadioGetStatus+0x28>
 8008dca:	2b04      	cmp	r3, #4
 8008dcc:	d002      	beq.n	8008dd4 <RadioGetStatus+0x1c>
 8008dce:	2b05      	cmp	r3, #5
 8008dd0:	d002      	beq.n	8008dd8 <RadioGetStatus+0x20>
 8008dd2:	e005      	b.n	8008de0 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8008dd4:	2302      	movs	r3, #2
 8008dd6:	e004      	b.n	8008de2 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e002      	b.n	8008de2 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8008ddc:	2303      	movs	r3, #3
 8008dde:	e000      	b.n	8008de2 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8008de0:	2300      	movs	r3, #0
    }
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	bd80      	pop	{r7, pc}
	...

08008de8 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	4603      	mov	r3, r0
 8008df0:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8008df2:	4a2a      	ldr	r2, [pc, #168]	@ (8008e9c <RadioSetModem+0xb4>)
 8008df4:	79fb      	ldrb	r3, [r7, #7]
 8008df6:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8008df8:	79fb      	ldrb	r3, [r7, #7]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f003 f995 	bl	800c12a <RFW_SetRadioModem>
    switch( modem )
 8008e00:	79fb      	ldrb	r3, [r7, #7]
 8008e02:	2b05      	cmp	r3, #5
 8008e04:	d80e      	bhi.n	8008e24 <RadioSetModem+0x3c>
 8008e06:	a201      	add	r2, pc, #4	@ (adr r2, 8008e0c <RadioSetModem+0x24>)
 8008e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0c:	08008e33 	.word	0x08008e33
 8008e10:	08008e41 	.word	0x08008e41
 8008e14:	08008e25 	.word	0x08008e25
 8008e18:	08008e67 	.word	0x08008e67
 8008e1c:	08008e75 	.word	0x08008e75
 8008e20:	08008e83 	.word	0x08008e83
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8008e24:	2003      	movs	r0, #3
 8008e26:	f002 fb49 	bl	800b4bc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8008e9c <RadioSetModem+0xb4>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	735a      	strb	r2, [r3, #13]
        break;
 8008e30:	e02f      	b.n	8008e92 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8008e32:	2000      	movs	r0, #0
 8008e34:	f002 fb42 	bl	800b4bc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008e38:	4b18      	ldr	r3, [pc, #96]	@ (8008e9c <RadioSetModem+0xb4>)
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	735a      	strb	r2, [r3, #13]
        break;
 8008e3e:	e028      	b.n	8008e92 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8008e40:	2001      	movs	r0, #1
 8008e42:	f002 fb3b 	bl	800b4bc <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8008e46:	4b15      	ldr	r3, [pc, #84]	@ (8008e9c <RadioSetModem+0xb4>)
 8008e48:	7b5a      	ldrb	r2, [r3, #13]
 8008e4a:	4b14      	ldr	r3, [pc, #80]	@ (8008e9c <RadioSetModem+0xb4>)
 8008e4c:	7b1b      	ldrb	r3, [r3, #12]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d01e      	beq.n	8008e90 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8008e52:	4b12      	ldr	r3, [pc, #72]	@ (8008e9c <RadioSetModem+0xb4>)
 8008e54:	7b1a      	ldrb	r2, [r3, #12]
 8008e56:	4b11      	ldr	r3, [pc, #68]	@ (8008e9c <RadioSetModem+0xb4>)
 8008e58:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8008e5a:	4b10      	ldr	r3, [pc, #64]	@ (8008e9c <RadioSetModem+0xb4>)
 8008e5c:	7b5b      	ldrb	r3, [r3, #13]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 ffa0 	bl	8009da4 <RadioSetPublicNetwork>
        }
        break;
 8008e64:	e014      	b.n	8008e90 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8008e66:	2002      	movs	r0, #2
 8008e68:	f002 fb28 	bl	800b4bc <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8008e9c <RadioSetModem+0xb4>)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	735a      	strb	r2, [r3, #13]
        break;
 8008e72:	e00e      	b.n	8008e92 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8008e74:	2002      	movs	r0, #2
 8008e76:	f002 fb21 	bl	800b4bc <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008e7a:	4b08      	ldr	r3, [pc, #32]	@ (8008e9c <RadioSetModem+0xb4>)
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	735a      	strb	r2, [r3, #13]
        break;
 8008e80:	e007      	b.n	8008e92 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8008e82:	2000      	movs	r0, #0
 8008e84:	f002 fb1a 	bl	800b4bc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008e88:	4b04      	ldr	r3, [pc, #16]	@ (8008e9c <RadioSetModem+0xb4>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	735a      	strb	r2, [r3, #13]
        break;
 8008e8e:	e000      	b.n	8008e92 <RadioSetModem+0xaa>
        break;
 8008e90:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8008e92:	bf00      	nop
 8008e94:	3708      	adds	r7, #8
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	20000330 	.word	0x20000330

08008ea0 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f002 fac1 	bl	800b430 <SUBGRF_SetRfFrequency>
}
 8008eae:	bf00      	nop
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b090      	sub	sp, #64	@ 0x40
 8008eba:	af0a      	add	r7, sp, #40	@ 0x28
 8008ebc:	60f8      	str	r0, [r7, #12]
 8008ebe:	60b9      	str	r1, [r7, #8]
 8008ec0:	603b      	str	r3, [r7, #0]
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8008ed2:	f000 fdf2 	bl	8009aba <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8008ed6:	2000      	movs	r0, #0
 8008ed8:	f7ff ff86 	bl	8008de8 <RadioSetModem>

    RadioSetChannel( freq );
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f7ff ffdf 	bl	8008ea0 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	9308      	str	r3, [sp, #32]
 8008eea:	2300      	movs	r3, #0
 8008eec:	9307      	str	r3, [sp, #28]
 8008eee:	2300      	movs	r3, #0
 8008ef0:	9306      	str	r3, [sp, #24]
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	9305      	str	r3, [sp, #20]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	9304      	str	r3, [sp, #16]
 8008efa:	2300      	movs	r3, #0
 8008efc:	9303      	str	r3, [sp, #12]
 8008efe:	2300      	movs	r3, #0
 8008f00:	9302      	str	r3, [sp, #8]
 8008f02:	2303      	movs	r3, #3
 8008f04:	9301      	str	r3, [sp, #4]
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	9300      	str	r3, [sp, #0]
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8008f10:	68b9      	ldr	r1, [r7, #8]
 8008f12:	2000      	movs	r0, #0
 8008f14:	f000 f83c 	bl	8008f90 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8008f18:	2000      	movs	r0, #0
 8008f1a:	f000 fdd5 	bl	8009ac8 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8008f1e:	f000 ff6f 	bl	8009e00 <RadioGetWakeupTime>
 8008f22:	4603      	mov	r3, r0
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7f7 ff81 	bl	8000e2c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8008f2a:	f004 f9b7 	bl	800d29c <UTIL_TIMER_GetCurrentTime>
 8008f2e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8008f30:	e00d      	b.n	8008f4e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8008f32:	2000      	movs	r0, #0
 8008f34:	f000 feb6 	bl	8009ca4 <RadioRssi>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8008f3c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8008f40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	dd02      	ble.n	8008f4e <RadioIsChannelFree+0x98>
        {
            status = false;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	75fb      	strb	r3, [r7, #23]
            break;
 8008f4c:	e006      	b.n	8008f5c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8008f4e:	6938      	ldr	r0, [r7, #16]
 8008f50:	f004 f9b6 	bl	800d2c0 <UTIL_TIMER_GetElapsedTime>
 8008f54:	4602      	mov	r2, r0
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d8ea      	bhi.n	8008f32 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8008f5c:	f000 fdad 	bl	8009aba <RadioStandby>

    return status;
 8008f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3718      	adds	r7, #24
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b082      	sub	sp, #8
 8008f6e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8008f70:	2300      	movs	r3, #0
 8008f72:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008f74:	2300      	movs	r3, #0
 8008f76:	2200      	movs	r2, #0
 8008f78:	2100      	movs	r1, #0
 8008f7a:	2000      	movs	r0, #0
 8008f7c:	f002 f9fc 	bl	800b378 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8008f80:	f001 ffad 	bl	800aede <SUBGRF_GetRandom>
 8008f84:	6078      	str	r0, [r7, #4]

    return rnd;
 8008f86:	687b      	ldr	r3, [r7, #4]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b08a      	sub	sp, #40	@ 0x28
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60b9      	str	r1, [r7, #8]
 8008f98:	607a      	str	r2, [r7, #4]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	73fb      	strb	r3, [r7, #15]
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8008fa4:	4ab9      	ldr	r2, [pc, #740]	@ (800928c <RadioSetRxConfig+0x2fc>)
 8008fa6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8008faa:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8008fac:	f003 f87b 	bl	800c0a6 <RFW_DeInit>
    if( rxContinuous == true )
 8008fb0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d001      	beq.n	8008fbc <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8008fbc:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d004      	beq.n	8008fce <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8008fc4:	4ab2      	ldr	r2, [pc, #712]	@ (8009290 <RadioSetRxConfig+0x300>)
 8008fc6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008fca:	7013      	strb	r3, [r2, #0]
 8008fcc:	e002      	b.n	8008fd4 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8008fce:	4bb0      	ldr	r3, [pc, #704]	@ (8009290 <RadioSetRxConfig+0x300>)
 8008fd0:	22ff      	movs	r2, #255	@ 0xff
 8008fd2:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
 8008fd6:	2b05      	cmp	r3, #5
 8008fd8:	d009      	beq.n	8008fee <RadioSetRxConfig+0x5e>
 8008fda:	2b05      	cmp	r3, #5
 8008fdc:	f300 81d7 	bgt.w	800938e <RadioSetRxConfig+0x3fe>
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f000 80bf 	beq.w	8009164 <RadioSetRxConfig+0x1d4>
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	f000 8124 	beq.w	8009234 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8008fec:	e1cf      	b.n	800938e <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8008fee:	2001      	movs	r0, #1
 8008ff0:	f002 f8ba 	bl	800b168 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008ff4:	4ba5      	ldr	r3, [pc, #660]	@ (800928c <RadioSetRxConfig+0x2fc>)
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8008ffc:	4aa3      	ldr	r2, [pc, #652]	@ (800928c <RadioSetRxConfig+0x2fc>)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8009002:	4ba2      	ldr	r3, [pc, #648]	@ (800928c <RadioSetRxConfig+0x2fc>)
 8009004:	2209      	movs	r2, #9
 8009006:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800900a:	4ba0      	ldr	r3, [pc, #640]	@ (800928c <RadioSetRxConfig+0x2fc>)
 800900c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8009010:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8009012:	68b8      	ldr	r0, [r7, #8]
 8009014:	f002 ff7a 	bl	800bf0c <SUBGRF_GetFskBandwidthRegValue>
 8009018:	4603      	mov	r3, r0
 800901a:	461a      	mov	r2, r3
 800901c:	4b9b      	ldr	r3, [pc, #620]	@ (800928c <RadioSetRxConfig+0x2fc>)
 800901e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009022:	4b9a      	ldr	r3, [pc, #616]	@ (800928c <RadioSetRxConfig+0x2fc>)
 8009024:	2200      	movs	r2, #0
 8009026:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8009028:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800902a:	00db      	lsls	r3, r3, #3
 800902c:	b29a      	uxth	r2, r3
 800902e:	4b97      	ldr	r3, [pc, #604]	@ (800928c <RadioSetRxConfig+0x2fc>)
 8009030:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8009032:	4b96      	ldr	r3, [pc, #600]	@ (800928c <RadioSetRxConfig+0x2fc>)
 8009034:	2200      	movs	r2, #0
 8009036:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8009038:	4b94      	ldr	r3, [pc, #592]	@ (800928c <RadioSetRxConfig+0x2fc>)
 800903a:	2210      	movs	r2, #16
 800903c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800903e:	4b93      	ldr	r3, [pc, #588]	@ (800928c <RadioSetRxConfig+0x2fc>)
 8009040:	2200      	movs	r2, #0
 8009042:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8009044:	4b91      	ldr	r3, [pc, #580]	@ (800928c <RadioSetRxConfig+0x2fc>)
 8009046:	2200      	movs	r2, #0
 8009048:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800904a:	4b91      	ldr	r3, [pc, #580]	@ (8009290 <RadioSetRxConfig+0x300>)
 800904c:	781a      	ldrb	r2, [r3, #0]
 800904e:	4b8f      	ldr	r3, [pc, #572]	@ (800928c <RadioSetRxConfig+0x2fc>)
 8009050:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8009052:	4b8e      	ldr	r3, [pc, #568]	@ (800928c <RadioSetRxConfig+0x2fc>)
 8009054:	2201      	movs	r2, #1
 8009056:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8009058:	4b8c      	ldr	r3, [pc, #560]	@ (800928c <RadioSetRxConfig+0x2fc>)
 800905a:	2200      	movs	r2, #0
 800905c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800905e:	2005      	movs	r0, #5
 8009060:	f7ff fec2 	bl	8008de8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009064:	488b      	ldr	r0, [pc, #556]	@ (8009294 <RadioSetRxConfig+0x304>)
 8009066:	f002 fb1d 	bl	800b6a4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800906a:	488b      	ldr	r0, [pc, #556]	@ (8009298 <RadioSetRxConfig+0x308>)
 800906c:	f002 fbec 	bl	800b848 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8009070:	4a8a      	ldr	r2, [pc, #552]	@ (800929c <RadioSetRxConfig+0x30c>)
 8009072:	f107 031c 	add.w	r3, r7, #28
 8009076:	e892 0003 	ldmia.w	r2, {r0, r1}
 800907a:	e883 0003 	stmia.w	r3, {r0, r1}
 800907e:	f107 031c 	add.w	r3, r7, #28
 8009082:	4618      	mov	r0, r3
 8009084:	f001 fea9 	bl	800adda <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8009088:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800908c:	f001 fef4 	bl	800ae78 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8009090:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8009094:	f000 fe24 	bl	8009ce0 <RadioRead>
 8009098:	4603      	mov	r3, r0
 800909a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 800909e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090a2:	f023 0310 	bic.w	r3, r3, #16
 80090a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80090aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090ae:	4619      	mov	r1, r3
 80090b0:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 80090b4:	f000 fe02 	bl	8009cbc <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80090b8:	2104      	movs	r1, #4
 80090ba:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 80090be:	f000 fdfd 	bl	8009cbc <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80090c2:	f640 009b 	movw	r0, #2203	@ 0x89b
 80090c6:	f000 fe0b 	bl	8009ce0 <RadioRead>
 80090ca:	4603      	mov	r3, r0
 80090cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80090d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090d4:	f023 031c 	bic.w	r3, r3, #28
 80090d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80090dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090e0:	f043 0308 	orr.w	r3, r3, #8
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	4619      	mov	r1, r3
 80090e8:	f640 009b 	movw	r0, #2203	@ 0x89b
 80090ec:	f000 fde6 	bl	8009cbc <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80090f0:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 80090f4:	f000 fdf4 	bl	8009ce0 <RadioRead>
 80090f8:	4603      	mov	r3, r0
 80090fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80090fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009102:	f023 0318 	bic.w	r3, r3, #24
 8009106:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 800910a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800910e:	f043 0318 	orr.w	r3, r3, #24
 8009112:	b2db      	uxtb	r3, r3
 8009114:	4619      	mov	r1, r3
 8009116:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 800911a:	f000 fdcf 	bl	8009cbc <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 800911e:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8009122:	f000 fddd 	bl	8009ce0 <RadioRead>
 8009126:	4603      	mov	r3, r0
 8009128:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800912c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009130:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009134:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8009138:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800913c:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8009140:	b2db      	uxtb	r3, r3
 8009142:	4619      	mov	r1, r3
 8009144:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8009148:	f000 fdb8 	bl	8009cbc <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800914c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800914e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8009152:	fb02 f303 	mul.w	r3, r2, r3
 8009156:	461a      	mov	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	fbb2 f3f3 	udiv	r3, r2, r3
 800915e:	4a4b      	ldr	r2, [pc, #300]	@ (800928c <RadioSetRxConfig+0x2fc>)
 8009160:	6093      	str	r3, [r2, #8]
            break;
 8009162:	e115      	b.n	8009390 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8009164:	2000      	movs	r0, #0
 8009166:	f001 ffff 	bl	800b168 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800916a:	4b48      	ldr	r3, [pc, #288]	@ (800928c <RadioSetRxConfig+0x2fc>)
 800916c:	2200      	movs	r2, #0
 800916e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8009172:	4a46      	ldr	r2, [pc, #280]	@ (800928c <RadioSetRxConfig+0x2fc>)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8009178:	4b44      	ldr	r3, [pc, #272]	@ (800928c <RadioSetRxConfig+0x2fc>)
 800917a:	220b      	movs	r2, #11
 800917c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8009180:	68b8      	ldr	r0, [r7, #8]
 8009182:	f002 fec3 	bl	800bf0c <SUBGRF_GetFskBandwidthRegValue>
 8009186:	4603      	mov	r3, r0
 8009188:	461a      	mov	r2, r3
 800918a:	4b40      	ldr	r3, [pc, #256]	@ (800928c <RadioSetRxConfig+0x2fc>)
 800918c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009190:	4b3e      	ldr	r3, [pc, #248]	@ (800928c <RadioSetRxConfig+0x2fc>)
 8009192:	2200      	movs	r2, #0
 8009194:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8009196:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009198:	00db      	lsls	r3, r3, #3
 800919a:	b29a      	uxth	r2, r3
 800919c:	4b3b      	ldr	r3, [pc, #236]	@ (800928c <RadioSetRxConfig+0x2fc>)
 800919e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80091a0:	4b3a      	ldr	r3, [pc, #232]	@ (800928c <RadioSetRxConfig+0x2fc>)
 80091a2:	2204      	movs	r2, #4
 80091a4:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80091a6:	4b39      	ldr	r3, [pc, #228]	@ (800928c <RadioSetRxConfig+0x2fc>)
 80091a8:	2218      	movs	r2, #24
 80091aa:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80091ac:	4b37      	ldr	r3, [pc, #220]	@ (800928c <RadioSetRxConfig+0x2fc>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80091b2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80091b6:	f083 0301 	eor.w	r3, r3, #1
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	461a      	mov	r2, r3
 80091be:	4b33      	ldr	r3, [pc, #204]	@ (800928c <RadioSetRxConfig+0x2fc>)
 80091c0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80091c2:	4b33      	ldr	r3, [pc, #204]	@ (8009290 <RadioSetRxConfig+0x300>)
 80091c4:	781a      	ldrb	r2, [r3, #0]
 80091c6:	4b31      	ldr	r3, [pc, #196]	@ (800928c <RadioSetRxConfig+0x2fc>)
 80091c8:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80091ca:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d003      	beq.n	80091da <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80091d2:	4b2e      	ldr	r3, [pc, #184]	@ (800928c <RadioSetRxConfig+0x2fc>)
 80091d4:	22f2      	movs	r2, #242	@ 0xf2
 80091d6:	75da      	strb	r2, [r3, #23]
 80091d8:	e002      	b.n	80091e0 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80091da:	4b2c      	ldr	r3, [pc, #176]	@ (800928c <RadioSetRxConfig+0x2fc>)
 80091dc:	2201      	movs	r2, #1
 80091de:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80091e0:	4b2a      	ldr	r3, [pc, #168]	@ (800928c <RadioSetRxConfig+0x2fc>)
 80091e2:	2201      	movs	r2, #1
 80091e4:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80091e6:	f000 fc68 	bl	8009aba <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80091ea:	2000      	movs	r0, #0
 80091ec:	f7ff fdfc 	bl	8008de8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80091f0:	4828      	ldr	r0, [pc, #160]	@ (8009294 <RadioSetRxConfig+0x304>)
 80091f2:	f002 fa57 	bl	800b6a4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80091f6:	4828      	ldr	r0, [pc, #160]	@ (8009298 <RadioSetRxConfig+0x308>)
 80091f8:	f002 fb26 	bl	800b848 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80091fc:	4a28      	ldr	r2, [pc, #160]	@ (80092a0 <RadioSetRxConfig+0x310>)
 80091fe:	f107 0314 	add.w	r3, r7, #20
 8009202:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009206:	e883 0003 	stmia.w	r3, {r0, r1}
 800920a:	f107 0314 	add.w	r3, r7, #20
 800920e:	4618      	mov	r0, r3
 8009210:	f001 fde3 	bl	800adda <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8009214:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8009218:	f001 fe2e 	bl	800ae78 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800921c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800921e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8009222:	fb02 f303 	mul.w	r3, r2, r3
 8009226:	461a      	mov	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	fbb2 f3f3 	udiv	r3, r2, r3
 800922e:	4a17      	ldr	r2, [pc, #92]	@ (800928c <RadioSetRxConfig+0x2fc>)
 8009230:	6093      	str	r3, [r2, #8]
            break;
 8009232:	e0ad      	b.n	8009390 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8009234:	2000      	movs	r0, #0
 8009236:	f001 ff97 	bl	800b168 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800923a:	4b14      	ldr	r3, [pc, #80]	@ (800928c <RadioSetRxConfig+0x2fc>)
 800923c:	2201      	movs	r2, #1
 800923e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	b2da      	uxtb	r2, r3
 8009246:	4b11      	ldr	r3, [pc, #68]	@ (800928c <RadioSetRxConfig+0x2fc>)
 8009248:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800924c:	4a15      	ldr	r2, [pc, #84]	@ (80092a4 <RadioSetRxConfig+0x314>)
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	4413      	add	r3, r2
 8009252:	781a      	ldrb	r2, [r3, #0]
 8009254:	4b0d      	ldr	r3, [pc, #52]	@ (800928c <RadioSetRxConfig+0x2fc>)
 8009256:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800925a:	4a0c      	ldr	r2, [pc, #48]	@ (800928c <RadioSetRxConfig+0x2fc>)
 800925c:	7bbb      	ldrb	r3, [r7, #14]
 800925e:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d105      	bne.n	8009274 <RadioSetRxConfig+0x2e4>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b0b      	cmp	r3, #11
 800926c:	d008      	beq.n	8009280 <RadioSetRxConfig+0x2f0>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2b0c      	cmp	r3, #12
 8009272:	d005      	beq.n	8009280 <RadioSetRxConfig+0x2f0>
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d116      	bne.n	80092a8 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2b0c      	cmp	r3, #12
 800927e:	d113      	bne.n	80092a8 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8009280:	4b02      	ldr	r3, [pc, #8]	@ (800928c <RadioSetRxConfig+0x2fc>)
 8009282:	2201      	movs	r2, #1
 8009284:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8009288:	e012      	b.n	80092b0 <RadioSetRxConfig+0x320>
 800928a:	bf00      	nop
 800928c:	20000330 	.word	0x20000330
 8009290:	20000011 	.word	0x20000011
 8009294:	20000368 	.word	0x20000368
 8009298:	2000033e 	.word	0x2000033e
 800929c:	0800da44 	.word	0x0800da44
 80092a0:	0800da4c 	.word	0x0800da4c
 80092a4:	0800dce8 	.word	0x0800dce8
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80092a8:	4b3b      	ldr	r3, [pc, #236]	@ (8009398 <RadioSetRxConfig+0x408>)
 80092aa:	2200      	movs	r2, #0
 80092ac:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80092b0:	4b39      	ldr	r3, [pc, #228]	@ (8009398 <RadioSetRxConfig+0x408>)
 80092b2:	2201      	movs	r2, #1
 80092b4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80092b6:	4b38      	ldr	r3, [pc, #224]	@ (8009398 <RadioSetRxConfig+0x408>)
 80092b8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80092bc:	2b05      	cmp	r3, #5
 80092be:	d004      	beq.n	80092ca <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80092c0:	4b35      	ldr	r3, [pc, #212]	@ (8009398 <RadioSetRxConfig+0x408>)
 80092c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80092c6:	2b06      	cmp	r3, #6
 80092c8:	d10a      	bne.n	80092e0 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80092ca:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80092cc:	2b0b      	cmp	r3, #11
 80092ce:	d803      	bhi.n	80092d8 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80092d0:	4b31      	ldr	r3, [pc, #196]	@ (8009398 <RadioSetRxConfig+0x408>)
 80092d2:	220c      	movs	r2, #12
 80092d4:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80092d6:	e006      	b.n	80092e6 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80092d8:	4a2f      	ldr	r2, [pc, #188]	@ (8009398 <RadioSetRxConfig+0x408>)
 80092da:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80092dc:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80092de:	e002      	b.n	80092e6 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80092e0:	4a2d      	ldr	r2, [pc, #180]	@ (8009398 <RadioSetRxConfig+0x408>)
 80092e2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80092e4:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80092e6:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80092ea:	4b2b      	ldr	r3, [pc, #172]	@ (8009398 <RadioSetRxConfig+0x408>)
 80092ec:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80092ee:	4b2b      	ldr	r3, [pc, #172]	@ (800939c <RadioSetRxConfig+0x40c>)
 80092f0:	781a      	ldrb	r2, [r3, #0]
 80092f2:	4b29      	ldr	r3, [pc, #164]	@ (8009398 <RadioSetRxConfig+0x408>)
 80092f4:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80092f6:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80092fa:	4b27      	ldr	r3, [pc, #156]	@ (8009398 <RadioSetRxConfig+0x408>)
 80092fc:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8009300:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8009304:	4b24      	ldr	r3, [pc, #144]	@ (8009398 <RadioSetRxConfig+0x408>)
 8009306:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 800930a:	f000 fbd6 	bl	8009aba <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800930e:	2001      	movs	r0, #1
 8009310:	f7ff fd6a 	bl	8008de8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009314:	4822      	ldr	r0, [pc, #136]	@ (80093a0 <RadioSetRxConfig+0x410>)
 8009316:	f002 f9c5 	bl	800b6a4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800931a:	4822      	ldr	r0, [pc, #136]	@ (80093a4 <RadioSetRxConfig+0x414>)
 800931c:	f002 fa94 	bl	800b848 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8009320:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009322:	b2db      	uxtb	r3, r3
 8009324:	4618      	mov	r0, r3
 8009326:	f001 ff2e 	bl	800b186 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 800932a:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 800932e:	f002 fbe7 	bl	800bb00 <SUBGRF_ReadRegister>
 8009332:	4603      	mov	r3, r0
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	b2db      	uxtb	r3, r3
 800933a:	4619      	mov	r1, r3
 800933c:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8009340:	f002 fbca 	bl	800bad8 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8009344:	4b14      	ldr	r3, [pc, #80]	@ (8009398 <RadioSetRxConfig+0x408>)
 8009346:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800934a:	2b01      	cmp	r3, #1
 800934c:	d10d      	bne.n	800936a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800934e:	f240 7036 	movw	r0, #1846	@ 0x736
 8009352:	f002 fbd5 	bl	800bb00 <SUBGRF_ReadRegister>
 8009356:	4603      	mov	r3, r0
 8009358:	f023 0304 	bic.w	r3, r3, #4
 800935c:	b2db      	uxtb	r3, r3
 800935e:	4619      	mov	r1, r3
 8009360:	f240 7036 	movw	r0, #1846	@ 0x736
 8009364:	f002 fbb8 	bl	800bad8 <SUBGRF_WriteRegister>
 8009368:	e00c      	b.n	8009384 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800936a:	f240 7036 	movw	r0, #1846	@ 0x736
 800936e:	f002 fbc7 	bl	800bb00 <SUBGRF_ReadRegister>
 8009372:	4603      	mov	r3, r0
 8009374:	f043 0304 	orr.w	r3, r3, #4
 8009378:	b2db      	uxtb	r3, r3
 800937a:	4619      	mov	r1, r3
 800937c:	f240 7036 	movw	r0, #1846	@ 0x736
 8009380:	f002 fbaa 	bl	800bad8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8009384:	4b04      	ldr	r3, [pc, #16]	@ (8009398 <RadioSetRxConfig+0x408>)
 8009386:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800938a:	609a      	str	r2, [r3, #8]
            break;
 800938c:	e000      	b.n	8009390 <RadioSetRxConfig+0x400>
            break;
 800938e:	bf00      	nop
    }
}
 8009390:	bf00      	nop
 8009392:	3728      	adds	r7, #40	@ 0x28
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	20000330 	.word	0x20000330
 800939c:	20000011 	.word	0x20000011
 80093a0:	20000368 	.word	0x20000368
 80093a4:	2000033e 	.word	0x2000033e

080093a8 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b086      	sub	sp, #24
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60ba      	str	r2, [r7, #8]
 80093b0:	607b      	str	r3, [r7, #4]
 80093b2:	4603      	mov	r3, r0
 80093b4:	73fb      	strb	r3, [r7, #15]
 80093b6:	460b      	mov	r3, r1
 80093b8:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 80093ba:	f002 fe74 	bl	800c0a6 <RFW_DeInit>
    switch( modem )
 80093be:	7bfb      	ldrb	r3, [r7, #15]
 80093c0:	2b04      	cmp	r3, #4
 80093c2:	f000 80c7 	beq.w	8009554 <RadioSetTxConfig+0x1ac>
 80093c6:	2b04      	cmp	r3, #4
 80093c8:	f300 80d6 	bgt.w	8009578 <RadioSetTxConfig+0x1d0>
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d002      	beq.n	80093d6 <RadioSetTxConfig+0x2e>
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d059      	beq.n	8009488 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80093d4:	e0d0      	b.n	8009578 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80093d6:	4b77      	ldr	r3, [pc, #476]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80093de:	4a75      	ldr	r2, [pc, #468]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 80093e0:	6a3b      	ldr	r3, [r7, #32]
 80093e2:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80093e4:	4b73      	ldr	r3, [pc, #460]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 80093e6:	220b      	movs	r2, #11
 80093e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f002 fd8d 	bl	800bf0c <SUBGRF_GetFskBandwidthRegValue>
 80093f2:	4603      	mov	r3, r0
 80093f4:	461a      	mov	r2, r3
 80093f6:	4b6f      	ldr	r3, [pc, #444]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 80093f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80093fc:	4a6d      	ldr	r2, [pc, #436]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009402:	4b6c      	ldr	r3, [pc, #432]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 8009404:	2200      	movs	r2, #0
 8009406:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8009408:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800940a:	00db      	lsls	r3, r3, #3
 800940c:	b29a      	uxth	r2, r3
 800940e:	4b69      	ldr	r3, [pc, #420]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 8009410:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8009412:	4b68      	ldr	r3, [pc, #416]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 8009414:	2204      	movs	r2, #4
 8009416:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8009418:	4b66      	ldr	r3, [pc, #408]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 800941a:	2218      	movs	r2, #24
 800941c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800941e:	4b65      	ldr	r3, [pc, #404]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 8009420:	2200      	movs	r2, #0
 8009422:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8009424:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009428:	f083 0301 	eor.w	r3, r3, #1
 800942c:	b2db      	uxtb	r3, r3
 800942e:	461a      	mov	r2, r3
 8009430:	4b60      	ldr	r3, [pc, #384]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 8009432:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8009434:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009438:	2b00      	cmp	r3, #0
 800943a:	d003      	beq.n	8009444 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800943c:	4b5d      	ldr	r3, [pc, #372]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 800943e:	22f2      	movs	r2, #242	@ 0xf2
 8009440:	75da      	strb	r2, [r3, #23]
 8009442:	e002      	b.n	800944a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8009444:	4b5b      	ldr	r3, [pc, #364]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 8009446:	2201      	movs	r2, #1
 8009448:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800944a:	4b5a      	ldr	r3, [pc, #360]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 800944c:	2201      	movs	r2, #1
 800944e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8009450:	f000 fb33 	bl	8009aba <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8009454:	2000      	movs	r0, #0
 8009456:	f7ff fcc7 	bl	8008de8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800945a:	4857      	ldr	r0, [pc, #348]	@ (80095b8 <RadioSetTxConfig+0x210>)
 800945c:	f002 f922 	bl	800b6a4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009460:	4856      	ldr	r0, [pc, #344]	@ (80095bc <RadioSetTxConfig+0x214>)
 8009462:	f002 f9f1 	bl	800b848 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8009466:	4a56      	ldr	r2, [pc, #344]	@ (80095c0 <RadioSetTxConfig+0x218>)
 8009468:	f107 0310 	add.w	r3, r7, #16
 800946c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009470:	e883 0003 	stmia.w	r3, {r0, r1}
 8009474:	f107 0310 	add.w	r3, r7, #16
 8009478:	4618      	mov	r0, r3
 800947a:	f001 fcae 	bl	800adda <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800947e:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8009482:	f001 fcf9 	bl	800ae78 <SUBGRF_SetWhiteningSeed>
            break;
 8009486:	e078      	b.n	800957a <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009488:	4b4a      	ldr	r3, [pc, #296]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 800948a:	2201      	movs	r2, #1
 800948c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8009490:	6a3b      	ldr	r3, [r7, #32]
 8009492:	b2da      	uxtb	r2, r3
 8009494:	4b47      	ldr	r3, [pc, #284]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 8009496:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800949a:	4a4a      	ldr	r2, [pc, #296]	@ (80095c4 <RadioSetTxConfig+0x21c>)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4413      	add	r3, r2
 80094a0:	781a      	ldrb	r2, [r3, #0]
 80094a2:	4b44      	ldr	r3, [pc, #272]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 80094a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80094a8:	4a42      	ldr	r2, [pc, #264]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 80094aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80094ae:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d105      	bne.n	80094c4 <RadioSetTxConfig+0x11c>
 80094b8:	6a3b      	ldr	r3, [r7, #32]
 80094ba:	2b0b      	cmp	r3, #11
 80094bc:	d008      	beq.n	80094d0 <RadioSetTxConfig+0x128>
 80094be:	6a3b      	ldr	r3, [r7, #32]
 80094c0:	2b0c      	cmp	r3, #12
 80094c2:	d005      	beq.n	80094d0 <RadioSetTxConfig+0x128>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d107      	bne.n	80094da <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80094ca:	6a3b      	ldr	r3, [r7, #32]
 80094cc:	2b0c      	cmp	r3, #12
 80094ce:	d104      	bne.n	80094da <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80094d0:	4b38      	ldr	r3, [pc, #224]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80094d8:	e003      	b.n	80094e2 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80094da:	4b36      	ldr	r3, [pc, #216]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80094e2:	4b34      	ldr	r3, [pc, #208]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 80094e4:	2201      	movs	r2, #1
 80094e6:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80094e8:	4b32      	ldr	r3, [pc, #200]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 80094ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80094ee:	2b05      	cmp	r3, #5
 80094f0:	d004      	beq.n	80094fc <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80094f2:	4b30      	ldr	r3, [pc, #192]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 80094f4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80094f8:	2b06      	cmp	r3, #6
 80094fa:	d10a      	bne.n	8009512 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 80094fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80094fe:	2b0b      	cmp	r3, #11
 8009500:	d803      	bhi.n	800950a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8009502:	4b2c      	ldr	r3, [pc, #176]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 8009504:	220c      	movs	r2, #12
 8009506:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8009508:	e006      	b.n	8009518 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800950a:	4a2a      	ldr	r2, [pc, #168]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 800950c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800950e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8009510:	e002      	b.n	8009518 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009512:	4a28      	ldr	r2, [pc, #160]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 8009514:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009516:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8009518:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800951c:	4b25      	ldr	r3, [pc, #148]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 800951e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8009520:	4b29      	ldr	r3, [pc, #164]	@ (80095c8 <RadioSetTxConfig+0x220>)
 8009522:	781a      	ldrb	r2, [r3, #0]
 8009524:	4b23      	ldr	r3, [pc, #140]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 8009526:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8009528:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800952c:	4b21      	ldr	r3, [pc, #132]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 800952e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8009532:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8009536:	4b1f      	ldr	r3, [pc, #124]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 8009538:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 800953c:	f000 fabd 	bl	8009aba <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8009540:	2001      	movs	r0, #1
 8009542:	f7ff fc51 	bl	8008de8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009546:	481c      	ldr	r0, [pc, #112]	@ (80095b8 <RadioSetTxConfig+0x210>)
 8009548:	f002 f8ac 	bl	800b6a4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800954c:	481b      	ldr	r0, [pc, #108]	@ (80095bc <RadioSetTxConfig+0x214>)
 800954e:	f002 f97b 	bl	800b848 <SUBGRF_SetPacketParams>
            break;
 8009552:	e012      	b.n	800957a <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8009554:	2004      	movs	r0, #4
 8009556:	f7ff fc47 	bl	8008de8 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800955a:	4b16      	ldr	r3, [pc, #88]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 800955c:	2202      	movs	r2, #2
 800955e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8009562:	4a14      	ldr	r2, [pc, #80]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 8009564:	6a3b      	ldr	r3, [r7, #32]
 8009566:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8009568:	4b12      	ldr	r3, [pc, #72]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 800956a:	2216      	movs	r2, #22
 800956c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009570:	4811      	ldr	r0, [pc, #68]	@ (80095b8 <RadioSetTxConfig+0x210>)
 8009572:	f002 f897 	bl	800b6a4 <SUBGRF_SetModulationParams>
            break;
 8009576:	e000      	b.n	800957a <RadioSetTxConfig+0x1d2>
            break;
 8009578:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800957a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800957e:	4618      	mov	r0, r3
 8009580:	f002 fbc6 	bl	800bd10 <SUBGRF_SetRfTxPower>
 8009584:	4603      	mov	r3, r0
 8009586:	461a      	mov	r2, r3
 8009588:	4b0a      	ldr	r3, [pc, #40]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 800958a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800958e:	210e      	movs	r1, #14
 8009590:	f640 101f 	movw	r0, #2335	@ 0x91f
 8009594:	f002 faa0 	bl	800bad8 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009598:	4b06      	ldr	r3, [pc, #24]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 800959a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800959e:	4618      	mov	r0, r3
 80095a0:	f002 fd95 	bl	800c0ce <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80095a4:	4a03      	ldr	r2, [pc, #12]	@ (80095b4 <RadioSetTxConfig+0x20c>)
 80095a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095a8:	6053      	str	r3, [r2, #4]
}
 80095aa:	bf00      	nop
 80095ac:	3718      	adds	r7, #24
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	20000330 	.word	0x20000330
 80095b8:	20000368 	.word	0x20000368
 80095bc:	2000033e 	.word	0x2000033e
 80095c0:	0800da4c 	.word	0x0800da4c
 80095c4:	0800dce8 	.word	0x0800dce8
 80095c8:	20000011 	.word	0x20000011

080095cc <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
    return true;
 80095d4:	2301      	movs	r3, #1
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	370c      	adds	r7, #12
 80095da:	46bd      	mov	sp, r7
 80095dc:	bc80      	pop	{r7}
 80095de:	4770      	bx	lr

080095e0 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 80095e0:	b480      	push	{r7}
 80095e2:	b085      	sub	sp, #20
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	4603      	mov	r3, r0
 80095e8:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 80095ea:	2300      	movs	r3, #0
 80095ec:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80095ee:	79fb      	ldrb	r3, [r7, #7]
 80095f0:	2b0a      	cmp	r3, #10
 80095f2:	d83e      	bhi.n	8009672 <RadioGetLoRaBandwidthInHz+0x92>
 80095f4:	a201      	add	r2, pc, #4	@ (adr r2, 80095fc <RadioGetLoRaBandwidthInHz+0x1c>)
 80095f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fa:	bf00      	nop
 80095fc:	08009629 	.word	0x08009629
 8009600:	08009639 	.word	0x08009639
 8009604:	08009649 	.word	0x08009649
 8009608:	08009659 	.word	0x08009659
 800960c:	08009661 	.word	0x08009661
 8009610:	08009667 	.word	0x08009667
 8009614:	0800966d 	.word	0x0800966d
 8009618:	08009673 	.word	0x08009673
 800961c:	08009631 	.word	0x08009631
 8009620:	08009641 	.word	0x08009641
 8009624:	08009651 	.word	0x08009651
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8009628:	f641 6384 	movw	r3, #7812	@ 0x1e84
 800962c:	60fb      	str	r3, [r7, #12]
        break;
 800962e:	e020      	b.n	8009672 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8009630:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8009634:	60fb      	str	r3, [r7, #12]
        break;
 8009636:	e01c      	b.n	8009672 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8009638:	f643 5309 	movw	r3, #15625	@ 0x3d09
 800963c:	60fb      	str	r3, [r7, #12]
        break;
 800963e:	e018      	b.n	8009672 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8009640:	f245 1361 	movw	r3, #20833	@ 0x5161
 8009644:	60fb      	str	r3, [r7, #12]
        break;
 8009646:	e014      	b.n	8009672 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8009648:	f647 2312 	movw	r3, #31250	@ 0x7a12
 800964c:	60fb      	str	r3, [r7, #12]
        break;
 800964e:	e010      	b.n	8009672 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8009650:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8009654:	60fb      	str	r3, [r7, #12]
        break;
 8009656:	e00c      	b.n	8009672 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8009658:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800965c:	60fb      	str	r3, [r7, #12]
        break;
 800965e:	e008      	b.n	8009672 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8009660:	4b07      	ldr	r3, [pc, #28]	@ (8009680 <RadioGetLoRaBandwidthInHz+0xa0>)
 8009662:	60fb      	str	r3, [r7, #12]
        break;
 8009664:	e005      	b.n	8009672 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8009666:	4b07      	ldr	r3, [pc, #28]	@ (8009684 <RadioGetLoRaBandwidthInHz+0xa4>)
 8009668:	60fb      	str	r3, [r7, #12]
        break;
 800966a:	e002      	b.n	8009672 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800966c:	4b06      	ldr	r3, [pc, #24]	@ (8009688 <RadioGetLoRaBandwidthInHz+0xa8>)
 800966e:	60fb      	str	r3, [r7, #12]
        break;
 8009670:	bf00      	nop
    }

    return bandwidthInHz;
 8009672:	68fb      	ldr	r3, [r7, #12]
}
 8009674:	4618      	mov	r0, r3
 8009676:	3714      	adds	r7, #20
 8009678:	46bd      	mov	sp, r7
 800967a:	bc80      	pop	{r7}
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	0001e848 	.word	0x0001e848
 8009684:	0003d090 	.word	0x0003d090
 8009688:	0007a120 	.word	0x0007a120

0800968c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	4608      	mov	r0, r1
 8009696:	4611      	mov	r1, r2
 8009698:	461a      	mov	r2, r3
 800969a:	4603      	mov	r3, r0
 800969c:	70fb      	strb	r3, [r7, #3]
 800969e:	460b      	mov	r3, r1
 80096a0:	803b      	strh	r3, [r7, #0]
 80096a2:	4613      	mov	r3, r2
 80096a4:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 80096a6:	883b      	ldrh	r3, [r7, #0]
 80096a8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80096aa:	78ba      	ldrb	r2, [r7, #2]
 80096ac:	f082 0201 	eor.w	r2, r2, #1
 80096b0:	b2d2      	uxtb	r2, r2
 80096b2:	2a00      	cmp	r2, #0
 80096b4:	d001      	beq.n	80096ba <RadioGetGfskTimeOnAirNumerator+0x2e>
 80096b6:	2208      	movs	r2, #8
 80096b8:	e000      	b.n	80096bc <RadioGetGfskTimeOnAirNumerator+0x30>
 80096ba:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80096bc:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80096be:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80096c2:	7c3b      	ldrb	r3, [r7, #16]
 80096c4:	7d39      	ldrb	r1, [r7, #20]
 80096c6:	2900      	cmp	r1, #0
 80096c8:	d001      	beq.n	80096ce <RadioGetGfskTimeOnAirNumerator+0x42>
 80096ca:	2102      	movs	r1, #2
 80096cc:	e000      	b.n	80096d0 <RadioGetGfskTimeOnAirNumerator+0x44>
 80096ce:	2100      	movs	r1, #0
 80096d0:	440b      	add	r3, r1
 80096d2:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80096d4:	4413      	add	r3, r2
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	370c      	adds	r7, #12
 80096da:	46bd      	mov	sp, r7
 80096dc:	bc80      	pop	{r7}
 80096de:	4770      	bx	lr

080096e0 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80096e0:	b480      	push	{r7}
 80096e2:	b08b      	sub	sp, #44	@ 0x2c
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	4611      	mov	r1, r2
 80096ec:	461a      	mov	r2, r3
 80096ee:	460b      	mov	r3, r1
 80096f0:	71fb      	strb	r3, [r7, #7]
 80096f2:	4613      	mov	r3, r2
 80096f4:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80096f6:	79fb      	ldrb	r3, [r7, #7]
 80096f8:	3304      	adds	r3, #4
 80096fa:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80096fc:	2300      	movs	r3, #0
 80096fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	2b05      	cmp	r3, #5
 8009706:	d002      	beq.n	800970e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	2b06      	cmp	r3, #6
 800970c:	d104      	bne.n	8009718 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800970e:	88bb      	ldrh	r3, [r7, #4]
 8009710:	2b0b      	cmp	r3, #11
 8009712:	d801      	bhi.n	8009718 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8009714:	230c      	movs	r3, #12
 8009716:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d105      	bne.n	800972a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	2b0b      	cmp	r3, #11
 8009722:	d008      	beq.n	8009736 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	2b0c      	cmp	r3, #12
 8009728:	d005      	beq.n	8009736 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d105      	bne.n	800973c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	2b0c      	cmp	r3, #12
 8009734:	d102      	bne.n	800973c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8009736:	2301      	movs	r3, #1
 8009738:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800973c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009740:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8009742:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009746:	2a00      	cmp	r2, #0
 8009748:	d001      	beq.n	800974e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 800974a:	2210      	movs	r2, #16
 800974c:	e000      	b.n	8009750 <RadioGetLoRaTimeOnAirNumerator+0x70>
 800974e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8009750:	4413      	add	r3, r2
 8009752:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8009758:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 800975a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800975e:	2a00      	cmp	r2, #0
 8009760:	d001      	beq.n	8009766 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8009762:	2200      	movs	r2, #0
 8009764:	e000      	b.n	8009768 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8009766:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8009768:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800976a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	2b06      	cmp	r3, #6
 8009770:	d803      	bhi.n	800977a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	623b      	str	r3, [r7, #32]
 8009778:	e00e      	b.n	8009798 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	3308      	adds	r3, #8
 800977e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8009780:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009784:	2b00      	cmp	r3, #0
 8009786:	d004      	beq.n	8009792 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	3b02      	subs	r3, #2
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	623b      	str	r3, [r7, #32]
 8009790:	e002      	b.n	8009798 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	2b00      	cmp	r3, #0
 800979c:	da01      	bge.n	80097a2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 800979e:	2300      	movs	r3, #0
 80097a0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80097a2:	69fa      	ldr	r2, [r7, #28]
 80097a4:	6a3b      	ldr	r3, [r7, #32]
 80097a6:	4413      	add	r3, r2
 80097a8:	1e5a      	subs	r2, r3, #1
 80097aa:	6a3b      	ldr	r3, [r7, #32]
 80097ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80097b0:	697a      	ldr	r2, [r7, #20]
 80097b2:	fb03 f202 	mul.w	r2, r3, r2
 80097b6:	88bb      	ldrh	r3, [r7, #4]
 80097b8:	4413      	add	r3, r2
    int32_t intermediate =
 80097ba:	330c      	adds	r3, #12
 80097bc:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	2b06      	cmp	r3, #6
 80097c2:	d802      	bhi.n	80097ca <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	3302      	adds	r3, #2
 80097c8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	1c5a      	adds	r2, r3, #1
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	3b02      	subs	r3, #2
 80097d4:	fa02 f303 	lsl.w	r3, r2, r3
}
 80097d8:	4618      	mov	r0, r3
 80097da:	372c      	adds	r7, #44	@ 0x2c
 80097dc:	46bd      	mov	sp, r7
 80097de:	bc80      	pop	{r7}
 80097e0:	4770      	bx	lr
	...

080097e4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b08a      	sub	sp, #40	@ 0x28
 80097e8:	af04      	add	r7, sp, #16
 80097ea:	60b9      	str	r1, [r7, #8]
 80097ec:	607a      	str	r2, [r7, #4]
 80097ee:	461a      	mov	r2, r3
 80097f0:	4603      	mov	r3, r0
 80097f2:	73fb      	strb	r3, [r7, #15]
 80097f4:	4613      	mov	r3, r2
 80097f6:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80097f8:	2300      	movs	r3, #0
 80097fa:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80097fc:	2301      	movs	r3, #1
 80097fe:	613b      	str	r3, [r7, #16]

    switch( modem )
 8009800:	7bfb      	ldrb	r3, [r7, #15]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d002      	beq.n	800980c <RadioTimeOnAir+0x28>
 8009806:	2b01      	cmp	r3, #1
 8009808:	d017      	beq.n	800983a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 800980a:	e035      	b.n	8009878 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800980c:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8009810:	8c3a      	ldrh	r2, [r7, #32]
 8009812:	7bb9      	ldrb	r1, [r7, #14]
 8009814:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009818:	9301      	str	r3, [sp, #4]
 800981a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800981e:	9300      	str	r3, [sp, #0]
 8009820:	4603      	mov	r3, r0
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f7ff ff32 	bl	800968c <RadioGetGfskTimeOnAirNumerator>
 8009828:	4603      	mov	r3, r0
 800982a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800982e:	fb02 f303 	mul.w	r3, r2, r3
 8009832:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	613b      	str	r3, [r7, #16]
        break;
 8009838:	e01e      	b.n	8009878 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800983a:	8c39      	ldrh	r1, [r7, #32]
 800983c:	7bba      	ldrb	r2, [r7, #14]
 800983e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009842:	9302      	str	r3, [sp, #8]
 8009844:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009848:	9301      	str	r3, [sp, #4]
 800984a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	460b      	mov	r3, r1
 8009852:	6879      	ldr	r1, [r7, #4]
 8009854:	68b8      	ldr	r0, [r7, #8]
 8009856:	f7ff ff43 	bl	80096e0 <RadioGetLoRaTimeOnAirNumerator>
 800985a:	4603      	mov	r3, r0
 800985c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009860:	fb02 f303 	mul.w	r3, r2, r3
 8009864:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8009866:	4a0a      	ldr	r2, [pc, #40]	@ (8009890 <RadioTimeOnAir+0xac>)
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	4413      	add	r3, r2
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	4618      	mov	r0, r3
 8009870:	f7ff feb6 	bl	80095e0 <RadioGetLoRaBandwidthInHz>
 8009874:	6138      	str	r0, [r7, #16]
        break;
 8009876:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8009878:	697a      	ldr	r2, [r7, #20]
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	4413      	add	r3, r2
 800987e:	1e5a      	subs	r2, r3, #1
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8009886:	4618      	mov	r0, r3
 8009888:	3718      	adds	r7, #24
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	0800dce8 	.word	0x0800dce8

08009894 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	460b      	mov	r3, r1
 800989e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80098a0:	2300      	movs	r3, #0
 80098a2:	2200      	movs	r2, #0
 80098a4:	f240 2101 	movw	r1, #513	@ 0x201
 80098a8:	f240 2001 	movw	r0, #513	@ 0x201
 80098ac:	f001 fd64 	bl	800b378 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80098b0:	4b73      	ldr	r3, [pc, #460]	@ (8009a80 <RadioSend+0x1ec>)
 80098b2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80098b6:	2101      	movs	r1, #1
 80098b8:	4618      	mov	r0, r3
 80098ba:	f002 fa01 	bl	800bcc0 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80098be:	4b70      	ldr	r3, [pc, #448]	@ (8009a80 <RadioSend+0x1ec>)
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d112      	bne.n	80098ec <RadioSend+0x58>
 80098c6:	4b6e      	ldr	r3, [pc, #440]	@ (8009a80 <RadioSend+0x1ec>)
 80098c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80098cc:	2b06      	cmp	r3, #6
 80098ce:	d10d      	bne.n	80098ec <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80098d0:	f640 0089 	movw	r0, #2185	@ 0x889
 80098d4:	f002 f914 	bl	800bb00 <SUBGRF_ReadRegister>
 80098d8:	4603      	mov	r3, r0
 80098da:	f023 0304 	bic.w	r3, r3, #4
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	4619      	mov	r1, r3
 80098e2:	f640 0089 	movw	r0, #2185	@ 0x889
 80098e6:	f002 f8f7 	bl	800bad8 <SUBGRF_WriteRegister>
 80098ea:	e00c      	b.n	8009906 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80098ec:	f640 0089 	movw	r0, #2185	@ 0x889
 80098f0:	f002 f906 	bl	800bb00 <SUBGRF_ReadRegister>
 80098f4:	4603      	mov	r3, r0
 80098f6:	f043 0304 	orr.w	r3, r3, #4
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	4619      	mov	r1, r3
 80098fe:	f640 0089 	movw	r0, #2185	@ 0x889
 8009902:	f002 f8e9 	bl	800bad8 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8009906:	4b5e      	ldr	r3, [pc, #376]	@ (8009a80 <RadioSend+0x1ec>)
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	2b04      	cmp	r3, #4
 800990c:	f200 80a8 	bhi.w	8009a60 <RadioSend+0x1cc>
 8009910:	a201      	add	r2, pc, #4	@ (adr r2, 8009918 <RadioSend+0x84>)
 8009912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009916:	bf00      	nop
 8009918:	08009947 	.word	0x08009947
 800991c:	0800992d 	.word	0x0800992d
 8009920:	08009947 	.word	0x08009947
 8009924:	080099a9 	.word	0x080099a9
 8009928:	080099c9 	.word	0x080099c9
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800992c:	4a54      	ldr	r2, [pc, #336]	@ (8009a80 <RadioSend+0x1ec>)
 800992e:	78fb      	ldrb	r3, [r7, #3]
 8009930:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009932:	4854      	ldr	r0, [pc, #336]	@ (8009a84 <RadioSend+0x1f0>)
 8009934:	f001 ff88 	bl	800b848 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8009938:	78fb      	ldrb	r3, [r7, #3]
 800993a:	2200      	movs	r2, #0
 800993c:	4619      	mov	r1, r3
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f001 fa38 	bl	800adb4 <SUBGRF_SendPayload>
            break;
 8009944:	e08d      	b.n	8009a62 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8009946:	f002 fbb4 	bl	800c0b2 <RFW_Is_Init>
 800994a:	4603      	mov	r3, r0
 800994c:	2b01      	cmp	r3, #1
 800994e:	d11e      	bne.n	800998e <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8009950:	f107 020d 	add.w	r2, r7, #13
 8009954:	78fb      	ldrb	r3, [r7, #3]
 8009956:	4619      	mov	r1, r3
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f002 fbc2 	bl	800c0e2 <RFW_TransmitInit>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d10c      	bne.n	800997e <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8009964:	7b7a      	ldrb	r2, [r7, #13]
 8009966:	4b46      	ldr	r3, [pc, #280]	@ (8009a80 <RadioSend+0x1ec>)
 8009968:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800996a:	4846      	ldr	r0, [pc, #280]	@ (8009a84 <RadioSend+0x1f0>)
 800996c:	f001 ff6c 	bl	800b848 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8009970:	7b7b      	ldrb	r3, [r7, #13]
 8009972:	2200      	movs	r2, #0
 8009974:	4619      	mov	r1, r3
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f001 fa1c 	bl	800adb4 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 800997c:	e071      	b.n	8009a62 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 800997e:	4b42      	ldr	r3, [pc, #264]	@ (8009a88 <RadioSend+0x1f4>)
 8009980:	2201      	movs	r2, #1
 8009982:	2100      	movs	r1, #0
 8009984:	2002      	movs	r0, #2
 8009986:	f002 fd1d 	bl	800c3c4 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 800998a:	2303      	movs	r3, #3
 800998c:	e073      	b.n	8009a76 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800998e:	4a3c      	ldr	r2, [pc, #240]	@ (8009a80 <RadioSend+0x1ec>)
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009994:	483b      	ldr	r0, [pc, #236]	@ (8009a84 <RadioSend+0x1f0>)
 8009996:	f001 ff57 	bl	800b848 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 800999a:	78fb      	ldrb	r3, [r7, #3]
 800999c:	2200      	movs	r2, #0
 800999e:	4619      	mov	r1, r3
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f001 fa07 	bl	800adb4 <SUBGRF_SendPayload>
            break;
 80099a6:	e05c      	b.n	8009a62 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80099a8:	4b35      	ldr	r3, [pc, #212]	@ (8009a80 <RadioSend+0x1ec>)
 80099aa:	2202      	movs	r2, #2
 80099ac:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80099ae:	4a34      	ldr	r2, [pc, #208]	@ (8009a80 <RadioSend+0x1ec>)
 80099b0:	78fb      	ldrb	r3, [r7, #3]
 80099b2:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80099b4:	4833      	ldr	r0, [pc, #204]	@ (8009a84 <RadioSend+0x1f0>)
 80099b6:	f001 ff47 	bl	800b848 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80099ba:	78fb      	ldrb	r3, [r7, #3]
 80099bc:	2200      	movs	r2, #0
 80099be:	4619      	mov	r1, r3
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f001 f9f7 	bl	800adb4 <SUBGRF_SendPayload>
            break;
 80099c6:	e04c      	b.n	8009a62 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80099c8:	78fb      	ldrb	r3, [r7, #3]
 80099ca:	461a      	mov	r2, r3
 80099cc:	6879      	ldr	r1, [r7, #4]
 80099ce:	482f      	ldr	r0, [pc, #188]	@ (8009a8c <RadioSend+0x1f8>)
 80099d0:	f000 fcca 	bl	800a368 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80099d4:	4b2a      	ldr	r3, [pc, #168]	@ (8009a80 <RadioSend+0x1ec>)
 80099d6:	2202      	movs	r2, #2
 80099d8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80099da:	78fb      	ldrb	r3, [r7, #3]
 80099dc:	3301      	adds	r3, #1
 80099de:	b2da      	uxtb	r2, r3
 80099e0:	4b27      	ldr	r3, [pc, #156]	@ (8009a80 <RadioSend+0x1ec>)
 80099e2:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80099e4:	4827      	ldr	r0, [pc, #156]	@ (8009a84 <RadioSend+0x1f0>)
 80099e6:	f001 ff2f 	bl	800b848 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 80099ea:	2100      	movs	r1, #0
 80099ec:	20f1      	movs	r0, #241	@ 0xf1
 80099ee:	f000 f965 	bl	8009cbc <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 80099f2:	2100      	movs	r1, #0
 80099f4:	20f0      	movs	r0, #240	@ 0xf0
 80099f6:	f000 f961 	bl	8009cbc <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80099fa:	4b21      	ldr	r3, [pc, #132]	@ (8009a80 <RadioSend+0x1ec>)
 80099fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099fe:	2b64      	cmp	r3, #100	@ 0x64
 8009a00:	d108      	bne.n	8009a14 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8009a02:	2170      	movs	r1, #112	@ 0x70
 8009a04:	20f3      	movs	r0, #243	@ 0xf3
 8009a06:	f000 f959 	bl	8009cbc <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8009a0a:	211d      	movs	r1, #29
 8009a0c:	20f2      	movs	r0, #242	@ 0xf2
 8009a0e:	f000 f955 	bl	8009cbc <RadioWrite>
 8009a12:	e007      	b.n	8009a24 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8009a14:	21e1      	movs	r1, #225	@ 0xe1
 8009a16:	20f3      	movs	r0, #243	@ 0xf3
 8009a18:	f000 f950 	bl	8009cbc <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8009a1c:	2104      	movs	r1, #4
 8009a1e:	20f2      	movs	r0, #242	@ 0xf2
 8009a20:	f000 f94c 	bl	8009cbc <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8009a24:	78fb      	ldrb	r3, [r7, #3]
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	00db      	lsls	r3, r3, #3
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	3302      	adds	r3, #2
 8009a2e:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8009a30:	89fb      	ldrh	r3, [r7, #14]
 8009a32:	0a1b      	lsrs	r3, r3, #8
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	4619      	mov	r1, r3
 8009a3a:	20f4      	movs	r0, #244	@ 0xf4
 8009a3c:	f000 f93e 	bl	8009cbc <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8009a40:	89fb      	ldrh	r3, [r7, #14]
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	4619      	mov	r1, r3
 8009a46:	20f5      	movs	r0, #245	@ 0xf5
 8009a48:	f000 f938 	bl	8009cbc <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8009a4c:	78fb      	ldrb	r3, [r7, #3]
 8009a4e:	3301      	adds	r3, #1
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8009a56:	4619      	mov	r1, r3
 8009a58:	480c      	ldr	r0, [pc, #48]	@ (8009a8c <RadioSend+0x1f8>)
 8009a5a:	f001 f9ab 	bl	800adb4 <SUBGRF_SendPayload>
            break;
 8009a5e:	e000      	b.n	8009a62 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8009a60:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8009a62:	4b07      	ldr	r3, [pc, #28]	@ (8009a80 <RadioSend+0x1ec>)
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	4619      	mov	r1, r3
 8009a68:	4809      	ldr	r0, [pc, #36]	@ (8009a90 <RadioSend+0x1fc>)
 8009a6a:	f003 fb6d 	bl	800d148 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8009a6e:	4808      	ldr	r0, [pc, #32]	@ (8009a90 <RadioSend+0x1fc>)
 8009a70:	f003 fa8c 	bl	800cf8c <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	20000330 	.word	0x20000330
 8009a84:	2000033e 	.word	0x2000033e
 8009a88:	0800da54 	.word	0x0800da54
 8009a8c:	2000022c 	.word	0x2000022c
 8009a90:	2000038c 	.word	0x2000038c

08009a94 <RadioSleep>:

static void RadioSleep( void )
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8009a9e:	793b      	ldrb	r3, [r7, #4]
 8009aa0:	f043 0304 	orr.w	r3, r3, #4
 8009aa4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8009aa6:	7938      	ldrb	r0, [r7, #4]
 8009aa8:	f001 fa60 	bl	800af6c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8009aac:	2002      	movs	r0, #2
 8009aae:	f7f7 f9bd 	bl	8000e2c <HAL_Delay>
}
 8009ab2:	bf00      	nop
 8009ab4:	3708      	adds	r7, #8
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <RadioStandby>:

static void RadioStandby( void )
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8009abe:	2000      	movs	r0, #0
 8009ac0:	f001 fa86 	bl	800afd0 <SUBGRF_SetStandby>
}
 8009ac4:	bf00      	nop
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8009ad0:	f002 faef 	bl	800c0b2 <RFW_Is_Init>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d102      	bne.n	8009ae0 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8009ada:	f002 fb12 	bl	800c102 <RFW_ReceiveInit>
 8009ade:	e007      	b.n	8009af0 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f240 2162 	movw	r1, #610	@ 0x262
 8009ae8:	f240 2062 	movw	r0, #610	@ 0x262
 8009aec:	f001 fc44 	bl	800b378 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d006      	beq.n	8009b04 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8009af6:	6879      	ldr	r1, [r7, #4]
 8009af8:	4811      	ldr	r0, [pc, #68]	@ (8009b40 <RadioRx+0x78>)
 8009afa:	f003 fb25 	bl	800d148 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8009afe:	4810      	ldr	r0, [pc, #64]	@ (8009b40 <RadioRx+0x78>)
 8009b00:	f003 fa44 	bl	800cf8c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8009b04:	4b0f      	ldr	r3, [pc, #60]	@ (8009b44 <RadioRx+0x7c>)
 8009b06:	2200      	movs	r2, #0
 8009b08:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8009b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8009b44 <RadioRx+0x7c>)
 8009b0c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009b10:	2100      	movs	r1, #0
 8009b12:	4618      	mov	r0, r3
 8009b14:	f002 f8d4 	bl	800bcc0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8009b18:	4b0a      	ldr	r3, [pc, #40]	@ (8009b44 <RadioRx+0x7c>)
 8009b1a:	785b      	ldrb	r3, [r3, #1]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d004      	beq.n	8009b2a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8009b20:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8009b24:	f001 fa90 	bl	800b048 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8009b28:	e005      	b.n	8009b36 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8009b2a:	4b06      	ldr	r3, [pc, #24]	@ (8009b44 <RadioRx+0x7c>)
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	019b      	lsls	r3, r3, #6
 8009b30:	4618      	mov	r0, r3
 8009b32:	f001 fa89 	bl	800b048 <SUBGRF_SetRx>
}
 8009b36:	bf00      	nop
 8009b38:	3708      	adds	r7, #8
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	200003a4 	.word	0x200003a4
 8009b44:	20000330 	.word	0x20000330

08009b48 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8009b50:	f002 faaf 	bl	800c0b2 <RFW_Is_Init>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d102      	bne.n	8009b60 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8009b5a:	f002 fad2 	bl	800c102 <RFW_ReceiveInit>
 8009b5e:	e007      	b.n	8009b70 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009b60:	2300      	movs	r3, #0
 8009b62:	2200      	movs	r2, #0
 8009b64:	f240 2162 	movw	r1, #610	@ 0x262
 8009b68:	f240 2062 	movw	r0, #610	@ 0x262
 8009b6c:	f001 fc04 	bl	800b378 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d006      	beq.n	8009b84 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8009b76:	6879      	ldr	r1, [r7, #4]
 8009b78:	4811      	ldr	r0, [pc, #68]	@ (8009bc0 <RadioRxBoosted+0x78>)
 8009b7a:	f003 fae5 	bl	800d148 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8009b7e:	4810      	ldr	r0, [pc, #64]	@ (8009bc0 <RadioRxBoosted+0x78>)
 8009b80:	f003 fa04 	bl	800cf8c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8009b84:	4b0f      	ldr	r3, [pc, #60]	@ (8009bc4 <RadioRxBoosted+0x7c>)
 8009b86:	2200      	movs	r2, #0
 8009b88:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8009b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8009bc4 <RadioRxBoosted+0x7c>)
 8009b8c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009b90:	2100      	movs	r1, #0
 8009b92:	4618      	mov	r0, r3
 8009b94:	f002 f894 	bl	800bcc0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8009b98:	4b0a      	ldr	r3, [pc, #40]	@ (8009bc4 <RadioRxBoosted+0x7c>)
 8009b9a:	785b      	ldrb	r3, [r3, #1]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d004      	beq.n	8009baa <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8009ba0:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8009ba4:	f001 fa70 	bl	800b088 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8009ba8:	e005      	b.n	8009bb6 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8009baa:	4b06      	ldr	r3, [pc, #24]	@ (8009bc4 <RadioRxBoosted+0x7c>)
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	019b      	lsls	r3, r3, #6
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f001 fa69 	bl	800b088 <SUBGRF_SetRxBoosted>
}
 8009bb6:	bf00      	nop
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	200003a4 	.word	0x200003a4
 8009bc4:	20000330 	.word	0x20000330

08009bc8 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	005a      	lsls	r2, r3, #1
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	4413      	add	r3, r2
 8009bda:	4a0c      	ldr	r2, [pc, #48]	@ (8009c0c <RadioSetRxDutyCycle+0x44>)
 8009bdc:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8009bde:	2300      	movs	r3, #0
 8009be0:	2200      	movs	r2, #0
 8009be2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8009be6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8009bea:	f001 fbc5 	bl	800b378 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8009bee:	4b07      	ldr	r3, [pc, #28]	@ (8009c0c <RadioSetRxDutyCycle+0x44>)
 8009bf0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f002 f862 	bl	800bcc0 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8009bfc:	6839      	ldr	r1, [r7, #0]
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f001 fa66 	bl	800b0d0 <SUBGRF_SetRxDutyCycle>
}
 8009c04:	bf00      	nop
 8009c06:	3708      	adds	r7, #8
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	20000330 	.word	0x20000330

08009c10 <RadioStartCad>:

static void RadioStartCad( void )
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8009c14:	4b09      	ldr	r3, [pc, #36]	@ (8009c3c <RadioStartCad+0x2c>)
 8009c16:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f002 f84f 	bl	800bcc0 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8009c22:	2300      	movs	r3, #0
 8009c24:	2200      	movs	r2, #0
 8009c26:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8009c2a:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8009c2e:	f001 fba3 	bl	800b378 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8009c32:	f001 fa79 	bl	800b128 <SUBGRF_SetCad>
}
 8009c36:	bf00      	nop
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	20000330 	.word	0x20000330

08009c40 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	460b      	mov	r3, r1
 8009c4a:	70fb      	strb	r3, [r7, #3]
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8009c50:	883b      	ldrh	r3, [r7, #0]
 8009c52:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009c56:	fb02 f303 	mul.w	r3, r2, r3
 8009c5a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f001 fbe7 	bl	800b430 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8009c62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c66:	4618      	mov	r0, r3
 8009c68:	f002 f852 	bl	800bd10 <SUBGRF_SetRfTxPower>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009c70:	210e      	movs	r1, #14
 8009c72:	f640 101f 	movw	r0, #2335	@ 0x91f
 8009c76:	f001 ff2f 	bl	800bad8 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8009c7a:	7afb      	ldrb	r3, [r7, #11]
 8009c7c:	2101      	movs	r1, #1
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f002 f81e 	bl	800bcc0 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8009c84:	f001 fa5e 	bl	800b144 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8009c88:	68f9      	ldr	r1, [r7, #12]
 8009c8a:	4805      	ldr	r0, [pc, #20]	@ (8009ca0 <RadioSetTxContinuousWave+0x60>)
 8009c8c:	f003 fa5c 	bl	800d148 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8009c90:	4803      	ldr	r0, [pc, #12]	@ (8009ca0 <RadioSetTxContinuousWave+0x60>)
 8009c92:	f003 f97b 	bl	800cf8c <UTIL_TIMER_Start>
}
 8009c96:	bf00      	nop
 8009c98:	3710      	adds	r7, #16
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	2000038c 	.word	0x2000038c

08009ca4 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	4603      	mov	r3, r0
 8009cac:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8009cae:	f001 fe80 	bl	800b9b2 <SUBGRF_GetRssiInst>
 8009cb2:	4603      	mov	r3, r0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	460a      	mov	r2, r1
 8009cc6:	80fb      	strh	r3, [r7, #6]
 8009cc8:	4613      	mov	r3, r2
 8009cca:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8009ccc:	797a      	ldrb	r2, [r7, #5]
 8009cce:	88fb      	ldrh	r3, [r7, #6]
 8009cd0:	4611      	mov	r1, r2
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f001 ff00 	bl	800bad8 <SUBGRF_WriteRegister>
}
 8009cd8:	bf00      	nop
 8009cda:	3708      	adds	r7, #8
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8009cea:	88fb      	ldrh	r3, [r7, #6]
 8009cec:	4618      	mov	r0, r3
 8009cee:	f001 ff07 	bl	800bb00 <SUBGRF_ReadRegister>
 8009cf2:	4603      	mov	r3, r0
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3708      	adds	r7, #8
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	4603      	mov	r3, r0
 8009d04:	6039      	str	r1, [r7, #0]
 8009d06:	80fb      	strh	r3, [r7, #6]
 8009d08:	4613      	mov	r3, r2
 8009d0a:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8009d0c:	797b      	ldrb	r3, [r7, #5]
 8009d0e:	b29a      	uxth	r2, r3
 8009d10:	88fb      	ldrh	r3, [r7, #6]
 8009d12:	6839      	ldr	r1, [r7, #0]
 8009d14:	4618      	mov	r0, r3
 8009d16:	f001 ff07 	bl	800bb28 <SUBGRF_WriteRegisters>
}
 8009d1a:	bf00      	nop
 8009d1c:	3708      	adds	r7, #8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b082      	sub	sp, #8
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	4603      	mov	r3, r0
 8009d2a:	6039      	str	r1, [r7, #0]
 8009d2c:	80fb      	strh	r3, [r7, #6]
 8009d2e:	4613      	mov	r3, r2
 8009d30:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8009d32:	797b      	ldrb	r3, [r7, #5]
 8009d34:	b29a      	uxth	r2, r3
 8009d36:	88fb      	ldrh	r3, [r7, #6]
 8009d38:	6839      	ldr	r1, [r7, #0]
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f001 ff16 	bl	800bb6c <SUBGRF_ReadRegisters>
}
 8009d40:	bf00      	nop
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	4603      	mov	r3, r0
 8009d50:	460a      	mov	r2, r1
 8009d52:	71fb      	strb	r3, [r7, #7]
 8009d54:	4613      	mov	r3, r2
 8009d56:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8009d58:	79fb      	ldrb	r3, [r7, #7]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d10a      	bne.n	8009d74 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8009d5e:	4a0e      	ldr	r2, [pc, #56]	@ (8009d98 <RadioSetMaxPayloadLength+0x50>)
 8009d60:	79bb      	ldrb	r3, [r7, #6]
 8009d62:	7013      	strb	r3, [r2, #0]
 8009d64:	4b0c      	ldr	r3, [pc, #48]	@ (8009d98 <RadioSetMaxPayloadLength+0x50>)
 8009d66:	781a      	ldrb	r2, [r3, #0]
 8009d68:	4b0c      	ldr	r3, [pc, #48]	@ (8009d9c <RadioSetMaxPayloadLength+0x54>)
 8009d6a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009d6c:	480c      	ldr	r0, [pc, #48]	@ (8009da0 <RadioSetMaxPayloadLength+0x58>)
 8009d6e:	f001 fd6b 	bl	800b848 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8009d72:	e00d      	b.n	8009d90 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8009d74:	4b09      	ldr	r3, [pc, #36]	@ (8009d9c <RadioSetMaxPayloadLength+0x54>)
 8009d76:	7d5b      	ldrb	r3, [r3, #21]
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d109      	bne.n	8009d90 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8009d7c:	4a06      	ldr	r2, [pc, #24]	@ (8009d98 <RadioSetMaxPayloadLength+0x50>)
 8009d7e:	79bb      	ldrb	r3, [r7, #6]
 8009d80:	7013      	strb	r3, [r2, #0]
 8009d82:	4b05      	ldr	r3, [pc, #20]	@ (8009d98 <RadioSetMaxPayloadLength+0x50>)
 8009d84:	781a      	ldrb	r2, [r3, #0]
 8009d86:	4b05      	ldr	r3, [pc, #20]	@ (8009d9c <RadioSetMaxPayloadLength+0x54>)
 8009d88:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009d8a:	4805      	ldr	r0, [pc, #20]	@ (8009da0 <RadioSetMaxPayloadLength+0x58>)
 8009d8c:	f001 fd5c 	bl	800b848 <SUBGRF_SetPacketParams>
}
 8009d90:	bf00      	nop
 8009d92:	3708      	adds	r7, #8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	20000011 	.word	0x20000011
 8009d9c:	20000330 	.word	0x20000330
 8009da0:	2000033e 	.word	0x2000033e

08009da4 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	4603      	mov	r3, r0
 8009dac:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8009dae:	4a13      	ldr	r2, [pc, #76]	@ (8009dfc <RadioSetPublicNetwork+0x58>)
 8009db0:	79fb      	ldrb	r3, [r7, #7]
 8009db2:	7313      	strb	r3, [r2, #12]
 8009db4:	4b11      	ldr	r3, [pc, #68]	@ (8009dfc <RadioSetPublicNetwork+0x58>)
 8009db6:	7b1a      	ldrb	r2, [r3, #12]
 8009db8:	4b10      	ldr	r3, [pc, #64]	@ (8009dfc <RadioSetPublicNetwork+0x58>)
 8009dba:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8009dbc:	2001      	movs	r0, #1
 8009dbe:	f7ff f813 	bl	8008de8 <RadioSetModem>
    if( enable == true )
 8009dc2:	79fb      	ldrb	r3, [r7, #7]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d00a      	beq.n	8009dde <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8009dc8:	2134      	movs	r1, #52	@ 0x34
 8009dca:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8009dce:	f001 fe83 	bl	800bad8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8009dd2:	2144      	movs	r1, #68	@ 0x44
 8009dd4:	f240 7041 	movw	r0, #1857	@ 0x741
 8009dd8:	f001 fe7e 	bl	800bad8 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8009ddc:	e009      	b.n	8009df2 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8009dde:	2114      	movs	r1, #20
 8009de0:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8009de4:	f001 fe78 	bl	800bad8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8009de8:	2124      	movs	r1, #36	@ 0x24
 8009dea:	f240 7041 	movw	r0, #1857	@ 0x741
 8009dee:	f001 fe73 	bl	800bad8 <SUBGRF_WriteRegister>
}
 8009df2:	bf00      	nop
 8009df4:	3708      	adds	r7, #8
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	20000330 	.word	0x20000330

08009e00 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8009e04:	f001 ffb8 	bl	800bd78 <SUBGRF_GetRadioWakeUpTime>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	3303      	adds	r3, #3
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8009e18:	f000 f80e 	bl	8009e38 <RadioOnTxTimeoutProcess>
}
 8009e1c:	bf00      	nop
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8009e2c:	f000 f818 	bl	8009e60 <RadioOnRxTimeoutProcess>
}
 8009e30:	bf00      	nop
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8009e3c:	4b07      	ldr	r3, [pc, #28]	@ (8009e5c <RadioOnTxTimeoutProcess+0x24>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d008      	beq.n	8009e56 <RadioOnTxTimeoutProcess+0x1e>
 8009e44:	4b05      	ldr	r3, [pc, #20]	@ (8009e5c <RadioOnTxTimeoutProcess+0x24>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d003      	beq.n	8009e56 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8009e4e:	4b03      	ldr	r3, [pc, #12]	@ (8009e5c <RadioOnTxTimeoutProcess+0x24>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	4798      	blx	r3
    }
}
 8009e56:	bf00      	nop
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	2000032c 	.word	0x2000032c

08009e60 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009e64:	4b07      	ldr	r3, [pc, #28]	@ (8009e84 <RadioOnRxTimeoutProcess+0x24>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d008      	beq.n	8009e7e <RadioOnRxTimeoutProcess+0x1e>
 8009e6c:	4b05      	ldr	r3, [pc, #20]	@ (8009e84 <RadioOnRxTimeoutProcess+0x24>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d003      	beq.n	8009e7e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8009e76:	4b03      	ldr	r3, [pc, #12]	@ (8009e84 <RadioOnRxTimeoutProcess+0x24>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	4798      	blx	r3
    }
}
 8009e7e:	bf00      	nop
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	2000032c 	.word	0x2000032c

08009e88 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	4603      	mov	r3, r0
 8009e90:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8009e92:	4a05      	ldr	r2, [pc, #20]	@ (8009ea8 <RadioOnDioIrq+0x20>)
 8009e94:	88fb      	ldrh	r3, [r7, #6]
 8009e96:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8009e9a:	f000 f807 	bl	8009eac <RadioIrqProcess>
}
 8009e9e:	bf00      	nop
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	20000330 	.word	0x20000330

08009eac <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8009eac:	b5b0      	push	{r4, r5, r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8009eba:	4ba8      	ldr	r3, [pc, #672]	@ (800a15c <RadioIrqProcess+0x2b0>)
 8009ebc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8009ec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ec4:	f000 810d 	beq.w	800a0e2 <RadioIrqProcess+0x236>
 8009ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ecc:	f300 81e8 	bgt.w	800a2a0 <RadioIrqProcess+0x3f4>
 8009ed0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ed4:	f000 80f1 	beq.w	800a0ba <RadioIrqProcess+0x20e>
 8009ed8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009edc:	f300 81e0 	bgt.w	800a2a0 <RadioIrqProcess+0x3f4>
 8009ee0:	2b80      	cmp	r3, #128	@ 0x80
 8009ee2:	f000 80d6 	beq.w	800a092 <RadioIrqProcess+0x1e6>
 8009ee6:	2b80      	cmp	r3, #128	@ 0x80
 8009ee8:	f300 81da 	bgt.w	800a2a0 <RadioIrqProcess+0x3f4>
 8009eec:	2b20      	cmp	r3, #32
 8009eee:	dc49      	bgt.n	8009f84 <RadioIrqProcess+0xd8>
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	f340 81d5 	ble.w	800a2a0 <RadioIrqProcess+0x3f4>
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	2b1f      	cmp	r3, #31
 8009efa:	f200 81d1 	bhi.w	800a2a0 <RadioIrqProcess+0x3f4>
 8009efe:	a201      	add	r2, pc, #4	@ (adr r2, 8009f04 <RadioIrqProcess+0x58>)
 8009f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f04:	08009f8d 	.word	0x08009f8d
 8009f08:	08009fc7 	.word	0x08009fc7
 8009f0c:	0800a2a1 	.word	0x0800a2a1
 8009f10:	0800a17d 	.word	0x0800a17d
 8009f14:	0800a2a1 	.word	0x0800a2a1
 8009f18:	0800a2a1 	.word	0x0800a2a1
 8009f1c:	0800a2a1 	.word	0x0800a2a1
 8009f20:	0800a1f9 	.word	0x0800a1f9
 8009f24:	0800a2a1 	.word	0x0800a2a1
 8009f28:	0800a2a1 	.word	0x0800a2a1
 8009f2c:	0800a2a1 	.word	0x0800a2a1
 8009f30:	0800a2a1 	.word	0x0800a2a1
 8009f34:	0800a2a1 	.word	0x0800a2a1
 8009f38:	0800a2a1 	.word	0x0800a2a1
 8009f3c:	0800a2a1 	.word	0x0800a2a1
 8009f40:	0800a215 	.word	0x0800a215
 8009f44:	0800a2a1 	.word	0x0800a2a1
 8009f48:	0800a2a1 	.word	0x0800a2a1
 8009f4c:	0800a2a1 	.word	0x0800a2a1
 8009f50:	0800a2a1 	.word	0x0800a2a1
 8009f54:	0800a2a1 	.word	0x0800a2a1
 8009f58:	0800a2a1 	.word	0x0800a2a1
 8009f5c:	0800a2a1 	.word	0x0800a2a1
 8009f60:	0800a2a1 	.word	0x0800a2a1
 8009f64:	0800a2a1 	.word	0x0800a2a1
 8009f68:	0800a2a1 	.word	0x0800a2a1
 8009f6c:	0800a2a1 	.word	0x0800a2a1
 8009f70:	0800a2a1 	.word	0x0800a2a1
 8009f74:	0800a2a1 	.word	0x0800a2a1
 8009f78:	0800a2a1 	.word	0x0800a2a1
 8009f7c:	0800a2a1 	.word	0x0800a2a1
 8009f80:	0800a223 	.word	0x0800a223
 8009f84:	2b40      	cmp	r3, #64	@ 0x40
 8009f86:	f000 816d 	beq.w	800a264 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8009f8a:	e189      	b.n	800a2a0 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8009f8c:	4874      	ldr	r0, [pc, #464]	@ (800a160 <RadioIrqProcess+0x2b4>)
 8009f8e:	f003 f86b 	bl	800d068 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8009f92:	2000      	movs	r0, #0
 8009f94:	f001 f81c 	bl	800afd0 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8009f98:	f002 f892 	bl	800c0c0 <RFW_Is_LongPacketModeEnabled>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d101      	bne.n	8009fa6 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8009fa2:	f002 f8b6 	bl	800c112 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8009fa6:	4b6f      	ldr	r3, [pc, #444]	@ (800a164 <RadioIrqProcess+0x2b8>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	f000 817a 	beq.w	800a2a4 <RadioIrqProcess+0x3f8>
 8009fb0:	4b6c      	ldr	r3, [pc, #432]	@ (800a164 <RadioIrqProcess+0x2b8>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	f000 8174 	beq.w	800a2a4 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8009fbc:	4b69      	ldr	r3, [pc, #420]	@ (800a164 <RadioIrqProcess+0x2b8>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4798      	blx	r3
        break;
 8009fc4:	e16e      	b.n	800a2a4 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8009fc6:	4868      	ldr	r0, [pc, #416]	@ (800a168 <RadioIrqProcess+0x2bc>)
 8009fc8:	f003 f84e 	bl	800d068 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8009fcc:	4b63      	ldr	r3, [pc, #396]	@ (800a15c <RadioIrqProcess+0x2b0>)
 8009fce:	785b      	ldrb	r3, [r3, #1]
 8009fd0:	f083 0301 	eor.w	r3, r3, #1
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d014      	beq.n	800a004 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8009fda:	2000      	movs	r0, #0
 8009fdc:	f000 fff8 	bl	800afd0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	f640 1002 	movw	r0, #2306	@ 0x902
 8009fe6:	f001 fd77 	bl	800bad8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8009fea:	f640 1044 	movw	r0, #2372	@ 0x944
 8009fee:	f001 fd87 	bl	800bb00 <SUBGRF_ReadRegister>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	f043 0302 	orr.w	r3, r3, #2
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	f640 1044 	movw	r0, #2372	@ 0x944
 800a000:	f001 fd6a 	bl	800bad8 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800a004:	1dfb      	adds	r3, r7, #7
 800a006:	22ff      	movs	r2, #255	@ 0xff
 800a008:	4619      	mov	r1, r3
 800a00a:	4858      	ldr	r0, [pc, #352]	@ (800a16c <RadioIrqProcess+0x2c0>)
 800a00c:	f000 feb0 	bl	800ad70 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800a010:	4857      	ldr	r0, [pc, #348]	@ (800a170 <RadioIrqProcess+0x2c4>)
 800a012:	f001 fd0f 	bl	800ba34 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800a016:	4b53      	ldr	r3, [pc, #332]	@ (800a164 <RadioIrqProcess+0x2b8>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f000 8144 	beq.w	800a2a8 <RadioIrqProcess+0x3fc>
 800a020:	4b50      	ldr	r3, [pc, #320]	@ (800a164 <RadioIrqProcess+0x2b8>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	2b00      	cmp	r3, #0
 800a028:	f000 813e 	beq.w	800a2a8 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 800a02c:	4b4b      	ldr	r3, [pc, #300]	@ (800a15c <RadioIrqProcess+0x2b0>)
 800a02e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a032:	2b01      	cmp	r3, #1
 800a034:	d10e      	bne.n	800a054 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 800a036:	4b4b      	ldr	r3, [pc, #300]	@ (800a164 <RadioIrqProcess+0x2b8>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	689c      	ldr	r4, [r3, #8]
 800a03c:	79fb      	ldrb	r3, [r7, #7]
 800a03e:	4619      	mov	r1, r3
 800a040:	4b46      	ldr	r3, [pc, #280]	@ (800a15c <RadioIrqProcess+0x2b0>)
 800a042:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 800a046:	461a      	mov	r2, r3
 800a048:	4b44      	ldr	r3, [pc, #272]	@ (800a15c <RadioIrqProcess+0x2b0>)
 800a04a:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 800a04e:	4847      	ldr	r0, [pc, #284]	@ (800a16c <RadioIrqProcess+0x2c0>)
 800a050:	47a0      	blx	r4
                break;
 800a052:	e01d      	b.n	800a090 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800a054:	4b41      	ldr	r3, [pc, #260]	@ (800a15c <RadioIrqProcess+0x2b0>)
 800a056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a058:	463a      	mov	r2, r7
 800a05a:	4611      	mov	r1, r2
 800a05c:	4618      	mov	r0, r3
 800a05e:	f001 ff7d 	bl	800bf5c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800a062:	4b40      	ldr	r3, [pc, #256]	@ (800a164 <RadioIrqProcess+0x2b8>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	689c      	ldr	r4, [r3, #8]
 800a068:	79fb      	ldrb	r3, [r7, #7]
 800a06a:	4619      	mov	r1, r3
 800a06c:	4b3b      	ldr	r3, [pc, #236]	@ (800a15c <RadioIrqProcess+0x2b0>)
 800a06e:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 800a072:	4618      	mov	r0, r3
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800a07a:	4a3e      	ldr	r2, [pc, #248]	@ (800a174 <RadioIrqProcess+0x2c8>)
 800a07c:	fb82 5203 	smull	r5, r2, r2, r3
 800a080:	1192      	asrs	r2, r2, #6
 800a082:	17db      	asrs	r3, r3, #31
 800a084:	1ad3      	subs	r3, r2, r3
 800a086:	b25b      	sxtb	r3, r3
 800a088:	4602      	mov	r2, r0
 800a08a:	4838      	ldr	r0, [pc, #224]	@ (800a16c <RadioIrqProcess+0x2c0>)
 800a08c:	47a0      	blx	r4
                break;
 800a08e:	bf00      	nop
        break;
 800a090:	e10a      	b.n	800a2a8 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 800a092:	2000      	movs	r0, #0
 800a094:	f000 ff9c 	bl	800afd0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800a098:	4b32      	ldr	r3, [pc, #200]	@ (800a164 <RadioIrqProcess+0x2b8>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f000 8105 	beq.w	800a2ac <RadioIrqProcess+0x400>
 800a0a2:	4b30      	ldr	r3, [pc, #192]	@ (800a164 <RadioIrqProcess+0x2b8>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	699b      	ldr	r3, [r3, #24]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f000 80ff 	beq.w	800a2ac <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 800a0ae:	4b2d      	ldr	r3, [pc, #180]	@ (800a164 <RadioIrqProcess+0x2b8>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	699b      	ldr	r3, [r3, #24]
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	4798      	blx	r3
        break;
 800a0b8:	e0f8      	b.n	800a2ac <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	f000 ff88 	bl	800afd0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800a0c0:	4b28      	ldr	r3, [pc, #160]	@ (800a164 <RadioIrqProcess+0x2b8>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	f000 80f3 	beq.w	800a2b0 <RadioIrqProcess+0x404>
 800a0ca:	4b26      	ldr	r3, [pc, #152]	@ (800a164 <RadioIrqProcess+0x2b8>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	699b      	ldr	r3, [r3, #24]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f000 80ed 	beq.w	800a2b0 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 800a0d6:	4b23      	ldr	r3, [pc, #140]	@ (800a164 <RadioIrqProcess+0x2b8>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	699b      	ldr	r3, [r3, #24]
 800a0dc:	2001      	movs	r0, #1
 800a0de:	4798      	blx	r3
        break;
 800a0e0:	e0e6      	b.n	800a2b0 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800a0e2:	4b25      	ldr	r3, [pc, #148]	@ (800a178 <RadioIrqProcess+0x2cc>)
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	2100      	movs	r1, #0
 800a0e8:	2002      	movs	r0, #2
 800a0ea:	f002 f96b 	bl	800c3c4 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800a0ee:	f000 fe25 	bl	800ad3c <SUBGRF_GetOperatingMode>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b04      	cmp	r3, #4
 800a0f6:	d115      	bne.n	800a124 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 800a0f8:	4819      	ldr	r0, [pc, #100]	@ (800a160 <RadioIrqProcess+0x2b4>)
 800a0fa:	f002 ffb5 	bl	800d068 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800a0fe:	2000      	movs	r0, #0
 800a100:	f000 ff66 	bl	800afd0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800a104:	4b17      	ldr	r3, [pc, #92]	@ (800a164 <RadioIrqProcess+0x2b8>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f000 80d3 	beq.w	800a2b4 <RadioIrqProcess+0x408>
 800a10e:	4b15      	ldr	r3, [pc, #84]	@ (800a164 <RadioIrqProcess+0x2b8>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	f000 80cd 	beq.w	800a2b4 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 800a11a:	4b12      	ldr	r3, [pc, #72]	@ (800a164 <RadioIrqProcess+0x2b8>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	4798      	blx	r3
        break;
 800a122:	e0c7      	b.n	800a2b4 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800a124:	f000 fe0a 	bl	800ad3c <SUBGRF_GetOperatingMode>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b05      	cmp	r3, #5
 800a12c:	f040 80c2 	bne.w	800a2b4 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 800a130:	480d      	ldr	r0, [pc, #52]	@ (800a168 <RadioIrqProcess+0x2bc>)
 800a132:	f002 ff99 	bl	800d068 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800a136:	2000      	movs	r0, #0
 800a138:	f000 ff4a 	bl	800afd0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800a13c:	4b09      	ldr	r3, [pc, #36]	@ (800a164 <RadioIrqProcess+0x2b8>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	f000 80b7 	beq.w	800a2b4 <RadioIrqProcess+0x408>
 800a146:	4b07      	ldr	r3, [pc, #28]	@ (800a164 <RadioIrqProcess+0x2b8>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f000 80b1 	beq.w	800a2b4 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 800a152:	4b04      	ldr	r3, [pc, #16]	@ (800a164 <RadioIrqProcess+0x2b8>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	4798      	blx	r3
        break;
 800a15a:	e0ab      	b.n	800a2b4 <RadioIrqProcess+0x408>
 800a15c:	20000330 	.word	0x20000330
 800a160:	2000038c 	.word	0x2000038c
 800a164:	2000032c 	.word	0x2000032c
 800a168:	200003a4 	.word	0x200003a4
 800a16c:	2000022c 	.word	0x2000022c
 800a170:	20000354 	.word	0x20000354
 800a174:	10624dd3 	.word	0x10624dd3
 800a178:	0800da6c 	.word	0x0800da6c
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800a17c:	4b54      	ldr	r3, [pc, #336]	@ (800a2d0 <RadioIrqProcess+0x424>)
 800a17e:	2201      	movs	r2, #1
 800a180:	2100      	movs	r1, #0
 800a182:	2002      	movs	r0, #2
 800a184:	f002 f91e 	bl	800c3c4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800a188:	4b52      	ldr	r3, [pc, #328]	@ (800a2d4 <RadioIrqProcess+0x428>)
 800a18a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	f000 8093 	beq.w	800a2b8 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800a192:	4a51      	ldr	r2, [pc, #324]	@ (800a2d8 <RadioIrqProcess+0x42c>)
 800a194:	4b4f      	ldr	r3, [pc, #316]	@ (800a2d4 <RadioIrqProcess+0x428>)
 800a196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a198:	0c1b      	lsrs	r3, r3, #16
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	4619      	mov	r1, r3
 800a19e:	f640 1003 	movw	r0, #2307	@ 0x903
 800a1a2:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800a1a4:	4a4c      	ldr	r2, [pc, #304]	@ (800a2d8 <RadioIrqProcess+0x42c>)
 800a1a6:	4b4b      	ldr	r3, [pc, #300]	@ (800a2d4 <RadioIrqProcess+0x428>)
 800a1a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1aa:	0a1b      	lsrs	r3, r3, #8
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	f640 1004 	movw	r0, #2308	@ 0x904
 800a1b4:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 800a1b6:	4a48      	ldr	r2, [pc, #288]	@ (800a2d8 <RadioIrqProcess+0x42c>)
 800a1b8:	4b46      	ldr	r3, [pc, #280]	@ (800a2d4 <RadioIrqProcess+0x428>)
 800a1ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	4619      	mov	r1, r3
 800a1c0:	f640 1005 	movw	r0, #2309	@ 0x905
 800a1c4:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800a1c6:	4c44      	ldr	r4, [pc, #272]	@ (800a2d8 <RadioIrqProcess+0x42c>)
 800a1c8:	4b44      	ldr	r3, [pc, #272]	@ (800a2dc <RadioIrqProcess+0x430>)
 800a1ca:	f640 1002 	movw	r0, #2306	@ 0x902
 800a1ce:	4798      	blx	r3
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	f043 0301 	orr.w	r3, r3, #1
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	4619      	mov	r1, r3
 800a1da:	f640 1002 	movw	r0, #2306	@ 0x902
 800a1de:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800a1e0:	4b3c      	ldr	r3, [pc, #240]	@ (800a2d4 <RadioIrqProcess+0x428>)
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f240 2162 	movw	r1, #610	@ 0x262
 800a1ee:	f240 2062 	movw	r0, #610	@ 0x262
 800a1f2:	f001 f8c1 	bl	800b378 <SUBGRF_SetDioIrqParams>
        break;
 800a1f6:	e05f      	b.n	800a2b8 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 800a1f8:	4b39      	ldr	r3, [pc, #228]	@ (800a2e0 <RadioIrqProcess+0x434>)
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	2002      	movs	r0, #2
 800a200:	f002 f8e0 	bl	800c3c4 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 800a204:	f001 ff55 	bl	800c0b2 <RFW_Is_Init>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d156      	bne.n	800a2bc <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 800a20e:	f001 ff86 	bl	800c11e <RFW_ReceivePayload>
        break;
 800a212:	e053      	b.n	800a2bc <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800a214:	4b33      	ldr	r3, [pc, #204]	@ (800a2e4 <RadioIrqProcess+0x438>)
 800a216:	2201      	movs	r2, #1
 800a218:	2100      	movs	r1, #0
 800a21a:	2002      	movs	r0, #2
 800a21c:	f002 f8d2 	bl	800c3c4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a220:	e051      	b.n	800a2c6 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 800a222:	4831      	ldr	r0, [pc, #196]	@ (800a2e8 <RadioIrqProcess+0x43c>)
 800a224:	f002 ff20 	bl	800d068 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800a228:	4b2a      	ldr	r3, [pc, #168]	@ (800a2d4 <RadioIrqProcess+0x428>)
 800a22a:	785b      	ldrb	r3, [r3, #1]
 800a22c:	f083 0301 	eor.w	r3, r3, #1
 800a230:	b2db      	uxtb	r3, r3
 800a232:	2b00      	cmp	r3, #0
 800a234:	d002      	beq.n	800a23c <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 800a236:	2000      	movs	r0, #0
 800a238:	f000 feca 	bl	800afd0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800a23c:	4b2b      	ldr	r3, [pc, #172]	@ (800a2ec <RadioIrqProcess+0x440>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d03d      	beq.n	800a2c0 <RadioIrqProcess+0x414>
 800a244:	4b29      	ldr	r3, [pc, #164]	@ (800a2ec <RadioIrqProcess+0x440>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d038      	beq.n	800a2c0 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 800a24e:	4b27      	ldr	r3, [pc, #156]	@ (800a2ec <RadioIrqProcess+0x440>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800a256:	4b26      	ldr	r3, [pc, #152]	@ (800a2f0 <RadioIrqProcess+0x444>)
 800a258:	2201      	movs	r2, #1
 800a25a:	2100      	movs	r1, #0
 800a25c:	2002      	movs	r0, #2
 800a25e:	f002 f8b1 	bl	800c3c4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a262:	e02d      	b.n	800a2c0 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800a264:	4b23      	ldr	r3, [pc, #140]	@ (800a2f4 <RadioIrqProcess+0x448>)
 800a266:	2201      	movs	r2, #1
 800a268:	2100      	movs	r1, #0
 800a26a:	2002      	movs	r0, #2
 800a26c:	f002 f8aa 	bl	800c3c4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800a270:	4b18      	ldr	r3, [pc, #96]	@ (800a2d4 <RadioIrqProcess+0x428>)
 800a272:	785b      	ldrb	r3, [r3, #1]
 800a274:	f083 0301 	eor.w	r3, r3, #1
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d002      	beq.n	800a284 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 800a27e:	2000      	movs	r0, #0
 800a280:	f000 fea6 	bl	800afd0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800a284:	4b19      	ldr	r3, [pc, #100]	@ (800a2ec <RadioIrqProcess+0x440>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d01b      	beq.n	800a2c4 <RadioIrqProcess+0x418>
 800a28c:	4b17      	ldr	r3, [pc, #92]	@ (800a2ec <RadioIrqProcess+0x440>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	691b      	ldr	r3, [r3, #16]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d016      	beq.n	800a2c4 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 800a296:	4b15      	ldr	r3, [pc, #84]	@ (800a2ec <RadioIrqProcess+0x440>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	691b      	ldr	r3, [r3, #16]
 800a29c:	4798      	blx	r3
        break;
 800a29e:	e011      	b.n	800a2c4 <RadioIrqProcess+0x418>
        break;
 800a2a0:	bf00      	nop
 800a2a2:	e010      	b.n	800a2c6 <RadioIrqProcess+0x41a>
        break;
 800a2a4:	bf00      	nop
 800a2a6:	e00e      	b.n	800a2c6 <RadioIrqProcess+0x41a>
        break;
 800a2a8:	bf00      	nop
 800a2aa:	e00c      	b.n	800a2c6 <RadioIrqProcess+0x41a>
        break;
 800a2ac:	bf00      	nop
 800a2ae:	e00a      	b.n	800a2c6 <RadioIrqProcess+0x41a>
        break;
 800a2b0:	bf00      	nop
 800a2b2:	e008      	b.n	800a2c6 <RadioIrqProcess+0x41a>
        break;
 800a2b4:	bf00      	nop
 800a2b6:	e006      	b.n	800a2c6 <RadioIrqProcess+0x41a>
        break;
 800a2b8:	bf00      	nop
 800a2ba:	e004      	b.n	800a2c6 <RadioIrqProcess+0x41a>
        break;
 800a2bc:	bf00      	nop
 800a2be:	e002      	b.n	800a2c6 <RadioIrqProcess+0x41a>
        break;
 800a2c0:	bf00      	nop
 800a2c2:	e000      	b.n	800a2c6 <RadioIrqProcess+0x41a>
        break;
 800a2c4:	bf00      	nop
    }
}
 800a2c6:	bf00      	nop
 800a2c8:	3708      	adds	r7, #8
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bdb0      	pop	{r4, r5, r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	0800da80 	.word	0x0800da80
 800a2d4:	20000330 	.word	0x20000330
 800a2d8:	08009cbd 	.word	0x08009cbd
 800a2dc:	08009ce1 	.word	0x08009ce1
 800a2e0:	0800da8c 	.word	0x0800da8c
 800a2e4:	0800da98 	.word	0x0800da98
 800a2e8:	200003a4 	.word	0x200003a4
 800a2ec:	2000032c 	.word	0x2000032c
 800a2f0:	0800daa4 	.word	0x0800daa4
 800a2f4:	0800dab0 	.word	0x0800dab0

0800a2f8 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800a2fc:	4b09      	ldr	r3, [pc, #36]	@ (800a324 <RadioTxPrbs+0x2c>)
 800a2fe:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800a302:	2101      	movs	r1, #1
 800a304:	4618      	mov	r0, r3
 800a306:	f001 fcdb 	bl	800bcc0 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800a30a:	4b07      	ldr	r3, [pc, #28]	@ (800a328 <RadioTxPrbs+0x30>)
 800a30c:	212d      	movs	r1, #45	@ 0x2d
 800a30e:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800a312:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800a314:	f000 ff1f 	bl	800b156 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800a318:	4804      	ldr	r0, [pc, #16]	@ (800a32c <RadioTxPrbs+0x34>)
 800a31a:	f000 fe75 	bl	800b008 <SUBGRF_SetTx>
}
 800a31e:	bf00      	nop
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	20000330 	.word	0x20000330
 800a328:	08009cbd 	.word	0x08009cbd
 800a32c:	000fffff 	.word	0x000fffff

0800a330 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	4603      	mov	r3, r0
 800a338:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800a33a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a33e:	4618      	mov	r0, r3
 800a340:	f001 fce6 	bl	800bd10 <SUBGRF_SetRfTxPower>
 800a344:	4603      	mov	r3, r0
 800a346:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800a348:	210e      	movs	r1, #14
 800a34a:	f640 101f 	movw	r0, #2335	@ 0x91f
 800a34e:	f001 fbc3 	bl	800bad8 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800a352:	7bfb      	ldrb	r3, [r7, #15]
 800a354:	2101      	movs	r1, #1
 800a356:	4618      	mov	r0, r3
 800a358:	f001 fcb2 	bl	800bcc0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800a35c:	f000 fef2 	bl	800b144 <SUBGRF_SetTxContinuousWave>
}
 800a360:	bf00      	nop
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800a368:	b480      	push	{r7}
 800a36a:	b089      	sub	sp, #36	@ 0x24
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	4613      	mov	r3, r2
 800a374:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800a376:	2300      	movs	r3, #0
 800a378:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 800a37a:	2300      	movs	r3, #0
 800a37c:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 800a37e:	2300      	movs	r3, #0
 800a380:	61bb      	str	r3, [r7, #24]
 800a382:	e011      	b.n	800a3a8 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	68ba      	ldr	r2, [r7, #8]
 800a388:	4413      	add	r3, r2
 800a38a:	781a      	ldrb	r2, [r3, #0]
 800a38c:	69bb      	ldr	r3, [r7, #24]
 800a38e:	68b9      	ldr	r1, [r7, #8]
 800a390:	440b      	add	r3, r1
 800a392:	43d2      	mvns	r2, r2
 800a394:	b2d2      	uxtb	r2, r2
 800a396:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800a398:	69bb      	ldr	r3, [r7, #24]
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	4413      	add	r3, r2
 800a39e:	2200      	movs	r2, #0
 800a3a0:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	61bb      	str	r3, [r7, #24]
 800a3a8:	79fb      	ldrb	r3, [r7, #7]
 800a3aa:	69ba      	ldr	r2, [r7, #24]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	dbe9      	blt.n	800a384 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	61bb      	str	r3, [r7, #24]
 800a3b4:	e049      	b.n	800a44a <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800a3b6:	69bb      	ldr	r3, [r7, #24]
 800a3b8:	425a      	negs	r2, r3
 800a3ba:	f003 0307 	and.w	r3, r3, #7
 800a3be:	f002 0207 	and.w	r2, r2, #7
 800a3c2:	bf58      	it	pl
 800a3c4:	4253      	negpl	r3, r2
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	f1c3 0307 	rsb	r3, r3, #7
 800a3cc:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800a3ce:	69bb      	ldr	r3, [r7, #24]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	da00      	bge.n	800a3d6 <payload_integration+0x6e>
 800a3d4:	3307      	adds	r3, #7
 800a3d6:	10db      	asrs	r3, r3, #3
 800a3d8:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	3301      	adds	r3, #1
 800a3de:	425a      	negs	r2, r3
 800a3e0:	f003 0307 	and.w	r3, r3, #7
 800a3e4:	f002 0207 	and.w	r2, r2, #7
 800a3e8:	bf58      	it	pl
 800a3ea:	4253      	negpl	r3, r2
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	f1c3 0307 	rsb	r3, r3, #7
 800a3f2:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800a3f4:	69bb      	ldr	r3, [r7, #24]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	da00      	bge.n	800a3fe <payload_integration+0x96>
 800a3fc:	3307      	adds	r3, #7
 800a3fe:	10db      	asrs	r3, r3, #3
 800a400:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800a402:	7dbb      	ldrb	r3, [r7, #22]
 800a404:	68ba      	ldr	r2, [r7, #8]
 800a406:	4413      	add	r3, r2
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	461a      	mov	r2, r3
 800a40c:	7dfb      	ldrb	r3, [r7, #23]
 800a40e:	fa42 f303 	asr.w	r3, r2, r3
 800a412:	b2db      	uxtb	r3, r3
 800a414:	f003 0301 	and.w	r3, r3, #1
 800a418:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800a41a:	7ffa      	ldrb	r2, [r7, #31]
 800a41c:	7cfb      	ldrb	r3, [r7, #19]
 800a41e:	4053      	eors	r3, r2
 800a420:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800a422:	7d3b      	ldrb	r3, [r7, #20]
 800a424:	68fa      	ldr	r2, [r7, #12]
 800a426:	4413      	add	r3, r2
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	b25a      	sxtb	r2, r3
 800a42c:	7ff9      	ldrb	r1, [r7, #31]
 800a42e:	7d7b      	ldrb	r3, [r7, #21]
 800a430:	fa01 f303 	lsl.w	r3, r1, r3
 800a434:	b25b      	sxtb	r3, r3
 800a436:	4313      	orrs	r3, r2
 800a438:	b259      	sxtb	r1, r3
 800a43a:	7d3b      	ldrb	r3, [r7, #20]
 800a43c:	68fa      	ldr	r2, [r7, #12]
 800a43e:	4413      	add	r3, r2
 800a440:	b2ca      	uxtb	r2, r1
 800a442:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 800a444:	69bb      	ldr	r3, [r7, #24]
 800a446:	3301      	adds	r3, #1
 800a448:	61bb      	str	r3, [r7, #24]
 800a44a:	79fb      	ldrb	r3, [r7, #7]
 800a44c:	00db      	lsls	r3, r3, #3
 800a44e:	69ba      	ldr	r2, [r7, #24]
 800a450:	429a      	cmp	r2, r3
 800a452:	dbb0      	blt.n	800a3b6 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800a454:	7ffb      	ldrb	r3, [r7, #31]
 800a456:	01db      	lsls	r3, r3, #7
 800a458:	b25a      	sxtb	r2, r3
 800a45a:	7ffb      	ldrb	r3, [r7, #31]
 800a45c:	019b      	lsls	r3, r3, #6
 800a45e:	b25b      	sxtb	r3, r3
 800a460:	4313      	orrs	r3, r2
 800a462:	b25b      	sxtb	r3, r3
 800a464:	7ffa      	ldrb	r2, [r7, #31]
 800a466:	2a00      	cmp	r2, #0
 800a468:	d101      	bne.n	800a46e <payload_integration+0x106>
 800a46a:	2220      	movs	r2, #32
 800a46c:	e000      	b.n	800a470 <payload_integration+0x108>
 800a46e:	2200      	movs	r2, #0
 800a470:	4313      	orrs	r3, r2
 800a472:	b259      	sxtb	r1, r3
 800a474:	79fb      	ldrb	r3, [r7, #7]
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	4413      	add	r3, r2
 800a47a:	b2ca      	uxtb	r2, r1
 800a47c:	701a      	strb	r2, [r3, #0]
}
 800a47e:	bf00      	nop
 800a480:	3724      	adds	r7, #36	@ 0x24
 800a482:	46bd      	mov	sp, r7
 800a484:	bc80      	pop	{r7}
 800a486:	4770      	bx	lr

0800a488 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b08c      	sub	sp, #48	@ 0x30
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60b9      	str	r1, [r7, #8]
 800a490:	607a      	str	r2, [r7, #4]
 800a492:	603b      	str	r3, [r7, #0]
 800a494:	4603      	mov	r3, r0
 800a496:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 800a498:	2300      	movs	r3, #0
 800a49a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 800a49c:	2300      	movs	r3, #0
 800a49e:	623b      	str	r3, [r7, #32]
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800a4a4:	f001 fdff 	bl	800c0a6 <RFW_DeInit>

    if( rxContinuous != 0 )
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d001      	beq.n	800a4b2 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	bf14      	ite	ne
 800a4b8:	2301      	movne	r3, #1
 800a4ba:	2300      	moveq	r3, #0
 800a4bc:	b2da      	uxtb	r2, r3
 800a4be:	4ba3      	ldr	r3, [pc, #652]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a4c0:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800a4c2:	7bfb      	ldrb	r3, [r7, #15]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d003      	beq.n	800a4d0 <RadioSetRxGenericConfig+0x48>
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	f000 80dc 	beq.w	800a686 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800a4ce:	e194      	b.n	800a7fa <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d003      	beq.n	800a4e0 <RadioSetRxGenericConfig+0x58>
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d102      	bne.n	800a4e6 <RadioSetRxGenericConfig+0x5e>
            return -1;
 800a4e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4e4:	e18a      	b.n	800a7fc <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	7f9b      	ldrb	r3, [r3, #30]
 800a4ea:	2b08      	cmp	r3, #8
 800a4ec:	d902      	bls.n	800a4f4 <RadioSetRxGenericConfig+0x6c>
            return -1;
 800a4ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f2:	e183      	b.n	800a7fc <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	6919      	ldr	r1, [r3, #16]
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	7f9b      	ldrb	r3, [r3, #30]
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	f107 0320 	add.w	r3, r7, #32
 800a502:	4618      	mov	r0, r3
 800a504:	f002 fa7c 	bl	800ca00 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	bf14      	ite	ne
 800a510:	2301      	movne	r3, #1
 800a512:	2300      	moveq	r3, #0
 800a514:	b2db      	uxtb	r3, r3
 800a516:	4618      	mov	r0, r3
 800a518:	f000 fe26 	bl	800b168 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a51c:	4b8b      	ldr	r3, [pc, #556]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a51e:	2200      	movs	r2, #0
 800a520:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	4a88      	ldr	r2, [pc, #544]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a52a:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	f893 2020 	ldrb.w	r2, [r3, #32]
 800a532:	4b86      	ldr	r3, [pc, #536]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a534:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	4618      	mov	r0, r3
 800a53e:	f001 fce5 	bl	800bf0c <SUBGRF_GetFskBandwidthRegValue>
 800a542:	4603      	mov	r3, r0
 800a544:	461a      	mov	r2, r3
 800a546:	4b81      	ldr	r3, [pc, #516]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a548:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a54c:	4b7f      	ldr	r3, [pc, #508]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a54e:	2200      	movs	r2, #0
 800a550:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	b29b      	uxth	r3, r3
 800a558:	00db      	lsls	r3, r3, #3
 800a55a:	b29a      	uxth	r2, r3
 800a55c:	4b7b      	ldr	r3, [pc, #492]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a55e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	7fda      	ldrb	r2, [r3, #31]
 800a564:	4b79      	ldr	r3, [pc, #484]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a566:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	7f9b      	ldrb	r3, [r3, #30]
 800a56c:	00db      	lsls	r3, r3, #3
 800a56e:	b2da      	uxtb	r2, r3
 800a570:	4b76      	ldr	r3, [pc, #472]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a572:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800a57a:	4b74      	ldr	r3, [pc, #464]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a57c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a584:	2b00      	cmp	r3, #0
 800a586:	d105      	bne.n	800a594 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	695b      	ldr	r3, [r3, #20]
 800a58c:	b2da      	uxtb	r2, r3
 800a58e:	4b6f      	ldr	r3, [pc, #444]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a590:	759a      	strb	r2, [r3, #22]
 800a592:	e00b      	b.n	800a5ac <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a59a:	2b02      	cmp	r3, #2
 800a59c:	d103      	bne.n	800a5a6 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800a59e:	4b6b      	ldr	r3, [pc, #428]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a5a0:	22ff      	movs	r2, #255	@ 0xff
 800a5a2:	759a      	strb	r2, [r3, #22]
 800a5a4:	e002      	b.n	800a5ac <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800a5a6:	4b69      	ldr	r3, [pc, #420]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a5a8:	22ff      	movs	r2, #255	@ 0xff
 800a5aa:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	d004      	beq.n	800a5c0 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a5bc:	2b02      	cmp	r3, #2
 800a5be:	d12d      	bne.n	800a61c <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800a5c6:	2bf1      	cmp	r3, #241	@ 0xf1
 800a5c8:	d00c      	beq.n	800a5e4 <RadioSetRxGenericConfig+0x15c>
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800a5d0:	2bf2      	cmp	r3, #242	@ 0xf2
 800a5d2:	d007      	beq.n	800a5e4 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d002      	beq.n	800a5e4 <RadioSetRxGenericConfig+0x15c>
                return -1;
 800a5de:	f04f 33ff 	mov.w	r3, #4294967295
 800a5e2:	e10b      	b.n	800a7fc <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800a5ec:	4b58      	ldr	r3, [pc, #352]	@ (800a750 <RadioSetRxGenericConfig+0x2c8>)
 800a5ee:	6819      	ldr	r1, [r3, #0]
 800a5f0:	f107 0314 	add.w	r3, r7, #20
 800a5f4:	4a57      	ldr	r2, [pc, #348]	@ (800a754 <RadioSetRxGenericConfig+0x2cc>)
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f001 fd48 	bl	800c08c <RFW_Init>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d002      	beq.n	800a608 <RadioSetRxGenericConfig+0x180>
                return -1;
 800a602:	f04f 33ff 	mov.w	r3, #4294967295
 800a606:	e0f9      	b.n	800a7fc <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800a608:	4b50      	ldr	r3, [pc, #320]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a60a:	2200      	movs	r2, #0
 800a60c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800a60e:	4b4f      	ldr	r3, [pc, #316]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a610:	2201      	movs	r2, #1
 800a612:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800a614:	4b4d      	ldr	r3, [pc, #308]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a616:	2200      	movs	r2, #0
 800a618:	755a      	strb	r2, [r3, #21]
        {
 800a61a:	e00e      	b.n	800a63a <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800a622:	4b4a      	ldr	r3, [pc, #296]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a624:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800a62c:	4b47      	ldr	r3, [pc, #284]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a62e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800a636:	4b45      	ldr	r3, [pc, #276]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a638:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800a63a:	f7ff fa3e 	bl	8009aba <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800a63e:	2000      	movs	r0, #0
 800a640:	f7fe fbd2 	bl	8008de8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a644:	4844      	ldr	r0, [pc, #272]	@ (800a758 <RadioSetRxGenericConfig+0x2d0>)
 800a646:	f001 f82d 	bl	800b6a4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a64a:	4844      	ldr	r0, [pc, #272]	@ (800a75c <RadioSetRxGenericConfig+0x2d4>)
 800a64c:	f001 f8fc 	bl	800b848 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800a650:	f107 0320 	add.w	r3, r7, #32
 800a654:	4618      	mov	r0, r3
 800a656:	f000 fbc0 	bl	800adda <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	8b9b      	ldrh	r3, [r3, #28]
 800a65e:	4618      	mov	r0, r3
 800a660:	f000 fc0a 	bl	800ae78 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	8b1b      	ldrh	r3, [r3, #24]
 800a668:	4618      	mov	r0, r3
 800a66a:	f000 fbe5 	bl	800ae38 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800a674:	fb03 f202 	mul.w	r2, r3, r2
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a680:	4a32      	ldr	r2, [pc, #200]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a682:	6093      	str	r3, [r2, #8]
        break;
 800a684:	e0b9      	b.n	800a7fa <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d102      	bne.n	800a694 <RadioSetRxGenericConfig+0x20c>
            return -1;
 800a68e:	f04f 33ff 	mov.w	r3, #4294967295
 800a692:	e0b3      	b.n	800a7fc <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d104      	bne.n	800a6a8 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	695b      	ldr	r3, [r3, #20]
 800a6a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a6a6:	e002      	b.n	800a6ae <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 800a6a8:	23ff      	movs	r3, #255	@ 0xff
 800a6aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	bf14      	ite	ne
 800a6b6:	2301      	movne	r3, #1
 800a6b8:	2300      	moveq	r3, #0
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f000 fd53 	bl	800b168 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f000 fd5d 	bl	800b186 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800a6cc:	4b1f      	ldr	r3, [pc, #124]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800a6da:	4b1c      	ldr	r3, [pc, #112]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a6dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800a6e6:	4b19      	ldr	r3, [pc, #100]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a6e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 800a6f2:	4b16      	ldr	r3, [pc, #88]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a6f4:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	d010      	beq.n	800a724 <RadioSetRxGenericConfig+0x29c>
 800a702:	2b02      	cmp	r3, #2
 800a704:	dc2c      	bgt.n	800a760 <RadioSetRxGenericConfig+0x2d8>
 800a706:	2b00      	cmp	r3, #0
 800a708:	d002      	beq.n	800a710 <RadioSetRxGenericConfig+0x288>
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d005      	beq.n	800a71a <RadioSetRxGenericConfig+0x292>
            break;
 800a70e:	e027      	b.n	800a760 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800a710:	4b0e      	ldr	r3, [pc, #56]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a712:	2200      	movs	r2, #0
 800a714:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a718:	e023      	b.n	800a762 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800a71a:	4b0c      	ldr	r3, [pc, #48]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a71c:	2201      	movs	r2, #1
 800a71e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a722:	e01e      	b.n	800a762 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a72a:	2b0b      	cmp	r3, #11
 800a72c:	d004      	beq.n	800a738 <RadioSetRxGenericConfig+0x2b0>
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a734:	2b0c      	cmp	r3, #12
 800a736:	d104      	bne.n	800a742 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800a738:	4b04      	ldr	r3, [pc, #16]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a740:	e00f      	b.n	800a762 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800a742:	4b02      	ldr	r3, [pc, #8]	@ (800a74c <RadioSetRxGenericConfig+0x2c4>)
 800a744:	2200      	movs	r2, #0
 800a746:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a74a:	e00a      	b.n	800a762 <RadioSetRxGenericConfig+0x2da>
 800a74c:	20000330 	.word	0x20000330
 800a750:	2000032c 	.word	0x2000032c
 800a754:	200003a4 	.word	0x200003a4
 800a758:	20000368 	.word	0x20000368
 800a75c:	2000033e 	.word	0x2000033e
            break;
 800a760:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800a762:	4b28      	ldr	r3, [pc, #160]	@ (800a804 <RadioSetRxGenericConfig+0x37c>)
 800a764:	2201      	movs	r2, #1
 800a766:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800a76c:	4b25      	ldr	r3, [pc, #148]	@ (800a804 <RadioSetRxGenericConfig+0x37c>)
 800a76e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 800a776:	4b23      	ldr	r3, [pc, #140]	@ (800a804 <RadioSetRxGenericConfig+0x37c>)
 800a778:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800a77a:	4a22      	ldr	r2, [pc, #136]	@ (800a804 <RadioSetRxGenericConfig+0x37c>)
 800a77c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a780:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800a788:	4b1e      	ldr	r3, [pc, #120]	@ (800a804 <RadioSetRxGenericConfig+0x37c>)
 800a78a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 800a794:	4b1b      	ldr	r3, [pc, #108]	@ (800a804 <RadioSetRxGenericConfig+0x37c>)
 800a796:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 800a79a:	f7ff f98e 	bl	8009aba <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800a79e:	2001      	movs	r0, #1
 800a7a0:	f7fe fb22 	bl	8008de8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a7a4:	4818      	ldr	r0, [pc, #96]	@ (800a808 <RadioSetRxGenericConfig+0x380>)
 800a7a6:	f000 ff7d 	bl	800b6a4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a7aa:	4818      	ldr	r0, [pc, #96]	@ (800a80c <RadioSetRxGenericConfig+0x384>)
 800a7ac:	f001 f84c 	bl	800b848 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800a7b0:	4b14      	ldr	r3, [pc, #80]	@ (800a804 <RadioSetRxGenericConfig+0x37c>)
 800a7b2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d10d      	bne.n	800a7d6 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800a7ba:	f240 7036 	movw	r0, #1846	@ 0x736
 800a7be:	f001 f99f 	bl	800bb00 <SUBGRF_ReadRegister>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	f023 0304 	bic.w	r3, r3, #4
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	f240 7036 	movw	r0, #1846	@ 0x736
 800a7d0:	f001 f982 	bl	800bad8 <SUBGRF_WriteRegister>
 800a7d4:	e00c      	b.n	800a7f0 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800a7d6:	f240 7036 	movw	r0, #1846	@ 0x736
 800a7da:	f001 f991 	bl	800bb00 <SUBGRF_ReadRegister>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	f043 0304 	orr.w	r3, r3, #4
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	f240 7036 	movw	r0, #1846	@ 0x736
 800a7ec:	f001 f974 	bl	800bad8 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800a7f0:	4b04      	ldr	r3, [pc, #16]	@ (800a804 <RadioSetRxGenericConfig+0x37c>)
 800a7f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a7f6:	609a      	str	r2, [r3, #8]
        break;
 800a7f8:	bf00      	nop
    }
    return status;
 800a7fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3730      	adds	r7, #48	@ 0x30
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}
 800a804:	20000330 	.word	0x20000330
 800a808:	20000368 	.word	0x20000368
 800a80c:	2000033e 	.word	0x2000033e

0800a810 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b08e      	sub	sp, #56	@ 0x38
 800a814:	af00      	add	r7, sp, #0
 800a816:	60b9      	str	r1, [r7, #8]
 800a818:	607b      	str	r3, [r7, #4]
 800a81a:	4603      	mov	r3, r0
 800a81c:	73fb      	strb	r3, [r7, #15]
 800a81e:	4613      	mov	r3, r2
 800a820:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 800a822:	2300      	movs	r3, #0
 800a824:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a826:	2300      	movs	r3, #0
 800a828:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800a82a:	f001 fc3c 	bl	800c0a6 <RFW_DeInit>
    switch( modem )
 800a82e:	7bfb      	ldrb	r3, [r7, #15]
 800a830:	2b03      	cmp	r3, #3
 800a832:	f200 8204 	bhi.w	800ac3e <RadioSetTxGenericConfig+0x42e>
 800a836:	a201      	add	r2, pc, #4	@ (adr r2, 800a83c <RadioSetTxGenericConfig+0x2c>)
 800a838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a83c:	0800a9c1 	.word	0x0800a9c1
 800a840:	0800ab09 	.word	0x0800ab09
 800a844:	0800ac01 	.word	0x0800ac01
 800a848:	0800a84d 	.word	0x0800a84d
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	7c9b      	ldrb	r3, [r3, #18]
 800a850:	2b08      	cmp	r3, #8
 800a852:	d902      	bls.n	800a85a <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 800a854:	f04f 33ff 	mov.w	r3, #4294967295
 800a858:	e206      	b.n	800ac68 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	6899      	ldr	r1, [r3, #8]
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	7c9b      	ldrb	r3, [r3, #18]
 800a862:	461a      	mov	r2, r3
 800a864:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a868:	4618      	mov	r0, r3
 800a86a:	f002 f8c9 	bl	800ca00 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d102      	bne.n	800a87c <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 800a876:	f04f 33ff 	mov.w	r3, #4294967295
 800a87a:	e1f5      	b.n	800ac68 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a884:	4293      	cmp	r3, r2
 800a886:	d813      	bhi.n	800a8b0 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 800a888:	2302      	movs	r3, #2
 800a88a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800a88e:	4b99      	ldr	r3, [pc, #612]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800a890:	2203      	movs	r2, #3
 800a892:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 800a894:	4b97      	ldr	r3, [pc, #604]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800a896:	2203      	movs	r2, #3
 800a898:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a94      	ldr	r2, [pc, #592]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800a8a2:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	7cda      	ldrb	r2, [r3, #19]
 800a8a8:	4b92      	ldr	r3, [pc, #584]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800a8aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a8ae:	e017      	b.n	800a8e0 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a8b6:	4b8f      	ldr	r3, [pc, #572]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a8bc:	4b8d      	ldr	r3, [pc, #564]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a8a      	ldr	r2, [pc, #552]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800a8ca:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	7cda      	ldrb	r2, [r3, #19]
 800a8d0:	4b88      	ldr	r3, [pc, #544]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800a8d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	089b      	lsrs	r3, r3, #2
 800a8dc:	4a85      	ldr	r2, [pc, #532]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800a8de:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	00db      	lsls	r3, r3, #3
 800a8e8:	b29a      	uxth	r2, r3
 800a8ea:	4b82      	ldr	r3, [pc, #520]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800a8ec:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800a8ee:	4b81      	ldr	r3, [pc, #516]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800a8f0:	2204      	movs	r2, #4
 800a8f2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	7c9b      	ldrb	r3, [r3, #18]
 800a8f8:	00db      	lsls	r3, r3, #3
 800a8fa:	b2da      	uxtb	r2, r3
 800a8fc:	4b7d      	ldr	r3, [pc, #500]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800a8fe:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800a900:	4b7c      	ldr	r3, [pc, #496]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800a902:	2200      	movs	r2, #0
 800a904:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	7d9b      	ldrb	r3, [r3, #22]
 800a90a:	2b02      	cmp	r3, #2
 800a90c:	d003      	beq.n	800a916 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	7d1b      	ldrb	r3, [r3, #20]
 800a912:	2b02      	cmp	r3, #2
 800a914:	d12b      	bne.n	800a96e <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	7d5b      	ldrb	r3, [r3, #21]
 800a91a:	2bf1      	cmp	r3, #241	@ 0xf1
 800a91c:	d00a      	beq.n	800a934 <RadioSetTxGenericConfig+0x124>
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	7d5b      	ldrb	r3, [r3, #21]
 800a922:	2bf2      	cmp	r3, #242	@ 0xf2
 800a924:	d006      	beq.n	800a934 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	7d5b      	ldrb	r3, [r3, #21]
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d002      	beq.n	800a934 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 800a92e:	f04f 33ff 	mov.w	r3, #4294967295
 800a932:	e199      	b.n	800ac68 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 800a938:	2301      	movs	r3, #1
 800a93a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800a93e:	4b6e      	ldr	r3, [pc, #440]	@ (800aaf8 <RadioSetTxGenericConfig+0x2e8>)
 800a940:	6819      	ldr	r1, [r3, #0]
 800a942:	f107 0320 	add.w	r3, r7, #32
 800a946:	4a6d      	ldr	r2, [pc, #436]	@ (800aafc <RadioSetTxGenericConfig+0x2ec>)
 800a948:	4618      	mov	r0, r3
 800a94a:	f001 fb9f 	bl	800c08c <RFW_Init>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d002      	beq.n	800a95a <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 800a954:	f04f 33ff 	mov.w	r3, #4294967295
 800a958:	e186      	b.n	800ac68 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800a95a:	4b66      	ldr	r3, [pc, #408]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800a95c:	2200      	movs	r2, #0
 800a95e:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800a960:	4b64      	ldr	r3, [pc, #400]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800a962:	2201      	movs	r2, #1
 800a964:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800a966:	4b63      	ldr	r3, [pc, #396]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800a968:	2200      	movs	r2, #0
 800a96a:	755a      	strb	r2, [r3, #21]
        {
 800a96c:	e00b      	b.n	800a986 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	7d5a      	ldrb	r2, [r3, #21]
 800a972:	4b60      	ldr	r3, [pc, #384]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800a974:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	7d9a      	ldrb	r2, [r3, #22]
 800a97a:	4b5e      	ldr	r3, [pc, #376]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800a97c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	7d1a      	ldrb	r2, [r3, #20]
 800a982:	4b5c      	ldr	r3, [pc, #368]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800a984:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800a986:	f7ff f898 	bl	8009aba <RadioStandby>
        RadioSetModem( radio_modem );
 800a98a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a98e:	4618      	mov	r0, r3
 800a990:	f7fe fa2a 	bl	8008de8 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a994:	485a      	ldr	r0, [pc, #360]	@ (800ab00 <RadioSetTxGenericConfig+0x2f0>)
 800a996:	f000 fe85 	bl	800b6a4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a99a:	485a      	ldr	r0, [pc, #360]	@ (800ab04 <RadioSetTxGenericConfig+0x2f4>)
 800a99c:	f000 ff54 	bl	800b848 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800a9a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f000 fa18 	bl	800adda <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	8a1b      	ldrh	r3, [r3, #16]
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f000 fa62 	bl	800ae78 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	899b      	ldrh	r3, [r3, #12]
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f000 fa3d 	bl	800ae38 <SUBGRF_SetCrcPolynomial>
        break;
 800a9be:	e13f      	b.n	800ac40 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d102      	bne.n	800a9ce <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 800a9c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a9cc:	e14c      	b.n	800ac68 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	7c9b      	ldrb	r3, [r3, #18]
 800a9d2:	2b08      	cmp	r3, #8
 800a9d4:	d902      	bls.n	800a9dc <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 800a9d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a9da:	e145      	b.n	800ac68 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	6899      	ldr	r1, [r3, #8]
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	7c9b      	ldrb	r3, [r3, #18]
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f002 f808 	bl	800ca00 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a9f0:	4b40      	ldr	r3, [pc, #256]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a3d      	ldr	r2, [pc, #244]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800a9fe:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	7cda      	ldrb	r2, [r3, #19]
 800aa04:	4b3b      	ldr	r3, [pc, #236]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800aa06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	699b      	ldr	r3, [r3, #24]
 800aa0e:	4a39      	ldr	r2, [pc, #228]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800aa10:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800aa12:	4b38      	ldr	r3, [pc, #224]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800aa14:	2200      	movs	r2, #0
 800aa16:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	00db      	lsls	r3, r3, #3
 800aa20:	b29a      	uxth	r2, r3
 800aa22:	4b34      	ldr	r3, [pc, #208]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800aa24:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800aa26:	4b33      	ldr	r3, [pc, #204]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800aa28:	2204      	movs	r2, #4
 800aa2a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	7c9b      	ldrb	r3, [r3, #18]
 800aa30:	00db      	lsls	r3, r3, #3
 800aa32:	b2da      	uxtb	r2, r3
 800aa34:	4b2f      	ldr	r3, [pc, #188]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800aa36:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800aa38:	4b2e      	ldr	r3, [pc, #184]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	7d9b      	ldrb	r3, [r3, #22]
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	d003      	beq.n	800aa4e <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	7d1b      	ldrb	r3, [r3, #20]
 800aa4a:	2b02      	cmp	r3, #2
 800aa4c:	d12a      	bne.n	800aaa4 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	7d5b      	ldrb	r3, [r3, #21]
 800aa52:	2bf1      	cmp	r3, #241	@ 0xf1
 800aa54:	d00a      	beq.n	800aa6c <RadioSetTxGenericConfig+0x25c>
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	7d5b      	ldrb	r3, [r3, #21]
 800aa5a:	2bf2      	cmp	r3, #242	@ 0xf2
 800aa5c:	d006      	beq.n	800aa6c <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	7d5b      	ldrb	r3, [r3, #21]
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d002      	beq.n	800aa6c <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 800aa66:	f04f 33ff 	mov.w	r3, #4294967295
 800aa6a:	e0fd      	b.n	800ac68 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800aa74:	4b20      	ldr	r3, [pc, #128]	@ (800aaf8 <RadioSetTxGenericConfig+0x2e8>)
 800aa76:	6819      	ldr	r1, [r3, #0]
 800aa78:	f107 0314 	add.w	r3, r7, #20
 800aa7c:	4a1f      	ldr	r2, [pc, #124]	@ (800aafc <RadioSetTxGenericConfig+0x2ec>)
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f001 fb04 	bl	800c08c <RFW_Init>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d002      	beq.n	800aa90 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 800aa8a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa8e:	e0eb      	b.n	800ac68 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800aa90:	4b18      	ldr	r3, [pc, #96]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800aa92:	2200      	movs	r2, #0
 800aa94:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800aa96:	4b17      	ldr	r3, [pc, #92]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800aa98:	2201      	movs	r2, #1
 800aa9a:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800aa9c:	4b15      	ldr	r3, [pc, #84]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	755a      	strb	r2, [r3, #21]
        {
 800aaa2:	e00b      	b.n	800aabc <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	7d5a      	ldrb	r2, [r3, #21]
 800aaa8:	4b12      	ldr	r3, [pc, #72]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800aaaa:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	7d9a      	ldrb	r2, [r3, #22]
 800aab0:	4b10      	ldr	r3, [pc, #64]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800aab2:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	7d1a      	ldrb	r2, [r3, #20]
 800aab8:	4b0e      	ldr	r3, [pc, #56]	@ (800aaf4 <RadioSetTxGenericConfig+0x2e4>)
 800aaba:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800aabc:	f7fe fffd 	bl	8009aba <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800aac0:	2000      	movs	r0, #0
 800aac2:	f7fe f991 	bl	8008de8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800aac6:	480e      	ldr	r0, [pc, #56]	@ (800ab00 <RadioSetTxGenericConfig+0x2f0>)
 800aac8:	f000 fdec 	bl	800b6a4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800aacc:	480d      	ldr	r0, [pc, #52]	@ (800ab04 <RadioSetTxGenericConfig+0x2f4>)
 800aace:	f000 febb 	bl	800b848 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800aad2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800aad6:	4618      	mov	r0, r3
 800aad8:	f000 f97f 	bl	800adda <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	8a1b      	ldrh	r3, [r3, #16]
 800aae0:	4618      	mov	r0, r3
 800aae2:	f000 f9c9 	bl	800ae78 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	899b      	ldrh	r3, [r3, #12]
 800aaea:	4618      	mov	r0, r3
 800aaec:	f000 f9a4 	bl	800ae38 <SUBGRF_SetCrcPolynomial>
        break;
 800aaf0:	e0a6      	b.n	800ac40 <RadioSetTxGenericConfig+0x430>
 800aaf2:	bf00      	nop
 800aaf4:	20000330 	.word	0x20000330
 800aaf8:	2000032c 	.word	0x2000032c
 800aafc:	2000038c 	.word	0x2000038c
 800ab00:	20000368 	.word	0x20000368
 800ab04:	2000033e 	.word	0x2000033e
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800ab08:	4b59      	ldr	r3, [pc, #356]	@ (800ac70 <RadioSetTxGenericConfig+0x460>)
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	781a      	ldrb	r2, [r3, #0]
 800ab14:	4b56      	ldr	r3, [pc, #344]	@ (800ac70 <RadioSetTxGenericConfig+0x460>)
 800ab16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	785a      	ldrb	r2, [r3, #1]
 800ab1e:	4b54      	ldr	r3, [pc, #336]	@ (800ac70 <RadioSetTxGenericConfig+0x460>)
 800ab20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	789a      	ldrb	r2, [r3, #2]
 800ab28:	4b51      	ldr	r3, [pc, #324]	@ (800ac70 <RadioSetTxGenericConfig+0x460>)
 800ab2a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	78db      	ldrb	r3, [r3, #3]
 800ab32:	2b02      	cmp	r3, #2
 800ab34:	d010      	beq.n	800ab58 <RadioSetTxGenericConfig+0x348>
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	dc20      	bgt.n	800ab7c <RadioSetTxGenericConfig+0x36c>
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d002      	beq.n	800ab44 <RadioSetTxGenericConfig+0x334>
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d005      	beq.n	800ab4e <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 800ab42:	e01b      	b.n	800ab7c <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800ab44:	4b4a      	ldr	r3, [pc, #296]	@ (800ac70 <RadioSetTxGenericConfig+0x460>)
 800ab46:	2200      	movs	r2, #0
 800ab48:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800ab4c:	e017      	b.n	800ab7e <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800ab4e:	4b48      	ldr	r3, [pc, #288]	@ (800ac70 <RadioSetTxGenericConfig+0x460>)
 800ab50:	2201      	movs	r2, #1
 800ab52:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800ab56:	e012      	b.n	800ab7e <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	2b0b      	cmp	r3, #11
 800ab5e:	d003      	beq.n	800ab68 <RadioSetTxGenericConfig+0x358>
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	2b0c      	cmp	r3, #12
 800ab66:	d104      	bne.n	800ab72 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800ab68:	4b41      	ldr	r3, [pc, #260]	@ (800ac70 <RadioSetTxGenericConfig+0x460>)
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800ab70:	e005      	b.n	800ab7e <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800ab72:	4b3f      	ldr	r3, [pc, #252]	@ (800ac70 <RadioSetTxGenericConfig+0x460>)
 800ab74:	2200      	movs	r2, #0
 800ab76:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800ab7a:	e000      	b.n	800ab7e <RadioSetTxGenericConfig+0x36e>
            break;
 800ab7c:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800ab7e:	4b3c      	ldr	r3, [pc, #240]	@ (800ac70 <RadioSetTxGenericConfig+0x460>)
 800ab80:	2201      	movs	r2, #1
 800ab82:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	889a      	ldrh	r2, [r3, #4]
 800ab88:	4b39      	ldr	r3, [pc, #228]	@ (800ac70 <RadioSetTxGenericConfig+0x460>)
 800ab8a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	799a      	ldrb	r2, [r3, #6]
 800ab90:	4b37      	ldr	r3, [pc, #220]	@ (800ac70 <RadioSetTxGenericConfig+0x460>)
 800ab92:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	79da      	ldrb	r2, [r3, #7]
 800ab98:	4b35      	ldr	r3, [pc, #212]	@ (800ac70 <RadioSetTxGenericConfig+0x460>)
 800ab9a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	7a1a      	ldrb	r2, [r3, #8]
 800aba2:	4b33      	ldr	r3, [pc, #204]	@ (800ac70 <RadioSetTxGenericConfig+0x460>)
 800aba4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 800aba8:	f7fe ff87 	bl	8009aba <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800abac:	2001      	movs	r0, #1
 800abae:	f7fe f91b 	bl	8008de8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800abb2:	4830      	ldr	r0, [pc, #192]	@ (800ac74 <RadioSetTxGenericConfig+0x464>)
 800abb4:	f000 fd76 	bl	800b6a4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800abb8:	482f      	ldr	r0, [pc, #188]	@ (800ac78 <RadioSetTxGenericConfig+0x468>)
 800abba:	f000 fe45 	bl	800b848 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800abbe:	4b2c      	ldr	r3, [pc, #176]	@ (800ac70 <RadioSetTxGenericConfig+0x460>)
 800abc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800abc4:	2b06      	cmp	r3, #6
 800abc6:	d10d      	bne.n	800abe4 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800abc8:	f640 0089 	movw	r0, #2185	@ 0x889
 800abcc:	f000 ff98 	bl	800bb00 <SUBGRF_ReadRegister>
 800abd0:	4603      	mov	r3, r0
 800abd2:	f023 0304 	bic.w	r3, r3, #4
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	4619      	mov	r1, r3
 800abda:	f640 0089 	movw	r0, #2185	@ 0x889
 800abde:	f000 ff7b 	bl	800bad8 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 800abe2:	e02d      	b.n	800ac40 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800abe4:	f640 0089 	movw	r0, #2185	@ 0x889
 800abe8:	f000 ff8a 	bl	800bb00 <SUBGRF_ReadRegister>
 800abec:	4603      	mov	r3, r0
 800abee:	f043 0304 	orr.w	r3, r3, #4
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	4619      	mov	r1, r3
 800abf6:	f640 0089 	movw	r0, #2185	@ 0x889
 800abfa:	f000 ff6d 	bl	800bad8 <SUBGRF_WriteRegister>
        break;
 800abfe:	e01f      	b.n	800ac40 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d004      	beq.n	800ac12 <RadioSetTxGenericConfig+0x402>
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ac10:	d902      	bls.n	800ac18 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 800ac12:	f04f 33ff 	mov.w	r3, #4294967295
 800ac16:	e027      	b.n	800ac68 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 800ac18:	2003      	movs	r0, #3
 800ac1a:	f7fe f8e5 	bl	8008de8 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800ac1e:	4b14      	ldr	r3, [pc, #80]	@ (800ac70 <RadioSetTxGenericConfig+0x460>)
 800ac20:	2202      	movs	r2, #2
 800ac22:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a11      	ldr	r2, [pc, #68]	@ (800ac70 <RadioSetTxGenericConfig+0x460>)
 800ac2c:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800ac2e:	4b10      	ldr	r3, [pc, #64]	@ (800ac70 <RadioSetTxGenericConfig+0x460>)
 800ac30:	2216      	movs	r2, #22
 800ac32:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ac36:	480f      	ldr	r0, [pc, #60]	@ (800ac74 <RadioSetTxGenericConfig+0x464>)
 800ac38:	f000 fd34 	bl	800b6a4 <SUBGRF_SetModulationParams>
        break;
 800ac3c:	e000      	b.n	800ac40 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 800ac3e:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800ac40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac44:	4618      	mov	r0, r3
 800ac46:	f001 f863 	bl	800bd10 <SUBGRF_SetRfTxPower>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	4b08      	ldr	r3, [pc, #32]	@ (800ac70 <RadioSetTxGenericConfig+0x460>)
 800ac50:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800ac54:	4b06      	ldr	r3, [pc, #24]	@ (800ac70 <RadioSetTxGenericConfig+0x460>)
 800ac56:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f001 fa37 	bl	800c0ce <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800ac60:	4a03      	ldr	r2, [pc, #12]	@ (800ac70 <RadioSetTxGenericConfig+0x460>)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6053      	str	r3, [r2, #4]
    return 0;
 800ac66:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3738      	adds	r7, #56	@ 0x38
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	20000330 	.word	0x20000330
 800ac74:	20000368 	.word	0x20000368
 800ac78:	2000033e 	.word	0x2000033e

0800ac7c <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b085      	sub	sp, #20
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 800ac84:	2301      	movs	r3, #1
 800ac86:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 800ac88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3714      	adds	r7, #20
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bc80      	pop	{r7}
 800ac92:	4770      	bx	lr

0800ac94 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 800ac9e:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 800aca0:	4618      	mov	r0, r3
 800aca2:	370c      	adds	r7, #12
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bc80      	pop	{r7}
 800aca8:	4770      	bx	lr
	...

0800acac <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d002      	beq.n	800acc0 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800acba:	4a1d      	ldr	r2, [pc, #116]	@ (800ad30 <SUBGRF_Init+0x84>)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800acc0:	f7f5 fffc 	bl	8000cbc <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800acc4:	2002      	movs	r0, #2
 800acc6:	f001 f8ff 	bl	800bec8 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800acca:	4b1a      	ldr	r3, [pc, #104]	@ (800ad34 <SUBGRF_Init+0x88>)
 800accc:	2200      	movs	r2, #0
 800acce:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800acd0:	2000      	movs	r0, #0
 800acd2:	f000 f97d 	bl	800afd0 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800acd6:	f001 fb2e 	bl	800c336 <RBI_IsTCXO>
 800acda:	4603      	mov	r3, r0
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d10e      	bne.n	800acfe <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800ace0:	2140      	movs	r1, #64	@ 0x40
 800ace2:	2001      	movs	r0, #1
 800ace4:	f000 fb82 	bl	800b3ec <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800ace8:	2100      	movs	r1, #0
 800acea:	f640 1011 	movw	r0, #2321	@ 0x911
 800acee:	f000 fef3 	bl	800bad8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800acf2:	237f      	movs	r3, #127	@ 0x7f
 800acf4:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800acf6:	7b38      	ldrb	r0, [r7, #12]
 800acf8:	f000 fa8b 	bl	800b212 <SUBGRF_Calibrate>
 800acfc:	e009      	b.n	800ad12 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800acfe:	2120      	movs	r1, #32
 800ad00:	f640 1011 	movw	r0, #2321	@ 0x911
 800ad04:	f000 fee8 	bl	800bad8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800ad08:	2120      	movs	r1, #32
 800ad0a:	f640 1012 	movw	r0, #2322	@ 0x912
 800ad0e:	f000 fee3 	bl	800bad8 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800ad12:	210e      	movs	r1, #14
 800ad14:	f640 101f 	movw	r0, #2335	@ 0x91f
 800ad18:	f000 fede 	bl	800bad8 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 800ad1c:	f001 fae8 	bl	800c2f0 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800ad20:	4b05      	ldr	r3, [pc, #20]	@ (800ad38 <SUBGRF_Init+0x8c>)
 800ad22:	2201      	movs	r2, #1
 800ad24:	701a      	strb	r2, [r3, #0]
}
 800ad26:	bf00      	nop
 800ad28:	3710      	adds	r7, #16
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	200003c8 	.word	0x200003c8
 800ad34:	200003c4 	.word	0x200003c4
 800ad38:	200003bc 	.word	0x200003bc

0800ad3c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	af00      	add	r7, sp, #0
    return OperatingMode;
 800ad40:	4b02      	ldr	r3, [pc, #8]	@ (800ad4c <SUBGRF_GetOperatingMode+0x10>)
 800ad42:	781b      	ldrb	r3, [r3, #0]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bc80      	pop	{r7}
 800ad4a:	4770      	bx	lr
 800ad4c:	200003bc 	.word	0x200003bc

0800ad50 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	460b      	mov	r3, r1
 800ad5a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800ad5c:	78fb      	ldrb	r3, [r7, #3]
 800ad5e:	461a      	mov	r2, r3
 800ad60:	6879      	ldr	r1, [r7, #4]
 800ad62:	2000      	movs	r0, #0
 800ad64:	f000 ff24 	bl	800bbb0 <SUBGRF_WriteBuffer>
}
 800ad68:	bf00      	nop
 800ad6a:	3708      	adds	r7, #8
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b086      	sub	sp, #24
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	60b9      	str	r1, [r7, #8]
 800ad7a:	4613      	mov	r3, r2
 800ad7c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800ad82:	f107 0317 	add.w	r3, r7, #23
 800ad86:	4619      	mov	r1, r3
 800ad88:	68b8      	ldr	r0, [r7, #8]
 800ad8a:	f000 fe27 	bl	800b9dc <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	79fa      	ldrb	r2, [r7, #7]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d201      	bcs.n	800ad9c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e007      	b.n	800adac <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800ad9c:	7df8      	ldrb	r0, [r7, #23]
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	461a      	mov	r2, r3
 800ada4:	68f9      	ldr	r1, [r7, #12]
 800ada6:	f000 ff25 	bl	800bbf4 <SUBGRF_ReadBuffer>

    return 0;
 800adaa:	2300      	movs	r3, #0
}
 800adac:	4618      	mov	r0, r3
 800adae:	3718      	adds	r7, #24
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	60f8      	str	r0, [r7, #12]
 800adbc:	460b      	mov	r3, r1
 800adbe:	607a      	str	r2, [r7, #4]
 800adc0:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800adc2:	7afb      	ldrb	r3, [r7, #11]
 800adc4:	4619      	mov	r1, r3
 800adc6:	68f8      	ldr	r0, [r7, #12]
 800adc8:	f7ff ffc2 	bl	800ad50 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 f91b 	bl	800b008 <SUBGRF_SetTx>
}
 800add2:	bf00      	nop
 800add4:	3710      	adds	r7, #16
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}

0800adda <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800adda:	b580      	push	{r7, lr}
 800addc:	b082      	sub	sp, #8
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800ade2:	2208      	movs	r2, #8
 800ade4:	6879      	ldr	r1, [r7, #4]
 800ade6:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 800adea:	f000 fe9d 	bl	800bb28 <SUBGRF_WriteRegisters>
    return 0;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	4603      	mov	r3, r0
 800ae00:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800ae02:	88fb      	ldrh	r3, [r7, #6]
 800ae04:	0a1b      	lsrs	r3, r3, #8
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800ae0c:	88fb      	ldrh	r3, [r7, #6]
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800ae12:	f000 fb6f 	bl	800b4f4 <SUBGRF_GetPacketType>
 800ae16:	4603      	mov	r3, r0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d108      	bne.n	800ae2e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800ae1c:	f107 030c 	add.w	r3, r7, #12
 800ae20:	2202      	movs	r2, #2
 800ae22:	4619      	mov	r1, r3
 800ae24:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 800ae28:	f000 fe7e 	bl	800bb28 <SUBGRF_WriteRegisters>
            break;
 800ae2c:	e000      	b.n	800ae30 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800ae2e:	bf00      	nop
    }
}
 800ae30:	bf00      	nop
 800ae32:	3710      	adds	r7, #16
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	4603      	mov	r3, r0
 800ae40:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800ae42:	88fb      	ldrh	r3, [r7, #6]
 800ae44:	0a1b      	lsrs	r3, r3, #8
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800ae4c:	88fb      	ldrh	r3, [r7, #6]
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800ae52:	f000 fb4f 	bl	800b4f4 <SUBGRF_GetPacketType>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d108      	bne.n	800ae6e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800ae5c:	f107 030c 	add.w	r3, r7, #12
 800ae60:	2202      	movs	r2, #2
 800ae62:	4619      	mov	r1, r3
 800ae64:	f240 60be 	movw	r0, #1726	@ 0x6be
 800ae68:	f000 fe5e 	bl	800bb28 <SUBGRF_WriteRegisters>
            break;
 800ae6c:	e000      	b.n	800ae70 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800ae6e:	bf00      	nop
    }
}
 800ae70:	bf00      	nop
 800ae72:	3710      	adds	r7, #16
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	4603      	mov	r3, r0
 800ae80:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800ae82:	2300      	movs	r3, #0
 800ae84:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800ae86:	f000 fb35 	bl	800b4f4 <SUBGRF_GetPacketType>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d121      	bne.n	800aed4 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800ae90:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800ae94:	f000 fe34 	bl	800bb00 <SUBGRF_ReadRegister>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	f023 0301 	bic.w	r3, r3, #1
 800ae9e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800aea0:	88fb      	ldrh	r3, [r7, #6]
 800aea2:	0a1b      	lsrs	r3, r3, #8
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	b25b      	sxtb	r3, r3
 800aea8:	f003 0301 	and.w	r3, r3, #1
 800aeac:	b25a      	sxtb	r2, r3
 800aeae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	b25b      	sxtb	r3, r3
 800aeb6:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800aeb8:	7bfb      	ldrb	r3, [r7, #15]
 800aeba:	4619      	mov	r1, r3
 800aebc:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800aec0:	f000 fe0a 	bl	800bad8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800aec4:	88fb      	ldrh	r3, [r7, #6]
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	4619      	mov	r1, r3
 800aeca:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 800aece:	f000 fe03 	bl	800bad8 <SUBGRF_WriteRegister>
            break;
 800aed2:	e000      	b.n	800aed6 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800aed4:	bf00      	nop
    }
}
 800aed6:	bf00      	nop
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b082      	sub	sp, #8
 800aee2:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800aee4:	2300      	movs	r3, #0
 800aee6:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800aee8:	2300      	movs	r3, #0
 800aeea:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800aeec:	2300      	movs	r3, #0
 800aeee:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800aef0:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800aef4:	f000 fe04 	bl	800bb00 <SUBGRF_ReadRegister>
 800aef8:	4603      	mov	r3, r0
 800aefa:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800aefc:	79fb      	ldrb	r3, [r7, #7]
 800aefe:	f023 0301 	bic.w	r3, r3, #1
 800af02:	b2db      	uxtb	r3, r3
 800af04:	4619      	mov	r1, r3
 800af06:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800af0a:	f000 fde5 	bl	800bad8 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800af0e:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800af12:	f000 fdf5 	bl	800bb00 <SUBGRF_ReadRegister>
 800af16:	4603      	mov	r3, r0
 800af18:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800af1a:	79bb      	ldrb	r3, [r7, #6]
 800af1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af20:	b2db      	uxtb	r3, r3
 800af22:	4619      	mov	r1, r3
 800af24:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800af28:	f000 fdd6 	bl	800bad8 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800af2c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800af30:	f000 f88a 	bl	800b048 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800af34:	463b      	mov	r3, r7
 800af36:	2204      	movs	r2, #4
 800af38:	4619      	mov	r1, r3
 800af3a:	f640 0019 	movw	r0, #2073	@ 0x819
 800af3e:	f000 fe15 	bl	800bb6c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800af42:	2000      	movs	r0, #0
 800af44:	f000 f844 	bl	800afd0 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800af48:	79fb      	ldrb	r3, [r7, #7]
 800af4a:	4619      	mov	r1, r3
 800af4c:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800af50:	f000 fdc2 	bl	800bad8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800af54:	79bb      	ldrb	r3, [r7, #6]
 800af56:	4619      	mov	r1, r3
 800af58:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800af5c:	f000 fdbc 	bl	800bad8 <SUBGRF_WriteRegister>

    return number;
 800af60:	683b      	ldr	r3, [r7, #0]
}
 800af62:	4618      	mov	r0, r3
 800af64:	3708      	adds	r7, #8
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
	...

0800af6c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800af74:	2000      	movs	r0, #0
 800af76:	f001 f9c6 	bl	800c306 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800af7a:	2002      	movs	r0, #2
 800af7c:	f000 ffa4 	bl	800bec8 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800af80:	793b      	ldrb	r3, [r7, #4]
 800af82:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800af86:	b2db      	uxtb	r3, r3
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800af8c:	793b      	ldrb	r3, [r7, #4]
 800af8e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800af92:	b2db      	uxtb	r3, r3
 800af94:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800af96:	b25b      	sxtb	r3, r3
 800af98:	4313      	orrs	r3, r2
 800af9a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800af9c:	793b      	ldrb	r3, [r7, #4]
 800af9e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800afa6:	4313      	orrs	r3, r2
 800afa8:	b25b      	sxtb	r3, r3
 800afaa:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800afac:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800afae:	f107 030f 	add.w	r3, r7, #15
 800afb2:	2201      	movs	r2, #1
 800afb4:	4619      	mov	r1, r3
 800afb6:	2084      	movs	r0, #132	@ 0x84
 800afb8:	f000 fe3e 	bl	800bc38 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800afbc:	4b03      	ldr	r3, [pc, #12]	@ (800afcc <SUBGRF_SetSleep+0x60>)
 800afbe:	2200      	movs	r2, #0
 800afc0:	701a      	strb	r2, [r3, #0]
}
 800afc2:	bf00      	nop
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	200003bc 	.word	0x200003bc

0800afd0 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	4603      	mov	r3, r0
 800afd8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800afda:	1dfb      	adds	r3, r7, #7
 800afdc:	2201      	movs	r2, #1
 800afde:	4619      	mov	r1, r3
 800afe0:	2080      	movs	r0, #128	@ 0x80
 800afe2:	f000 fe29 	bl	800bc38 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800afe6:	79fb      	ldrb	r3, [r7, #7]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d103      	bne.n	800aff4 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800afec:	4b05      	ldr	r3, [pc, #20]	@ (800b004 <SUBGRF_SetStandby+0x34>)
 800afee:	2201      	movs	r2, #1
 800aff0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800aff2:	e002      	b.n	800affa <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800aff4:	4b03      	ldr	r3, [pc, #12]	@ (800b004 <SUBGRF_SetStandby+0x34>)
 800aff6:	2202      	movs	r2, #2
 800aff8:	701a      	strb	r2, [r3, #0]
}
 800affa:	bf00      	nop
 800affc:	3708      	adds	r7, #8
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop
 800b004:	200003bc 	.word	0x200003bc

0800b008 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800b010:	4b0c      	ldr	r3, [pc, #48]	@ (800b044 <SUBGRF_SetTx+0x3c>)
 800b012:	2204      	movs	r2, #4
 800b014:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	0c1b      	lsrs	r3, r3, #16
 800b01a:	b2db      	uxtb	r3, r3
 800b01c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	0a1b      	lsrs	r3, r3, #8
 800b022:	b2db      	uxtb	r3, r3
 800b024:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800b02c:	f107 030c 	add.w	r3, r7, #12
 800b030:	2203      	movs	r2, #3
 800b032:	4619      	mov	r1, r3
 800b034:	2083      	movs	r0, #131	@ 0x83
 800b036:	f000 fdff 	bl	800bc38 <SUBGRF_WriteCommand>
}
 800b03a:	bf00      	nop
 800b03c:	3710      	adds	r7, #16
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	200003bc 	.word	0x200003bc

0800b048 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800b050:	4b0c      	ldr	r3, [pc, #48]	@ (800b084 <SUBGRF_SetRx+0x3c>)
 800b052:	2205      	movs	r2, #5
 800b054:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	0c1b      	lsrs	r3, r3, #16
 800b05a:	b2db      	uxtb	r3, r3
 800b05c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	0a1b      	lsrs	r3, r3, #8
 800b062:	b2db      	uxtb	r3, r3
 800b064:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800b06c:	f107 030c 	add.w	r3, r7, #12
 800b070:	2203      	movs	r2, #3
 800b072:	4619      	mov	r1, r3
 800b074:	2082      	movs	r0, #130	@ 0x82
 800b076:	f000 fddf 	bl	800bc38 <SUBGRF_WriteCommand>
}
 800b07a:	bf00      	nop
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	200003bc 	.word	0x200003bc

0800b088 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800b090:	4b0e      	ldr	r3, [pc, #56]	@ (800b0cc <SUBGRF_SetRxBoosted+0x44>)
 800b092:	2205      	movs	r2, #5
 800b094:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800b096:	2197      	movs	r1, #151	@ 0x97
 800b098:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 800b09c:	f000 fd1c 	bl	800bad8 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	0c1b      	lsrs	r3, r3, #16
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	0a1b      	lsrs	r3, r3, #8
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800b0b6:	f107 030c 	add.w	r3, r7, #12
 800b0ba:	2203      	movs	r2, #3
 800b0bc:	4619      	mov	r1, r3
 800b0be:	2082      	movs	r0, #130	@ 0x82
 800b0c0:	f000 fdba 	bl	800bc38 <SUBGRF_WriteCommand>
}
 800b0c4:	bf00      	nop
 800b0c6:	3710      	adds	r7, #16
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	200003bc 	.word	0x200003bc

0800b0d0 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	0c1b      	lsrs	r3, r3, #16
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	0a1b      	lsrs	r3, r3, #8
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	0c1b      	lsrs	r3, r3, #16
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	0a1b      	lsrs	r3, r3, #8
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	b2db      	uxtb	r3, r3
 800b104:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800b106:	f107 0308 	add.w	r3, r7, #8
 800b10a:	2206      	movs	r2, #6
 800b10c:	4619      	mov	r1, r3
 800b10e:	2094      	movs	r0, #148	@ 0x94
 800b110:	f000 fd92 	bl	800bc38 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800b114:	4b03      	ldr	r3, [pc, #12]	@ (800b124 <SUBGRF_SetRxDutyCycle+0x54>)
 800b116:	2206      	movs	r2, #6
 800b118:	701a      	strb	r2, [r3, #0]
}
 800b11a:	bf00      	nop
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	200003bc 	.word	0x200003bc

0800b128 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800b12c:	2200      	movs	r2, #0
 800b12e:	2100      	movs	r1, #0
 800b130:	20c5      	movs	r0, #197	@ 0xc5
 800b132:	f000 fd81 	bl	800bc38 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800b136:	4b02      	ldr	r3, [pc, #8]	@ (800b140 <SUBGRF_SetCad+0x18>)
 800b138:	2207      	movs	r2, #7
 800b13a:	701a      	strb	r2, [r3, #0]
}
 800b13c:	bf00      	nop
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	200003bc 	.word	0x200003bc

0800b144 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800b144:	b580      	push	{r7, lr}
 800b146:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800b148:	2200      	movs	r2, #0
 800b14a:	2100      	movs	r1, #0
 800b14c:	20d1      	movs	r0, #209	@ 0xd1
 800b14e:	f000 fd73 	bl	800bc38 <SUBGRF_WriteCommand>
}
 800b152:	bf00      	nop
 800b154:	bd80      	pop	{r7, pc}

0800b156 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800b156:	b580      	push	{r7, lr}
 800b158:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800b15a:	2200      	movs	r2, #0
 800b15c:	2100      	movs	r1, #0
 800b15e:	20d2      	movs	r0, #210	@ 0xd2
 800b160:	f000 fd6a 	bl	800bc38 <SUBGRF_WriteCommand>
}
 800b164:	bf00      	nop
 800b166:	bd80      	pop	{r7, pc}

0800b168 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	4603      	mov	r3, r0
 800b170:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800b172:	1dfb      	adds	r3, r7, #7
 800b174:	2201      	movs	r2, #1
 800b176:	4619      	mov	r1, r3
 800b178:	209f      	movs	r0, #159	@ 0x9f
 800b17a:	f000 fd5d 	bl	800bc38 <SUBGRF_WriteCommand>
}
 800b17e:	bf00      	nop
 800b180:	3708      	adds	r7, #8
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b084      	sub	sp, #16
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	4603      	mov	r3, r0
 800b18e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800b190:	1dfb      	adds	r3, r7, #7
 800b192:	2201      	movs	r2, #1
 800b194:	4619      	mov	r1, r3
 800b196:	20a0      	movs	r0, #160	@ 0xa0
 800b198:	f000 fd4e 	bl	800bc38 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800b19c:	79fb      	ldrb	r3, [r7, #7]
 800b19e:	2b3f      	cmp	r3, #63	@ 0x3f
 800b1a0:	d91c      	bls.n	800b1dc <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800b1a2:	79fb      	ldrb	r3, [r7, #7]
 800b1a4:	085b      	lsrs	r3, r3, #1
 800b1a6:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800b1b0:	e005      	b.n	800b1be <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800b1b2:	7bfb      	ldrb	r3, [r7, #15]
 800b1b4:	089b      	lsrs	r3, r3, #2
 800b1b6:	73fb      	strb	r3, [r7, #15]
            exp++;
 800b1b8:	7bbb      	ldrb	r3, [r7, #14]
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800b1be:	7bfb      	ldrb	r3, [r7, #15]
 800b1c0:	2b1f      	cmp	r3, #31
 800b1c2:	d8f6      	bhi.n	800b1b2 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800b1c4:	7bfb      	ldrb	r3, [r7, #15]
 800b1c6:	00db      	lsls	r3, r3, #3
 800b1c8:	b2da      	uxtb	r2, r3
 800b1ca:	7bbb      	ldrb	r3, [r7, #14]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800b1d0:	7b7b      	ldrb	r3, [r7, #13]
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	f240 7006 	movw	r0, #1798	@ 0x706
 800b1d8:	f000 fc7e 	bl	800bad8 <SUBGRF_WriteRegister>
    }
}
 800b1dc:	bf00      	nop
 800b1de:	3710      	adds	r7, #16
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b082      	sub	sp, #8
 800b1e8:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800b1ea:	f001 f8af 	bl	800c34c <RBI_IsDCDC>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d102      	bne.n	800b1fa <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	71fb      	strb	r3, [r7, #7]
 800b1f8:	e001      	b.n	800b1fe <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800b1fe:	1dfb      	adds	r3, r7, #7
 800b200:	2201      	movs	r2, #1
 800b202:	4619      	mov	r1, r3
 800b204:	2096      	movs	r0, #150	@ 0x96
 800b206:	f000 fd17 	bl	800bc38 <SUBGRF_WriteCommand>
}
 800b20a:	bf00      	nop
 800b20c:	3708      	adds	r7, #8
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}

0800b212 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800b212:	b580      	push	{r7, lr}
 800b214:	b084      	sub	sp, #16
 800b216:	af00      	add	r7, sp, #0
 800b218:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800b21a:	793b      	ldrb	r3, [r7, #4]
 800b21c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b220:	b2db      	uxtb	r3, r3
 800b222:	019b      	lsls	r3, r3, #6
 800b224:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800b226:	793b      	ldrb	r3, [r7, #4]
 800b228:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800b230:	b25b      	sxtb	r3, r3
 800b232:	4313      	orrs	r3, r2
 800b234:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800b236:	793b      	ldrb	r3, [r7, #4]
 800b238:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800b240:	b25b      	sxtb	r3, r3
 800b242:	4313      	orrs	r3, r2
 800b244:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800b246:	793b      	ldrb	r3, [r7, #4]
 800b248:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800b250:	b25b      	sxtb	r3, r3
 800b252:	4313      	orrs	r3, r2
 800b254:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800b256:	793b      	ldrb	r3, [r7, #4]
 800b258:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800b260:	b25b      	sxtb	r3, r3
 800b262:	4313      	orrs	r3, r2
 800b264:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800b266:	793b      	ldrb	r3, [r7, #4]
 800b268:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800b270:	b25b      	sxtb	r3, r3
 800b272:	4313      	orrs	r3, r2
 800b274:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800b276:	793b      	ldrb	r3, [r7, #4]
 800b278:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800b280:	4313      	orrs	r3, r2
 800b282:	b25b      	sxtb	r3, r3
 800b284:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800b286:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800b288:	f107 030f 	add.w	r3, r7, #15
 800b28c:	2201      	movs	r2, #1
 800b28e:	4619      	mov	r1, r3
 800b290:	2089      	movs	r0, #137	@ 0x89
 800b292:	f000 fcd1 	bl	800bc38 <SUBGRF_WriteCommand>
}
 800b296:	bf00      	nop
 800b298:	3710      	adds	r7, #16
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
	...

0800b2a0 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	4a1d      	ldr	r2, [pc, #116]	@ (800b320 <SUBGRF_CalibrateImage+0x80>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d904      	bls.n	800b2ba <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800b2b0:	23e1      	movs	r3, #225	@ 0xe1
 800b2b2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800b2b4:	23e9      	movs	r3, #233	@ 0xe9
 800b2b6:	737b      	strb	r3, [r7, #13]
 800b2b8:	e027      	b.n	800b30a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4a19      	ldr	r2, [pc, #100]	@ (800b324 <SUBGRF_CalibrateImage+0x84>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d904      	bls.n	800b2cc <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800b2c2:	23d7      	movs	r3, #215	@ 0xd7
 800b2c4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800b2c6:	23db      	movs	r3, #219	@ 0xdb
 800b2c8:	737b      	strb	r3, [r7, #13]
 800b2ca:	e01e      	b.n	800b30a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	4a16      	ldr	r2, [pc, #88]	@ (800b328 <SUBGRF_CalibrateImage+0x88>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d904      	bls.n	800b2de <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800b2d4:	23c1      	movs	r3, #193	@ 0xc1
 800b2d6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800b2d8:	23c5      	movs	r3, #197	@ 0xc5
 800b2da:	737b      	strb	r3, [r7, #13]
 800b2dc:	e015      	b.n	800b30a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4a12      	ldr	r2, [pc, #72]	@ (800b32c <SUBGRF_CalibrateImage+0x8c>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d904      	bls.n	800b2f0 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800b2e6:	2375      	movs	r3, #117	@ 0x75
 800b2e8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800b2ea:	2381      	movs	r3, #129	@ 0x81
 800b2ec:	737b      	strb	r3, [r7, #13]
 800b2ee:	e00c      	b.n	800b30a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	4a0f      	ldr	r2, [pc, #60]	@ (800b330 <SUBGRF_CalibrateImage+0x90>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d904      	bls.n	800b302 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800b2f8:	236b      	movs	r3, #107	@ 0x6b
 800b2fa:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800b2fc:	236f      	movs	r3, #111	@ 0x6f
 800b2fe:	737b      	strb	r3, [r7, #13]
 800b300:	e003      	b.n	800b30a <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800b302:	2329      	movs	r3, #41	@ 0x29
 800b304:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800b306:	232b      	movs	r3, #43	@ 0x2b
 800b308:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800b30a:	f107 030c 	add.w	r3, r7, #12
 800b30e:	2202      	movs	r2, #2
 800b310:	4619      	mov	r1, r3
 800b312:	2098      	movs	r0, #152	@ 0x98
 800b314:	f000 fc90 	bl	800bc38 <SUBGRF_WriteCommand>
}
 800b318:	bf00      	nop
 800b31a:	3710      	adds	r7, #16
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	35a4e900 	.word	0x35a4e900
 800b324:	32a9f880 	.word	0x32a9f880
 800b328:	2de54480 	.word	0x2de54480
 800b32c:	1b6b0b00 	.word	0x1b6b0b00
 800b330:	1954fc40 	.word	0x1954fc40

0800b334 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800b334:	b590      	push	{r4, r7, lr}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0
 800b33a:	4604      	mov	r4, r0
 800b33c:	4608      	mov	r0, r1
 800b33e:	4611      	mov	r1, r2
 800b340:	461a      	mov	r2, r3
 800b342:	4623      	mov	r3, r4
 800b344:	71fb      	strb	r3, [r7, #7]
 800b346:	4603      	mov	r3, r0
 800b348:	71bb      	strb	r3, [r7, #6]
 800b34a:	460b      	mov	r3, r1
 800b34c:	717b      	strb	r3, [r7, #5]
 800b34e:	4613      	mov	r3, r2
 800b350:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800b352:	79fb      	ldrb	r3, [r7, #7]
 800b354:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800b356:	79bb      	ldrb	r3, [r7, #6]
 800b358:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800b35a:	797b      	ldrb	r3, [r7, #5]
 800b35c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800b35e:	793b      	ldrb	r3, [r7, #4]
 800b360:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800b362:	f107 030c 	add.w	r3, r7, #12
 800b366:	2204      	movs	r2, #4
 800b368:	4619      	mov	r1, r3
 800b36a:	2095      	movs	r0, #149	@ 0x95
 800b36c:	f000 fc64 	bl	800bc38 <SUBGRF_WriteCommand>
}
 800b370:	bf00      	nop
 800b372:	3714      	adds	r7, #20
 800b374:	46bd      	mov	sp, r7
 800b376:	bd90      	pop	{r4, r7, pc}

0800b378 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800b378:	b590      	push	{r4, r7, lr}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	4604      	mov	r4, r0
 800b380:	4608      	mov	r0, r1
 800b382:	4611      	mov	r1, r2
 800b384:	461a      	mov	r2, r3
 800b386:	4623      	mov	r3, r4
 800b388:	80fb      	strh	r3, [r7, #6]
 800b38a:	4603      	mov	r3, r0
 800b38c:	80bb      	strh	r3, [r7, #4]
 800b38e:	460b      	mov	r3, r1
 800b390:	807b      	strh	r3, [r7, #2]
 800b392:	4613      	mov	r3, r2
 800b394:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800b396:	88fb      	ldrh	r3, [r7, #6]
 800b398:	0a1b      	lsrs	r3, r3, #8
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800b3a0:	88fb      	ldrh	r3, [r7, #6]
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800b3a6:	88bb      	ldrh	r3, [r7, #4]
 800b3a8:	0a1b      	lsrs	r3, r3, #8
 800b3aa:	b29b      	uxth	r3, r3
 800b3ac:	b2db      	uxtb	r3, r3
 800b3ae:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800b3b0:	88bb      	ldrh	r3, [r7, #4]
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800b3b6:	887b      	ldrh	r3, [r7, #2]
 800b3b8:	0a1b      	lsrs	r3, r3, #8
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800b3c0:	887b      	ldrh	r3, [r7, #2]
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800b3c6:	883b      	ldrh	r3, [r7, #0]
 800b3c8:	0a1b      	lsrs	r3, r3, #8
 800b3ca:	b29b      	uxth	r3, r3
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800b3d0:	883b      	ldrh	r3, [r7, #0]
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800b3d6:	f107 0308 	add.w	r3, r7, #8
 800b3da:	2208      	movs	r2, #8
 800b3dc:	4619      	mov	r1, r3
 800b3de:	2008      	movs	r0, #8
 800b3e0:	f000 fc2a 	bl	800bc38 <SUBGRF_WriteCommand>
}
 800b3e4:	bf00      	nop
 800b3e6:	3714      	adds	r7, #20
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd90      	pop	{r4, r7, pc}

0800b3ec <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	6039      	str	r1, [r7, #0]
 800b3f6:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800b3f8:	79fb      	ldrb	r3, [r7, #7]
 800b3fa:	f003 0307 	and.w	r3, r3, #7
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	0c1b      	lsrs	r3, r3, #16
 800b406:	b2db      	uxtb	r3, r3
 800b408:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	0a1b      	lsrs	r3, r3, #8
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	b2db      	uxtb	r3, r3
 800b416:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800b418:	f107 030c 	add.w	r3, r7, #12
 800b41c:	2204      	movs	r2, #4
 800b41e:	4619      	mov	r1, r3
 800b420:	2097      	movs	r0, #151	@ 0x97
 800b422:	f000 fc09 	bl	800bc38 <SUBGRF_WriteCommand>
}
 800b426:	bf00      	nop
 800b428:	3710      	adds	r7, #16
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
	...

0800b430 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800b430:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b434:	b084      	sub	sp, #16
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800b43a:	2300      	movs	r3, #0
 800b43c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800b43e:	4b1d      	ldr	r3, [pc, #116]	@ (800b4b4 <SUBGRF_SetRfFrequency+0x84>)
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	f083 0301 	eor.w	r3, r3, #1
 800b446:	b2db      	uxtb	r3, r3
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d005      	beq.n	800b458 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f7ff ff27 	bl	800b2a0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800b452:	4b18      	ldr	r3, [pc, #96]	@ (800b4b4 <SUBGRF_SetRfFrequency+0x84>)
 800b454:	2201      	movs	r2, #1
 800b456:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	461c      	mov	r4, r3
 800b45e:	4615      	mov	r5, r2
 800b460:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800b464:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800b468:	4a13      	ldr	r2, [pc, #76]	@ (800b4b8 <SUBGRF_SetRfFrequency+0x88>)
 800b46a:	f04f 0300 	mov.w	r3, #0
 800b46e:	4640      	mov	r0, r8
 800b470:	4649      	mov	r1, r9
 800b472:	f7f4 fe89 	bl	8000188 <__aeabi_uldivmod>
 800b476:	4602      	mov	r2, r0
 800b478:	460b      	mov	r3, r1
 800b47a:	4613      	mov	r3, r2
 800b47c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	0e1b      	lsrs	r3, r3, #24
 800b482:	b2db      	uxtb	r3, r3
 800b484:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	0c1b      	lsrs	r3, r3, #16
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	0a1b      	lsrs	r3, r3, #8
 800b492:	b2db      	uxtb	r3, r3
 800b494:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	b2db      	uxtb	r3, r3
 800b49a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800b49c:	f107 0308 	add.w	r3, r7, #8
 800b4a0:	2204      	movs	r2, #4
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	2086      	movs	r0, #134	@ 0x86
 800b4a6:	f000 fbc7 	bl	800bc38 <SUBGRF_WriteCommand>
}
 800b4aa:	bf00      	nop
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b4b4:	200003c4 	.word	0x200003c4
 800b4b8:	01e84800 	.word	0x01e84800

0800b4bc <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800b4c6:	79fa      	ldrb	r2, [r7, #7]
 800b4c8:	4b09      	ldr	r3, [pc, #36]	@ (800b4f0 <SUBGRF_SetPacketType+0x34>)
 800b4ca:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800b4cc:	79fb      	ldrb	r3, [r7, #7]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d104      	bne.n	800b4dc <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800b4d2:	2100      	movs	r1, #0
 800b4d4:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800b4d8:	f000 fafe 	bl	800bad8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800b4dc:	1dfb      	adds	r3, r7, #7
 800b4de:	2201      	movs	r2, #1
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	208a      	movs	r0, #138	@ 0x8a
 800b4e4:	f000 fba8 	bl	800bc38 <SUBGRF_WriteCommand>
}
 800b4e8:	bf00      	nop
 800b4ea:	3708      	adds	r7, #8
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	200003bd 	.word	0x200003bd

0800b4f4 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	af00      	add	r7, sp, #0
    return PacketType;
 800b4f8:	4b02      	ldr	r3, [pc, #8]	@ (800b504 <SUBGRF_GetPacketType+0x10>)
 800b4fa:	781b      	ldrb	r3, [r3, #0]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bc80      	pop	{r7}
 800b502:	4770      	bx	lr
 800b504:	200003bd 	.word	0x200003bd

0800b508 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	4603      	mov	r3, r0
 800b510:	71fb      	strb	r3, [r7, #7]
 800b512:	460b      	mov	r3, r1
 800b514:	71bb      	strb	r3, [r7, #6]
 800b516:	4613      	mov	r3, r2
 800b518:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800b51a:	79fb      	ldrb	r3, [r7, #7]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d149      	bne.n	800b5b4 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800b520:	2000      	movs	r0, #0
 800b522:	f000 ff1e 	bl	800c362 <RBI_GetRFOMaxPowerConfig>
 800b526:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800b528:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b52c:	68fa      	ldr	r2, [r7, #12]
 800b52e:	429a      	cmp	r2, r3
 800b530:	da01      	bge.n	800b536 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2b0e      	cmp	r3, #14
 800b53a:	d10e      	bne.n	800b55a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800b53c:	2301      	movs	r3, #1
 800b53e:	2201      	movs	r2, #1
 800b540:	2100      	movs	r1, #0
 800b542:	2004      	movs	r0, #4
 800b544:	f7ff fef6 	bl	800b334 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800b548:	79ba      	ldrb	r2, [r7, #6]
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	b2db      	uxtb	r3, r3
 800b54e:	1ad3      	subs	r3, r2, r3
 800b550:	b2db      	uxtb	r3, r3
 800b552:	330e      	adds	r3, #14
 800b554:	b2db      	uxtb	r3, r3
 800b556:	71bb      	strb	r3, [r7, #6]
 800b558:	e01f      	b.n	800b59a <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2b0a      	cmp	r3, #10
 800b55e:	d10e      	bne.n	800b57e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800b560:	2301      	movs	r3, #1
 800b562:	2201      	movs	r2, #1
 800b564:	2100      	movs	r1, #0
 800b566:	2001      	movs	r0, #1
 800b568:	f7ff fee4 	bl	800b334 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800b56c:	79ba      	ldrb	r2, [r7, #6]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	b2db      	uxtb	r3, r3
 800b572:	1ad3      	subs	r3, r2, r3
 800b574:	b2db      	uxtb	r3, r3
 800b576:	330d      	adds	r3, #13
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	71bb      	strb	r3, [r7, #6]
 800b57c:	e00d      	b.n	800b59a <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800b57e:	2301      	movs	r3, #1
 800b580:	2201      	movs	r2, #1
 800b582:	2100      	movs	r1, #0
 800b584:	2007      	movs	r0, #7
 800b586:	f7ff fed5 	bl	800b334 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800b58a:	79ba      	ldrb	r2, [r7, #6]
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	1ad3      	subs	r3, r2, r3
 800b592:	b2db      	uxtb	r3, r3
 800b594:	330e      	adds	r3, #14
 800b596:	b2db      	uxtb	r3, r3
 800b598:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800b59a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b59e:	f113 0f11 	cmn.w	r3, #17
 800b5a2:	da01      	bge.n	800b5a8 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800b5a4:	23ef      	movs	r3, #239	@ 0xef
 800b5a6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800b5a8:	2118      	movs	r1, #24
 800b5aa:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800b5ae:	f000 fa93 	bl	800bad8 <SUBGRF_WriteRegister>
 800b5b2:	e067      	b.n	800b684 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800b5b4:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800b5b8:	f000 faa2 	bl	800bb00 <SUBGRF_ReadRegister>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	f043 031e 	orr.w	r3, r3, #30
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800b5ca:	f000 fa85 	bl	800bad8 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800b5ce:	2001      	movs	r0, #1
 800b5d0:	f000 fec7 	bl	800c362 <RBI_GetRFOMaxPowerConfig>
 800b5d4:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800b5d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b5da:	68fa      	ldr	r2, [r7, #12]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	da01      	bge.n	800b5e4 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2b14      	cmp	r3, #20
 800b5e8:	d10e      	bne.n	800b608 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	2105      	movs	r1, #5
 800b5f0:	2003      	movs	r0, #3
 800b5f2:	f7ff fe9f 	bl	800b334 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800b5f6:	79ba      	ldrb	r2, [r7, #6]
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	1ad3      	subs	r3, r2, r3
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	3316      	adds	r3, #22
 800b602:	b2db      	uxtb	r3, r3
 800b604:	71bb      	strb	r3, [r7, #6]
 800b606:	e031      	b.n	800b66c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2b11      	cmp	r3, #17
 800b60c:	d10e      	bne.n	800b62c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800b60e:	2301      	movs	r3, #1
 800b610:	2200      	movs	r2, #0
 800b612:	2103      	movs	r1, #3
 800b614:	2002      	movs	r0, #2
 800b616:	f7ff fe8d 	bl	800b334 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800b61a:	79ba      	ldrb	r2, [r7, #6]
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	1ad3      	subs	r3, r2, r3
 800b622:	b2db      	uxtb	r3, r3
 800b624:	3316      	adds	r3, #22
 800b626:	b2db      	uxtb	r3, r3
 800b628:	71bb      	strb	r3, [r7, #6]
 800b62a:	e01f      	b.n	800b66c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2b0e      	cmp	r3, #14
 800b630:	d10e      	bne.n	800b650 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800b632:	2301      	movs	r3, #1
 800b634:	2200      	movs	r2, #0
 800b636:	2102      	movs	r1, #2
 800b638:	2002      	movs	r0, #2
 800b63a:	f7ff fe7b 	bl	800b334 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800b63e:	79ba      	ldrb	r2, [r7, #6]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	b2db      	uxtb	r3, r3
 800b644:	1ad3      	subs	r3, r2, r3
 800b646:	b2db      	uxtb	r3, r3
 800b648:	330e      	adds	r3, #14
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	71bb      	strb	r3, [r7, #6]
 800b64e:	e00d      	b.n	800b66c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800b650:	2301      	movs	r3, #1
 800b652:	2200      	movs	r2, #0
 800b654:	2107      	movs	r1, #7
 800b656:	2004      	movs	r0, #4
 800b658:	f7ff fe6c 	bl	800b334 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800b65c:	79ba      	ldrb	r2, [r7, #6]
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	b2db      	uxtb	r3, r3
 800b662:	1ad3      	subs	r3, r2, r3
 800b664:	b2db      	uxtb	r3, r3
 800b666:	3316      	adds	r3, #22
 800b668:	b2db      	uxtb	r3, r3
 800b66a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800b66c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b670:	f113 0f09 	cmn.w	r3, #9
 800b674:	da01      	bge.n	800b67a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800b676:	23f7      	movs	r3, #247	@ 0xf7
 800b678:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800b67a:	2138      	movs	r1, #56	@ 0x38
 800b67c:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800b680:	f000 fa2a 	bl	800bad8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800b684:	79bb      	ldrb	r3, [r7, #6]
 800b686:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800b688:	797b      	ldrb	r3, [r7, #5]
 800b68a:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800b68c:	f107 0308 	add.w	r3, r7, #8
 800b690:	2202      	movs	r2, #2
 800b692:	4619      	mov	r1, r3
 800b694:	208e      	movs	r0, #142	@ 0x8e
 800b696:	f000 facf 	bl	800bc38 <SUBGRF_WriteCommand>
}
 800b69a:	bf00      	nop
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
	...

0800b6a4 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800b6a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b6a8:	b086      	sub	sp, #24
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800b6b2:	4a61      	ldr	r2, [pc, #388]	@ (800b838 <SUBGRF_SetModulationParams+0x194>)
 800b6b4:	f107 0308 	add.w	r3, r7, #8
 800b6b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b6bc:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	781a      	ldrb	r2, [r3, #0]
 800b6c4:	4b5d      	ldr	r3, [pc, #372]	@ (800b83c <SUBGRF_SetModulationParams+0x198>)
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d004      	beq.n	800b6d6 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7ff fef3 	bl	800b4bc <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	2b03      	cmp	r3, #3
 800b6dc:	f200 80a5 	bhi.w	800b82a <SUBGRF_SetModulationParams+0x186>
 800b6e0:	a201      	add	r2, pc, #4	@ (adr r2, 800b6e8 <SUBGRF_SetModulationParams+0x44>)
 800b6e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e6:	bf00      	nop
 800b6e8:	0800b6f9 	.word	0x0800b6f9
 800b6ec:	0800b7b9 	.word	0x0800b7b9
 800b6f0:	0800b77b 	.word	0x0800b77b
 800b6f4:	0800b7e7 	.word	0x0800b7e7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800b6f8:	2308      	movs	r3, #8
 800b6fa:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	4a4f      	ldr	r2, [pc, #316]	@ (800b840 <SUBGRF_SetModulationParams+0x19c>)
 800b702:	fbb2 f3f3 	udiv	r3, r2, r3
 800b706:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	0c1b      	lsrs	r3, r3, #16
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	0a1b      	lsrs	r3, r3, #8
 800b714:	b2db      	uxtb	r3, r3
 800b716:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	7b1b      	ldrb	r3, [r3, #12]
 800b722:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	7b5b      	ldrb	r3, [r3, #13]
 800b728:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	2200      	movs	r2, #0
 800b730:	461c      	mov	r4, r3
 800b732:	4615      	mov	r5, r2
 800b734:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800b738:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800b73c:	4a41      	ldr	r2, [pc, #260]	@ (800b844 <SUBGRF_SetModulationParams+0x1a0>)
 800b73e:	f04f 0300 	mov.w	r3, #0
 800b742:	4640      	mov	r0, r8
 800b744:	4649      	mov	r1, r9
 800b746:	f7f4 fd1f 	bl	8000188 <__aeabi_uldivmod>
 800b74a:	4602      	mov	r2, r0
 800b74c:	460b      	mov	r3, r1
 800b74e:	4613      	mov	r3, r2
 800b750:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	0c1b      	lsrs	r3, r3, #16
 800b756:	b2db      	uxtb	r3, r3
 800b758:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	0a1b      	lsrs	r3, r3, #8
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	b2db      	uxtb	r3, r3
 800b766:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b768:	7cfb      	ldrb	r3, [r7, #19]
 800b76a:	b29a      	uxth	r2, r3
 800b76c:	f107 0308 	add.w	r3, r7, #8
 800b770:	4619      	mov	r1, r3
 800b772:	208b      	movs	r0, #139	@ 0x8b
 800b774:	f000 fa60 	bl	800bc38 <SUBGRF_WriteCommand>
        break;
 800b778:	e058      	b.n	800b82c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800b77a:	2304      	movs	r3, #4
 800b77c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	691b      	ldr	r3, [r3, #16]
 800b782:	4a2f      	ldr	r2, [pc, #188]	@ (800b840 <SUBGRF_SetModulationParams+0x19c>)
 800b784:	fbb2 f3f3 	udiv	r3, r2, r3
 800b788:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	0c1b      	lsrs	r3, r3, #16
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	0a1b      	lsrs	r3, r3, #8
 800b796:	b2db      	uxtb	r3, r3
 800b798:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	7d1b      	ldrb	r3, [r3, #20]
 800b7a4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b7a6:	7cfb      	ldrb	r3, [r7, #19]
 800b7a8:	b29a      	uxth	r2, r3
 800b7aa:	f107 0308 	add.w	r3, r7, #8
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	208b      	movs	r0, #139	@ 0x8b
 800b7b2:	f000 fa41 	bl	800bc38 <SUBGRF_WriteCommand>
        break;
 800b7b6:	e039      	b.n	800b82c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800b7b8:	2304      	movs	r3, #4
 800b7ba:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	7e1b      	ldrb	r3, [r3, #24]
 800b7c0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	7e5b      	ldrb	r3, [r3, #25]
 800b7c6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	7e9b      	ldrb	r3, [r3, #26]
 800b7cc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	7edb      	ldrb	r3, [r3, #27]
 800b7d2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b7d4:	7cfb      	ldrb	r3, [r7, #19]
 800b7d6:	b29a      	uxth	r2, r3
 800b7d8:	f107 0308 	add.w	r3, r7, #8
 800b7dc:	4619      	mov	r1, r3
 800b7de:	208b      	movs	r0, #139	@ 0x8b
 800b7e0:	f000 fa2a 	bl	800bc38 <SUBGRF_WriteCommand>

        break;
 800b7e4:	e022      	b.n	800b82c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800b7e6:	2305      	movs	r3, #5
 800b7e8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	4a14      	ldr	r2, [pc, #80]	@ (800b840 <SUBGRF_SetModulationParams+0x19c>)
 800b7f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7f4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	0c1b      	lsrs	r3, r3, #16
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	0a1b      	lsrs	r3, r3, #8
 800b802:	b2db      	uxtb	r3, r3
 800b804:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	b2db      	uxtb	r3, r3
 800b80a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	7b1b      	ldrb	r3, [r3, #12]
 800b810:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	7b5b      	ldrb	r3, [r3, #13]
 800b816:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b818:	7cfb      	ldrb	r3, [r7, #19]
 800b81a:	b29a      	uxth	r2, r3
 800b81c:	f107 0308 	add.w	r3, r7, #8
 800b820:	4619      	mov	r1, r3
 800b822:	208b      	movs	r0, #139	@ 0x8b
 800b824:	f000 fa08 	bl	800bc38 <SUBGRF_WriteCommand>
        break;
 800b828:	e000      	b.n	800b82c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800b82a:	bf00      	nop
    }
}
 800b82c:	bf00      	nop
 800b82e:	3718      	adds	r7, #24
 800b830:	46bd      	mov	sp, r7
 800b832:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b836:	bf00      	nop
 800b838:	0800dac0 	.word	0x0800dac0
 800b83c:	200003bd 	.word	0x200003bd
 800b840:	3d090000 	.word	0x3d090000
 800b844:	01e84800 	.word	0x01e84800

0800b848 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b086      	sub	sp, #24
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800b850:	2300      	movs	r3, #0
 800b852:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800b854:	4a48      	ldr	r2, [pc, #288]	@ (800b978 <SUBGRF_SetPacketParams+0x130>)
 800b856:	f107 030c 	add.w	r3, r7, #12
 800b85a:	ca07      	ldmia	r2, {r0, r1, r2}
 800b85c:	c303      	stmia	r3!, {r0, r1}
 800b85e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	781a      	ldrb	r2, [r3, #0]
 800b864:	4b45      	ldr	r3, [pc, #276]	@ (800b97c <SUBGRF_SetPacketParams+0x134>)
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	429a      	cmp	r2, r3
 800b86a:	d004      	beq.n	800b876 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	4618      	mov	r0, r3
 800b872:	f7ff fe23 	bl	800b4bc <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	2b03      	cmp	r3, #3
 800b87c:	d878      	bhi.n	800b970 <SUBGRF_SetPacketParams+0x128>
 800b87e:	a201      	add	r2, pc, #4	@ (adr r2, 800b884 <SUBGRF_SetPacketParams+0x3c>)
 800b880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b884:	0800b895 	.word	0x0800b895
 800b888:	0800b925 	.word	0x0800b925
 800b88c:	0800b919 	.word	0x0800b919
 800b890:	0800b895 	.word	0x0800b895
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	7a5b      	ldrb	r3, [r3, #9]
 800b898:	2bf1      	cmp	r3, #241	@ 0xf1
 800b89a:	d10a      	bne.n	800b8b2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800b89c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800b8a0:	f7ff faaa 	bl	800adf8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800b8a4:	f248 0005 	movw	r0, #32773	@ 0x8005
 800b8a8:	f7ff fac6 	bl	800ae38 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800b8ac:	2302      	movs	r3, #2
 800b8ae:	75bb      	strb	r3, [r7, #22]
 800b8b0:	e011      	b.n	800b8d6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	7a5b      	ldrb	r3, [r3, #9]
 800b8b6:	2bf2      	cmp	r3, #242	@ 0xf2
 800b8b8:	d10a      	bne.n	800b8d0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800b8ba:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 800b8be:	f7ff fa9b 	bl	800adf8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800b8c2:	f241 0021 	movw	r0, #4129	@ 0x1021
 800b8c6:	f7ff fab7 	bl	800ae38 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800b8ca:	2306      	movs	r3, #6
 800b8cc:	75bb      	strb	r3, [r7, #22]
 800b8ce:	e002      	b.n	800b8d6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	7a5b      	ldrb	r3, [r3, #9]
 800b8d4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800b8d6:	2309      	movs	r3, #9
 800b8d8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	885b      	ldrh	r3, [r3, #2]
 800b8de:	0a1b      	lsrs	r3, r3, #8
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	885b      	ldrh	r3, [r3, #2]
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	791b      	ldrb	r3, [r3, #4]
 800b8f2:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	795b      	ldrb	r3, [r3, #5]
 800b8f8:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	799b      	ldrb	r3, [r3, #6]
 800b8fe:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	79db      	ldrb	r3, [r3, #7]
 800b904:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	7a1b      	ldrb	r3, [r3, #8]
 800b90a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800b90c:	7dbb      	ldrb	r3, [r7, #22]
 800b90e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	7a9b      	ldrb	r3, [r3, #10]
 800b914:	753b      	strb	r3, [r7, #20]
        break;
 800b916:	e022      	b.n	800b95e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800b918:	2301      	movs	r3, #1
 800b91a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	7b1b      	ldrb	r3, [r3, #12]
 800b920:	733b      	strb	r3, [r7, #12]
        break;
 800b922:	e01c      	b.n	800b95e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800b924:	2306      	movs	r3, #6
 800b926:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	89db      	ldrh	r3, [r3, #14]
 800b92c:	0a1b      	lsrs	r3, r3, #8
 800b92e:	b29b      	uxth	r3, r3
 800b930:	b2db      	uxtb	r3, r3
 800b932:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	89db      	ldrh	r3, [r3, #14]
 800b938:	b2db      	uxtb	r3, r3
 800b93a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	7c1a      	ldrb	r2, [r3, #16]
 800b940:	4b0f      	ldr	r3, [pc, #60]	@ (800b980 <SUBGRF_SetPacketParams+0x138>)
 800b942:	4611      	mov	r1, r2
 800b944:	7019      	strb	r1, [r3, #0]
 800b946:	4613      	mov	r3, r2
 800b948:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	7c5b      	ldrb	r3, [r3, #17]
 800b94e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	7c9b      	ldrb	r3, [r3, #18]
 800b954:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	7cdb      	ldrb	r3, [r3, #19]
 800b95a:	747b      	strb	r3, [r7, #17]
        break;
 800b95c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800b95e:	7dfb      	ldrb	r3, [r7, #23]
 800b960:	b29a      	uxth	r2, r3
 800b962:	f107 030c 	add.w	r3, r7, #12
 800b966:	4619      	mov	r1, r3
 800b968:	208c      	movs	r0, #140	@ 0x8c
 800b96a:	f000 f965 	bl	800bc38 <SUBGRF_WriteCommand>
 800b96e:	e000      	b.n	800b972 <SUBGRF_SetPacketParams+0x12a>
        return;
 800b970:	bf00      	nop
}
 800b972:	3718      	adds	r7, #24
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}
 800b978:	0800dac8 	.word	0x0800dac8
 800b97c:	200003bd 	.word	0x200003bd
 800b980:	200003be 	.word	0x200003be

0800b984 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	4603      	mov	r3, r0
 800b98c:	460a      	mov	r2, r1
 800b98e:	71fb      	strb	r3, [r7, #7]
 800b990:	4613      	mov	r3, r2
 800b992:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800b994:	79fb      	ldrb	r3, [r7, #7]
 800b996:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800b998:	79bb      	ldrb	r3, [r7, #6]
 800b99a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800b99c:	f107 030c 	add.w	r3, r7, #12
 800b9a0:	2202      	movs	r2, #2
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	208f      	movs	r0, #143	@ 0x8f
 800b9a6:	f000 f947 	bl	800bc38 <SUBGRF_WriteCommand>
}
 800b9aa:	bf00      	nop
 800b9ac:	3710      	adds	r7, #16
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b082      	sub	sp, #8
 800b9b6:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800b9bc:	1d3b      	adds	r3, r7, #4
 800b9be:	2201      	movs	r2, #1
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	2015      	movs	r0, #21
 800b9c4:	f000 f95a 	bl	800bc7c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800b9c8:	793b      	ldrb	r3, [r7, #4]
 800b9ca:	425b      	negs	r3, r3
 800b9cc:	105b      	asrs	r3, r3, #1
 800b9ce:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800b9d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3708      	adds	r7, #8
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800b9e6:	f107 030c 	add.w	r3, r7, #12
 800b9ea:	2202      	movs	r2, #2
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	2013      	movs	r0, #19
 800b9f0:	f000 f944 	bl	800bc7c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800b9f4:	f7ff fd7e 	bl	800b4f4 <SUBGRF_GetPacketType>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d10d      	bne.n	800ba1a <SUBGRF_GetRxBufferStatus+0x3e>
 800b9fe:	4b0c      	ldr	r3, [pc, #48]	@ (800ba30 <SUBGRF_GetRxBufferStatus+0x54>)
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d108      	bne.n	800ba1a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800ba08:	f240 7002 	movw	r0, #1794	@ 0x702
 800ba0c:	f000 f878 	bl	800bb00 <SUBGRF_ReadRegister>
 800ba10:	4603      	mov	r3, r0
 800ba12:	461a      	mov	r2, r3
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	701a      	strb	r2, [r3, #0]
 800ba18:	e002      	b.n	800ba20 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800ba1a:	7b3a      	ldrb	r2, [r7, #12]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800ba20:	7b7a      	ldrb	r2, [r7, #13]
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	701a      	strb	r2, [r3, #0]
}
 800ba26:	bf00      	nop
 800ba28:	3710      	adds	r7, #16
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}
 800ba2e:	bf00      	nop
 800ba30:	200003be 	.word	0x200003be

0800ba34 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800ba3c:	f107 030c 	add.w	r3, r7, #12
 800ba40:	2203      	movs	r2, #3
 800ba42:	4619      	mov	r1, r3
 800ba44:	2014      	movs	r0, #20
 800ba46:	f000 f919 	bl	800bc7c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800ba4a:	f7ff fd53 	bl	800b4f4 <SUBGRF_GetPacketType>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	461a      	mov	r2, r3
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d002      	beq.n	800ba64 <SUBGRF_GetPacketStatus+0x30>
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d013      	beq.n	800ba8a <SUBGRF_GetPacketStatus+0x56>
 800ba62:	e02a      	b.n	800baba <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800ba64:	7b3a      	ldrb	r2, [r7, #12]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800ba6a:	7b7b      	ldrb	r3, [r7, #13]
 800ba6c:	425b      	negs	r3, r3
 800ba6e:	105b      	asrs	r3, r3, #1
 800ba70:	b25a      	sxtb	r2, r3
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800ba76:	7bbb      	ldrb	r3, [r7, #14]
 800ba78:	425b      	negs	r3, r3
 800ba7a:	105b      	asrs	r3, r3, #1
 800ba7c:	b25a      	sxtb	r2, r3
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2200      	movs	r2, #0
 800ba86:	609a      	str	r2, [r3, #8]
            break;
 800ba88:	e020      	b.n	800bacc <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800ba8a:	7b3b      	ldrb	r3, [r7, #12]
 800ba8c:	425b      	negs	r3, r3
 800ba8e:	105b      	asrs	r3, r3, #1
 800ba90:	b25a      	sxtb	r2, r3
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800ba96:	7b7b      	ldrb	r3, [r7, #13]
 800ba98:	b25b      	sxtb	r3, r3
 800ba9a:	3302      	adds	r3, #2
 800ba9c:	109b      	asrs	r3, r3, #2
 800ba9e:	b25a      	sxtb	r2, r3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800baa4:	7bbb      	ldrb	r3, [r7, #14]
 800baa6:	425b      	negs	r3, r3
 800baa8:	105b      	asrs	r3, r3, #1
 800baaa:	b25a      	sxtb	r2, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800bab0:	4b08      	ldr	r3, [pc, #32]	@ (800bad4 <SUBGRF_GetPacketStatus+0xa0>)
 800bab2:	681a      	ldr	r2, [r3, #0]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	611a      	str	r2, [r3, #16]
            break;
 800bab8:	e008      	b.n	800bacc <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800baba:	2214      	movs	r2, #20
 800babc:	2100      	movs	r1, #0
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 ffbd 	bl	800ca3e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	220f      	movs	r2, #15
 800bac8:	701a      	strb	r2, [r3, #0]
            break;
 800baca:	bf00      	nop
    }
}
 800bacc:	bf00      	nop
 800bace:	3710      	adds	r7, #16
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	200003c0 	.word	0x200003c0

0800bad8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	4603      	mov	r3, r0
 800bae0:	460a      	mov	r2, r1
 800bae2:	80fb      	strh	r3, [r7, #6]
 800bae4:	4613      	mov	r3, r2
 800bae6:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800bae8:	1d7a      	adds	r2, r7, #5
 800baea:	88f9      	ldrh	r1, [r7, #6]
 800baec:	2301      	movs	r3, #1
 800baee:	4803      	ldr	r0, [pc, #12]	@ (800bafc <SUBGRF_WriteRegister+0x24>)
 800baf0:	f7fa fb16 	bl	8006120 <HAL_SUBGHZ_WriteRegisters>
}
 800baf4:	bf00      	nop
 800baf6:	3708      	adds	r7, #8
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}
 800bafc:	20000114 	.word	0x20000114

0800bb00 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	4603      	mov	r3, r0
 800bb08:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800bb0a:	f107 020f 	add.w	r2, r7, #15
 800bb0e:	88f9      	ldrh	r1, [r7, #6]
 800bb10:	2301      	movs	r3, #1
 800bb12:	4804      	ldr	r0, [pc, #16]	@ (800bb24 <SUBGRF_ReadRegister+0x24>)
 800bb14:	f7fa fb63 	bl	80061de <HAL_SUBGHZ_ReadRegisters>
    return data;
 800bb18:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3710      	adds	r7, #16
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	20000114 	.word	0x20000114

0800bb28 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b086      	sub	sp, #24
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	4603      	mov	r3, r0
 800bb30:	6039      	str	r1, [r7, #0]
 800bb32:	80fb      	strh	r3, [r7, #6]
 800bb34:	4613      	mov	r3, r2
 800bb36:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb38:	f3ef 8310 	mrs	r3, PRIMASK
 800bb3c:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800bb40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bb42:	b672      	cpsid	i
}
 800bb44:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800bb46:	88bb      	ldrh	r3, [r7, #4]
 800bb48:	88f9      	ldrh	r1, [r7, #6]
 800bb4a:	683a      	ldr	r2, [r7, #0]
 800bb4c:	4806      	ldr	r0, [pc, #24]	@ (800bb68 <SUBGRF_WriteRegisters+0x40>)
 800bb4e:	f7fa fae7 	bl	8006120 <HAL_SUBGHZ_WriteRegisters>
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	f383 8810 	msr	PRIMASK, r3
}
 800bb5c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800bb5e:	bf00      	nop
 800bb60:	3718      	adds	r7, #24
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	20000114 	.word	0x20000114

0800bb6c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b086      	sub	sp, #24
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	4603      	mov	r3, r0
 800bb74:	6039      	str	r1, [r7, #0]
 800bb76:	80fb      	strh	r3, [r7, #6]
 800bb78:	4613      	mov	r3, r2
 800bb7a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb7c:	f3ef 8310 	mrs	r3, PRIMASK
 800bb80:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb82:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800bb84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bb86:	b672      	cpsid	i
}
 800bb88:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800bb8a:	88bb      	ldrh	r3, [r7, #4]
 800bb8c:	88f9      	ldrh	r1, [r7, #6]
 800bb8e:	683a      	ldr	r2, [r7, #0]
 800bb90:	4806      	ldr	r0, [pc, #24]	@ (800bbac <SUBGRF_ReadRegisters+0x40>)
 800bb92:	f7fa fb24 	bl	80061de <HAL_SUBGHZ_ReadRegisters>
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	f383 8810 	msr	PRIMASK, r3
}
 800bba0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800bba2:	bf00      	nop
 800bba4:	3718      	adds	r7, #24
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	20000114 	.word	0x20000114

0800bbb0 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b086      	sub	sp, #24
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	6039      	str	r1, [r7, #0]
 800bbba:	71fb      	strb	r3, [r7, #7]
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bbc0:	f3ef 8310 	mrs	r3, PRIMASK
 800bbc4:	60fb      	str	r3, [r7, #12]
  return(result);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800bbc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bbca:	b672      	cpsid	i
}
 800bbcc:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800bbce:	79bb      	ldrb	r3, [r7, #6]
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	79f9      	ldrb	r1, [r7, #7]
 800bbd4:	683a      	ldr	r2, [r7, #0]
 800bbd6:	4806      	ldr	r0, [pc, #24]	@ (800bbf0 <SUBGRF_WriteBuffer+0x40>)
 800bbd8:	f7fa fc15 	bl	8006406 <HAL_SUBGHZ_WriteBuffer>
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	f383 8810 	msr	PRIMASK, r3
}
 800bbe6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800bbe8:	bf00      	nop
 800bbea:	3718      	adds	r7, #24
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	20000114 	.word	0x20000114

0800bbf4 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b086      	sub	sp, #24
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	6039      	str	r1, [r7, #0]
 800bbfe:	71fb      	strb	r3, [r7, #7]
 800bc00:	4613      	mov	r3, r2
 800bc02:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc04:	f3ef 8310 	mrs	r3, PRIMASK
 800bc08:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800bc0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc0e:	b672      	cpsid	i
}
 800bc10:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800bc12:	79bb      	ldrb	r3, [r7, #6]
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	79f9      	ldrb	r1, [r7, #7]
 800bc18:	683a      	ldr	r2, [r7, #0]
 800bc1a:	4806      	ldr	r0, [pc, #24]	@ (800bc34 <SUBGRF_ReadBuffer+0x40>)
 800bc1c:	f7fa fc46 	bl	80064ac <HAL_SUBGHZ_ReadBuffer>
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	f383 8810 	msr	PRIMASK, r3
}
 800bc2a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800bc2c:	bf00      	nop
 800bc2e:	3718      	adds	r7, #24
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	20000114 	.word	0x20000114

0800bc38 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b086      	sub	sp, #24
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	4603      	mov	r3, r0
 800bc40:	6039      	str	r1, [r7, #0]
 800bc42:	71fb      	strb	r3, [r7, #7]
 800bc44:	4613      	mov	r3, r2
 800bc46:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc48:	f3ef 8310 	mrs	r3, PRIMASK
 800bc4c:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800bc50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc52:	b672      	cpsid	i
}
 800bc54:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800bc56:	88bb      	ldrh	r3, [r7, #4]
 800bc58:	79f9      	ldrb	r1, [r7, #7]
 800bc5a:	683a      	ldr	r2, [r7, #0]
 800bc5c:	4806      	ldr	r0, [pc, #24]	@ (800bc78 <SUBGRF_WriteCommand+0x40>)
 800bc5e:	f7fa fb1f 	bl	80062a0 <HAL_SUBGHZ_ExecSetCmd>
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	f383 8810 	msr	PRIMASK, r3
}
 800bc6c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800bc6e:	bf00      	nop
 800bc70:	3718      	adds	r7, #24
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	20000114 	.word	0x20000114

0800bc7c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b086      	sub	sp, #24
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	4603      	mov	r3, r0
 800bc84:	6039      	str	r1, [r7, #0]
 800bc86:	71fb      	strb	r3, [r7, #7]
 800bc88:	4613      	mov	r3, r2
 800bc8a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc8c:	f3ef 8310 	mrs	r3, PRIMASK
 800bc90:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc92:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800bc94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc96:	b672      	cpsid	i
}
 800bc98:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800bc9a:	88bb      	ldrh	r3, [r7, #4]
 800bc9c:	79f9      	ldrb	r1, [r7, #7]
 800bc9e:	683a      	ldr	r2, [r7, #0]
 800bca0:	4806      	ldr	r0, [pc, #24]	@ (800bcbc <SUBGRF_ReadCommand+0x40>)
 800bca2:	f7fa fb5c 	bl	800635e <HAL_SUBGHZ_ExecGetCmd>
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	f383 8810 	msr	PRIMASK, r3
}
 800bcb0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800bcb2:	bf00      	nop
 800bcb4:	3718      	adds	r7, #24
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	20000114 	.word	0x20000114

0800bcc0 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	460a      	mov	r2, r1
 800bcca:	71fb      	strb	r3, [r7, #7]
 800bccc:	4613      	mov	r3, r2
 800bcce:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800bcd4:	79bb      	ldrb	r3, [r7, #6]
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d10d      	bne.n	800bcf6 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800bcda:	79fb      	ldrb	r3, [r7, #7]
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d104      	bne.n	800bcea <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800bce0:	2302      	movs	r3, #2
 800bce2:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800bce4:	2004      	movs	r0, #4
 800bce6:	f000 f8ef 	bl	800bec8 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800bcea:	79fb      	ldrb	r3, [r7, #7]
 800bcec:	2b02      	cmp	r3, #2
 800bcee:	d107      	bne.n	800bd00 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800bcf0:	2303      	movs	r3, #3
 800bcf2:	73fb      	strb	r3, [r7, #15]
 800bcf4:	e004      	b.n	800bd00 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800bcf6:	79bb      	ldrb	r3, [r7, #6]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d101      	bne.n	800bd00 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800bd00:	7bfb      	ldrb	r3, [r7, #15]
 800bd02:	4618      	mov	r0, r3
 800bd04:	f000 faff 	bl	800c306 <RBI_ConfigRFSwitch>
}
 800bd08:	bf00      	nop
 800bd0a:	3710      	adds	r7, #16
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	4603      	mov	r3, r0
 800bd18:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800bd1e:	f000 faff 	bl	800c320 <RBI_GetTxConfig>
 800bd22:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	2b02      	cmp	r3, #2
 800bd28:	d016      	beq.n	800bd58 <SUBGRF_SetRfTxPower+0x48>
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	2b02      	cmp	r3, #2
 800bd2e:	dc16      	bgt.n	800bd5e <SUBGRF_SetRfTxPower+0x4e>
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d003      	beq.n	800bd3e <SUBGRF_SetRfTxPower+0x2e>
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	2b01      	cmp	r3, #1
 800bd3a:	d00a      	beq.n	800bd52 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800bd3c:	e00f      	b.n	800bd5e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800bd3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd42:	2b0f      	cmp	r3, #15
 800bd44:	dd02      	ble.n	800bd4c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800bd46:	2302      	movs	r3, #2
 800bd48:	73fb      	strb	r3, [r7, #15]
            break;
 800bd4a:	e009      	b.n	800bd60 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	73fb      	strb	r3, [r7, #15]
            break;
 800bd50:	e006      	b.n	800bd60 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800bd52:	2301      	movs	r3, #1
 800bd54:	73fb      	strb	r3, [r7, #15]
            break;
 800bd56:	e003      	b.n	800bd60 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800bd58:	2302      	movs	r3, #2
 800bd5a:	73fb      	strb	r3, [r7, #15]
            break;
 800bd5c:	e000      	b.n	800bd60 <SUBGRF_SetRfTxPower+0x50>
            break;
 800bd5e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800bd60:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800bd64:	7bfb      	ldrb	r3, [r7, #15]
 800bd66:	2202      	movs	r2, #2
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f7ff fbcd 	bl	800b508 <SUBGRF_SetTxParams>

    return paSelect;
 800bd6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3710      	adds	r7, #16
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800bd78:	b480      	push	{r7}
 800bd7a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800bd7c:	2301      	movs	r3, #1
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bc80      	pop	{r7}
 800bd84:	4770      	bx	lr
	...

0800bd88 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800bd90:	4b03      	ldr	r3, [pc, #12]	@ (800bda0 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	2001      	movs	r0, #1
 800bd96:	4798      	blx	r3
}
 800bd98:	bf00      	nop
 800bd9a:	3708      	adds	r7, #8
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	200003c8 	.word	0x200003c8

0800bda4 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800bdac:	4b03      	ldr	r3, [pc, #12]	@ (800bdbc <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	2002      	movs	r0, #2
 800bdb2:	4798      	blx	r3
}
 800bdb4:	bf00      	nop
 800bdb6:	3708      	adds	r7, #8
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	200003c8 	.word	0x200003c8

0800bdc0 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b082      	sub	sp, #8
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800bdc8:	4b03      	ldr	r3, [pc, #12]	@ (800bdd8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	2040      	movs	r0, #64	@ 0x40
 800bdce:	4798      	blx	r3
}
 800bdd0:	bf00      	nop
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	200003c8 	.word	0x200003c8

0800bddc <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	460b      	mov	r3, r1
 800bde6:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800bde8:	78fb      	ldrb	r3, [r7, #3]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d002      	beq.n	800bdf4 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800bdee:	2b01      	cmp	r3, #1
 800bdf0:	d005      	beq.n	800bdfe <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800bdf2:	e00a      	b.n	800be0a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800bdf4:	4b07      	ldr	r3, [pc, #28]	@ (800be14 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	2080      	movs	r0, #128	@ 0x80
 800bdfa:	4798      	blx	r3
            break;
 800bdfc:	e005      	b.n	800be0a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800bdfe:	4b05      	ldr	r3, [pc, #20]	@ (800be14 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800be06:	4798      	blx	r3
            break;
 800be08:	bf00      	nop
    }
}
 800be0a:	bf00      	nop
 800be0c:	3708      	adds	r7, #8
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
 800be12:	bf00      	nop
 800be14:	200003c8 	.word	0x200003c8

0800be18 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800be20:	4b04      	ldr	r3, [pc, #16]	@ (800be34 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800be28:	4798      	blx	r3
}
 800be2a:	bf00      	nop
 800be2c:	3708      	adds	r7, #8
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	200003c8 	.word	0x200003c8

0800be38 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800be40:	4b03      	ldr	r3, [pc, #12]	@ (800be50 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2020      	movs	r0, #32
 800be46:	4798      	blx	r3
}
 800be48:	bf00      	nop
 800be4a:	3708      	adds	r7, #8
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}
 800be50:	200003c8 	.word	0x200003c8

0800be54 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b082      	sub	sp, #8
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800be5c:	4b03      	ldr	r3, [pc, #12]	@ (800be6c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2004      	movs	r0, #4
 800be62:	4798      	blx	r3
}
 800be64:	bf00      	nop
 800be66:	3708      	adds	r7, #8
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	200003c8 	.word	0x200003c8

0800be70 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800be78:	4b03      	ldr	r3, [pc, #12]	@ (800be88 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2008      	movs	r0, #8
 800be7e:	4798      	blx	r3
}
 800be80:	bf00      	nop
 800be82:	3708      	adds	r7, #8
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	200003c8 	.word	0x200003c8

0800be8c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800be94:	4b03      	ldr	r3, [pc, #12]	@ (800bea4 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	2010      	movs	r0, #16
 800be9a:	4798      	blx	r3
}
 800be9c:	bf00      	nop
 800be9e:	3708      	adds	r7, #8
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	200003c8 	.word	0x200003c8

0800bea8 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800beb0:	4b04      	ldr	r3, [pc, #16]	@ (800bec4 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800beb8:	4798      	blx	r3
}
 800beba:	bf00      	nop
 800bebc:	3708      	adds	r7, #8
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	200003c8 	.word	0x200003c8

0800bec8 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	4603      	mov	r3, r0
 800bed0:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800bed2:	f000 fa3b 	bl	800c34c <RBI_IsDCDC>
 800bed6:	4603      	mov	r3, r0
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d112      	bne.n	800bf02 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800bedc:	f640 1023 	movw	r0, #2339	@ 0x923
 800bee0:	f7ff fe0e 	bl	800bb00 <SUBGRF_ReadRegister>
 800bee4:	4603      	mov	r3, r0
 800bee6:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800bee8:	7bfb      	ldrb	r3, [r7, #15]
 800beea:	f023 0306 	bic.w	r3, r3, #6
 800beee:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800bef0:	7bfa      	ldrb	r2, [r7, #15]
 800bef2:	79fb      	ldrb	r3, [r7, #7]
 800bef4:	4313      	orrs	r3, r2
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	4619      	mov	r1, r3
 800befa:	f640 1023 	movw	r0, #2339	@ 0x923
 800befe:	f7ff fdeb 	bl	800bad8 <SUBGRF_WriteRegister>
  }
}
 800bf02:	bf00      	nop
 800bf04:	3710      	adds	r7, #16
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
	...

0800bf0c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b085      	sub	sp, #20
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d101      	bne.n	800bf1e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800bf1a:	231f      	movs	r3, #31
 800bf1c:	e017      	b.n	800bf4e <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800bf1e:	2300      	movs	r3, #0
 800bf20:	73fb      	strb	r3, [r7, #15]
 800bf22:	e00f      	b.n	800bf44 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800bf24:	7bfb      	ldrb	r3, [r7, #15]
 800bf26:	4a0c      	ldr	r2, [pc, #48]	@ (800bf58 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800bf28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bf2c:	687a      	ldr	r2, [r7, #4]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d205      	bcs.n	800bf3e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800bf32:	7bfb      	ldrb	r3, [r7, #15]
 800bf34:	4a08      	ldr	r2, [pc, #32]	@ (800bf58 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800bf36:	00db      	lsls	r3, r3, #3
 800bf38:	4413      	add	r3, r2
 800bf3a:	791b      	ldrb	r3, [r3, #4]
 800bf3c:	e007      	b.n	800bf4e <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800bf3e:	7bfb      	ldrb	r3, [r7, #15]
 800bf40:	3301      	adds	r3, #1
 800bf42:	73fb      	strb	r3, [r7, #15]
 800bf44:	7bfb      	ldrb	r3, [r7, #15]
 800bf46:	2b15      	cmp	r3, #21
 800bf48:	d9ec      	bls.n	800bf24 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800bf4a:	bf00      	nop
 800bf4c:	e7fd      	b.n	800bf4a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3714      	adds	r7, #20
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bc80      	pop	{r7}
 800bf56:	4770      	bx	lr
 800bf58:	0800dcec 	.word	0x0800dcec

0800bf5c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b08a      	sub	sp, #40	@ 0x28
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800bf66:	4b35      	ldr	r3, [pc, #212]	@ (800c03c <SUBGRF_GetCFO+0xe0>)
 800bf68:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800bf6a:	f640 0007 	movw	r0, #2055	@ 0x807
 800bf6e:	f7ff fdc7 	bl	800bb00 <SUBGRF_ReadRegister>
 800bf72:	4603      	mov	r3, r0
 800bf74:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800bf76:	7ffb      	ldrb	r3, [r7, #31]
 800bf78:	08db      	lsrs	r3, r3, #3
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	f003 0303 	and.w	r3, r3, #3
 800bf80:	3328      	adds	r3, #40	@ 0x28
 800bf82:	443b      	add	r3, r7
 800bf84:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800bf88:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800bf8a:	7ffb      	ldrb	r3, [r7, #31]
 800bf8c:	f003 0307 	and.w	r3, r3, #7
 800bf90:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800bf92:	7fba      	ldrb	r2, [r7, #30]
 800bf94:	7f7b      	ldrb	r3, [r7, #29]
 800bf96:	3301      	adds	r3, #1
 800bf98:	fa02 f303 	lsl.w	r3, r2, r3
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	4b28      	ldr	r3, [pc, #160]	@ (800c040 <SUBGRF_GetCFO+0xe4>)
 800bfa0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bfa4:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800bfa6:	69ba      	ldr	r2, [r7, #24]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfae:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800bfb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfba:	697a      	ldr	r2, [r7, #20]
 800bfbc:	fb02 f303 	mul.w	r3, r2, r3
 800bfc0:	2b07      	cmp	r3, #7
 800bfc2:	d802      	bhi.n	800bfca <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800bfc4:	2302      	movs	r3, #2
 800bfc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 800bfca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfce:	697a      	ldr	r2, [r7, #20]
 800bfd0:	fb02 f303 	mul.w	r3, r2, r3
 800bfd4:	2b03      	cmp	r3, #3
 800bfd6:	d802      	bhi.n	800bfde <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800bfd8:	2304      	movs	r3, #4
 800bfda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800bfde:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bfe2:	69bb      	ldr	r3, [r7, #24]
 800bfe4:	fb02 f303 	mul.w	r3, r2, r3
 800bfe8:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800bfea:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 800bfee:	f7ff fd87 	bl	800bb00 <SUBGRF_ReadRegister>
 800bff2:	4603      	mov	r3, r0
 800bff4:	021b      	lsls	r3, r3, #8
 800bff6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800bffa:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800bffc:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 800c000:	f7ff fd7e 	bl	800bb00 <SUBGRF_ReadRegister>
 800c004:	4603      	mov	r3, r0
 800c006:	461a      	mov	r2, r3
 800c008:	6a3b      	ldr	r3, [r7, #32]
 800c00a:	4313      	orrs	r3, r2
 800c00c:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800c00e:	6a3b      	ldr	r3, [r7, #32]
 800c010:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c014:	2b00      	cmp	r3, #0
 800c016:	d005      	beq.n	800c024 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800c018:	6a3b      	ldr	r3, [r7, #32]
 800c01a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800c01e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800c022:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	095b      	lsrs	r3, r3, #5
 800c028:	6a3a      	ldr	r2, [r7, #32]
 800c02a:	fb02 f303 	mul.w	r3, r2, r3
 800c02e:	11da      	asrs	r2, r3, #7
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	601a      	str	r2, [r3, #0]
}
 800c034:	bf00      	nop
 800c036:	3728      	adds	r7, #40	@ 0x28
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	0c0a0804 	.word	0x0c0a0804
 800c040:	01e84800 	.word	0x01e84800

0800c044 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800c044:	b480      	push	{r7}
 800c046:	b087      	sub	sp, #28
 800c048:	af00      	add	r7, sp, #0
 800c04a:	4603      	mov	r3, r0
 800c04c:	60b9      	str	r1, [r7, #8]
 800c04e:	607a      	str	r2, [r7, #4]
 800c050:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800c052:	2300      	movs	r3, #0
 800c054:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800c056:	f04f 33ff 	mov.w	r3, #4294967295
 800c05a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800c05c:	697b      	ldr	r3, [r7, #20]
}
 800c05e:	4618      	mov	r0, r3
 800c060:	371c      	adds	r7, #28
 800c062:	46bd      	mov	sp, r7
 800c064:	bc80      	pop	{r7}
 800c066:	4770      	bx	lr

0800c068 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800c068:	b480      	push	{r7}
 800c06a:	b087      	sub	sp, #28
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	4603      	mov	r3, r0
 800c070:	60b9      	str	r1, [r7, #8]
 800c072:	607a      	str	r2, [r7, #4]
 800c074:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800c076:	2300      	movs	r3, #0
 800c078:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800c07a:	f04f 33ff 	mov.w	r3, #4294967295
 800c07e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800c080:	697b      	ldr	r3, [r7, #20]
}
 800c082:	4618      	mov	r0, r3
 800c084:	371c      	adds	r7, #28
 800c086:	46bd      	mov	sp, r7
 800c088:	bc80      	pop	{r7}
 800c08a:	4770      	bx	lr

0800c08c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800c08c:	b480      	push	{r7}
 800c08e:	b085      	sub	sp, #20
 800c090:	af00      	add	r7, sp, #0
 800c092:	60f8      	str	r0, [r7, #12]
 800c094:	60b9      	str	r1, [r7, #8]
 800c096:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800c098:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3714      	adds	r7, #20
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bc80      	pop	{r7}
 800c0a4:	4770      	bx	lr

0800c0a6 <RFW_DeInit>:

void RFW_DeInit( void )
{
 800c0a6:	b480      	push	{r7}
 800c0a8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800c0aa:	bf00      	nop
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bc80      	pop	{r7}
 800c0b0:	4770      	bx	lr

0800c0b2 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800c0b2:	b480      	push	{r7}
 800c0b4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800c0b6:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bc80      	pop	{r7}
 800c0be:	4770      	bx	lr

0800c0c0 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800c0c4:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bc80      	pop	{r7}
 800c0cc:	4770      	bx	lr

0800c0ce <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800c0ce:	b480      	push	{r7}
 800c0d0:	b083      	sub	sp, #12
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800c0d8:	bf00      	nop
 800c0da:	370c      	adds	r7, #12
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bc80      	pop	{r7}
 800c0e0:	4770      	bx	lr

0800c0e2 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800c0e2:	b480      	push	{r7}
 800c0e4:	b087      	sub	sp, #28
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	60f8      	str	r0, [r7, #12]
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	607a      	str	r2, [r7, #4]
 800c0ee:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800c0f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c0f4:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800c0f6:	697b      	ldr	r3, [r7, #20]
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	371c      	adds	r7, #28
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bc80      	pop	{r7}
 800c100:	4770      	bx	lr

0800c102 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800c102:	b480      	push	{r7}
 800c104:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800c106:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bc80      	pop	{r7}
 800c110:	4770      	bx	lr

0800c112 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800c112:	b480      	push	{r7}
 800c114:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800c116:	bf00      	nop
 800c118:	46bd      	mov	sp, r7
 800c11a:	bc80      	pop	{r7}
 800c11c:	4770      	bx	lr

0800c11e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800c11e:	b480      	push	{r7}
 800c120:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800c122:	bf00      	nop
 800c124:	46bd      	mov	sp, r7
 800c126:	bc80      	pop	{r7}
 800c128:	4770      	bx	lr

0800c12a <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800c12a:	b480      	push	{r7}
 800c12c:	b083      	sub	sp, #12
 800c12e:	af00      	add	r7, sp, #0
 800c130:	4603      	mov	r3, r0
 800c132:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800c134:	bf00      	nop
 800c136:	370c      	adds	r7, #12
 800c138:	46bd      	mov	sp, r7
 800c13a:	bc80      	pop	{r7}
 800c13c:	4770      	bx	lr

0800c13e <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800c13e:	b580      	push	{r7, lr}
 800c140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800c142:	f7f4 fdf3 	bl	8000d2c <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800c146:	f000 f80b 	bl	800c160 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800c14a:	bf00      	nop
 800c14c:	bd80      	pop	{r7, pc}

0800c14e <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800c14e:	b580      	push	{r7, lr}
 800c150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800c152:	f04f 30ff 	mov.w	r0, #4294967295
 800c156:	f000 fcd3 	bl	800cb00 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 800c15a:	bf00      	nop
 800c15c:	bd80      	pop	{r7, pc}
	...

0800c160 <SubghzApp_Init>:

/* Exported functions ---------------------------------------------------------*/

//Configure LoRa module and associated tasks
void SubghzApp_Init(void)
{
 800c160:	b590      	push	{r4, r7, lr}
 800c162:	b08b      	sub	sp, #44	@ 0x2c
 800c164:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800c166:	4b29      	ldr	r3, [pc, #164]	@ (800c20c <SubghzApp_Init+0xac>)
 800c168:	4a29      	ldr	r2, [pc, #164]	@ (800c210 <SubghzApp_Init+0xb0>)
 800c16a:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800c16c:	4b27      	ldr	r3, [pc, #156]	@ (800c20c <SubghzApp_Init+0xac>)
 800c16e:	4a29      	ldr	r2, [pc, #164]	@ (800c214 <SubghzApp_Init+0xb4>)
 800c170:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800c172:	4b26      	ldr	r3, [pc, #152]	@ (800c20c <SubghzApp_Init+0xac>)
 800c174:	4a28      	ldr	r2, [pc, #160]	@ (800c218 <SubghzApp_Init+0xb8>)
 800c176:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800c178:	4b24      	ldr	r3, [pc, #144]	@ (800c20c <SubghzApp_Init+0xac>)
 800c17a:	4a28      	ldr	r2, [pc, #160]	@ (800c21c <SubghzApp_Init+0xbc>)
 800c17c:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800c17e:	4b23      	ldr	r3, [pc, #140]	@ (800c20c <SubghzApp_Init+0xac>)
 800c180:	4a27      	ldr	r2, [pc, #156]	@ (800c220 <SubghzApp_Init+0xc0>)
 800c182:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800c184:	4b27      	ldr	r3, [pc, #156]	@ (800c224 <SubghzApp_Init+0xc4>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4820      	ldr	r0, [pc, #128]	@ (800c20c <SubghzApp_Init+0xac>)
 800c18a:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800c18c:	4b25      	ldr	r3, [pc, #148]	@ (800c224 <SubghzApp_Init+0xc4>)
 800c18e:	69dc      	ldr	r4, [r3, #28]
 800c190:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800c194:	9308      	str	r3, [sp, #32]
 800c196:	2300      	movs	r3, #0
 800c198:	9307      	str	r3, [sp, #28]
 800c19a:	2300      	movs	r3, #0
 800c19c:	9306      	str	r3, [sp, #24]
 800c19e:	2300      	movs	r3, #0
 800c1a0:	9305      	str	r3, [sp, #20]
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	9304      	str	r3, [sp, #16]
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	9303      	str	r3, [sp, #12]
 800c1aa:	2308      	movs	r3, #8
 800c1ac:	9302      	str	r3, [sp, #8]
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	9301      	str	r3, [sp, #4]
 800c1b2:	2307      	movs	r3, #7
 800c1b4:	9300      	str	r3, [sp, #0]
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	2116      	movs	r1, #22
 800c1bc:	2001      	movs	r0, #1
 800c1be:	47a0      	blx	r4
                      LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                      LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                      true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

  Radio.SetMaxPayloadLength(MODEM_LORA, BUFFER_SIZE);
 800c1c0:	4b18      	ldr	r3, [pc, #96]	@ (800c224 <SubghzApp_Init+0xc4>)
 800c1c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1c4:	2106      	movs	r1, #6
 800c1c6:	2001      	movs	r0, #1
 800c1c8:	4798      	blx	r3

  Radio.SetChannel(RF_FREQUENCY);
 800c1ca:	4b16      	ldr	r3, [pc, #88]	@ (800c224 <SubghzApp_Init+0xc4>)
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	4816      	ldr	r0, [pc, #88]	@ (800c228 <SubghzApp_Init+0xc8>)
 800c1d0:	4798      	blx	r3

  HAL_Delay(Radio.GetWakeupTime() + TCXO_WORKAROUND_TIME_MARGIN);
 800c1d2:	4b14      	ldr	r3, [pc, #80]	@ (800c224 <SubghzApp_Init+0xc4>)
 800c1d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1d6:	4798      	blx	r3
 800c1d8:	4603      	mov	r3, r0
 800c1da:	3332      	adds	r3, #50	@ 0x32
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7f4 fe25 	bl	8000e2c <HAL_Delay>

  UTIL_TIMER_Create(&timerTransmit, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, TransmitPacket, NULL);
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	9300      	str	r3, [sp, #0]
 800c1e6:	4b11      	ldr	r3, [pc, #68]	@ (800c22c <SubghzApp_Init+0xcc>)
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	f04f 31ff 	mov.w	r1, #4294967295
 800c1ee:	4810      	ldr	r0, [pc, #64]	@ (800c230 <SubghzApp_Init+0xd0>)
 800c1f0:	f000 fe96 	bl	800cf20 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&timerTransmit, TRANSMIT_PERIOD_MS);
 800c1f4:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800c1f8:	480d      	ldr	r0, [pc, #52]	@ (800c230 <SubghzApp_Init+0xd0>)
 800c1fa:	f000 ffa5 	bl	800d148 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&timerTransmit);  // start transmitting packets every 2s
 800c1fe:	480c      	ldr	r0, [pc, #48]	@ (800c230 <SubghzApp_Init+0xd0>)
 800c200:	f000 fec4 	bl	800cf8c <UTIL_TIMER_Start>
  /* USER CODE END SubghzApp_Init_2 */
}
 800c204:	bf00      	nop
 800c206:	3704      	adds	r7, #4
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd90      	pop	{r4, r7, pc}
 800c20c:	200003e4 	.word	0x200003e4
 800c210:	0800c295 	.word	0x0800c295
 800c214:	0800c2a9 	.word	0x0800c2a9
 800c218:	0800c2cd 	.word	0x0800c2cd
 800c21c:	0800c2d9 	.word	0x0800c2d9
 800c220:	0800c2e5 	.word	0x0800c2e5
 800c224:	0800dc5c 	.word	0x0800dc5c
 800c228:	36884420 	.word	0x36884420
 800c22c:	0800c235 	.word	0x0800c235
 800c230:	200003cc 	.word	0x200003cc

0800c234 <TransmitPacket>:

/* USER CODE BEGIN EF */
// Sending data by LoRa module
static void TransmitPacket(void *context)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b084      	sub	sp, #16
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
	uint8_t i =0;
 800c23c:	2300      	movs	r3, #0
 800c23e:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<10;i++)
 800c240:	2300      	movs	r3, #0
 800c242:	73fb      	strb	r3, [r7, #15]
 800c244:	e009      	b.n	800c25a <TransmitPacket+0x26>
	{
		Buffer[i]++;
 800c246:	7bfb      	ldrb	r3, [r7, #15]
 800c248:	4a0d      	ldr	r2, [pc, #52]	@ (800c280 <TransmitPacket+0x4c>)
 800c24a:	5cd2      	ldrb	r2, [r2, r3]
 800c24c:	3201      	adds	r2, #1
 800c24e:	b2d1      	uxtb	r1, r2
 800c250:	4a0b      	ldr	r2, [pc, #44]	@ (800c280 <TransmitPacket+0x4c>)
 800c252:	54d1      	strb	r1, [r2, r3]
	for(i=0; i<10;i++)
 800c254:	7bfb      	ldrb	r3, [r7, #15]
 800c256:	3301      	adds	r3, #1
 800c258:	73fb      	strb	r3, [r7, #15]
 800c25a:	7bfb      	ldrb	r3, [r7, #15]
 800c25c:	2b09      	cmp	r3, #9
 800c25e:	d9f2      	bls.n	800c246 <TransmitPacket+0x12>
	}
	StatusTX = Radio.Send(RecievedData, bufferSize);
 800c260:	4b08      	ldr	r3, [pc, #32]	@ (800c284 <TransmitPacket+0x50>)
 800c262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c264:	4a08      	ldr	r2, [pc, #32]	@ (800c288 <TransmitPacket+0x54>)
 800c266:	7812      	ldrb	r2, [r2, #0]
 800c268:	4611      	mov	r1, r2
 800c26a:	4808      	ldr	r0, [pc, #32]	@ (800c28c <TransmitPacket+0x58>)
 800c26c:	4798      	blx	r3
 800c26e:	4603      	mov	r3, r0
 800c270:	461a      	mov	r2, r3
 800c272:	4b07      	ldr	r3, [pc, #28]	@ (800c290 <TransmitPacket+0x5c>)
 800c274:	701a      	strb	r2, [r3, #0]
}
 800c276:	bf00      	nop
 800c278:	3710      	adds	r7, #16
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	20000014 	.word	0x20000014
 800c284:	0800dc5c 	.word	0x0800dc5c
 800c288:	2000001e 	.word	0x2000001e
 800c28c:	200000d0 	.word	0x200000d0
 800c290:	20000400 	.word	0x20000400

0800c294 <OnTxDone>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
	  UTIL_TIMER_Start(&timerTransmit);  //Transmit packet in 2s
 800c298:	4802      	ldr	r0, [pc, #8]	@ (800c2a4 <OnTxDone+0x10>)
 800c29a:	f000 fe77 	bl	800cf8c <UTIL_TIMER_Start>
//		  itoa(Buffer[i],BuffCharSended,10);
//		  APP_LOG(TS_OFF, VLEVEL_L,  "Wyslane dane: %s \n\r", BuffCharSended);
//	  }

  /* USER CODE END OnTxDone */
}
 800c29e:	bf00      	nop
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	200003cc 	.word	0x200003cc

0800c2a8 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b085      	sub	sp, #20
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	60f8      	str	r0, [r7, #12]
 800c2b0:	4608      	mov	r0, r1
 800c2b2:	4611      	mov	r1, r2
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	817b      	strh	r3, [r7, #10]
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	813b      	strh	r3, [r7, #8]
 800c2be:	4613      	mov	r3, r2
 800c2c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 800c2c2:	bf00      	nop
 800c2c4:	3714      	adds	r7, #20
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bc80      	pop	{r7}
 800c2ca:	4770      	bx	lr

0800c2cc <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 800c2d0:	bf00      	nop
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bc80      	pop	{r7}
 800c2d6:	4770      	bx	lr

0800c2d8 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 800c2dc:	bf00      	nop
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bc80      	pop	{r7}
 800c2e2:	4770      	bx	lr

0800c2e4 <OnRxError>:

static void OnRxError(void)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 800c2e8:	bf00      	nop
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bc80      	pop	{r7}
 800c2ee:	4770      	bx	lr

0800c2f0 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b083      	sub	sp, #12
 800c2f4:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800c2fa:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	370c      	adds	r7, #12
 800c300:	46bd      	mov	sp, r7
 800c302:	bc80      	pop	{r7}
 800c304:	4770      	bx	lr

0800c306 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800c306:	b480      	push	{r7}
 800c308:	b085      	sub	sp, #20
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	4603      	mov	r3, r0
 800c30e:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800c310:	2300      	movs	r3, #0
 800c312:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800c314:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800c316:	4618      	mov	r0, r3
 800c318:	3714      	adds	r7, #20
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bc80      	pop	{r7}
 800c31e:	4770      	bx	lr

0800c320 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800c320:	b480      	push	{r7}
 800c322:	b083      	sub	sp, #12
 800c324:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800c326:	2300      	movs	r3, #0
 800c328:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 800c32a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	370c      	adds	r7, #12
 800c330:	46bd      	mov	sp, r7
 800c332:	bc80      	pop	{r7}
 800c334:	4770      	bx	lr

0800c336 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800c336:	b480      	push	{r7}
 800c338:	b083      	sub	sp, #12
 800c33a:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800c33c:	2301      	movs	r3, #1
 800c33e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 800c340:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800c342:	4618      	mov	r0, r3
 800c344:	370c      	adds	r7, #12
 800c346:	46bd      	mov	sp, r7
 800c348:	bc80      	pop	{r7}
 800c34a:	4770      	bx	lr

0800c34c <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b083      	sub	sp, #12
 800c350:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800c352:	2301      	movs	r3, #1
 800c354:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 800c356:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800c358:	4618      	mov	r0, r3
 800c35a:	370c      	adds	r7, #12
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bc80      	pop	{r7}
 800c360:	4770      	bx	lr

0800c362 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800c362:	b480      	push	{r7}
 800c364:	b085      	sub	sp, #20
 800c366:	af00      	add	r7, sp, #0
 800c368:	4603      	mov	r3, r0
 800c36a:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800c36c:	2300      	movs	r3, #0
 800c36e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 800c370:	79fb      	ldrb	r3, [r7, #7]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d102      	bne.n	800c37c <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 800c376:	230f      	movs	r3, #15
 800c378:	60fb      	str	r3, [r7, #12]
 800c37a:	e001      	b.n	800c380 <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 800c37c:	2316      	movs	r3, #22
 800c37e:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800c380:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800c382:	4618      	mov	r0, r3
 800c384:	3714      	adds	r7, #20
 800c386:	46bd      	mov	sp, r7
 800c388:	bc80      	pop	{r7}
 800c38a:	4770      	bx	lr

0800c38c <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800c390:	2218      	movs	r2, #24
 800c392:	2100      	movs	r1, #0
 800c394:	4807      	ldr	r0, [pc, #28]	@ (800c3b4 <UTIL_ADV_TRACE_Init+0x28>)
 800c396:	f000 fb52 	bl	800ca3e <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800c39a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c39e:	2100      	movs	r1, #0
 800c3a0:	4805      	ldr	r0, [pc, #20]	@ (800c3b8 <UTIL_ADV_TRACE_Init+0x2c>)
 800c3a2:	f000 fb4c 	bl	800ca3e <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800c3a6:	4b05      	ldr	r3, [pc, #20]	@ (800c3bc <UTIL_ADV_TRACE_Init+0x30>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4805      	ldr	r0, [pc, #20]	@ (800c3c0 <UTIL_ADV_TRACE_Init+0x34>)
 800c3ac:	4798      	blx	r3
 800c3ae:	4603      	mov	r3, r0
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	bd80      	pop	{r7, pc}
 800c3b4:	20000404 	.word	0x20000404
 800c3b8:	2000041c 	.word	0x2000041c
 800c3bc:	0800dc24 	.word	0x0800dc24
 800c3c0:	0800c609 	.word	0x0800c609

0800c3c4 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 800c3c4:	b408      	push	{r3}
 800c3c6:	b580      	push	{r7, lr}
 800c3c8:	b08d      	sub	sp, #52	@ 0x34
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	60f8      	str	r0, [r7, #12]
 800c3ce:	60b9      	str	r1, [r7, #8]
 800c3d0:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800c3da:	4b37      	ldr	r3, [pc, #220]	@ (800c4b8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800c3dc:	7a1b      	ldrb	r3, [r3, #8]
 800c3de:	461a      	mov	r2, r3
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d902      	bls.n	800c3ec <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 800c3e6:	f06f 0304 	mvn.w	r3, #4
 800c3ea:	e05e      	b.n	800c4aa <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800c3ec:	4b32      	ldr	r3, [pc, #200]	@ (800c4b8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800c3ee:	68da      	ldr	r2, [r3, #12]
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	4013      	ands	r3, r2
 800c3f4:	68ba      	ldr	r2, [r7, #8]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d002      	beq.n	800c400 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 800c3fa:	f06f 0305 	mvn.w	r3, #5
 800c3fe:	e054      	b.n	800c4aa <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800c400:	4b2d      	ldr	r3, [pc, #180]	@ (800c4b8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d00a      	beq.n	800c41e <UTIL_ADV_TRACE_COND_FSend+0x5a>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d007      	beq.n	800c41e <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800c40e:	4b2a      	ldr	r3, [pc, #168]	@ (800c4b8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	f107 0116 	add.w	r1, r7, #22
 800c416:	f107 0218 	add.w	r2, r7, #24
 800c41a:	4610      	mov	r0, r2
 800c41c:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 800c41e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c422:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800c424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c426:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c428:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c42c:	4823      	ldr	r0, [pc, #140]	@ (800c4bc <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800c42e:	f001 f90b 	bl	800d648 <tiny_vsnprintf_like>
 800c432:	4603      	mov	r3, r0
 800c434:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 800c436:	f000 f9f1 	bl	800c81c <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800c43a:	8afa      	ldrh	r2, [r7, #22]
 800c43c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c43e:	4413      	add	r3, r2
 800c440:	b29b      	uxth	r3, r3
 800c442:	f107 0214 	add.w	r2, r7, #20
 800c446:	4611      	mov	r1, r2
 800c448:	4618      	mov	r0, r3
 800c44a:	f000 f969 	bl	800c720 <TRACE_AllocateBufer>
 800c44e:	4603      	mov	r3, r0
 800c450:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c454:	d025      	beq.n	800c4a2 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 800c456:	2300      	movs	r3, #0
 800c458:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c45a:	e00e      	b.n	800c47a <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800c45c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c45e:	8aba      	ldrh	r2, [r7, #20]
 800c460:	3330      	adds	r3, #48	@ 0x30
 800c462:	443b      	add	r3, r7
 800c464:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800c468:	4b15      	ldr	r3, [pc, #84]	@ (800c4c0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800c46a:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 800c46c:	8abb      	ldrh	r3, [r7, #20]
 800c46e:	3301      	adds	r3, #1
 800c470:	b29b      	uxth	r3, r3
 800c472:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 800c474:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c476:	3301      	adds	r3, #1
 800c478:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c47a:	8afb      	ldrh	r3, [r7, #22]
 800c47c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c47e:	429a      	cmp	r2, r3
 800c480:	d3ec      	bcc.n	800c45c <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800c482:	8abb      	ldrh	r3, [r7, #20]
 800c484:	461a      	mov	r2, r3
 800c486:	4b0e      	ldr	r3, [pc, #56]	@ (800c4c0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800c488:	18d0      	adds	r0, r2, r3
 800c48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c48c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c48e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c492:	f001 f8d9 	bl	800d648 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 800c496:	f000 f9df 	bl	800c858 <TRACE_UnLock>

    return TRACE_Send();
 800c49a:	f000 f831 	bl	800c500 <TRACE_Send>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	e003      	b.n	800c4aa <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 800c4a2:	f000 f9d9 	bl	800c858 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 800c4a6:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3734      	adds	r7, #52	@ 0x34
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c4b4:	b001      	add	sp, #4
 800c4b6:	4770      	bx	lr
 800c4b8:	20000404 	.word	0x20000404
 800c4bc:	2000061c 	.word	0x2000061c
 800c4c0:	2000041c 	.word	0x2000041c

0800c4c4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b083      	sub	sp, #12
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800c4cc:	4a03      	ldr	r2, [pc, #12]	@ (800c4dc <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6053      	str	r3, [r2, #4]
}
 800c4d2:	bf00      	nop
 800c4d4:	370c      	adds	r7, #12
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bc80      	pop	{r7}
 800c4da:	4770      	bx	lr
 800c4dc:	20000404 	.word	0x20000404

0800c4e0 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800c4ea:	4a04      	ldr	r2, [pc, #16]	@ (800c4fc <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 800c4ec:	79fb      	ldrb	r3, [r7, #7]
 800c4ee:	7213      	strb	r3, [r2, #8]
}
 800c4f0:	bf00      	nop
 800c4f2:	370c      	adds	r7, #12
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bc80      	pop	{r7}
 800c4f8:	4770      	bx	lr
 800c4fa:	bf00      	nop
 800c4fc:	20000404 	.word	0x20000404

0800c500 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b088      	sub	sp, #32
 800c504:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800c506:	2300      	movs	r3, #0
 800c508:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 800c50a:	2300      	movs	r3, #0
 800c50c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c50e:	f3ef 8310 	mrs	r3, PRIMASK
 800c512:	613b      	str	r3, [r7, #16]
  return(result);
 800c514:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c516:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c518:	b672      	cpsid	i
}
 800c51a:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 800c51c:	f000 f9ba 	bl	800c894 <TRACE_IsLocked>
 800c520:	4603      	mov	r3, r0
 800c522:	2b00      	cmp	r3, #0
 800c524:	d15d      	bne.n	800c5e2 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 800c526:	f000 f979 	bl	800c81c <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800c52a:	4b34      	ldr	r3, [pc, #208]	@ (800c5fc <TRACE_Send+0xfc>)
 800c52c:	8a1a      	ldrh	r2, [r3, #16]
 800c52e:	4b33      	ldr	r3, [pc, #204]	@ (800c5fc <TRACE_Send+0xfc>)
 800c530:	8a5b      	ldrh	r3, [r3, #18]
 800c532:	429a      	cmp	r2, r3
 800c534:	d04d      	beq.n	800c5d2 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800c536:	4b31      	ldr	r3, [pc, #196]	@ (800c5fc <TRACE_Send+0xfc>)
 800c538:	789b      	ldrb	r3, [r3, #2]
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d117      	bne.n	800c56e <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800c53e:	4b2f      	ldr	r3, [pc, #188]	@ (800c5fc <TRACE_Send+0xfc>)
 800c540:	881a      	ldrh	r2, [r3, #0]
 800c542:	4b2e      	ldr	r3, [pc, #184]	@ (800c5fc <TRACE_Send+0xfc>)
 800c544:	8a1b      	ldrh	r3, [r3, #16]
 800c546:	1ad3      	subs	r3, r2, r3
 800c548:	b29a      	uxth	r2, r3
 800c54a:	4b2c      	ldr	r3, [pc, #176]	@ (800c5fc <TRACE_Send+0xfc>)
 800c54c:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800c54e:	4b2b      	ldr	r3, [pc, #172]	@ (800c5fc <TRACE_Send+0xfc>)
 800c550:	2202      	movs	r2, #2
 800c552:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800c554:	4b29      	ldr	r3, [pc, #164]	@ (800c5fc <TRACE_Send+0xfc>)
 800c556:	2200      	movs	r2, #0
 800c558:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800c55a:	4b28      	ldr	r3, [pc, #160]	@ (800c5fc <TRACE_Send+0xfc>)
 800c55c:	8a9b      	ldrh	r3, [r3, #20]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d105      	bne.n	800c56e <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c562:	4b26      	ldr	r3, [pc, #152]	@ (800c5fc <TRACE_Send+0xfc>)
 800c564:	2200      	movs	r2, #0
 800c566:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c568:	4b24      	ldr	r3, [pc, #144]	@ (800c5fc <TRACE_Send+0xfc>)
 800c56a:	2200      	movs	r2, #0
 800c56c:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800c56e:	4b23      	ldr	r3, [pc, #140]	@ (800c5fc <TRACE_Send+0xfc>)
 800c570:	789b      	ldrb	r3, [r3, #2]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d115      	bne.n	800c5a2 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c576:	4b21      	ldr	r3, [pc, #132]	@ (800c5fc <TRACE_Send+0xfc>)
 800c578:	8a5a      	ldrh	r2, [r3, #18]
 800c57a:	4b20      	ldr	r3, [pc, #128]	@ (800c5fc <TRACE_Send+0xfc>)
 800c57c:	8a1b      	ldrh	r3, [r3, #16]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d908      	bls.n	800c594 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800c582:	4b1e      	ldr	r3, [pc, #120]	@ (800c5fc <TRACE_Send+0xfc>)
 800c584:	8a5a      	ldrh	r2, [r3, #18]
 800c586:	4b1d      	ldr	r3, [pc, #116]	@ (800c5fc <TRACE_Send+0xfc>)
 800c588:	8a1b      	ldrh	r3, [r3, #16]
 800c58a:	1ad3      	subs	r3, r2, r3
 800c58c:	b29a      	uxth	r2, r3
 800c58e:	4b1b      	ldr	r3, [pc, #108]	@ (800c5fc <TRACE_Send+0xfc>)
 800c590:	829a      	strh	r2, [r3, #20]
 800c592:	e006      	b.n	800c5a2 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800c594:	4b19      	ldr	r3, [pc, #100]	@ (800c5fc <TRACE_Send+0xfc>)
 800c596:	8a1b      	ldrh	r3, [r3, #16]
 800c598:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c59c:	b29a      	uxth	r2, r3
 800c59e:	4b17      	ldr	r3, [pc, #92]	@ (800c5fc <TRACE_Send+0xfc>)
 800c5a0:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800c5a2:	4b16      	ldr	r3, [pc, #88]	@ (800c5fc <TRACE_Send+0xfc>)
 800c5a4:	8a1b      	ldrh	r3, [r3, #16]
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	4b15      	ldr	r3, [pc, #84]	@ (800c600 <TRACE_Send+0x100>)
 800c5aa:	4413      	add	r3, r2
 800c5ac:	61bb      	str	r3, [r7, #24]
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f383 8810 	msr	PRIMASK, r3
}
 800c5b8:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 800c5ba:	f7f4 fbfd 	bl	8000db8 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800c5be:	4b11      	ldr	r3, [pc, #68]	@ (800c604 <TRACE_Send+0x104>)
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	4a0e      	ldr	r2, [pc, #56]	@ (800c5fc <TRACE_Send+0xfc>)
 800c5c4:	8a92      	ldrh	r2, [r2, #20]
 800c5c6:	4611      	mov	r1, r2
 800c5c8:	69b8      	ldr	r0, [r7, #24]
 800c5ca:	4798      	blx	r3
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	77fb      	strb	r3, [r7, #31]
 800c5d0:	e00d      	b.n	800c5ee <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 800c5d2:	f000 f941 	bl	800c858 <TRACE_UnLock>
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	f383 8810 	msr	PRIMASK, r3
}
 800c5e0:	e005      	b.n	800c5ee <TRACE_Send+0xee>
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f383 8810 	msr	PRIMASK, r3
}
 800c5ec:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 800c5ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3720      	adds	r7, #32
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	20000404 	.word	0x20000404
 800c600:	2000041c 	.word	0x2000041c
 800c604:	0800dc24 	.word	0x0800dc24

0800c608 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b088      	sub	sp, #32
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 800c610:	2300      	movs	r3, #0
 800c612:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c614:	f3ef 8310 	mrs	r3, PRIMASK
 800c618:	617b      	str	r3, [r7, #20]
  return(result);
 800c61a:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c61c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800c61e:	b672      	cpsid	i
}
 800c620:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800c622:	4b3c      	ldr	r3, [pc, #240]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c624:	789b      	ldrb	r3, [r3, #2]
 800c626:	2b02      	cmp	r3, #2
 800c628:	d106      	bne.n	800c638 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c62a:	4b3a      	ldr	r3, [pc, #232]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c62c:	2200      	movs	r2, #0
 800c62e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c630:	4b38      	ldr	r3, [pc, #224]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c632:	2200      	movs	r2, #0
 800c634:	821a      	strh	r2, [r3, #16]
 800c636:	e00a      	b.n	800c64e <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800c638:	4b36      	ldr	r3, [pc, #216]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c63a:	8a1a      	ldrh	r2, [r3, #16]
 800c63c:	4b35      	ldr	r3, [pc, #212]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c63e:	8a9b      	ldrh	r3, [r3, #20]
 800c640:	4413      	add	r3, r2
 800c642:	b29b      	uxth	r3, r3
 800c644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c648:	b29a      	uxth	r2, r3
 800c64a:	4b32      	ldr	r3, [pc, #200]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c64c:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800c64e:	4b31      	ldr	r3, [pc, #196]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c650:	8a1a      	ldrh	r2, [r3, #16]
 800c652:	4b30      	ldr	r3, [pc, #192]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c654:	8a5b      	ldrh	r3, [r3, #18]
 800c656:	429a      	cmp	r2, r3
 800c658:	d04d      	beq.n	800c6f6 <TRACE_TxCpltCallback+0xee>
 800c65a:	4b2e      	ldr	r3, [pc, #184]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c65c:	8adb      	ldrh	r3, [r3, #22]
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d149      	bne.n	800c6f6 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800c662:	4b2c      	ldr	r3, [pc, #176]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c664:	789b      	ldrb	r3, [r3, #2]
 800c666:	2b01      	cmp	r3, #1
 800c668:	d117      	bne.n	800c69a <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800c66a:	4b2a      	ldr	r3, [pc, #168]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c66c:	881a      	ldrh	r2, [r3, #0]
 800c66e:	4b29      	ldr	r3, [pc, #164]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c670:	8a1b      	ldrh	r3, [r3, #16]
 800c672:	1ad3      	subs	r3, r2, r3
 800c674:	b29a      	uxth	r2, r3
 800c676:	4b27      	ldr	r3, [pc, #156]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c678:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800c67a:	4b26      	ldr	r3, [pc, #152]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c67c:	2202      	movs	r2, #2
 800c67e:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800c680:	4b24      	ldr	r3, [pc, #144]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c682:	2200      	movs	r2, #0
 800c684:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800c686:	4b23      	ldr	r3, [pc, #140]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c688:	8a9b      	ldrh	r3, [r3, #20]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d105      	bne.n	800c69a <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c68e:	4b21      	ldr	r3, [pc, #132]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c690:	2200      	movs	r2, #0
 800c692:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c694:	4b1f      	ldr	r3, [pc, #124]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c696:	2200      	movs	r2, #0
 800c698:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800c69a:	4b1e      	ldr	r3, [pc, #120]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c69c:	789b      	ldrb	r3, [r3, #2]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d115      	bne.n	800c6ce <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c6a2:	4b1c      	ldr	r3, [pc, #112]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c6a4:	8a5a      	ldrh	r2, [r3, #18]
 800c6a6:	4b1b      	ldr	r3, [pc, #108]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c6a8:	8a1b      	ldrh	r3, [r3, #16]
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	d908      	bls.n	800c6c0 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800c6ae:	4b19      	ldr	r3, [pc, #100]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c6b0:	8a5a      	ldrh	r2, [r3, #18]
 800c6b2:	4b18      	ldr	r3, [pc, #96]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c6b4:	8a1b      	ldrh	r3, [r3, #16]
 800c6b6:	1ad3      	subs	r3, r2, r3
 800c6b8:	b29a      	uxth	r2, r3
 800c6ba:	4b16      	ldr	r3, [pc, #88]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c6bc:	829a      	strh	r2, [r3, #20]
 800c6be:	e006      	b.n	800c6ce <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800c6c0:	4b14      	ldr	r3, [pc, #80]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c6c2:	8a1b      	ldrh	r3, [r3, #16]
 800c6c4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c6c8:	b29a      	uxth	r2, r3
 800c6ca:	4b12      	ldr	r3, [pc, #72]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c6cc:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800c6ce:	4b11      	ldr	r3, [pc, #68]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c6d0:	8a1b      	ldrh	r3, [r3, #16]
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	4b10      	ldr	r3, [pc, #64]	@ (800c718 <TRACE_TxCpltCallback+0x110>)
 800c6d6:	4413      	add	r3, r2
 800c6d8:	61fb      	str	r3, [r7, #28]
 800c6da:	69bb      	ldr	r3, [r7, #24]
 800c6dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	f383 8810 	msr	PRIMASK, r3
}
 800c6e4:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800c6e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c71c <TRACE_TxCpltCallback+0x114>)
 800c6e8:	68db      	ldr	r3, [r3, #12]
 800c6ea:	4a0a      	ldr	r2, [pc, #40]	@ (800c714 <TRACE_TxCpltCallback+0x10c>)
 800c6ec:	8a92      	ldrh	r2, [r2, #20]
 800c6ee:	4611      	mov	r1, r2
 800c6f0:	69f8      	ldr	r0, [r7, #28]
 800c6f2:	4798      	blx	r3
 800c6f4:	e00a      	b.n	800c70c <TRACE_TxCpltCallback+0x104>
 800c6f6:	69bb      	ldr	r3, [r7, #24]
 800c6f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	f383 8810 	msr	PRIMASK, r3
}
 800c700:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 800c702:	f7f4 fb61 	bl	8000dc8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800c706:	f000 f8a7 	bl	800c858 <TRACE_UnLock>
  }
}
 800c70a:	bf00      	nop
 800c70c:	bf00      	nop
 800c70e:	3720      	adds	r7, #32
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}
 800c714:	20000404 	.word	0x20000404
 800c718:	2000041c 	.word	0x2000041c
 800c71c:	0800dc24 	.word	0x0800dc24

0800c720 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800c720:	b480      	push	{r7}
 800c722:	b087      	sub	sp, #28
 800c724:	af00      	add	r7, sp, #0
 800c726:	4603      	mov	r3, r0
 800c728:	6039      	str	r1, [r7, #0]
 800c72a:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 800c72c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c730:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c732:	f3ef 8310 	mrs	r3, PRIMASK
 800c736:	60fb      	str	r3, [r7, #12]
  return(result);
 800c738:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c73a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c73c:	b672      	cpsid	i
}
 800c73e:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800c740:	4b35      	ldr	r3, [pc, #212]	@ (800c818 <TRACE_AllocateBufer+0xf8>)
 800c742:	8a5a      	ldrh	r2, [r3, #18]
 800c744:	4b34      	ldr	r3, [pc, #208]	@ (800c818 <TRACE_AllocateBufer+0xf8>)
 800c746:	8a1b      	ldrh	r3, [r3, #16]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d11b      	bne.n	800c784 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800c74c:	4b32      	ldr	r3, [pc, #200]	@ (800c818 <TRACE_AllocateBufer+0xf8>)
 800c74e:	8a5b      	ldrh	r3, [r3, #18]
 800c750:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c754:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800c756:	88fa      	ldrh	r2, [r7, #6]
 800c758:	8afb      	ldrh	r3, [r7, #22]
 800c75a:	429a      	cmp	r2, r3
 800c75c:	d33a      	bcc.n	800c7d4 <TRACE_AllocateBufer+0xb4>
 800c75e:	4b2e      	ldr	r3, [pc, #184]	@ (800c818 <TRACE_AllocateBufer+0xf8>)
 800c760:	8a1b      	ldrh	r3, [r3, #16]
 800c762:	88fa      	ldrh	r2, [r7, #6]
 800c764:	429a      	cmp	r2, r3
 800c766:	d235      	bcs.n	800c7d4 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800c768:	4b2b      	ldr	r3, [pc, #172]	@ (800c818 <TRACE_AllocateBufer+0xf8>)
 800c76a:	2201      	movs	r2, #1
 800c76c:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800c76e:	4b2a      	ldr	r3, [pc, #168]	@ (800c818 <TRACE_AllocateBufer+0xf8>)
 800c770:	8a5a      	ldrh	r2, [r3, #18]
 800c772:	4b29      	ldr	r3, [pc, #164]	@ (800c818 <TRACE_AllocateBufer+0xf8>)
 800c774:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800c776:	4b28      	ldr	r3, [pc, #160]	@ (800c818 <TRACE_AllocateBufer+0xf8>)
 800c778:	8a1b      	ldrh	r3, [r3, #16]
 800c77a:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800c77c:	4b26      	ldr	r3, [pc, #152]	@ (800c818 <TRACE_AllocateBufer+0xf8>)
 800c77e:	2200      	movs	r2, #0
 800c780:	825a      	strh	r2, [r3, #18]
 800c782:	e027      	b.n	800c7d4 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c784:	4b24      	ldr	r3, [pc, #144]	@ (800c818 <TRACE_AllocateBufer+0xf8>)
 800c786:	8a5a      	ldrh	r2, [r3, #18]
 800c788:	4b23      	ldr	r3, [pc, #140]	@ (800c818 <TRACE_AllocateBufer+0xf8>)
 800c78a:	8a1b      	ldrh	r3, [r3, #16]
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d91b      	bls.n	800c7c8 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800c790:	4b21      	ldr	r3, [pc, #132]	@ (800c818 <TRACE_AllocateBufer+0xf8>)
 800c792:	8a5b      	ldrh	r3, [r3, #18]
 800c794:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c798:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800c79a:	88fa      	ldrh	r2, [r7, #6]
 800c79c:	8afb      	ldrh	r3, [r7, #22]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d318      	bcc.n	800c7d4 <TRACE_AllocateBufer+0xb4>
 800c7a2:	4b1d      	ldr	r3, [pc, #116]	@ (800c818 <TRACE_AllocateBufer+0xf8>)
 800c7a4:	8a1b      	ldrh	r3, [r3, #16]
 800c7a6:	88fa      	ldrh	r2, [r7, #6]
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d213      	bcs.n	800c7d4 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800c7ac:	4b1a      	ldr	r3, [pc, #104]	@ (800c818 <TRACE_AllocateBufer+0xf8>)
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800c7b2:	4b19      	ldr	r3, [pc, #100]	@ (800c818 <TRACE_AllocateBufer+0xf8>)
 800c7b4:	8a5a      	ldrh	r2, [r3, #18]
 800c7b6:	4b18      	ldr	r3, [pc, #96]	@ (800c818 <TRACE_AllocateBufer+0xf8>)
 800c7b8:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800c7ba:	4b17      	ldr	r3, [pc, #92]	@ (800c818 <TRACE_AllocateBufer+0xf8>)
 800c7bc:	8a1b      	ldrh	r3, [r3, #16]
 800c7be:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800c7c0:	4b15      	ldr	r3, [pc, #84]	@ (800c818 <TRACE_AllocateBufer+0xf8>)
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	825a      	strh	r2, [r3, #18]
 800c7c6:	e005      	b.n	800c7d4 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800c7c8:	4b13      	ldr	r3, [pc, #76]	@ (800c818 <TRACE_AllocateBufer+0xf8>)
 800c7ca:	8a1a      	ldrh	r2, [r3, #16]
 800c7cc:	4b12      	ldr	r3, [pc, #72]	@ (800c818 <TRACE_AllocateBufer+0xf8>)
 800c7ce:	8a5b      	ldrh	r3, [r3, #18]
 800c7d0:	1ad3      	subs	r3, r2, r3
 800c7d2:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800c7d4:	8afa      	ldrh	r2, [r7, #22]
 800c7d6:	88fb      	ldrh	r3, [r7, #6]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d90f      	bls.n	800c7fc <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800c7dc:	4b0e      	ldr	r3, [pc, #56]	@ (800c818 <TRACE_AllocateBufer+0xf8>)
 800c7de:	8a5a      	ldrh	r2, [r3, #18]
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800c7e4:	4b0c      	ldr	r3, [pc, #48]	@ (800c818 <TRACE_AllocateBufer+0xf8>)
 800c7e6:	8a5a      	ldrh	r2, [r3, #18]
 800c7e8:	88fb      	ldrh	r3, [r7, #6]
 800c7ea:	4413      	add	r3, r2
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7f2:	b29a      	uxth	r2, r3
 800c7f4:	4b08      	ldr	r3, [pc, #32]	@ (800c818 <TRACE_AllocateBufer+0xf8>)
 800c7f6:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	82bb      	strh	r3, [r7, #20]
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	f383 8810 	msr	PRIMASK, r3
}
 800c806:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 800c808:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	371c      	adds	r7, #28
 800c810:	46bd      	mov	sp, r7
 800c812:	bc80      	pop	{r7}
 800c814:	4770      	bx	lr
 800c816:	bf00      	nop
 800c818:	20000404 	.word	0x20000404

0800c81c <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b085      	sub	sp, #20
 800c820:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c822:	f3ef 8310 	mrs	r3, PRIMASK
 800c826:	607b      	str	r3, [r7, #4]
  return(result);
 800c828:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c82a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c82c:	b672      	cpsid	i
}
 800c82e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 800c830:	4b08      	ldr	r3, [pc, #32]	@ (800c854 <TRACE_Lock+0x38>)
 800c832:	8adb      	ldrh	r3, [r3, #22]
 800c834:	3301      	adds	r3, #1
 800c836:	b29a      	uxth	r2, r3
 800c838:	4b06      	ldr	r3, [pc, #24]	@ (800c854 <TRACE_Lock+0x38>)
 800c83a:	82da      	strh	r2, [r3, #22]
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	f383 8810 	msr	PRIMASK, r3
}
 800c846:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800c848:	bf00      	nop
 800c84a:	3714      	adds	r7, #20
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bc80      	pop	{r7}
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop
 800c854:	20000404 	.word	0x20000404

0800c858 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 800c858:	b480      	push	{r7}
 800c85a:	b085      	sub	sp, #20
 800c85c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c85e:	f3ef 8310 	mrs	r3, PRIMASK
 800c862:	607b      	str	r3, [r7, #4]
  return(result);
 800c864:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c866:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c868:	b672      	cpsid	i
}
 800c86a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 800c86c:	4b08      	ldr	r3, [pc, #32]	@ (800c890 <TRACE_UnLock+0x38>)
 800c86e:	8adb      	ldrh	r3, [r3, #22]
 800c870:	3b01      	subs	r3, #1
 800c872:	b29a      	uxth	r2, r3
 800c874:	4b06      	ldr	r3, [pc, #24]	@ (800c890 <TRACE_UnLock+0x38>)
 800c876:	82da      	strh	r2, [r3, #22]
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	f383 8810 	msr	PRIMASK, r3
}
 800c882:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800c884:	bf00      	nop
 800c886:	3714      	adds	r7, #20
 800c888:	46bd      	mov	sp, r7
 800c88a:	bc80      	pop	{r7}
 800c88c:	4770      	bx	lr
 800c88e:	bf00      	nop
 800c890:	20000404 	.word	0x20000404

0800c894 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 800c894:	b480      	push	{r7}
 800c896:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800c898:	4b05      	ldr	r3, [pc, #20]	@ (800c8b0 <TRACE_IsLocked+0x1c>)
 800c89a:	8adb      	ldrh	r3, [r3, #22]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	bf14      	ite	ne
 800c8a0:	2301      	movne	r3, #1
 800c8a2:	2300      	moveq	r3, #0
 800c8a4:	b2db      	uxtb	r3, r3
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bc80      	pop	{r7}
 800c8ac:	4770      	bx	lr
 800c8ae:	bf00      	nop
 800c8b0:	20000404 	.word	0x20000404

0800c8b4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800c8b8:	4b04      	ldr	r3, [pc, #16]	@ (800c8cc <UTIL_LPM_Init+0x18>)
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800c8be:	4b04      	ldr	r3, [pc, #16]	@ (800c8d0 <UTIL_LPM_Init+0x1c>)
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800c8c4:	bf00      	nop
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bc80      	pop	{r7}
 800c8ca:	4770      	bx	lr
 800c8cc:	2000071c 	.word	0x2000071c
 800c8d0:	20000720 	.word	0x20000720

0800c8d4 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b087      	sub	sp, #28
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	460b      	mov	r3, r1
 800c8de:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8e0:	f3ef 8310 	mrs	r3, PRIMASK
 800c8e4:	613b      	str	r3, [r7, #16]
  return(result);
 800c8e6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800c8e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c8ea:	b672      	cpsid	i
}
 800c8ec:	bf00      	nop
  
  switch( state )
 800c8ee:	78fb      	ldrb	r3, [r7, #3]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d008      	beq.n	800c906 <UTIL_LPM_SetStopMode+0x32>
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d10e      	bne.n	800c916 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800c8f8:	4b0d      	ldr	r3, [pc, #52]	@ (800c930 <UTIL_LPM_SetStopMode+0x5c>)
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	4313      	orrs	r3, r2
 800c900:	4a0b      	ldr	r2, [pc, #44]	@ (800c930 <UTIL_LPM_SetStopMode+0x5c>)
 800c902:	6013      	str	r3, [r2, #0]
      break;
 800c904:	e008      	b.n	800c918 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	43da      	mvns	r2, r3
 800c90a:	4b09      	ldr	r3, [pc, #36]	@ (800c930 <UTIL_LPM_SetStopMode+0x5c>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	4013      	ands	r3, r2
 800c910:	4a07      	ldr	r2, [pc, #28]	@ (800c930 <UTIL_LPM_SetStopMode+0x5c>)
 800c912:	6013      	str	r3, [r2, #0]
      break;
 800c914:	e000      	b.n	800c918 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800c916:	bf00      	nop
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	f383 8810 	msr	PRIMASK, r3
}
 800c922:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800c924:	bf00      	nop
 800c926:	371c      	adds	r7, #28
 800c928:	46bd      	mov	sp, r7
 800c92a:	bc80      	pop	{r7}
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop
 800c930:	2000071c 	.word	0x2000071c

0800c934 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800c934:	b480      	push	{r7}
 800c936:	b087      	sub	sp, #28
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	460b      	mov	r3, r1
 800c93e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c940:	f3ef 8310 	mrs	r3, PRIMASK
 800c944:	613b      	str	r3, [r7, #16]
  return(result);
 800c946:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800c948:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c94a:	b672      	cpsid	i
}
 800c94c:	bf00      	nop
  
  switch(state)
 800c94e:	78fb      	ldrb	r3, [r7, #3]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d008      	beq.n	800c966 <UTIL_LPM_SetOffMode+0x32>
 800c954:	2b01      	cmp	r3, #1
 800c956:	d10e      	bne.n	800c976 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800c958:	4b0d      	ldr	r3, [pc, #52]	@ (800c990 <UTIL_LPM_SetOffMode+0x5c>)
 800c95a:	681a      	ldr	r2, [r3, #0]
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	4313      	orrs	r3, r2
 800c960:	4a0b      	ldr	r2, [pc, #44]	@ (800c990 <UTIL_LPM_SetOffMode+0x5c>)
 800c962:	6013      	str	r3, [r2, #0]
      break;
 800c964:	e008      	b.n	800c978 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	43da      	mvns	r2, r3
 800c96a:	4b09      	ldr	r3, [pc, #36]	@ (800c990 <UTIL_LPM_SetOffMode+0x5c>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4013      	ands	r3, r2
 800c970:	4a07      	ldr	r2, [pc, #28]	@ (800c990 <UTIL_LPM_SetOffMode+0x5c>)
 800c972:	6013      	str	r3, [r2, #0]
      break;
 800c974:	e000      	b.n	800c978 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800c976:	bf00      	nop
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	f383 8810 	msr	PRIMASK, r3
}
 800c982:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800c984:	bf00      	nop
 800c986:	371c      	adds	r7, #28
 800c988:	46bd      	mov	sp, r7
 800c98a:	bc80      	pop	{r7}
 800c98c:	4770      	bx	lr
 800c98e:	bf00      	nop
 800c990:	20000720 	.word	0x20000720

0800c994 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c99a:	f3ef 8310 	mrs	r3, PRIMASK
 800c99e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c9a0:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800c9a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c9a4:	b672      	cpsid	i
}
 800c9a6:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800c9a8:	4b12      	ldr	r3, [pc, #72]	@ (800c9f4 <UTIL_LPM_EnterLowPower+0x60>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d006      	beq.n	800c9be <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800c9b0:	4b11      	ldr	r3, [pc, #68]	@ (800c9f8 <UTIL_LPM_EnterLowPower+0x64>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800c9b6:	4b10      	ldr	r3, [pc, #64]	@ (800c9f8 <UTIL_LPM_EnterLowPower+0x64>)
 800c9b8:	685b      	ldr	r3, [r3, #4]
 800c9ba:	4798      	blx	r3
 800c9bc:	e010      	b.n	800c9e0 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800c9be:	4b0f      	ldr	r3, [pc, #60]	@ (800c9fc <UTIL_LPM_EnterLowPower+0x68>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d006      	beq.n	800c9d4 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800c9c6:	4b0c      	ldr	r3, [pc, #48]	@ (800c9f8 <UTIL_LPM_EnterLowPower+0x64>)
 800c9c8:	689b      	ldr	r3, [r3, #8]
 800c9ca:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800c9cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c9f8 <UTIL_LPM_EnterLowPower+0x64>)
 800c9ce:	68db      	ldr	r3, [r3, #12]
 800c9d0:	4798      	blx	r3
 800c9d2:	e005      	b.n	800c9e0 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800c9d4:	4b08      	ldr	r3, [pc, #32]	@ (800c9f8 <UTIL_LPM_EnterLowPower+0x64>)
 800c9d6:	691b      	ldr	r3, [r3, #16]
 800c9d8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800c9da:	4b07      	ldr	r3, [pc, #28]	@ (800c9f8 <UTIL_LPM_EnterLowPower+0x64>)
 800c9dc:	695b      	ldr	r3, [r3, #20]
 800c9de:	4798      	blx	r3
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f383 8810 	msr	PRIMASK, r3
}
 800c9ea:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800c9ec:	bf00      	nop
 800c9ee:	3710      	adds	r7, #16
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	2000071c 	.word	0x2000071c
 800c9f8:	0800db2c 	.word	0x0800db2c
 800c9fc:	20000720 	.word	0x20000720

0800ca00 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800ca00:	b480      	push	{r7}
 800ca02:	b087      	sub	sp, #28
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	60f8      	str	r0, [r7, #12]
 800ca08:	60b9      	str	r1, [r7, #8]
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	613b      	str	r3, [r7, #16]

  while( size-- )
 800ca16:	e007      	b.n	800ca28 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800ca18:	693a      	ldr	r2, [r7, #16]
 800ca1a:	1c53      	adds	r3, r2, #1
 800ca1c:	613b      	str	r3, [r7, #16]
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	1c59      	adds	r1, r3, #1
 800ca22:	6179      	str	r1, [r7, #20]
 800ca24:	7812      	ldrb	r2, [r2, #0]
 800ca26:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800ca28:	88fb      	ldrh	r3, [r7, #6]
 800ca2a:	1e5a      	subs	r2, r3, #1
 800ca2c:	80fa      	strh	r2, [r7, #6]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d1f2      	bne.n	800ca18 <UTIL_MEM_cpy_8+0x18>
    }
}
 800ca32:	bf00      	nop
 800ca34:	bf00      	nop
 800ca36:	371c      	adds	r7, #28
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bc80      	pop	{r7}
 800ca3c:	4770      	bx	lr

0800ca3e <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800ca3e:	b480      	push	{r7}
 800ca40:	b085      	sub	sp, #20
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
 800ca46:	460b      	mov	r3, r1
 800ca48:	70fb      	strb	r3, [r7, #3]
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800ca52:	e004      	b.n	800ca5e <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	1c5a      	adds	r2, r3, #1
 800ca58:	60fa      	str	r2, [r7, #12]
 800ca5a:	78fa      	ldrb	r2, [r7, #3]
 800ca5c:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800ca5e:	883b      	ldrh	r3, [r7, #0]
 800ca60:	1e5a      	subs	r2, r3, #1
 800ca62:	803a      	strh	r2, [r7, #0]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d1f5      	bne.n	800ca54 <UTIL_MEM_set_8+0x16>
  }
}
 800ca68:	bf00      	nop
 800ca6a:	bf00      	nop
 800ca6c:	3714      	adds	r7, #20
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bc80      	pop	{r7}
 800ca72:	4770      	bx	lr

0800ca74 <UTIL_SEQ_Init>:

/** @addtogroup SEQUENCER_Exported_function SEQUENCER exported functions
 *  @{
 */
void UTIL_SEQ_Init( void )
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
  TaskSet = UTIL_SEQ_NO_BIT_SET;
 800ca7a:	4b19      	ldr	r3, [pc, #100]	@ (800cae0 <UTIL_SEQ_Init+0x6c>)
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	601a      	str	r2, [r3, #0]
  TaskMask = UTIL_SEQ_ALL_BIT_SET;
 800ca80:	4b18      	ldr	r3, [pc, #96]	@ (800cae4 <UTIL_SEQ_Init+0x70>)
 800ca82:	f04f 32ff 	mov.w	r2, #4294967295
 800ca86:	601a      	str	r2, [r3, #0]
  SuperMask = UTIL_SEQ_ALL_BIT_SET;
 800ca88:	4b17      	ldr	r3, [pc, #92]	@ (800cae8 <UTIL_SEQ_Init+0x74>)
 800ca8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca8e:	601a      	str	r2, [r3, #0]
  EvtSet = UTIL_SEQ_NO_BIT_SET;
 800ca90:	4b16      	ldr	r3, [pc, #88]	@ (800caec <UTIL_SEQ_Init+0x78>)
 800ca92:	2200      	movs	r2, #0
 800ca94:	601a      	str	r2, [r3, #0]
  EvtWaited = UTIL_SEQ_NO_BIT_SET;
 800ca96:	4b16      	ldr	r3, [pc, #88]	@ (800caf0 <UTIL_SEQ_Init+0x7c>)
 800ca98:	2200      	movs	r2, #0
 800ca9a:	601a      	str	r2, [r3, #0]
  CurrentTaskIdx = 0U;
 800ca9c:	4b15      	ldr	r3, [pc, #84]	@ (800caf4 <UTIL_SEQ_Init+0x80>)
 800ca9e:	2200      	movs	r2, #0
 800caa0:	601a      	str	r2, [r3, #0]
  (void)UTIL_SEQ_MEMSET8((uint8_t *)TaskCb, 0, sizeof(TaskCb));
 800caa2:	220c      	movs	r2, #12
 800caa4:	2100      	movs	r1, #0
 800caa6:	4814      	ldr	r0, [pc, #80]	@ (800caf8 <UTIL_SEQ_Init+0x84>)
 800caa8:	f7ff ffc9 	bl	800ca3e <UTIL_MEM_set_8>
  for(uint32_t index = 0; index < UTIL_SEQ_CONF_PRIO_NBR; index++)
 800caac:	2300      	movs	r3, #0
 800caae:	607b      	str	r3, [r7, #4]
 800cab0:	e00d      	b.n	800cace <UTIL_SEQ_Init+0x5a>
  {
      TaskPrio[index].priority = 0;
 800cab2:	4a12      	ldr	r2, [pc, #72]	@ (800cafc <UTIL_SEQ_Init+0x88>)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2100      	movs	r1, #0
 800cab8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
      TaskPrio[index].round_robin = 0;
 800cabc:	4a0f      	ldr	r2, [pc, #60]	@ (800cafc <UTIL_SEQ_Init+0x88>)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	00db      	lsls	r3, r3, #3
 800cac2:	4413      	add	r3, r2
 800cac4:	2200      	movs	r2, #0
 800cac6:	605a      	str	r2, [r3, #4]
  for(uint32_t index = 0; index < UTIL_SEQ_CONF_PRIO_NBR; index++)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	3301      	adds	r3, #1
 800cacc:	607b      	str	r3, [r7, #4]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2b02      	cmp	r3, #2
 800cad2:	d9ee      	bls.n	800cab2 <UTIL_SEQ_Init+0x3e>
  }
  UTIL_SEQ_INIT_CRITICAL_SECTION( );
}
 800cad4:	bf00      	nop
 800cad6:	bf00      	nop
 800cad8:	3708      	adds	r7, #8
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	20000724 	.word	0x20000724
 800cae4:	20000020 	.word	0x20000020
 800cae8:	20000024 	.word	0x20000024
 800caec:	20000728 	.word	0x20000728
 800caf0:	2000072c 	.word	0x2000072c
 800caf4:	20000730 	.word	0x20000730
 800caf8:	20000734 	.word	0x20000734
 800cafc:	20000740 	.word	0x20000740

0800cb00 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b090      	sub	sp, #64	@ 0x40
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800cb08:	4b73      	ldr	r3, [pc, #460]	@ (800ccd8 <UTIL_SEQ_Run+0x1d8>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800cb0e:	4b72      	ldr	r3, [pc, #456]	@ (800ccd8 <UTIL_SEQ_Run+0x1d8>)
 800cb10:	681a      	ldr	r2, [r3, #0]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	4013      	ands	r3, r2
 800cb16:	4a70      	ldr	r2, [pc, #448]	@ (800ccd8 <UTIL_SEQ_Run+0x1d8>)
 800cb18:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800cb1a:	4b70      	ldr	r3, [pc, #448]	@ (800ccdc <UTIL_SEQ_Run+0x1dc>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800cb20:	4b6f      	ldr	r3, [pc, #444]	@ (800cce0 <UTIL_SEQ_Run+0x1e0>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800cb26:	4b6f      	ldr	r3, [pc, #444]	@ (800cce4 <UTIL_SEQ_Run+0x1e4>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800cb2c:	4b6e      	ldr	r3, [pc, #440]	@ (800cce8 <UTIL_SEQ_Run+0x1e8>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800cb32:	e08d      	b.n	800cc50 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800cb34:	2300      	movs	r3, #0
 800cb36:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800cb38:	e002      	b.n	800cb40 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800cb3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800cb40:	4a6a      	ldr	r2, [pc, #424]	@ (800ccec <UTIL_SEQ_Run+0x1ec>)
 800cb42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb44:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cb48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb4a:	401a      	ands	r2, r3
 800cb4c:	4b62      	ldr	r3, [pc, #392]	@ (800ccd8 <UTIL_SEQ_Run+0x1d8>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4013      	ands	r3, r2
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d0f1      	beq.n	800cb3a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800cb56:	4a65      	ldr	r2, [pc, #404]	@ (800ccec <UTIL_SEQ_Run+0x1ec>)
 800cb58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb5a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cb5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb60:	401a      	ands	r2, r3
 800cb62:	4b5d      	ldr	r3, [pc, #372]	@ (800ccd8 <UTIL_SEQ_Run+0x1d8>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	4013      	ands	r3, r2
 800cb68:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800cb6a:	4a60      	ldr	r2, [pc, #384]	@ (800ccec <UTIL_SEQ_Run+0x1ec>)
 800cb6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb6e:	00db      	lsls	r3, r3, #3
 800cb70:	4413      	add	r3, r2
 800cb72:	685a      	ldr	r2, [r3, #4]
 800cb74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb76:	4013      	ands	r3, r2
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d106      	bne.n	800cb8a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800cb7c:	4a5b      	ldr	r2, [pc, #364]	@ (800ccec <UTIL_SEQ_Run+0x1ec>)
 800cb7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb80:	00db      	lsls	r3, r3, #3
 800cb82:	4413      	add	r3, r2
 800cb84:	f04f 32ff 	mov.w	r2, #4294967295
 800cb88:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800cb8a:	4a58      	ldr	r2, [pc, #352]	@ (800ccec <UTIL_SEQ_Run+0x1ec>)
 800cb8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb8e:	00db      	lsls	r3, r3, #3
 800cb90:	4413      	add	r3, r2
 800cb92:	685a      	ldr	r2, [r3, #4]
 800cb94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb96:	4013      	ands	r3, r2
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f000 f907 	bl	800cdac <SEQ_BitPosition>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	461a      	mov	r2, r3
 800cba2:	4b53      	ldr	r3, [pc, #332]	@ (800ccf0 <UTIL_SEQ_Run+0x1f0>)
 800cba4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800cba6:	4a51      	ldr	r2, [pc, #324]	@ (800ccec <UTIL_SEQ_Run+0x1ec>)
 800cba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbaa:	00db      	lsls	r3, r3, #3
 800cbac:	4413      	add	r3, r2
 800cbae:	685a      	ldr	r2, [r3, #4]
 800cbb0:	4b4f      	ldr	r3, [pc, #316]	@ (800ccf0 <UTIL_SEQ_Run+0x1f0>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	2101      	movs	r1, #1
 800cbb6:	fa01 f303 	lsl.w	r3, r1, r3
 800cbba:	43db      	mvns	r3, r3
 800cbbc:	401a      	ands	r2, r3
 800cbbe:	494b      	ldr	r1, [pc, #300]	@ (800ccec <UTIL_SEQ_Run+0x1ec>)
 800cbc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbc2:	00db      	lsls	r3, r3, #3
 800cbc4:	440b      	add	r3, r1
 800cbc6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbc8:	f3ef 8310 	mrs	r3, PRIMASK
 800cbcc:	61bb      	str	r3, [r7, #24]
  return(result);
 800cbce:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cbd0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800cbd2:	b672      	cpsid	i
}
 800cbd4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800cbd6:	4b46      	ldr	r3, [pc, #280]	@ (800ccf0 <UTIL_SEQ_Run+0x1f0>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	2201      	movs	r2, #1
 800cbdc:	fa02 f303 	lsl.w	r3, r2, r3
 800cbe0:	43da      	mvns	r2, r3
 800cbe2:	4b3e      	ldr	r3, [pc, #248]	@ (800ccdc <UTIL_SEQ_Run+0x1dc>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4013      	ands	r3, r2
 800cbe8:	4a3c      	ldr	r2, [pc, #240]	@ (800ccdc <UTIL_SEQ_Run+0x1dc>)
 800cbea:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800cbec:	2303      	movs	r3, #3
 800cbee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cbf0:	e013      	b.n	800cc1a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800cbf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbf4:	3b01      	subs	r3, #1
 800cbf6:	4a3d      	ldr	r2, [pc, #244]	@ (800ccec <UTIL_SEQ_Run+0x1ec>)
 800cbf8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800cbfc:	4b3c      	ldr	r3, [pc, #240]	@ (800ccf0 <UTIL_SEQ_Run+0x1f0>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	2201      	movs	r2, #1
 800cc02:	fa02 f303 	lsl.w	r3, r2, r3
 800cc06:	43da      	mvns	r2, r3
 800cc08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc0a:	3b01      	subs	r3, #1
 800cc0c:	400a      	ands	r2, r1
 800cc0e:	4937      	ldr	r1, [pc, #220]	@ (800ccec <UTIL_SEQ_Run+0x1ec>)
 800cc10:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800cc14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc16:	3b01      	subs	r3, #1
 800cc18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d1e8      	bne.n	800cbf2 <UTIL_SEQ_Run+0xf2>
 800cc20:	6a3b      	ldr	r3, [r7, #32]
 800cc22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	f383 8810 	msr	PRIMASK, r3
}
 800cc2a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800cc2c:	4b30      	ldr	r3, [pc, #192]	@ (800ccf0 <UTIL_SEQ_Run+0x1f0>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	4a30      	ldr	r2, [pc, #192]	@ (800ccf4 <UTIL_SEQ_Run+0x1f4>)
 800cc32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc36:	4798      	blx	r3

    local_taskset = TaskSet;
 800cc38:	4b28      	ldr	r3, [pc, #160]	@ (800ccdc <UTIL_SEQ_Run+0x1dc>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800cc3e:	4b28      	ldr	r3, [pc, #160]	@ (800cce0 <UTIL_SEQ_Run+0x1e0>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800cc44:	4b27      	ldr	r3, [pc, #156]	@ (800cce4 <UTIL_SEQ_Run+0x1e4>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800cc4a:	4b27      	ldr	r3, [pc, #156]	@ (800cce8 <UTIL_SEQ_Run+0x1e8>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800cc50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc54:	401a      	ands	r2, r3
 800cc56:	4b20      	ldr	r3, [pc, #128]	@ (800ccd8 <UTIL_SEQ_Run+0x1d8>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4013      	ands	r3, r2
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d005      	beq.n	800cc6c <UTIL_SEQ_Run+0x16c>
 800cc60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cc62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc64:	4013      	ands	r3, r2
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	f43f af64 	beq.w	800cb34 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800cc6c:	4b20      	ldr	r3, [pc, #128]	@ (800ccf0 <UTIL_SEQ_Run+0x1f0>)
 800cc6e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc72:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800cc74:	f000 f88e 	bl	800cd94 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc78:	f3ef 8310 	mrs	r3, PRIMASK
 800cc7c:	613b      	str	r3, [r7, #16]
  return(result);
 800cc7e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800cc80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800cc82:	b672      	cpsid	i
}
 800cc84:	bf00      	nop
  local_taskset = TaskSet;
 800cc86:	4b15      	ldr	r3, [pc, #84]	@ (800ccdc <UTIL_SEQ_Run+0x1dc>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800cc8c:	4b14      	ldr	r3, [pc, #80]	@ (800cce0 <UTIL_SEQ_Run+0x1e0>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800cc92:	4b14      	ldr	r3, [pc, #80]	@ (800cce4 <UTIL_SEQ_Run+0x1e4>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800cc98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc9c:	401a      	ands	r2, r3
 800cc9e:	4b0e      	ldr	r3, [pc, #56]	@ (800ccd8 <UTIL_SEQ_Run+0x1d8>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	4013      	ands	r3, r2
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d107      	bne.n	800ccb8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800cca8:	4b0f      	ldr	r3, [pc, #60]	@ (800cce8 <UTIL_SEQ_Run+0x1e8>)
 800ccaa:	681a      	ldr	r2, [r3, #0]
 800ccac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccae:	4013      	ands	r3, r2
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d101      	bne.n	800ccb8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800ccb4:	f7f4 f85a 	bl	8000d6c <UTIL_SEQ_Idle>
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	f383 8810 	msr	PRIMASK, r3
}
 800ccc2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800ccc4:	f000 f86c 	bl	800cda0 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800ccc8:	4a03      	ldr	r2, [pc, #12]	@ (800ccd8 <UTIL_SEQ_Run+0x1d8>)
 800ccca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cccc:	6013      	str	r3, [r2, #0]

  return;
 800ccce:	bf00      	nop
}
 800ccd0:	3740      	adds	r7, #64	@ 0x40
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	20000024 	.word	0x20000024
 800ccdc:	20000724 	.word	0x20000724
 800cce0:	20000728 	.word	0x20000728
 800cce4:	20000020 	.word	0x20000020
 800cce8:	2000072c 	.word	0x2000072c
 800ccec:	20000740 	.word	0x20000740
 800ccf0:	20000730 	.word	0x20000730
 800ccf4:	20000734 	.word	0x20000734

0800ccf8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b088      	sub	sp, #32
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	60f8      	str	r0, [r7, #12]
 800cd00:	60b9      	str	r1, [r7, #8]
 800cd02:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd04:	f3ef 8310 	mrs	r3, PRIMASK
 800cd08:	617b      	str	r3, [r7, #20]
  return(result);
 800cd0a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800cd0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800cd0e:	b672      	cpsid	i
}
 800cd10:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800cd12:	68f8      	ldr	r0, [r7, #12]
 800cd14:	f000 f84a 	bl	800cdac <SEQ_BitPosition>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	4a06      	ldr	r2, [pc, #24]	@ (800cd38 <UTIL_SEQ_RegTask+0x40>)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800cd24:	69fb      	ldr	r3, [r7, #28]
 800cd26:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd28:	69bb      	ldr	r3, [r7, #24]
 800cd2a:	f383 8810 	msr	PRIMASK, r3
}
 800cd2e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800cd30:	bf00      	nop
}
 800cd32:	3720      	adds	r7, #32
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	20000734 	.word	0x20000734

0800cd3c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b087      	sub	sp, #28
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd46:	f3ef 8310 	mrs	r3, PRIMASK
 800cd4a:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cd4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cd50:	b672      	cpsid	i
}
 800cd52:	bf00      	nop

  TaskSet |= TaskId_bm;
 800cd54:	4b0d      	ldr	r3, [pc, #52]	@ (800cd8c <UTIL_SEQ_SetTask+0x50>)
 800cd56:	681a      	ldr	r2, [r3, #0]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	4a0b      	ldr	r2, [pc, #44]	@ (800cd8c <UTIL_SEQ_SetTask+0x50>)
 800cd5e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800cd60:	4a0b      	ldr	r2, [pc, #44]	@ (800cd90 <UTIL_SEQ_SetTask+0x54>)
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	431a      	orrs	r2, r3
 800cd6c:	4908      	ldr	r1, [pc, #32]	@ (800cd90 <UTIL_SEQ_SetTask+0x54>)
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	f383 8810 	msr	PRIMASK, r3
}
 800cd7e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800cd80:	bf00      	nop
}
 800cd82:	371c      	adds	r7, #28
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bc80      	pop	{r7}
 800cd88:	4770      	bx	lr
 800cd8a:	bf00      	nop
 800cd8c:	20000724 	.word	0x20000724
 800cd90:	20000740 	.word	0x20000740

0800cd94 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800cd94:	b480      	push	{r7}
 800cd96:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800cd98:	bf00      	nop
}
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bc80      	pop	{r7}
 800cd9e:	4770      	bx	lr

0800cda0 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800cda0:	b480      	push	{r7}
 800cda2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800cda4:	bf00      	nop
}
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bc80      	pop	{r7}
 800cdaa:	4770      	bx	lr

0800cdac <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b085      	sub	sp, #20
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cdc2:	d204      	bcs.n	800cdce <SEQ_BitPosition+0x22>
 800cdc4:	2310      	movs	r3, #16
 800cdc6:	73fb      	strb	r3, [r7, #15]
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	041b      	lsls	r3, r3, #16
 800cdcc:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cdd4:	d205      	bcs.n	800cde2 <SEQ_BitPosition+0x36>
 800cdd6:	7bfb      	ldrb	r3, [r7, #15]
 800cdd8:	3308      	adds	r3, #8
 800cdda:	73fb      	strb	r3, [r7, #15]
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	021b      	lsls	r3, r3, #8
 800cde0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cde8:	d205      	bcs.n	800cdf6 <SEQ_BitPosition+0x4a>
 800cdea:	7bfb      	ldrb	r3, [r7, #15]
 800cdec:	3304      	adds	r3, #4
 800cdee:	73fb      	strb	r3, [r7, #15]
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	011b      	lsls	r3, r3, #4
 800cdf4:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	0f1b      	lsrs	r3, r3, #28
 800cdfa:	4a07      	ldr	r2, [pc, #28]	@ (800ce18 <SEQ_BitPosition+0x6c>)
 800cdfc:	5cd2      	ldrb	r2, [r2, r3]
 800cdfe:	7bfb      	ldrb	r3, [r7, #15]
 800ce00:	4413      	add	r3, r2
 800ce02:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800ce04:	7bfb      	ldrb	r3, [r7, #15]
 800ce06:	f1c3 031f 	rsb	r3, r3, #31
 800ce0a:	b2db      	uxtb	r3, r3
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3714      	adds	r7, #20
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bc80      	pop	{r7}
 800ce14:	4770      	bx	lr
 800ce16:	bf00      	nop
 800ce18:	0800dd9c 	.word	0x0800dd9c

0800ce1c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800ce1c:	b082      	sub	sp, #8
 800ce1e:	b480      	push	{r7}
 800ce20:	b087      	sub	sp, #28
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	60f8      	str	r0, [r7, #12]
 800ce26:	1d38      	adds	r0, r7, #4
 800ce28:	e880 0006 	stmia.w	r0, {r1, r2}
 800ce2c:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800ce2e:	2300      	movs	r3, #0
 800ce30:	613b      	str	r3, [r7, #16]
 800ce32:	2300      	movs	r3, #0
 800ce34:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce3a:	4413      	add	r3, r2
 800ce3c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800ce3e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ce42:	b29a      	uxth	r2, r3
 800ce44:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800ce48:	b29b      	uxth	r3, r3
 800ce4a:	4413      	add	r3, r2
 800ce4c:	b29b      	uxth	r3, r3
 800ce4e:	b21b      	sxth	r3, r3
 800ce50:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 800ce52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ce56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ce5a:	db0a      	blt.n	800ce72 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	3301      	adds	r3, #1
 800ce60:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 800ce62:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ce66:	b29b      	uxth	r3, r3
 800ce68:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800ce6c:	b29b      	uxth	r3, r3
 800ce6e:	b21b      	sxth	r3, r3
 800ce70:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	461a      	mov	r2, r3
 800ce76:	f107 0310 	add.w	r3, r7, #16
 800ce7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ce7e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800ce82:	68f8      	ldr	r0, [r7, #12]
 800ce84:	371c      	adds	r7, #28
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bc80      	pop	{r7}
 800ce8a:	b002      	add	sp, #8
 800ce8c:	4770      	bx	lr
	...

0800ce90 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b08a      	sub	sp, #40	@ 0x28
 800ce94:	af02      	add	r7, sp, #8
 800ce96:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800ce98:	2300      	movs	r3, #0
 800ce9a:	61bb      	str	r3, [r7, #24]
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800cea0:	2300      	movs	r3, #0
 800cea2:	613b      	str	r3, [r7, #16]
 800cea4:	2300      	movs	r3, #0
 800cea6:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800cea8:	4b14      	ldr	r3, [pc, #80]	@ (800cefc <SysTimeGet+0x6c>)
 800ceaa:	691b      	ldr	r3, [r3, #16]
 800ceac:	f107 0218 	add.w	r2, r7, #24
 800ceb0:	3204      	adds	r2, #4
 800ceb2:	4610      	mov	r0, r2
 800ceb4:	4798      	blx	r3
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800ceba:	4b10      	ldr	r3, [pc, #64]	@ (800cefc <SysTimeGet+0x6c>)
 800cebc:	68db      	ldr	r3, [r3, #12]
 800cebe:	4798      	blx	r3
 800cec0:	4603      	mov	r3, r0
 800cec2:	b21b      	sxth	r3, r3
 800cec4:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800cec6:	4b0d      	ldr	r3, [pc, #52]	@ (800cefc <SysTimeGet+0x6c>)
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	4798      	blx	r3
 800cecc:	4603      	mov	r3, r0
 800cece:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800ced0:	f107 0010 	add.w	r0, r7, #16
 800ced4:	69fb      	ldr	r3, [r7, #28]
 800ced6:	9300      	str	r3, [sp, #0]
 800ced8:	69bb      	ldr	r3, [r7, #24]
 800ceda:	f107 0208 	add.w	r2, r7, #8
 800cede:	ca06      	ldmia	r2, {r1, r2}
 800cee0:	f7ff ff9c 	bl	800ce1c <SysTimeAdd>

  return sysTime;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	461a      	mov	r2, r3
 800cee8:	f107 0310 	add.w	r3, r7, #16
 800ceec:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cef0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	3720      	adds	r7, #32
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	0800dc10 	.word	0x0800dc10

0800cf00 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800cf04:	4b04      	ldr	r3, [pc, #16]	@ (800cf18 <UTIL_TIMER_Init+0x18>)
 800cf06:	2200      	movs	r2, #0
 800cf08:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800cf0a:	4b04      	ldr	r3, [pc, #16]	@ (800cf1c <UTIL_TIMER_Init+0x1c>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	4798      	blx	r3
 800cf10:	4603      	mov	r3, r0
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	20000758 	.word	0x20000758
 800cf1c:	0800dbe4 	.word	0x0800dbe4

0800cf20 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	60f8      	str	r0, [r7, #12]
 800cf28:	60b9      	str	r1, [r7, #8]
 800cf2a:	603b      	str	r3, [r7, #0]
 800cf2c:	4613      	mov	r3, r2
 800cf2e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d023      	beq.n	800cf7e <UTIL_TIMER_Create+0x5e>
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d020      	beq.n	800cf7e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800cf42:	4b11      	ldr	r3, [pc, #68]	@ (800cf88 <UTIL_TIMER_Create+0x68>)
 800cf44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf46:	68b8      	ldr	r0, [r7, #8]
 800cf48:	4798      	blx	r3
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2200      	movs	r2, #0
 800cf54:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	683a      	ldr	r2, [r7, #0]
 800cf66:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	69ba      	ldr	r2, [r7, #24]
 800cf6c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	79fa      	ldrb	r2, [r7, #7]
 800cf72:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	2200      	movs	r2, #0
 800cf78:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	e000      	b.n	800cf80 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800cf7e:	2301      	movs	r3, #1
  }
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3710      	adds	r7, #16
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}
 800cf88:	0800dbe4 	.word	0x0800dbe4

0800cf8c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b08a      	sub	sp, #40	@ 0x28
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800cf94:	2300      	movs	r3, #0
 800cf96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d056      	beq.n	800d04e <UTIL_TIMER_Start+0xc2>
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f000 f9a9 	bl	800d2f8 <TimerExists>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	f083 0301 	eor.w	r3, r3, #1
 800cfac:	b2db      	uxtb	r3, r3
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d04d      	beq.n	800d04e <UTIL_TIMER_Start+0xc2>
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	7a5b      	ldrb	r3, [r3, #9]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d149      	bne.n	800d04e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfba:	f3ef 8310 	mrs	r3, PRIMASK
 800cfbe:	613b      	str	r3, [r7, #16]
  return(result);
 800cfc0:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800cfc2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800cfc4:	b672      	cpsid	i
}
 800cfc6:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800cfce:	4b24      	ldr	r3, [pc, #144]	@ (800d060 <UTIL_TIMER_Start+0xd4>)
 800cfd0:	6a1b      	ldr	r3, [r3, #32]
 800cfd2:	4798      	blx	r3
 800cfd4:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800cfd6:	6a3a      	ldr	r2, [r7, #32]
 800cfd8:	69bb      	ldr	r3, [r7, #24]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d201      	bcs.n	800cfe2 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800cfde:	69bb      	ldr	r3, [r7, #24]
 800cfe0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6a3a      	ldr	r2, [r7, #32]
 800cfe6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2200      	movs	r2, #0
 800cfec:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2201      	movs	r2, #1
 800cff2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2200      	movs	r2, #0
 800cff8:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800cffa:	4b1a      	ldr	r3, [pc, #104]	@ (800d064 <UTIL_TIMER_Start+0xd8>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d106      	bne.n	800d010 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800d002:	4b17      	ldr	r3, [pc, #92]	@ (800d060 <UTIL_TIMER_Start+0xd4>)
 800d004:	691b      	ldr	r3, [r3, #16]
 800d006:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 f9eb 	bl	800d3e4 <TimerInsertNewHeadTimer>
 800d00e:	e017      	b.n	800d040 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800d010:	4b13      	ldr	r3, [pc, #76]	@ (800d060 <UTIL_TIMER_Start+0xd4>)
 800d012:	699b      	ldr	r3, [r3, #24]
 800d014:	4798      	blx	r3
 800d016:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681a      	ldr	r2, [r3, #0]
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	441a      	add	r2, r3
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681a      	ldr	r2, [r3, #0]
 800d028:	4b0e      	ldr	r3, [pc, #56]	@ (800d064 <UTIL_TIMER_Start+0xd8>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	429a      	cmp	r2, r3
 800d030:	d203      	bcs.n	800d03a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f000 f9d6 	bl	800d3e4 <TimerInsertNewHeadTimer>
 800d038:	e002      	b.n	800d040 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f000 f9a2 	bl	800d384 <TimerInsertTimer>
 800d040:	69fb      	ldr	r3, [r7, #28]
 800d042:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	f383 8810 	msr	PRIMASK, r3
}
 800d04a:	bf00      	nop
  {
 800d04c:	e002      	b.n	800d054 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800d04e:	2301      	movs	r3, #1
 800d050:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 800d054:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d058:	4618      	mov	r0, r3
 800d05a:	3728      	adds	r7, #40	@ 0x28
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}
 800d060:	0800dbe4 	.word	0x0800dbe4
 800d064:	20000758 	.word	0x20000758

0800d068 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b088      	sub	sp, #32
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800d070:	2300      	movs	r3, #0
 800d072:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d05b      	beq.n	800d132 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d07a:	f3ef 8310 	mrs	r3, PRIMASK
 800d07e:	60fb      	str	r3, [r7, #12]
  return(result);
 800d080:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800d082:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d084:	b672      	cpsid	i
}
 800d086:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800d088:	4b2d      	ldr	r3, [pc, #180]	@ (800d140 <UTIL_TIMER_Stop+0xd8>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800d08e:	4b2c      	ldr	r3, [pc, #176]	@ (800d140 <UTIL_TIMER_Stop+0xd8>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2201      	movs	r2, #1
 800d098:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800d09a:	4b29      	ldr	r3, [pc, #164]	@ (800d140 <UTIL_TIMER_Stop+0xd8>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d041      	beq.n	800d126 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800d0a8:	4b25      	ldr	r3, [pc, #148]	@ (800d140 <UTIL_TIMER_Stop+0xd8>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d134      	bne.n	800d11c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800d0b2:	4b23      	ldr	r3, [pc, #140]	@ (800d140 <UTIL_TIMER_Stop+0xd8>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800d0ba:	4b21      	ldr	r3, [pc, #132]	@ (800d140 <UTIL_TIMER_Stop+0xd8>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	695b      	ldr	r3, [r3, #20]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d00a      	beq.n	800d0da <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800d0c4:	4b1e      	ldr	r3, [pc, #120]	@ (800d140 <UTIL_TIMER_Stop+0xd8>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	695b      	ldr	r3, [r3, #20]
 800d0ca:	4a1d      	ldr	r2, [pc, #116]	@ (800d140 <UTIL_TIMER_Stop+0xd8>)
 800d0cc:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800d0ce:	4b1c      	ldr	r3, [pc, #112]	@ (800d140 <UTIL_TIMER_Stop+0xd8>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f000 f92c 	bl	800d330 <TimerSetTimeout>
 800d0d8:	e023      	b.n	800d122 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800d0da:	4b1a      	ldr	r3, [pc, #104]	@ (800d144 <UTIL_TIMER_Stop+0xdc>)
 800d0dc:	68db      	ldr	r3, [r3, #12]
 800d0de:	4798      	blx	r3
            TimerListHead = NULL;
 800d0e0:	4b17      	ldr	r3, [pc, #92]	@ (800d140 <UTIL_TIMER_Stop+0xd8>)
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	601a      	str	r2, [r3, #0]
 800d0e6:	e01c      	b.n	800d122 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800d0e8:	697a      	ldr	r2, [r7, #20]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d110      	bne.n	800d112 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	695b      	ldr	r3, [r3, #20]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d006      	beq.n	800d106 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	695b      	ldr	r3, [r3, #20]
 800d0fc:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800d0fe:	69bb      	ldr	r3, [r7, #24]
 800d100:	697a      	ldr	r2, [r7, #20]
 800d102:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800d104:	e00d      	b.n	800d122 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800d106:	2300      	movs	r3, #0
 800d108:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800d10a:	69bb      	ldr	r3, [r7, #24]
 800d10c:	697a      	ldr	r2, [r7, #20]
 800d10e:	615a      	str	r2, [r3, #20]
            break;
 800d110:	e007      	b.n	800d122 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	695b      	ldr	r3, [r3, #20]
 800d11a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d1e2      	bne.n	800d0e8 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800d122:	2300      	movs	r3, #0
 800d124:	77fb      	strb	r3, [r7, #31]
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	f383 8810 	msr	PRIMASK, r3
}
 800d130:	e001      	b.n	800d136 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800d132:	2301      	movs	r3, #1
 800d134:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800d136:	7ffb      	ldrb	r3, [r7, #31]
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3720      	adds	r7, #32
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}
 800d140:	20000758 	.word	0x20000758
 800d144:	0800dbe4 	.word	0x0800dbe4

0800d148 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800d152:	2300      	movs	r3, #0
 800d154:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d102      	bne.n	800d162 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800d15c:	2301      	movs	r3, #1
 800d15e:	73fb      	strb	r3, [r7, #15]
 800d160:	e014      	b.n	800d18c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800d162:	4b0d      	ldr	r3, [pc, #52]	@ (800d198 <UTIL_TIMER_SetPeriod+0x50>)
 800d164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d166:	6838      	ldr	r0, [r7, #0]
 800d168:	4798      	blx	r3
 800d16a:	4602      	mov	r2, r0
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f000 f8c1 	bl	800d2f8 <TimerExists>
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d007      	beq.n	800d18c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f7ff ff73 	bl	800d068 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f7ff ff02 	bl	800cf8c <UTIL_TIMER_Start>
 800d188:	4603      	mov	r3, r0
 800d18a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800d18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3710      	adds	r7, #16
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
 800d196:	bf00      	nop
 800d198:	0800dbe4 	.word	0x0800dbe4

0800d19c <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 800d19c:	b590      	push	{r4, r7, lr}
 800d19e:	b089      	sub	sp, #36	@ 0x24
 800d1a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1a2:	f3ef 8310 	mrs	r3, PRIMASK
 800d1a6:	60bb      	str	r3, [r7, #8]
  return(result);
 800d1a8:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800d1aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800d1ac:	b672      	cpsid	i
}
 800d1ae:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 800d1b0:	4b38      	ldr	r3, [pc, #224]	@ (800d294 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800d1b2:	695b      	ldr	r3, [r3, #20]
 800d1b4:	4798      	blx	r3
 800d1b6:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800d1b8:	4b36      	ldr	r3, [pc, #216]	@ (800d294 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800d1ba:	691b      	ldr	r3, [r3, #16]
 800d1bc:	4798      	blx	r3
 800d1be:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 800d1c0:	693a      	ldr	r2, [r7, #16]
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	1ad3      	subs	r3, r2, r3
 800d1c6:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 800d1c8:	4b33      	ldr	r3, [pc, #204]	@ (800d298 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d037      	beq.n	800d240 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 800d1d0:	4b31      	ldr	r3, [pc, #196]	@ (800d298 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 800d1d6:	69fb      	ldr	r3, [r7, #28]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	68fa      	ldr	r2, [r7, #12]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d206      	bcs.n	800d1ee <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 800d1e0:	69fb      	ldr	r3, [r7, #28]
 800d1e2:	681a      	ldr	r2, [r3, #0]
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	1ad2      	subs	r2, r2, r3
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	601a      	str	r2, [r3, #0]
 800d1ec:	e002      	b.n	800d1f4 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 800d1ee:	69fb      	ldr	r3, [r7, #28]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 800d1f4:	69fb      	ldr	r3, [r7, #28]
 800d1f6:	695b      	ldr	r3, [r3, #20]
 800d1f8:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 800d1fa:	69fb      	ldr	r3, [r7, #28]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d1ea      	bne.n	800d1d6 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800d200:	e01e      	b.n	800d240 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 800d202:	4b25      	ldr	r3, [pc, #148]	@ (800d298 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 800d208:	4b23      	ldr	r3, [pc, #140]	@ (800d298 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	695b      	ldr	r3, [r3, #20]
 800d20e:	4a22      	ldr	r2, [pc, #136]	@ (800d298 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d210:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 800d212:	69fb      	ldr	r3, [r7, #28]
 800d214:	2200      	movs	r2, #0
 800d216:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	2200      	movs	r2, #0
 800d21c:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 800d21e:	69fb      	ldr	r3, [r7, #28]
 800d220:	68db      	ldr	r3, [r3, #12]
 800d222:	69fa      	ldr	r2, [r7, #28]
 800d224:	6912      	ldr	r2, [r2, #16]
 800d226:	4610      	mov	r0, r2
 800d228:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	7adb      	ldrb	r3, [r3, #11]
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d106      	bne.n	800d240 <UTIL_TIMER_IRQ_Handler+0xa4>
 800d232:	69fb      	ldr	r3, [r7, #28]
 800d234:	7a9b      	ldrb	r3, [r3, #10]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d102      	bne.n	800d240 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 800d23a:	69f8      	ldr	r0, [r7, #28]
 800d23c:	f7ff fea6 	bl	800cf8c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800d240:	4b15      	ldr	r3, [pc, #84]	@ (800d298 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d00d      	beq.n	800d264 <UTIL_TIMER_IRQ_Handler+0xc8>
 800d248:	4b13      	ldr	r3, [pc, #76]	@ (800d298 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d0d7      	beq.n	800d202 <UTIL_TIMER_IRQ_Handler+0x66>
 800d252:	4b11      	ldr	r3, [pc, #68]	@ (800d298 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	681c      	ldr	r4, [r3, #0]
 800d258:	4b0e      	ldr	r3, [pc, #56]	@ (800d294 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800d25a:	699b      	ldr	r3, [r3, #24]
 800d25c:	4798      	blx	r3
 800d25e:	4603      	mov	r3, r0
 800d260:	429c      	cmp	r4, r3
 800d262:	d3ce      	bcc.n	800d202 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800d264:	4b0c      	ldr	r3, [pc, #48]	@ (800d298 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d009      	beq.n	800d280 <UTIL_TIMER_IRQ_Handler+0xe4>
 800d26c:	4b0a      	ldr	r3, [pc, #40]	@ (800d298 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	7a1b      	ldrb	r3, [r3, #8]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d104      	bne.n	800d280 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 800d276:	4b08      	ldr	r3, [pc, #32]	@ (800d298 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	4618      	mov	r0, r3
 800d27c:	f000 f858 	bl	800d330 <TimerSetTimeout>
 800d280:	69bb      	ldr	r3, [r7, #24]
 800d282:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f383 8810 	msr	PRIMASK, r3
}
 800d28a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 800d28c:	bf00      	nop
 800d28e:	3724      	adds	r7, #36	@ 0x24
 800d290:	46bd      	mov	sp, r7
 800d292:	bd90      	pop	{r4, r7, pc}
 800d294:	0800dbe4 	.word	0x0800dbe4
 800d298:	20000758 	.word	0x20000758

0800d29c <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b082      	sub	sp, #8
 800d2a0:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800d2a2:	4b06      	ldr	r3, [pc, #24]	@ (800d2bc <UTIL_TIMER_GetCurrentTime+0x20>)
 800d2a4:	69db      	ldr	r3, [r3, #28]
 800d2a6:	4798      	blx	r3
 800d2a8:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800d2aa:	4b04      	ldr	r3, [pc, #16]	@ (800d2bc <UTIL_TIMER_GetCurrentTime+0x20>)
 800d2ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	4798      	blx	r3
 800d2b2:	4603      	mov	r3, r0
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3708      	adds	r7, #8
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	0800dbe4 	.word	0x0800dbe4

0800d2c0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b084      	sub	sp, #16
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800d2c8:	4b0a      	ldr	r3, [pc, #40]	@ (800d2f4 <UTIL_TIMER_GetElapsedTime+0x34>)
 800d2ca:	69db      	ldr	r3, [r3, #28]
 800d2cc:	4798      	blx	r3
 800d2ce:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800d2d0:	4b08      	ldr	r3, [pc, #32]	@ (800d2f4 <UTIL_TIMER_GetElapsedTime+0x34>)
 800d2d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	4798      	blx	r3
 800d2d8:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800d2da:	4b06      	ldr	r3, [pc, #24]	@ (800d2f4 <UTIL_TIMER_GetElapsedTime+0x34>)
 800d2dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2de:	68f9      	ldr	r1, [r7, #12]
 800d2e0:	68ba      	ldr	r2, [r7, #8]
 800d2e2:	1a8a      	subs	r2, r1, r2
 800d2e4:	4610      	mov	r0, r2
 800d2e6:	4798      	blx	r3
 800d2e8:	4603      	mov	r3, r0
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3710      	adds	r7, #16
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
 800d2f2:	bf00      	nop
 800d2f4:	0800dbe4 	.word	0x0800dbe4

0800d2f8 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b085      	sub	sp, #20
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800d300:	4b0a      	ldr	r3, [pc, #40]	@ (800d32c <TimerExists+0x34>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800d306:	e008      	b.n	800d31a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800d308:	68fa      	ldr	r2, [r7, #12]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d101      	bne.n	800d314 <TimerExists+0x1c>
    {
      return true;
 800d310:	2301      	movs	r3, #1
 800d312:	e006      	b.n	800d322 <TimerExists+0x2a>
    }
    cur = cur->Next;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	695b      	ldr	r3, [r3, #20]
 800d318:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d1f3      	bne.n	800d308 <TimerExists+0x10>
  }
  return false;
 800d320:	2300      	movs	r3, #0
}
 800d322:	4618      	mov	r0, r3
 800d324:	3714      	adds	r7, #20
 800d326:	46bd      	mov	sp, r7
 800d328:	bc80      	pop	{r7}
 800d32a:	4770      	bx	lr
 800d32c:	20000758 	.word	0x20000758

0800d330 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800d330:	b590      	push	{r4, r7, lr}
 800d332:	b085      	sub	sp, #20
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800d338:	4b11      	ldr	r3, [pc, #68]	@ (800d380 <TimerSetTimeout+0x50>)
 800d33a:	6a1b      	ldr	r3, [r3, #32]
 800d33c:	4798      	blx	r3
 800d33e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2201      	movs	r2, #1
 800d344:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681c      	ldr	r4, [r3, #0]
 800d34a:	4b0d      	ldr	r3, [pc, #52]	@ (800d380 <TimerSetTimeout+0x50>)
 800d34c:	699b      	ldr	r3, [r3, #24]
 800d34e:	4798      	blx	r3
 800d350:	4602      	mov	r2, r0
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	4413      	add	r3, r2
 800d356:	429c      	cmp	r4, r3
 800d358:	d207      	bcs.n	800d36a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800d35a:	4b09      	ldr	r3, [pc, #36]	@ (800d380 <TimerSetTimeout+0x50>)
 800d35c:	699b      	ldr	r3, [r3, #24]
 800d35e:	4798      	blx	r3
 800d360:	4602      	mov	r2, r0
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	441a      	add	r2, r3
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800d36a:	4b05      	ldr	r3, [pc, #20]	@ (800d380 <TimerSetTimeout+0x50>)
 800d36c:	689b      	ldr	r3, [r3, #8]
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	6812      	ldr	r2, [r2, #0]
 800d372:	4610      	mov	r0, r2
 800d374:	4798      	blx	r3
}
 800d376:	bf00      	nop
 800d378:	3714      	adds	r7, #20
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd90      	pop	{r4, r7, pc}
 800d37e:	bf00      	nop
 800d380:	0800dbe4 	.word	0x0800dbe4

0800d384 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800d384:	b480      	push	{r7}
 800d386:	b085      	sub	sp, #20
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800d38c:	4b14      	ldr	r3, [pc, #80]	@ (800d3e0 <TimerInsertTimer+0x5c>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800d392:	4b13      	ldr	r3, [pc, #76]	@ (800d3e0 <TimerInsertTimer+0x5c>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	695b      	ldr	r3, [r3, #20]
 800d398:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800d39a:	e012      	b.n	800d3c2 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681a      	ldr	r2, [r3, #0]
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d905      	bls.n	800d3b4 <TimerInsertTimer+0x30>
    {
        cur = next;
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	695b      	ldr	r3, [r3, #20]
 800d3b0:	60bb      	str	r3, [r7, #8]
 800d3b2:	e006      	b.n	800d3c2 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	687a      	ldr	r2, [r7, #4]
 800d3b8:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	68ba      	ldr	r2, [r7, #8]
 800d3be:	615a      	str	r2, [r3, #20]
        return;
 800d3c0:	e009      	b.n	800d3d6 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	695b      	ldr	r3, [r3, #20]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d1e8      	bne.n	800d39c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	687a      	ldr	r2, [r7, #4]
 800d3ce:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	615a      	str	r2, [r3, #20]
}
 800d3d6:	3714      	adds	r7, #20
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bc80      	pop	{r7}
 800d3dc:	4770      	bx	lr
 800d3de:	bf00      	nop
 800d3e0:	20000758 	.word	0x20000758

0800d3e4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b084      	sub	sp, #16
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800d3ec:	4b0b      	ldr	r3, [pc, #44]	@ (800d41c <TimerInsertNewHeadTimer+0x38>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d002      	beq.n	800d3fe <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	68fa      	ldr	r2, [r7, #12]
 800d402:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800d404:	4a05      	ldr	r2, [pc, #20]	@ (800d41c <TimerInsertNewHeadTimer+0x38>)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800d40a:	4b04      	ldr	r3, [pc, #16]	@ (800d41c <TimerInsertNewHeadTimer+0x38>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	4618      	mov	r0, r3
 800d410:	f7ff ff8e 	bl	800d330 <TimerSetTimeout>
}
 800d414:	bf00      	nop
 800d416:	3710      	adds	r7, #16
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}
 800d41c:	20000758 	.word	0x20000758

0800d420 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800d420:	b480      	push	{r7}
 800d422:	b085      	sub	sp, #20
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  int i = 0;
 800d428:	2300      	movs	r3, #0
 800d42a:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800d42c:	e00e      	b.n	800d44c <ee_skip_atoi+0x2c>
 800d42e:	68fa      	ldr	r2, [r7, #12]
 800d430:	4613      	mov	r3, r2
 800d432:	009b      	lsls	r3, r3, #2
 800d434:	4413      	add	r3, r2
 800d436:	005b      	lsls	r3, r3, #1
 800d438:	4618      	mov	r0, r3
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	1c59      	adds	r1, r3, #1
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	6011      	str	r1, [r2, #0]
 800d444:	781b      	ldrb	r3, [r3, #0]
 800d446:	4403      	add	r3, r0
 800d448:	3b30      	subs	r3, #48	@ 0x30
 800d44a:	60fb      	str	r3, [r7, #12]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	2b2f      	cmp	r3, #47	@ 0x2f
 800d454:	d904      	bls.n	800d460 <ee_skip_atoi+0x40>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	781b      	ldrb	r3, [r3, #0]
 800d45c:	2b39      	cmp	r3, #57	@ 0x39
 800d45e:	d9e6      	bls.n	800d42e <ee_skip_atoi+0xe>
  return i;
 800d460:	68fb      	ldr	r3, [r7, #12]
}
 800d462:	4618      	mov	r0, r3
 800d464:	3714      	adds	r7, #20
 800d466:	46bd      	mov	sp, r7
 800d468:	bc80      	pop	{r7}
 800d46a:	4770      	bx	lr

0800d46c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800d46c:	b480      	push	{r7}
 800d46e:	b099      	sub	sp, #100	@ 0x64
 800d470:	af00      	add	r7, sp, #0
 800d472:	60f8      	str	r0, [r7, #12]
 800d474:	60b9      	str	r1, [r7, #8]
 800d476:	607a      	str	r2, [r7, #4]
 800d478:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 800d47a:	4b71      	ldr	r3, [pc, #452]	@ (800d640 <ee_number+0x1d4>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800d480:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d486:	2b00      	cmp	r3, #0
 800d488:	d002      	beq.n	800d490 <ee_number+0x24>
 800d48a:	4b6e      	ldr	r3, [pc, #440]	@ (800d644 <ee_number+0x1d8>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	2b01      	cmp	r3, #1
 800d494:	dd02      	ble.n	800d49c <ee_number+0x30>
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	2b24      	cmp	r3, #36	@ 0x24
 800d49a:	dd01      	ble.n	800d4a0 <ee_number+0x34>
 800d49c:	2300      	movs	r3, #0
 800d49e:	e0ca      	b.n	800d636 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 800d4a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d4a2:	f003 0301 	and.w	r3, r3, #1
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d001      	beq.n	800d4ae <ee_number+0x42>
 800d4aa:	2330      	movs	r3, #48	@ 0x30
 800d4ac:	e000      	b.n	800d4b0 <ee_number+0x44>
 800d4ae:	2320      	movs	r3, #32
 800d4b0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 800d4ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d4bc:	f003 0302 	and.w	r3, r3, #2
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d00b      	beq.n	800d4dc <ee_number+0x70>
  {
    if (num < 0)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	da08      	bge.n	800d4dc <ee_number+0x70>
    {
      sign = '-';
 800d4ca:	232d      	movs	r3, #45	@ 0x2d
 800d4cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	425b      	negs	r3, r3
 800d4d4:	607b      	str	r3, [r7, #4]
      size--;
 800d4d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d4d8:	3b01      	subs	r3, #1
 800d4da:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d11e      	bne.n	800d524 <ee_number+0xb8>
    tmp[i++] = '0';
 800d4e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4e8:	1c5a      	adds	r2, r3, #1
 800d4ea:	657a      	str	r2, [r7, #84]	@ 0x54
 800d4ec:	3360      	adds	r3, #96	@ 0x60
 800d4ee:	443b      	add	r3, r7
 800d4f0:	2230      	movs	r2, #48	@ 0x30
 800d4f2:	f803 2c50 	strb.w	r2, [r3, #-80]
 800d4f6:	e018      	b.n	800d52a <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	683a      	ldr	r2, [r7, #0]
 800d4fc:	fbb3 f1f2 	udiv	r1, r3, r2
 800d500:	fb01 f202 	mul.w	r2, r1, r2
 800d504:	1a9b      	subs	r3, r3, r2
 800d506:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d508:	441a      	add	r2, r3
 800d50a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d50c:	1c59      	adds	r1, r3, #1
 800d50e:	6579      	str	r1, [r7, #84]	@ 0x54
 800d510:	7812      	ldrb	r2, [r2, #0]
 800d512:	3360      	adds	r3, #96	@ 0x60
 800d514:	443b      	add	r3, r7
 800d516:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d522:	607b      	str	r3, [r7, #4]
    while (num != 0)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d1e6      	bne.n	800d4f8 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 800d52a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d52c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d52e:	429a      	cmp	r2, r3
 800d530:	dd01      	ble.n	800d536 <ee_number+0xca>
 800d532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d534:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 800d536:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d538:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d53a:	1ad3      	subs	r3, r2, r3
 800d53c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800d53e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d540:	f003 0301 	and.w	r3, r3, #1
 800d544:	2b00      	cmp	r3, #0
 800d546:	d112      	bne.n	800d56e <ee_number+0x102>
 800d548:	e00c      	b.n	800d564 <ee_number+0xf8>
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	1c5a      	adds	r2, r3, #1
 800d54e:	60fa      	str	r2, [r7, #12]
 800d550:	2220      	movs	r2, #32
 800d552:	701a      	strb	r2, [r3, #0]
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	3b01      	subs	r3, #1
 800d558:	60bb      	str	r3, [r7, #8]
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d101      	bne.n	800d564 <ee_number+0xf8>
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	e068      	b.n	800d636 <ee_number+0x1ca>
 800d564:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d566:	1e5a      	subs	r2, r3, #1
 800d568:	66ba      	str	r2, [r7, #104]	@ 0x68
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	dced      	bgt.n	800d54a <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 800d56e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d572:	2b00      	cmp	r3, #0
 800d574:	d01b      	beq.n	800d5ae <ee_number+0x142>
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	1c5a      	adds	r2, r3, #1
 800d57a:	60fa      	str	r2, [r7, #12]
 800d57c:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800d580:	701a      	strb	r2, [r3, #0]
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	3b01      	subs	r3, #1
 800d586:	60bb      	str	r3, [r7, #8]
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d10f      	bne.n	800d5ae <ee_number+0x142>
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	e051      	b.n	800d636 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	1c5a      	adds	r2, r3, #1
 800d596:	60fa      	str	r2, [r7, #12]
 800d598:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 800d59c:	701a      	strb	r2, [r3, #0]
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	3b01      	subs	r3, #1
 800d5a2:	60bb      	str	r3, [r7, #8]
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d101      	bne.n	800d5ae <ee_number+0x142>
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	e043      	b.n	800d636 <ee_number+0x1ca>
 800d5ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d5b0:	1e5a      	subs	r2, r3, #1
 800d5b2:	66ba      	str	r2, [r7, #104]	@ 0x68
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	dcec      	bgt.n	800d592 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 800d5b8:	e00c      	b.n	800d5d4 <ee_number+0x168>
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	1c5a      	adds	r2, r3, #1
 800d5be:	60fa      	str	r2, [r7, #12]
 800d5c0:	2230      	movs	r2, #48	@ 0x30
 800d5c2:	701a      	strb	r2, [r3, #0]
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	3b01      	subs	r3, #1
 800d5c8:	60bb      	str	r3, [r7, #8]
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d101      	bne.n	800d5d4 <ee_number+0x168>
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	e030      	b.n	800d636 <ee_number+0x1ca>
 800d5d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5d6:	1e5a      	subs	r2, r3, #1
 800d5d8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d5da:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	dbec      	blt.n	800d5ba <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800d5e0:	e010      	b.n	800d604 <ee_number+0x198>
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	1c5a      	adds	r2, r3, #1
 800d5e6:	60fa      	str	r2, [r7, #12]
 800d5e8:	f107 0110 	add.w	r1, r7, #16
 800d5ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d5ee:	440a      	add	r2, r1
 800d5f0:	7812      	ldrb	r2, [r2, #0]
 800d5f2:	701a      	strb	r2, [r3, #0]
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	3b01      	subs	r3, #1
 800d5f8:	60bb      	str	r3, [r7, #8]
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d101      	bne.n	800d604 <ee_number+0x198>
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	e018      	b.n	800d636 <ee_number+0x1ca>
 800d604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d606:	1e5a      	subs	r2, r3, #1
 800d608:	657a      	str	r2, [r7, #84]	@ 0x54
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	dce9      	bgt.n	800d5e2 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 800d60e:	e00c      	b.n	800d62a <ee_number+0x1be>
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	1c5a      	adds	r2, r3, #1
 800d614:	60fa      	str	r2, [r7, #12]
 800d616:	2220      	movs	r2, #32
 800d618:	701a      	strb	r2, [r3, #0]
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	3b01      	subs	r3, #1
 800d61e:	60bb      	str	r3, [r7, #8]
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d101      	bne.n	800d62a <ee_number+0x1be>
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	e005      	b.n	800d636 <ee_number+0x1ca>
 800d62a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d62c:	1e5a      	subs	r2, r3, #1
 800d62e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800d630:	2b00      	cmp	r3, #0
 800d632:	dced      	bgt.n	800d610 <ee_number+0x1a4>

  return str;
 800d634:	68fb      	ldr	r3, [r7, #12]
}
 800d636:	4618      	mov	r0, r3
 800d638:	3764      	adds	r7, #100	@ 0x64
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bc80      	pop	{r7}
 800d63e:	4770      	bx	lr
 800d640:	20000028 	.word	0x20000028
 800d644:	2000002c 	.word	0x2000002c

0800d648 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b092      	sub	sp, #72	@ 0x48
 800d64c:	af04      	add	r7, sp, #16
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	607a      	str	r2, [r7, #4]
 800d654:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	dc01      	bgt.n	800d660 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 800d65c:	2300      	movs	r3, #0
 800d65e:	e13e      	b.n	800d8de <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d664:	e128      	b.n	800d8b8 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 800d666:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	1ad2      	subs	r2, r2, r3
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	3b01      	subs	r3, #1
 800d670:	429a      	cmp	r2, r3
 800d672:	f280 812e 	bge.w	800d8d2 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	781b      	ldrb	r3, [r3, #0]
 800d67a:	2b25      	cmp	r3, #37	@ 0x25
 800d67c:	d006      	beq.n	800d68c <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d682:	1c59      	adds	r1, r3, #1
 800d684:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d686:	7812      	ldrb	r2, [r2, #0]
 800d688:	701a      	strb	r2, [r3, #0]
      continue;
 800d68a:	e112      	b.n	800d8b2 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 800d68c:	2300      	movs	r3, #0
 800d68e:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	3301      	adds	r3, #1
 800d694:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	2b30      	cmp	r3, #48	@ 0x30
 800d69c:	d103      	bne.n	800d6a6 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 800d69e:	6a3b      	ldr	r3, [r7, #32]
 800d6a0:	f043 0301 	orr.w	r3, r3, #1
 800d6a4:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 800d6a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d6aa:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	2b2f      	cmp	r3, #47	@ 0x2f
 800d6b2:	d908      	bls.n	800d6c6 <tiny_vsnprintf_like+0x7e>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	2b39      	cmp	r3, #57	@ 0x39
 800d6ba:	d804      	bhi.n	800d6c6 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 800d6bc:	1d3b      	adds	r3, r7, #4
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f7ff feae 	bl	800d420 <ee_skip_atoi>
 800d6c4:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 800d6c6:	f04f 33ff 	mov.w	r3, #4294967295
 800d6ca:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 800d6cc:	f04f 33ff 	mov.w	r3, #4294967295
 800d6d0:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 800d6d2:	230a      	movs	r3, #10
 800d6d4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	3b58      	subs	r3, #88	@ 0x58
 800d6dc:	2b20      	cmp	r3, #32
 800d6de:	f200 8094 	bhi.w	800d80a <tiny_vsnprintf_like+0x1c2>
 800d6e2:	a201      	add	r2, pc, #4	@ (adr r2, 800d6e8 <tiny_vsnprintf_like+0xa0>)
 800d6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6e8:	0800d7f3 	.word	0x0800d7f3
 800d6ec:	0800d80b 	.word	0x0800d80b
 800d6f0:	0800d80b 	.word	0x0800d80b
 800d6f4:	0800d80b 	.word	0x0800d80b
 800d6f8:	0800d80b 	.word	0x0800d80b
 800d6fc:	0800d80b 	.word	0x0800d80b
 800d700:	0800d80b 	.word	0x0800d80b
 800d704:	0800d80b 	.word	0x0800d80b
 800d708:	0800d80b 	.word	0x0800d80b
 800d70c:	0800d80b 	.word	0x0800d80b
 800d710:	0800d80b 	.word	0x0800d80b
 800d714:	0800d777 	.word	0x0800d777
 800d718:	0800d801 	.word	0x0800d801
 800d71c:	0800d80b 	.word	0x0800d80b
 800d720:	0800d80b 	.word	0x0800d80b
 800d724:	0800d80b 	.word	0x0800d80b
 800d728:	0800d80b 	.word	0x0800d80b
 800d72c:	0800d801 	.word	0x0800d801
 800d730:	0800d80b 	.word	0x0800d80b
 800d734:	0800d80b 	.word	0x0800d80b
 800d738:	0800d80b 	.word	0x0800d80b
 800d73c:	0800d80b 	.word	0x0800d80b
 800d740:	0800d80b 	.word	0x0800d80b
 800d744:	0800d80b 	.word	0x0800d80b
 800d748:	0800d80b 	.word	0x0800d80b
 800d74c:	0800d80b 	.word	0x0800d80b
 800d750:	0800d80b 	.word	0x0800d80b
 800d754:	0800d797 	.word	0x0800d797
 800d758:	0800d80b 	.word	0x0800d80b
 800d75c:	0800d857 	.word	0x0800d857
 800d760:	0800d80b 	.word	0x0800d80b
 800d764:	0800d80b 	.word	0x0800d80b
 800d768:	0800d7fb 	.word	0x0800d7fb
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800d76c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d76e:	1c5a      	adds	r2, r3, #1
 800d770:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d772:	2220      	movs	r2, #32
 800d774:	701a      	strb	r2, [r3, #0]
 800d776:	69fb      	ldr	r3, [r7, #28]
 800d778:	3b01      	subs	r3, #1
 800d77a:	61fb      	str	r3, [r7, #28]
 800d77c:	69fb      	ldr	r3, [r7, #28]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	dcf4      	bgt.n	800d76c <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	1d1a      	adds	r2, r3, #4
 800d786:	603a      	str	r2, [r7, #0]
 800d788:	6819      	ldr	r1, [r3, #0]
 800d78a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d78c:	1c5a      	adds	r2, r3, #1
 800d78e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d790:	b2ca      	uxtb	r2, r1
 800d792:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800d794:	e08d      	b.n	800d8b2 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	1d1a      	adds	r2, r3, #4
 800d79a:	603a      	str	r2, [r7, #0]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 800d7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d101      	bne.n	800d7aa <tiny_vsnprintf_like+0x162>
 800d7a6:	4b50      	ldr	r3, [pc, #320]	@ (800d8e8 <tiny_vsnprintf_like+0x2a0>)
 800d7a8:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 800d7aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d7ac:	f7f2 fce4 	bl	8000178 <strlen>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800d7b4:	e004      	b.n	800d7c0 <tiny_vsnprintf_like+0x178>
 800d7b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7b8:	1c5a      	adds	r2, r3, #1
 800d7ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d7bc:	2220      	movs	r2, #32
 800d7be:	701a      	strb	r2, [r3, #0]
 800d7c0:	69fb      	ldr	r3, [r7, #28]
 800d7c2:	1e5a      	subs	r2, r3, #1
 800d7c4:	61fa      	str	r2, [r7, #28]
 800d7c6:	693a      	ldr	r2, [r7, #16]
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	dbf4      	blt.n	800d7b6 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d7d0:	e00a      	b.n	800d7e8 <tiny_vsnprintf_like+0x1a0>
 800d7d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d7d4:	1c53      	adds	r3, r2, #1
 800d7d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7da:	1c59      	adds	r1, r3, #1
 800d7dc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d7de:	7812      	ldrb	r2, [r2, #0]
 800d7e0:	701a      	strb	r2, [r3, #0]
 800d7e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d7e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	dbf0      	blt.n	800d7d2 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 800d7f0:	e05f      	b.n	800d8b2 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 800d7f2:	6a3b      	ldr	r3, [r7, #32]
 800d7f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7f8:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 800d7fa:	2310      	movs	r3, #16
 800d7fc:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 800d7fe:	e02b      	b.n	800d858 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 800d800:	6a3b      	ldr	r3, [r7, #32]
 800d802:	f043 0302 	orr.w	r3, r3, #2
 800d806:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 800d808:	e025      	b.n	800d856 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	781b      	ldrb	r3, [r3, #0]
 800d80e:	2b25      	cmp	r3, #37	@ 0x25
 800d810:	d004      	beq.n	800d81c <tiny_vsnprintf_like+0x1d4>
 800d812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d814:	1c5a      	adds	r2, r3, #1
 800d816:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d818:	2225      	movs	r2, #37	@ 0x25
 800d81a:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 800d81c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	1ad2      	subs	r2, r2, r3
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	3b01      	subs	r3, #1
 800d826:	429a      	cmp	r2, r3
 800d828:	da16      	bge.n	800d858 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	781b      	ldrb	r3, [r3, #0]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d006      	beq.n	800d840 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 800d832:	687a      	ldr	r2, [r7, #4]
 800d834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d836:	1c59      	adds	r1, r3, #1
 800d838:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d83a:	7812      	ldrb	r2, [r2, #0]
 800d83c:	701a      	strb	r2, [r3, #0]
 800d83e:	e002      	b.n	800d846 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	3b01      	subs	r3, #1
 800d844:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 800d846:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	1ad2      	subs	r2, r2, r3
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	3b01      	subs	r3, #1
 800d850:	429a      	cmp	r2, r3
 800d852:	db2d      	blt.n	800d8b0 <tiny_vsnprintf_like+0x268>
 800d854:	e000      	b.n	800d858 <tiny_vsnprintf_like+0x210>
        break;
 800d856:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	2b6c      	cmp	r3, #108	@ 0x6c
 800d85c:	d105      	bne.n	800d86a <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	1d1a      	adds	r2, r3, #4
 800d862:	603a      	str	r2, [r7, #0]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	637b      	str	r3, [r7, #52]	@ 0x34
 800d868:	e00f      	b.n	800d88a <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 800d86a:	6a3b      	ldr	r3, [r7, #32]
 800d86c:	f003 0302 	and.w	r3, r3, #2
 800d870:	2b00      	cmp	r3, #0
 800d872:	d005      	beq.n	800d880 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	1d1a      	adds	r2, r3, #4
 800d878:	603a      	str	r2, [r7, #0]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d87e:	e004      	b.n	800d88a <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	1d1a      	adds	r2, r3, #4
 800d884:	603a      	str	r2, [r7, #0]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	1e5a      	subs	r2, r3, #1
 800d88e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	1acb      	subs	r3, r1, r3
 800d894:	1ad1      	subs	r1, r2, r3
 800d896:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d898:	6a3b      	ldr	r3, [r7, #32]
 800d89a:	9302      	str	r3, [sp, #8]
 800d89c:	69bb      	ldr	r3, [r7, #24]
 800d89e:	9301      	str	r3, [sp, #4]
 800d8a0:	69fb      	ldr	r3, [r7, #28]
 800d8a2:	9300      	str	r3, [sp, #0]
 800d8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d8a8:	f7ff fde0 	bl	800d46c <ee_number>
 800d8ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800d8ae:	e000      	b.n	800d8b2 <tiny_vsnprintf_like+0x26a>
        continue;
 800d8b0:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	607b      	str	r3, [r7, #4]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	781b      	ldrb	r3, [r3, #0]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	f47f aed2 	bne.w	800d666 <tiny_vsnprintf_like+0x1e>
 800d8c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	1ad2      	subs	r2, r2, r3
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	3b01      	subs	r3, #1
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	f6bf aeca 	bge.w	800d666 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 800d8d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	701a      	strb	r2, [r3, #0]
  return str - buf;
 800d8d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	1ad3      	subs	r3, r2, r3
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3738      	adds	r7, #56	@ 0x38
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	0800db24 	.word	0x0800db24

0800d8ec <__itoa>:
 800d8ec:	1e93      	subs	r3, r2, #2
 800d8ee:	2b22      	cmp	r3, #34	@ 0x22
 800d8f0:	b510      	push	{r4, lr}
 800d8f2:	460c      	mov	r4, r1
 800d8f4:	d904      	bls.n	800d900 <__itoa+0x14>
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	700b      	strb	r3, [r1, #0]
 800d8fa:	461c      	mov	r4, r3
 800d8fc:	4620      	mov	r0, r4
 800d8fe:	bd10      	pop	{r4, pc}
 800d900:	2a0a      	cmp	r2, #10
 800d902:	d109      	bne.n	800d918 <__itoa+0x2c>
 800d904:	2800      	cmp	r0, #0
 800d906:	da07      	bge.n	800d918 <__itoa+0x2c>
 800d908:	232d      	movs	r3, #45	@ 0x2d
 800d90a:	700b      	strb	r3, [r1, #0]
 800d90c:	4240      	negs	r0, r0
 800d90e:	2101      	movs	r1, #1
 800d910:	4421      	add	r1, r4
 800d912:	f000 f805 	bl	800d920 <__utoa>
 800d916:	e7f1      	b.n	800d8fc <__itoa+0x10>
 800d918:	2100      	movs	r1, #0
 800d91a:	e7f9      	b.n	800d910 <__itoa+0x24>

0800d91c <itoa>:
 800d91c:	f7ff bfe6 	b.w	800d8ec <__itoa>

0800d920 <__utoa>:
 800d920:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d922:	4c1f      	ldr	r4, [pc, #124]	@ (800d9a0 <__utoa+0x80>)
 800d924:	b08b      	sub	sp, #44	@ 0x2c
 800d926:	4605      	mov	r5, r0
 800d928:	460b      	mov	r3, r1
 800d92a:	466e      	mov	r6, sp
 800d92c:	f104 0c20 	add.w	ip, r4, #32
 800d930:	6820      	ldr	r0, [r4, #0]
 800d932:	6861      	ldr	r1, [r4, #4]
 800d934:	4637      	mov	r7, r6
 800d936:	c703      	stmia	r7!, {r0, r1}
 800d938:	3408      	adds	r4, #8
 800d93a:	4564      	cmp	r4, ip
 800d93c:	463e      	mov	r6, r7
 800d93e:	d1f7      	bne.n	800d930 <__utoa+0x10>
 800d940:	7921      	ldrb	r1, [r4, #4]
 800d942:	7139      	strb	r1, [r7, #4]
 800d944:	1e91      	subs	r1, r2, #2
 800d946:	6820      	ldr	r0, [r4, #0]
 800d948:	6038      	str	r0, [r7, #0]
 800d94a:	2922      	cmp	r1, #34	@ 0x22
 800d94c:	f04f 0100 	mov.w	r1, #0
 800d950:	d904      	bls.n	800d95c <__utoa+0x3c>
 800d952:	7019      	strb	r1, [r3, #0]
 800d954:	460b      	mov	r3, r1
 800d956:	4618      	mov	r0, r3
 800d958:	b00b      	add	sp, #44	@ 0x2c
 800d95a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d95c:	1e58      	subs	r0, r3, #1
 800d95e:	4684      	mov	ip, r0
 800d960:	fbb5 f7f2 	udiv	r7, r5, r2
 800d964:	fb02 5617 	mls	r6, r2, r7, r5
 800d968:	3628      	adds	r6, #40	@ 0x28
 800d96a:	446e      	add	r6, sp
 800d96c:	460c      	mov	r4, r1
 800d96e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d972:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d976:	462e      	mov	r6, r5
 800d978:	42b2      	cmp	r2, r6
 800d97a:	f101 0101 	add.w	r1, r1, #1
 800d97e:	463d      	mov	r5, r7
 800d980:	d9ee      	bls.n	800d960 <__utoa+0x40>
 800d982:	2200      	movs	r2, #0
 800d984:	545a      	strb	r2, [r3, r1]
 800d986:	1919      	adds	r1, r3, r4
 800d988:	1aa5      	subs	r5, r4, r2
 800d98a:	42aa      	cmp	r2, r5
 800d98c:	dae3      	bge.n	800d956 <__utoa+0x36>
 800d98e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d992:	780e      	ldrb	r6, [r1, #0]
 800d994:	7006      	strb	r6, [r0, #0]
 800d996:	3201      	adds	r2, #1
 800d998:	f801 5901 	strb.w	r5, [r1], #-1
 800d99c:	e7f4      	b.n	800d988 <__utoa+0x68>
 800d99e:	bf00      	nop
 800d9a0:	0800ddac 	.word	0x0800ddac

0800d9a4 <memset>:
 800d9a4:	4402      	add	r2, r0
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	d100      	bne.n	800d9ae <memset+0xa>
 800d9ac:	4770      	bx	lr
 800d9ae:	f803 1b01 	strb.w	r1, [r3], #1
 800d9b2:	e7f9      	b.n	800d9a8 <memset+0x4>

0800d9b4 <__libc_init_array>:
 800d9b4:	b570      	push	{r4, r5, r6, lr}
 800d9b6:	4d0d      	ldr	r5, [pc, #52]	@ (800d9ec <__libc_init_array+0x38>)
 800d9b8:	4c0d      	ldr	r4, [pc, #52]	@ (800d9f0 <__libc_init_array+0x3c>)
 800d9ba:	1b64      	subs	r4, r4, r5
 800d9bc:	10a4      	asrs	r4, r4, #2
 800d9be:	2600      	movs	r6, #0
 800d9c0:	42a6      	cmp	r6, r4
 800d9c2:	d109      	bne.n	800d9d8 <__libc_init_array+0x24>
 800d9c4:	4d0b      	ldr	r5, [pc, #44]	@ (800d9f4 <__libc_init_array+0x40>)
 800d9c6:	4c0c      	ldr	r4, [pc, #48]	@ (800d9f8 <__libc_init_array+0x44>)
 800d9c8:	f000 f818 	bl	800d9fc <_init>
 800d9cc:	1b64      	subs	r4, r4, r5
 800d9ce:	10a4      	asrs	r4, r4, #2
 800d9d0:	2600      	movs	r6, #0
 800d9d2:	42a6      	cmp	r6, r4
 800d9d4:	d105      	bne.n	800d9e2 <__libc_init_array+0x2e>
 800d9d6:	bd70      	pop	{r4, r5, r6, pc}
 800d9d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9dc:	4798      	blx	r3
 800d9de:	3601      	adds	r6, #1
 800d9e0:	e7ee      	b.n	800d9c0 <__libc_init_array+0xc>
 800d9e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9e6:	4798      	blx	r3
 800d9e8:	3601      	adds	r6, #1
 800d9ea:	e7f2      	b.n	800d9d2 <__libc_init_array+0x1e>
 800d9ec:	0800dddc 	.word	0x0800dddc
 800d9f0:	0800dddc 	.word	0x0800dddc
 800d9f4:	0800dddc 	.word	0x0800dddc
 800d9f8:	0800dde0 	.word	0x0800dde0

0800d9fc <_init>:
 800d9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9fe:	bf00      	nop
 800da00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da02:	bc08      	pop	{r3}
 800da04:	469e      	mov	lr, r3
 800da06:	4770      	bx	lr

0800da08 <_fini>:
 800da08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da0a:	bf00      	nop
 800da0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da0e:	bc08      	pop	{r3}
 800da10:	469e      	mov	lr, r3
 800da12:	4770      	bx	lr
