
MySubGHzTransmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d90c  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800da44  0800da44  0000ea44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de14  0800de14  0000f030  2**0
                  CONTENTS
  4 .ARM          00000008  0800de14  0800de14  0000ee14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de1c  0800de1c  0000f030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de1c  0800de1c  0000ee1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800de20  0800de20  0000ee20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  0800de24  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000072c  20000030  0800de54  0000f030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  0800de54  0000f75c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000f030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002460c  00000000  00000000  0000f05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006258  00000000  00000000  00033666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021d0  00000000  00000000  000398c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000198d  00000000  00000000  0003ba90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000212b1  00000000  00000000  0003d41d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b1d9  00000000  00000000  0005e6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4973  00000000  00000000  000898a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e21a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a74  00000000  00000000  0013e260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00146cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000030 	.word	0x20000030
 8000154:	00000000 	.word	0x00000000
 8000158:	0800da2c 	.word	0x0800da2c

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000034 	.word	0x20000034
 8000174:	0800da2c 	.word	0x0800da2c

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295
 8000198:	f04f 30ff 	movne.w	r0, #4294967295
 800019c:	f000 b96a 	b.w	8000474 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9d08      	ldr	r5, [sp, #32]
 80001be:	460c      	mov	r4, r1
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d14e      	bne.n	8000262 <__udivmoddi4+0xaa>
 80001c4:	4694      	mov	ip, r2
 80001c6:	458c      	cmp	ip, r1
 80001c8:	4686      	mov	lr, r0
 80001ca:	fab2 f282 	clz	r2, r2
 80001ce:	d962      	bls.n	8000296 <__udivmoddi4+0xde>
 80001d0:	b14a      	cbz	r2, 80001e6 <__udivmoddi4+0x2e>
 80001d2:	f1c2 0320 	rsb	r3, r2, #32
 80001d6:	4091      	lsls	r1, r2
 80001d8:	fa20 f303 	lsr.w	r3, r0, r3
 80001dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e0:	4319      	orrs	r1, r3
 80001e2:	fa00 fe02 	lsl.w	lr, r0, r2
 80001e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001ea:	fa1f f68c 	uxth.w	r6, ip
 80001ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80001f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001f6:	fb07 1114 	mls	r1, r7, r4, r1
 80001fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001fe:	fb04 f106 	mul.w	r1, r4, r6
 8000202:	4299      	cmp	r1, r3
 8000204:	d90a      	bls.n	800021c <__udivmoddi4+0x64>
 8000206:	eb1c 0303 	adds.w	r3, ip, r3
 800020a:	f104 30ff 	add.w	r0, r4, #4294967295
 800020e:	f080 8112 	bcs.w	8000436 <__udivmoddi4+0x27e>
 8000212:	4299      	cmp	r1, r3
 8000214:	f240 810f 	bls.w	8000436 <__udivmoddi4+0x27e>
 8000218:	3c02      	subs	r4, #2
 800021a:	4463      	add	r3, ip
 800021c:	1a59      	subs	r1, r3, r1
 800021e:	fa1f f38e 	uxth.w	r3, lr
 8000222:	fbb1 f0f7 	udiv	r0, r1, r7
 8000226:	fb07 1110 	mls	r1, r7, r0, r1
 800022a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800022e:	fb00 f606 	mul.w	r6, r0, r6
 8000232:	429e      	cmp	r6, r3
 8000234:	d90a      	bls.n	800024c <__udivmoddi4+0x94>
 8000236:	eb1c 0303 	adds.w	r3, ip, r3
 800023a:	f100 31ff 	add.w	r1, r0, #4294967295
 800023e:	f080 80fc 	bcs.w	800043a <__udivmoddi4+0x282>
 8000242:	429e      	cmp	r6, r3
 8000244:	f240 80f9 	bls.w	800043a <__udivmoddi4+0x282>
 8000248:	4463      	add	r3, ip
 800024a:	3802      	subs	r0, #2
 800024c:	1b9b      	subs	r3, r3, r6
 800024e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000252:	2100      	movs	r1, #0
 8000254:	b11d      	cbz	r5, 800025e <__udivmoddi4+0xa6>
 8000256:	40d3      	lsrs	r3, r2
 8000258:	2200      	movs	r2, #0
 800025a:	e9c5 3200 	strd	r3, r2, [r5]
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d905      	bls.n	8000272 <__udivmoddi4+0xba>
 8000266:	b10d      	cbz	r5, 800026c <__udivmoddi4+0xb4>
 8000268:	e9c5 0100 	strd	r0, r1, [r5]
 800026c:	2100      	movs	r1, #0
 800026e:	4608      	mov	r0, r1
 8000270:	e7f5      	b.n	800025e <__udivmoddi4+0xa6>
 8000272:	fab3 f183 	clz	r1, r3
 8000276:	2900      	cmp	r1, #0
 8000278:	d146      	bne.n	8000308 <__udivmoddi4+0x150>
 800027a:	42a3      	cmp	r3, r4
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xcc>
 800027e:	4290      	cmp	r0, r2
 8000280:	f0c0 80f0 	bcc.w	8000464 <__udivmoddi4+0x2ac>
 8000284:	1a86      	subs	r6, r0, r2
 8000286:	eb64 0303 	sbc.w	r3, r4, r3
 800028a:	2001      	movs	r0, #1
 800028c:	2d00      	cmp	r5, #0
 800028e:	d0e6      	beq.n	800025e <__udivmoddi4+0xa6>
 8000290:	e9c5 6300 	strd	r6, r3, [r5]
 8000294:	e7e3      	b.n	800025e <__udivmoddi4+0xa6>
 8000296:	2a00      	cmp	r2, #0
 8000298:	f040 8090 	bne.w	80003bc <__udivmoddi4+0x204>
 800029c:	eba1 040c 	sub.w	r4, r1, ip
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	fa1f f78c 	uxth.w	r7, ip
 80002a8:	2101      	movs	r1, #1
 80002aa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b2:	fb08 4416 	mls	r4, r8, r6, r4
 80002b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ba:	fb07 f006 	mul.w	r0, r7, r6
 80002be:	4298      	cmp	r0, r3
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x11c>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f106 34ff 	add.w	r4, r6, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x11a>
 80002cc:	4298      	cmp	r0, r3
 80002ce:	f200 80cd 	bhi.w	800046c <__udivmoddi4+0x2b4>
 80002d2:	4626      	mov	r6, r4
 80002d4:	1a1c      	subs	r4, r3, r0
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb4 f0f8 	udiv	r0, r4, r8
 80002de:	fb08 4410 	mls	r4, r8, r0, r4
 80002e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002e6:	fb00 f707 	mul.w	r7, r0, r7
 80002ea:	429f      	cmp	r7, r3
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x148>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 34ff 	add.w	r4, r0, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x146>
 80002f8:	429f      	cmp	r7, r3
 80002fa:	f200 80b0 	bhi.w	800045e <__udivmoddi4+0x2a6>
 80002fe:	4620      	mov	r0, r4
 8000300:	1bdb      	subs	r3, r3, r7
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	e7a5      	b.n	8000254 <__udivmoddi4+0x9c>
 8000308:	f1c1 0620 	rsb	r6, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 f706 	lsr.w	r7, r2, r6
 8000312:	431f      	orrs	r7, r3
 8000314:	fa20 fc06 	lsr.w	ip, r0, r6
 8000318:	fa04 f301 	lsl.w	r3, r4, r1
 800031c:	ea43 030c 	orr.w	r3, r3, ip
 8000320:	40f4      	lsrs	r4, r6
 8000322:	fa00 f801 	lsl.w	r8, r0, r1
 8000326:	0c38      	lsrs	r0, r7, #16
 8000328:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800032c:	fbb4 fef0 	udiv	lr, r4, r0
 8000330:	fa1f fc87 	uxth.w	ip, r7
 8000334:	fb00 441e 	mls	r4, r0, lr, r4
 8000338:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800033c:	fb0e f90c 	mul.w	r9, lr, ip
 8000340:	45a1      	cmp	r9, r4
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90a      	bls.n	800035e <__udivmoddi4+0x1a6>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800034e:	f080 8084 	bcs.w	800045a <__udivmoddi4+0x2a2>
 8000352:	45a1      	cmp	r9, r4
 8000354:	f240 8081 	bls.w	800045a <__udivmoddi4+0x2a2>
 8000358:	f1ae 0e02 	sub.w	lr, lr, #2
 800035c:	443c      	add	r4, r7
 800035e:	eba4 0409 	sub.w	r4, r4, r9
 8000362:	fa1f f983 	uxth.w	r9, r3
 8000366:	fbb4 f3f0 	udiv	r3, r4, r0
 800036a:	fb00 4413 	mls	r4, r0, r3, r4
 800036e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000372:	fb03 fc0c 	mul.w	ip, r3, ip
 8000376:	45a4      	cmp	ip, r4
 8000378:	d907      	bls.n	800038a <__udivmoddi4+0x1d2>
 800037a:	193c      	adds	r4, r7, r4
 800037c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000380:	d267      	bcs.n	8000452 <__udivmoddi4+0x29a>
 8000382:	45a4      	cmp	ip, r4
 8000384:	d965      	bls.n	8000452 <__udivmoddi4+0x29a>
 8000386:	3b02      	subs	r3, #2
 8000388:	443c      	add	r4, r7
 800038a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800038e:	fba0 9302 	umull	r9, r3, r0, r2
 8000392:	eba4 040c 	sub.w	r4, r4, ip
 8000396:	429c      	cmp	r4, r3
 8000398:	46ce      	mov	lr, r9
 800039a:	469c      	mov	ip, r3
 800039c:	d351      	bcc.n	8000442 <__udivmoddi4+0x28a>
 800039e:	d04e      	beq.n	800043e <__udivmoddi4+0x286>
 80003a0:	b155      	cbz	r5, 80003b8 <__udivmoddi4+0x200>
 80003a2:	ebb8 030e 	subs.w	r3, r8, lr
 80003a6:	eb64 040c 	sbc.w	r4, r4, ip
 80003aa:	fa04 f606 	lsl.w	r6, r4, r6
 80003ae:	40cb      	lsrs	r3, r1
 80003b0:	431e      	orrs	r6, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c5 6400 	strd	r6, r4, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e750      	b.n	800025e <__udivmoddi4+0xa6>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f103 	lsr.w	r1, r0, r3
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	fa24 f303 	lsr.w	r3, r4, r3
 80003cc:	4094      	lsls	r4, r2
 80003ce:	430c      	orrs	r4, r1
 80003d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d4:	fa00 fe02 	lsl.w	lr, r0, r2
 80003d8:	fa1f f78c 	uxth.w	r7, ip
 80003dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e0:	fb08 3110 	mls	r1, r8, r0, r3
 80003e4:	0c23      	lsrs	r3, r4, #16
 80003e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ea:	fb00 f107 	mul.w	r1, r0, r7
 80003ee:	4299      	cmp	r1, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x24c>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f100 36ff 	add.w	r6, r0, #4294967295
 80003fa:	d22c      	bcs.n	8000456 <__udivmoddi4+0x29e>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	d92a      	bls.n	8000456 <__udivmoddi4+0x29e>
 8000400:	3802      	subs	r0, #2
 8000402:	4463      	add	r3, ip
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb3 f1f8 	udiv	r1, r3, r8
 800040c:	fb08 3311 	mls	r3, r8, r1, r3
 8000410:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000414:	fb01 f307 	mul.w	r3, r1, r7
 8000418:	42a3      	cmp	r3, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x276>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f101 36ff 	add.w	r6, r1, #4294967295
 8000424:	d213      	bcs.n	800044e <__udivmoddi4+0x296>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d911      	bls.n	800044e <__udivmoddi4+0x296>
 800042a:	3902      	subs	r1, #2
 800042c:	4464      	add	r4, ip
 800042e:	1ae4      	subs	r4, r4, r3
 8000430:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000434:	e739      	b.n	80002aa <__udivmoddi4+0xf2>
 8000436:	4604      	mov	r4, r0
 8000438:	e6f0      	b.n	800021c <__udivmoddi4+0x64>
 800043a:	4608      	mov	r0, r1
 800043c:	e706      	b.n	800024c <__udivmoddi4+0x94>
 800043e:	45c8      	cmp	r8, r9
 8000440:	d2ae      	bcs.n	80003a0 <__udivmoddi4+0x1e8>
 8000442:	ebb9 0e02 	subs.w	lr, r9, r2
 8000446:	eb63 0c07 	sbc.w	ip, r3, r7
 800044a:	3801      	subs	r0, #1
 800044c:	e7a8      	b.n	80003a0 <__udivmoddi4+0x1e8>
 800044e:	4631      	mov	r1, r6
 8000450:	e7ed      	b.n	800042e <__udivmoddi4+0x276>
 8000452:	4603      	mov	r3, r0
 8000454:	e799      	b.n	800038a <__udivmoddi4+0x1d2>
 8000456:	4630      	mov	r0, r6
 8000458:	e7d4      	b.n	8000404 <__udivmoddi4+0x24c>
 800045a:	46d6      	mov	lr, sl
 800045c:	e77f      	b.n	800035e <__udivmoddi4+0x1a6>
 800045e:	4463      	add	r3, ip
 8000460:	3802      	subs	r0, #2
 8000462:	e74d      	b.n	8000300 <__udivmoddi4+0x148>
 8000464:	4606      	mov	r6, r0
 8000466:	4623      	mov	r3, r4
 8000468:	4608      	mov	r0, r1
 800046a:	e70f      	b.n	800028c <__udivmoddi4+0xd4>
 800046c:	3e02      	subs	r6, #2
 800046e:	4463      	add	r3, ip
 8000470:	e730      	b.n	80002d4 <__udivmoddi4+0x11c>
 8000472:	bf00      	nop

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000484:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000486:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4313      	orrs	r3, r2
 800048e:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000494:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4013      	ands	r3, r2
 800049a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800049c:	68fb      	ldr	r3, [r7, #12]
}
 800049e:	bf00      	nop
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr

080004a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80004ac:	2004      	movs	r0, #4
 80004ae:	f7ff ffe3 	bl	8000478 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004b2:	2001      	movs	r0, #1
 80004b4:	f7ff ffe0 	bl	8000478 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2100      	movs	r1, #0
 80004bc:	200b      	movs	r0, #11
 80004be:	f001 fbac 	bl	8001c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004c2:	200b      	movs	r0, #11
 80004c4:	f001 fbc3 	bl	8001c4e <HAL_NVIC_EnableIRQ>

}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}

080004cc <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4313      	orrs	r3, r2
 80004e2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4013      	ands	r3, r2
 80004ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004f0:	68fb      	ldr	r3, [r7, #12]
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr

080004fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000510:	2001      	movs	r0, #1
 8000512:	f7ff ffdb 	bl	80004cc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	2002      	movs	r0, #2
 8000518:	f7ff ffd8 	bl	80004cc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051c:	2004      	movs	r0, #4
 800051e:	f7ff ffd5 	bl	80004cc <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PROB2_Pin|PROB1_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000528:	4810      	ldr	r0, [pc, #64]	@ (800056c <MX_GPIO_Init+0x70>)
 800052a:	f002 f9dd 	bl	80028e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 800052e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000532:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000534:	2301      	movs	r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800053c:	2303      	movs	r3, #3
 800053e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	4619      	mov	r1, r3
 8000544:	4809      	ldr	r0, [pc, #36]	@ (800056c <MX_GPIO_Init+0x70>)
 8000546:	f001 ffa1 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800054a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800054e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	4619      	mov	r1, r3
 800055c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000560:	f001 ff94 	bl	800248c <HAL_GPIO_Init>

}
 8000564:	bf00      	nop
 8000566:	3718      	adds	r7, #24
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	48000400 	.word	0x48000400

08000570 <LL_AHB2_GRP1_EnableClock>:
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800057c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800057e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4313      	orrs	r3, r2
 8000586:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000588:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800058c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4013      	ands	r3, r2
 8000592:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000594:	68fb      	ldr	r3, [r7, #12]
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80005a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80005ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80005b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4013      	ands	r3, r2
 80005c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005c4:	68fb      	ldr	r3, [r7, #12]
}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000644 <MX_I2C2_Init+0x74>)
 80005d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000648 <MX_I2C2_Init+0x78>)
 80005d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10805D88;
 80005da:	4b1a      	ldr	r3, [pc, #104]	@ (8000644 <MX_I2C2_Init+0x74>)
 80005dc:	4a1b      	ldr	r2, [pc, #108]	@ (800064c <MX_I2C2_Init+0x7c>)
 80005de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80005e0:	4b18      	ldr	r3, [pc, #96]	@ (8000644 <MX_I2C2_Init+0x74>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e6:	4b17      	ldr	r3, [pc, #92]	@ (8000644 <MX_I2C2_Init+0x74>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ec:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <MX_I2C2_Init+0x74>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80005f2:	4b14      	ldr	r3, [pc, #80]	@ (8000644 <MX_I2C2_Init+0x74>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005f8:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <MX_I2C2_Init+0x74>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005fe:	4b11      	ldr	r3, [pc, #68]	@ (8000644 <MX_I2C2_Init+0x74>)
 8000600:	2200      	movs	r2, #0
 8000602:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000604:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <MX_I2C2_Init+0x74>)
 8000606:	2200      	movs	r2, #0
 8000608:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800060a:	480e      	ldr	r0, [pc, #56]	@ (8000644 <MX_I2C2_Init+0x74>)
 800060c:	f002 f983 	bl	8002916 <HAL_I2C_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000616:	f000 f9e1 	bl	80009dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800061a:	2100      	movs	r1, #0
 800061c:	4809      	ldr	r0, [pc, #36]	@ (8000644 <MX_I2C2_Init+0x74>)
 800061e:	f003 fcee 	bl	8003ffe <HAL_I2CEx_ConfigAnalogFilter>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000628:	f000 f9d8 	bl	80009dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800062c:	2100      	movs	r1, #0
 800062e:	4805      	ldr	r0, [pc, #20]	@ (8000644 <MX_I2C2_Init+0x74>)
 8000630:	f003 fd2f 	bl	8004092 <HAL_I2CEx_ConfigDigitalFilter>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800063a:	f000 f9cf 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	2000004c 	.word	0x2000004c
 8000648:	40005800 	.word	0x40005800
 800064c:	10805d88 	.word	0x10805d88

08000650 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b096      	sub	sp, #88	@ 0x58
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2238      	movs	r2, #56	@ 0x38
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f00d f9af 	bl	800d9d4 <memset>
  if(i2cHandle->Instance==I2C2)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a29      	ldr	r2, [pc, #164]	@ (8000720 <HAL_I2C_MspInit+0xd0>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d14b      	bne.n	8000718 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000680:	2380      	movs	r3, #128	@ 0x80
 8000682:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000684:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000688:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	4618      	mov	r0, r3
 8000690:	f004 ffba 	bl	8005608 <HAL_RCCEx_PeriphCLKConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800069a:	f000 f99f 	bl	80009dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	2001      	movs	r0, #1
 80006a0:	f7ff ff66 	bl	8000570 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a4:	2002      	movs	r0, #2
 80006a6:	f7ff ff63 	bl	8000570 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80006aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006ae:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006b0:	2312      	movs	r3, #18
 80006b2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2300      	movs	r3, #0
 80006ba:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80006bc:	2304      	movs	r3, #4
 80006be:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80006c4:	4619      	mov	r1, r3
 80006c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ca:	f001 fedf 	bl	800248c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80006ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006d2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006d4:	2312      	movs	r3, #18
 80006d6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80006e0:	2304      	movs	r3, #4
 80006e2:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80006e8:	4619      	mov	r1, r3
 80006ea:	480e      	ldr	r0, [pc, #56]	@ (8000724 <HAL_I2C_MspInit+0xd4>)
 80006ec:	f001 fece 	bl	800248c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006f0:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80006f4:	f7ff ff54 	bl	80005a0 <LL_APB1_GRP1_EnableClock>

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2100      	movs	r1, #0
 80006fc:	2020      	movs	r0, #32
 80006fe:	f001 fa8c 	bl	8001c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000702:	2020      	movs	r0, #32
 8000704:	f001 faa3 	bl	8001c4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000708:	2200      	movs	r2, #0
 800070a:	2100      	movs	r1, #0
 800070c:	2021      	movs	r0, #33	@ 0x21
 800070e:	f001 fa84 	bl	8001c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000712:	2021      	movs	r0, #33	@ 0x21
 8000714:	f001 fa9b 	bl	8001c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000718:	bf00      	nop
 800071a:	3758      	adds	r7, #88	@ 0x58
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40005800 	.word	0x40005800
 8000724:	48000400 	.word	0x48000400

08000728 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000730:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000738:	f023 0218 	bic.w	r2, r3, #24
 800073c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4313      	orrs	r3, r2
 8000744:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
	...

08000754 <HAL_I2C_MasterRxCpltCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	RecievedCtr++;
 800075c:	4b05      	ldr	r3, [pc, #20]	@ (8000774 <HAL_I2C_MasterRxCpltCallback+0x20>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	3301      	adds	r3, #1
 8000762:	b29a      	uxth	r2, r3
 8000764:	4b03      	ldr	r3, [pc, #12]	@ (8000774 <HAL_I2C_MasterRxCpltCallback+0x20>)
 8000766:	801a      	strh	r2, [r3, #0]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	200000d6 	.word	0x200000d6

08000778 <HAL_I2C_MasterTxCpltCallback>:
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	TransmitCtr++;
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <HAL_I2C_MasterTxCpltCallback+0x20>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	3301      	adds	r3, #1
 8000786:	b29a      	uxth	r2, r3
 8000788:	4b03      	ldr	r3, [pc, #12]	@ (8000798 <HAL_I2C_MasterTxCpltCallback+0x20>)
 800078a:	801a      	strh	r2, [r3, #0]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	200000d8 	.word	0x200000d8

0800079c <SendI2C>:
void SendI2C(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	HAL_I2C_Master_Transmit_IT(&hi2c2,  0x45<<1, SendedData, 2);
 80007a0:	2302      	movs	r3, #2
 80007a2:	4a08      	ldr	r2, [pc, #32]	@ (80007c4 <SendI2C+0x28>)
 80007a4:	218a      	movs	r1, #138	@ 0x8a
 80007a6:	4808      	ldr	r0, [pc, #32]	@ (80007c8 <SendI2C+0x2c>)
 80007a8:	f002 f944 	bl	8002a34 <HAL_I2C_Master_Transmit_IT>


	while(hi2c2.State ==HAL_I2C_STATE_BUSY_TX)
 80007ac:	bf00      	nop
 80007ae:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <SendI2C+0x2c>)
 80007b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	2b21      	cmp	r3, #33	@ 0x21
 80007b8:	d0f9      	beq.n	80007ae <SendI2C+0x12>
	{

	}
	UTIL_TIMER_Start(&I2Creciever);
 80007ba:	4804      	ldr	r0, [pc, #16]	@ (80007cc <SendI2C+0x30>)
 80007bc:	f00c fbfe 	bl	800cfbc <UTIL_TIMER_Start>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000000 	.word	0x20000000
 80007c8:	2000004c 	.word	0x2000004c
 80007cc:	200000b8 	.word	0x200000b8

080007d0 <RecieveI2C>:
void RecieveI2C(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Receive_IT(&hi2c2,  0x45<<1, RecievedData, 6);
 80007d6:	2306      	movs	r3, #6
 80007d8:	4a18      	ldr	r2, [pc, #96]	@ (800083c <RecieveI2C+0x6c>)
 80007da:	218a      	movs	r1, #138	@ 0x8a
 80007dc:	4818      	ldr	r0, [pc, #96]	@ (8000840 <RecieveI2C+0x70>)
 80007de:	f002 f999 	bl	8002b14 <HAL_I2C_Master_Receive_IT>
	while(hi2c2.State ==HAL_I2C_STATE_BUSY_RX)
 80007e2:	bf00      	nop
 80007e4:	4b16      	ldr	r3, [pc, #88]	@ (8000840 <RecieveI2C+0x70>)
 80007e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	2b22      	cmp	r3, #34	@ 0x22
 80007ee:	d0f9      	beq.n	80007e4 <RecieveI2C+0x14>
	{

	}
	uint8_t i;
	  char BuffCharSended[4];
	  APP_LOG(TS_OFF, VLEVEL_L,  "I2C data: \n\r" );
 80007f0:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <RecieveI2C+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2001      	movs	r0, #1
 80007f8:	f00b fdfc 	bl	800c3f4 <UTIL_ADV_TRACE_COND_FSend>

	  for(i=0; i < 6; i++)
 80007fc:	2300      	movs	r3, #0
 80007fe:	71fb      	strb	r3, [r7, #7]
 8000800:	e013      	b.n	800082a <RecieveI2C+0x5a>
	  {
		  itoa(RecievedData[i],BuffCharSended,10);
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	4a0d      	ldr	r2, [pc, #52]	@ (800083c <RecieveI2C+0x6c>)
 8000806:	5cd3      	ldrb	r3, [r2, r3]
 8000808:	4618      	mov	r0, r3
 800080a:	463b      	mov	r3, r7
 800080c:	220a      	movs	r2, #10
 800080e:	4619      	mov	r1, r3
 8000810:	f00d f89c 	bl	800d94c <itoa>
		  APP_LOG(TS_OFF, VLEVEL_L,  " %s \n\r", BuffCharSended);
 8000814:	463b      	mov	r3, r7
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <RecieveI2C+0x78>)
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	2001      	movs	r0, #1
 8000820:	f00b fde8 	bl	800c3f4 <UTIL_ADV_TRACE_COND_FSend>
	  for(i=0; i < 6; i++)
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	3301      	adds	r3, #1
 8000828:	71fb      	strb	r3, [r7, #7]
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b05      	cmp	r3, #5
 800082e:	d9e8      	bls.n	8000802 <RecieveI2C+0x32>
	  }
}
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200000d0 	.word	0x200000d0
 8000840:	2000004c 	.word	0x2000004c
 8000844:	0800da44 	.word	0x0800da44
 8000848:	0800da54 	.word	0x0800da54

0800084c <SendI2CTimer>:
void SendI2CTimer(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	Flags=1;
 8000850:	4b04      	ldr	r3, [pc, #16]	@ (8000864 <SendI2CTimer+0x18>)
 8000852:	2201      	movs	r2, #1
 8000854:	701a      	strb	r2, [r3, #0]
	  UTIL_SEQ_SetTask(1<<I2C_sender, I2C_senderPrio1);
 8000856:	2101      	movs	r1, #1
 8000858:	2002      	movs	r0, #2
 800085a:	f00c fa87 	bl	800cd6c <UTIL_SEQ_SetTask>
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200000da 	.word	0x200000da

08000868 <RecieveI2CTimer>:
void RecieveI2CTimer(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1<<I2C_reciever, I2C_recieverPrio2);
 800086c:	2102      	movs	r1, #2
 800086e:	2004      	movs	r0, #4
 8000870:	f00c fa7c 	bl	800cd6c <UTIL_SEQ_SetTask>
	Flags=2;
 8000874:	4b02      	ldr	r3, [pc, #8]	@ (8000880 <RecieveI2CTimer+0x18>)
 8000876:	2202      	movs	r2, #2
 8000878:	701a      	strb	r2, [r3, #0]
	//UTIL_SEQ_SetTask(1<<I2CRecieveHandler, 0);
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200000da 	.word	0x200000da

08000884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088a:	f001 f831 	bl	80018f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088e:	f000 f84b 	bl	8000928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000892:	f7ff fe33 	bl	80004fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000896:	f7ff fe07 	bl	80004a8 <MX_DMA_Init>
  MX_SubGHz_Phy_Init();
 800089a:	f00b fc68 	bl	800c16e <MX_SubGHz_Phy_Init>
  MX_USART1_UART_Init();
 800089e:	f000 fddd 	bl	800145c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80008a2:	f7ff fe95 	bl	80005d0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  UTIL_SEQ_Init();
 80008a6:	f00c f8fd 	bl	800caa4 <UTIL_SEQ_Init>

  UTIL_TIMER_Create(&I2Csender, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, SendI2CTimer, NULL);
 80008aa:	2300      	movs	r3, #0
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	4b16      	ldr	r3, [pc, #88]	@ (8000908 <main+0x84>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	f04f 31ff 	mov.w	r1, #4294967295
 80008b6:	4815      	ldr	r0, [pc, #84]	@ (800090c <main+0x88>)
 80008b8:	f00c fb4a 	bl	800cf50 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&I2Csender, I2Ctransmitperiod);
 80008bc:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <main+0x8c>)
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	4812      	ldr	r0, [pc, #72]	@ (800090c <main+0x88>)
 80008c4:	f00c fc58 	bl	800d178 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&I2Csender);
 80008c8:	4810      	ldr	r0, [pc, #64]	@ (800090c <main+0x88>)
 80008ca:	f00c fb77 	bl	800cfbc <UTIL_TIMER_Start>


  UTIL_TIMER_Create(&I2Creciever, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, RecieveI2CTimer, NULL);
 80008ce:	2300      	movs	r3, #0
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	4b10      	ldr	r3, [pc, #64]	@ (8000914 <main+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	f04f 31ff 	mov.w	r1, #4294967295
 80008da:	480f      	ldr	r0, [pc, #60]	@ (8000918 <main+0x94>)
 80008dc:	f00c fb38 	bl	800cf50 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&I2Creciever, I2Crecieveperiod);
 80008e0:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <main+0x98>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	480c      	ldr	r0, [pc, #48]	@ (8000918 <main+0x94>)
 80008e8:	f00c fc46 	bl	800d178 <UTIL_TIMER_SetPeriod>
  UTIL_SEQ_RegTask(1<<I2C_sender, 0, SendI2C);
 80008ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000920 <main+0x9c>)
 80008ee:	2100      	movs	r1, #0
 80008f0:	2002      	movs	r0, #2
 80008f2:	f00c fa19 	bl	800cd28 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<<I2C_reciever,0,RecieveI2C);
 80008f6:	4a0b      	ldr	r2, [pc, #44]	@ (8000924 <main+0xa0>)
 80008f8:	2100      	movs	r1, #0
 80008fa:	2004      	movs	r0, #4
 80008fc:	f00c fa14 	bl	800cd28 <UTIL_SEQ_RegTask>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 8000900:	f00b fc3d 	bl	800c17e <MX_SubGHz_Phy_Process>
 8000904:	e7fc      	b.n	8000900 <main+0x7c>
 8000906:	bf00      	nop
 8000908:	0800084d 	.word	0x0800084d
 800090c:	200000a0 	.word	0x200000a0
 8000910:	20000002 	.word	0x20000002
 8000914:	08000869 	.word	0x08000869
 8000918:	200000b8 	.word	0x200000b8
 800091c:	20000004 	.word	0x20000004
 8000920:	0800079d 	.word	0x0800079d
 8000924:	080007d1 	.word	0x080007d1

08000928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b09a      	sub	sp, #104	@ 0x68
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	2248      	movs	r2, #72	@ 0x48
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f00d f84c 	bl	800d9d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	f107 0308 	add.w	r3, r7, #8
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
 800094c:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800094e:	f003 fbeb 	bl	8004128 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000952:	2000      	movs	r0, #0
 8000954:	f7ff fee8 	bl	8000728 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000958:	4b1f      	ldr	r3, [pc, #124]	@ (80009d8 <SystemClock_Config+0xb0>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000960:	4a1d      	ldr	r2, [pc, #116]	@ (80009d8 <SystemClock_Config+0xb0>)
 8000962:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000966:	6013      	str	r3, [r2, #0]
 8000968:	4b1b      	ldr	r3, [pc, #108]	@ (80009d8 <SystemClock_Config+0xb0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000974:	2324      	movs	r3, #36	@ 0x24
 8000976:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000978:	2381      	movs	r3, #129	@ 0x81
 800097a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800097c:	2301      	movs	r3, #1
 800097e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000980:	2300      	movs	r3, #0
 8000982:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000984:	23b0      	movs	r3, #176	@ 0xb0
 8000986:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000988:	2300      	movs	r3, #0
 800098a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098c:	f107 0320 	add.w	r3, r7, #32
 8000990:	4618      	mov	r0, r3
 8000992:	f003 ff15 	bl	80047c0 <HAL_RCC_OscConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800099c:	f000 f81e 	bl	80009dc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80009a0:	234f      	movs	r3, #79	@ 0x4f
 80009a2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009b8:	f107 0308 	add.w	r3, r7, #8
 80009bc:	2102      	movs	r1, #2
 80009be:	4618      	mov	r0, r3
 80009c0:	f004 fa80 	bl	8004ec4 <HAL_RCC_ClockConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009ca:	f000 f807 	bl	80009dc <Error_Handler>
  }
}
 80009ce:	bf00      	nop
 80009d0:	3768      	adds	r7, #104	@ 0x68
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	58000400 	.word	0x58000400

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <Error_Handler+0x8>

080009e8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80009ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80009f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr

08000a08 <LL_APB1_GRP1_EnableClock>:
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a14:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a24:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
}
 8000a2e:	bf00      	nop
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr

08000a38 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08c      	sub	sp, #48	@ 0x30
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	222c      	movs	r2, #44	@ 0x2c
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f00c ffc5 	bl	800d9d4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a4a:	4b22      	ldr	r3, [pc, #136]	@ (8000ad4 <MX_RTC_Init+0x9c>)
 8000a4c:	4a22      	ldr	r2, [pc, #136]	@ (8000ad8 <MX_RTC_Init+0xa0>)
 8000a4e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8000a50:	4b20      	ldr	r3, [pc, #128]	@ (8000ad4 <MX_RTC_Init+0x9c>)
 8000a52:	221f      	movs	r2, #31
 8000a54:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a56:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad4 <MX_RTC_Init+0x9c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad4 <MX_RTC_Init+0x9c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a62:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad4 <MX_RTC_Init+0x9c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a68:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad4 <MX_RTC_Init+0x9c>)
 8000a6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a6e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000a70:	4b18      	ldr	r3, [pc, #96]	@ (8000ad4 <MX_RTC_Init+0x9c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8000a76:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <MX_RTC_Init+0x9c>)
 8000a78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a7c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a7e:	4815      	ldr	r0, [pc, #84]	@ (8000ad4 <MX_RTC_Init+0x9c>)
 8000a80:	f004 fedc 	bl	800583c <HAL_RTC_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8000a8a:	f7ff ffa7 	bl	80009dc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8000a8e:	4811      	ldr	r0, [pc, #68]	@ (8000ad4 <MX_RTC_Init+0x9c>)
 8000a90:	f005 f9d2 	bl	8005e38 <HAL_RTCEx_SetSSRU_IT>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000a9a:	f7ff ff9f 	bl	80009dc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000aaa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000aae:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8000ab0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2200      	movs	r2, #0
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <MX_RTC_Init+0x9c>)
 8000abe:	f004 ff3f 	bl	8005940 <HAL_RTC_SetAlarm_IT>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000ac8:	f7ff ff88 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	3730      	adds	r7, #48	@ 0x30
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200000dc 	.word	0x200000dc
 8000ad8:	40002800 	.word	0x40002800

08000adc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b090      	sub	sp, #64	@ 0x40
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ae4:	f107 0308 	add.w	r3, r7, #8
 8000ae8:	2238      	movs	r2, #56	@ 0x38
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f00c ff71 	bl	800d9d4 <memset>
  if(rtcHandle->Instance==RTC)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a16      	ldr	r2, [pc, #88]	@ (8000b50 <HAL_RTC_MspInit+0x74>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d125      	bne.n	8000b48 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000afc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b00:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000b02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b06:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f004 fd7b 	bl	8005608 <HAL_RCCEx_PeriphCLKConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000b18:	f7ff ff60 	bl	80009dc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b1c:	f7ff ff64 	bl	80009e8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000b20:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000b24:	f7ff ff70 	bl	8000a08 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2002      	movs	r0, #2
 8000b2e:	f001 f874 	bl	8001c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8000b32:	2002      	movs	r0, #2
 8000b34:	f001 f88b 	bl	8001c4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	202a      	movs	r0, #42	@ 0x2a
 8000b3e:	f001 f86c 	bl	8001c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000b42:	202a      	movs	r0, #42	@ 0x2a
 8000b44:	f001 f883 	bl	8001c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000b48:	bf00      	nop
 8000b4a:	3740      	adds	r7, #64	@ 0x40
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40002800 	.word	0x40002800

08000b54 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8000b58:	4b03      	ldr	r3, [pc, #12]	@ (8000b68 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr
 8000b68:	58000400 	.word	0x58000400

08000b6c <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8000b88:	f000 ff1e 	bl	80019c8 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8000b8c:	f7ff ffe2 	bl	8000b54 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f003 fb5b 	bl	800424c <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8000b9e:	f000 ff21 	bl	80019e4 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8000ba2:	f000 fdfb 	bl	800179c <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8000bae:	f000 ff0b 	bl	80019c8 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f003 fac5 	bl	8004144 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8000bc2:	f000 ff0f 	bl	80019e4 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr

08000bd6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bda:	bf00      	nop
 8000bdc:	e7fd      	b.n	8000bda <NMI_Handler+0x4>

08000bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be2:	bf00      	nop
 8000be4:	e7fd      	b.n	8000be2 <HardFault_Handler+0x4>

08000be6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bea:	bf00      	nop
 8000bec:	e7fd      	b.n	8000bea <MemManage_Handler+0x4>

08000bee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf2:	bf00      	nop
 8000bf4:	e7fd      	b.n	8000bf2 <BusFault_Handler+0x4>

08000bf6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfa:	bf00      	nop
 8000bfc:	e7fd      	b.n	8000bfa <UsageFault_Handler+0x4>

08000bfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr

08000c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr

08000c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr

08000c22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c26:	f000 febd 	bl	80019a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8000c34:	4802      	ldr	r0, [pc, #8]	@ (8000c40 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8000c36:	f005 f93b 	bl	8005eb0 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200000dc 	.word	0x200000dc

08000c44 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <DMA1_Channel1_IRQHandler+0x10>)
 8000c4a:	f001 faa3 	bl	8002194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200001bc 	.word	0x200001bc

08000c58 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event Interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000c5c:	4802      	ldr	r0, [pc, #8]	@ (8000c68 <I2C2_EV_IRQHandler+0x10>)
 8000c5e:	f001 ffc9 	bl	8002bf4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000004c 	.word	0x2000004c

08000c6c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error Interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000c70:	4802      	ldr	r0, [pc, #8]	@ (8000c7c <I2C2_ER_IRQHandler+0x10>)
 8000c72:	f001 ffd9 	bl	8002c28 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000004c 	.word	0x2000004c

08000c80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c84:	4802      	ldr	r0, [pc, #8]	@ (8000c90 <USART1_IRQHandler+0x10>)
 8000c86:	f005 ff5d 	bl	8006b44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000128 	.word	0x20000128

08000c94 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000c98:	4802      	ldr	r0, [pc, #8]	@ (8000ca4 <RTC_Alarm_IRQHandler+0x10>)
 8000c9a:	f004 ffb9 	bl	8005c10 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200000dc 	.word	0x200000dc

08000ca8 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000cac:	4802      	ldr	r0, [pc, #8]	@ (8000cb8 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000cae:	f005 fc6d 	bl	800658c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000114 	.word	0x20000114

08000cbc <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cc8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000cca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000cd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cd8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
}
 8000ce2:	bf00      	nop
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr

08000cec <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <MX_SUBGHZ_Init+0x20>)
 8000cf2:	2208      	movs	r2, #8
 8000cf4:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000cf6:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_SUBGHZ_Init+0x20>)
 8000cf8:	f005 f9c6 	bl	8006088 <HAL_SUBGHZ_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000d02:	f7ff fe6b 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000114 	.word	0x20000114

08000d10 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f7ff ffcf 	bl	8000cbc <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	2032      	movs	r0, #50	@ 0x32
 8000d24:	f000 ff79 	bl	8001c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000d28:	2032      	movs	r0, #50	@ 0x32
 8000d2a:	f000 ff90 	bl	8001c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000d48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	608b      	str	r3, [r1, #8]
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8000d60:	2000      	movs	r0, #0
 8000d62:	f7ff ffe8 	bl	8000d36 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8000d66:	f00c f8e3 	bl	800cf30 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <SystemApp_Init+0x38>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8000d70:	f000 f8ac 	bl	8000ecc <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8000d74:	f00b fb22 	bl	800c3bc <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8000d78:	4807      	ldr	r0, [pc, #28]	@ (8000d98 <SystemApp_Init+0x3c>)
 8000d7a:	f00b fbbb 	bl	800c4f4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8000d7e:	2002      	movs	r0, #2
 8000d80:	f00b fbc6 	bl	800c510 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8000d84:	f00b fdae 	bl	800c8e4 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000d88:	2101      	movs	r1, #1
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f00b fdea 	bl	800c964 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000120 	.word	0x20000120
 8000d98:	08000da9 	.word	0x08000da9

08000d9c <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8000da0:	f00b fe10 	bl	800c9c4 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af02      	add	r7, sp, #8
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8000db2:	f107 0308 	add.w	r3, r7, #8
 8000db6:	4618      	mov	r0, r3
 8000db8:	f00c f882 	bl	800cec0 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000dc2:	9200      	str	r2, [sp, #0]
 8000dc4:	4a07      	ldr	r2, [pc, #28]	@ (8000de4 <TimestampNow+0x3c>)
 8000dc6:	2110      	movs	r1, #16
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f000 f81d 	bl	8000e08 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff f9d2 	bl	8000178 <strlen>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	0800da5c 	.word	0x0800da5c

08000de8 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8000dec:	2101      	movs	r1, #1
 8000dee:	2002      	movs	r0, #2
 8000df0:	f00b fd88 	bl	800c904 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2002      	movs	r0, #2
 8000e00:	f00b fd80 	bl	800c904 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8000e08:	b40c      	push	{r2, r3}
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b084      	sub	sp, #16
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
 8000e12:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000e1a:	6839      	ldr	r1, [r7, #0]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f00c fc29 	bl	800d678 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e30:	b002      	add	sp, #8
 8000e32:	4770      	bx	lr

08000e34 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <HAL_GetTick+0x24>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d002      	beq.n	8000e4c <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8000e46:	f000 f945 	bl	80010d4 <TIMER_IF_GetTimerValue>
 8000e4a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8000e4c:	687b      	ldr	r3, [r7, #4]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000120 	.word	0x20000120

08000e5c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f9bb 	bl	80011e2 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <LL_AHB2_GRP1_EnableClock>:
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e80:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e90:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4013      	ands	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e98:	68fb      	ldr	r3, [r7, #12]
}
 8000e9a:	bf00      	nop
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000eae:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000eb2:	4905      	ldr	r1, [pc, #20]	@ (8000ec8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	58000800 	.word	0x58000800

08000ecc <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8000ed2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000ed6:	f7ff ffe5 	bl	8000ea4 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000eda:	f000 fd91 	bl	8001a00 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000ede:	f000 fd95 	bl	8001a0c <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8000ee2:	f000 fd99 	bl	8001a18 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8000f00:	2002      	movs	r0, #2
 8000f02:	f7ff ffb7 	bl	8000e74 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8000f06:	2002      	movs	r0, #2
 8000f08:	f7ff ffb4 	bl	8000e74 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8000f0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f10:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	4619      	mov	r1, r3
 8000f16:	480d      	ldr	r0, [pc, #52]	@ (8000f4c <DBG_Init+0x80>)
 8000f18:	f001 fab8 	bl	800248c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8000f1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f20:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	4619      	mov	r1, r3
 8000f26:	4809      	ldr	r0, [pc, #36]	@ (8000f4c <DBG_Init+0x80>)
 8000f28:	f001 fab0 	bl	800248c <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f32:	4806      	ldr	r0, [pc, #24]	@ (8000f4c <DBG_Init+0x80>)
 8000f34:	f001 fcd8 	bl	80028e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f3e:	4803      	ldr	r0, [pc, #12]	@ (8000f4c <DBG_Init+0x80>)
 8000f40:	f001 fcd2 	bl	80028e8 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8000f44:	bf00      	nop
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	48000400 	.word	0x48000400

08000f50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
	...

08000f74 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8000f7e:	4b14      	ldr	r3, [pc, #80]	@ (8000fd0 <TIMER_IF_Init+0x5c>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	f083 0301 	eor.w	r3, r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d01b      	beq.n	8000fc4 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <TIMER_IF_Init+0x60>)
 8000f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f92:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8000f94:	f7ff fd50 	bl	8000a38 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8000f98:	f000 f856 	bl	8001048 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000f9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fa0:	480c      	ldr	r0, [pc, #48]	@ (8000fd4 <TIMER_IF_Init+0x60>)
 8000fa2:	f004 fdd9 	bl	8005b58 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd4 <TIMER_IF_Init+0x60>)
 8000fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fac:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8000fae:	4809      	ldr	r0, [pc, #36]	@ (8000fd4 <TIMER_IF_Init+0x60>)
 8000fb0:	f004 ff10 	bl	8005dd4 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f000 f9d3 	bl	8001360 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8000fba:	f000 f85f 	bl	800107c <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8000fbe:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <TIMER_IF_Init+0x5c>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000121 	.word	0x20000121
 8000fd4:	200000dc 	.word	0x200000dc

08000fd8 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08e      	sub	sp, #56	@ 0x38
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8000fe6:	f107 0308 	add.w	r3, r7, #8
 8000fea:	222c      	movs	r2, #44	@ 0x2c
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f00c fcf0 	bl	800d9d4 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8000ff4:	f000 f828 	bl	8001048 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <TIMER_IF_StartTimer+0x68>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	4413      	add	r3, r2
 8001000:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	43db      	mvns	r3, r3
 800100a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800100c:	2300      	movs	r3, #0
 800100e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001010:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001014:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001016:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800101a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	2201      	movs	r2, #1
 8001022:	4619      	mov	r1, r3
 8001024:	4807      	ldr	r0, [pc, #28]	@ (8001044 <TIMER_IF_StartTimer+0x6c>)
 8001026:	f004 fc8b 	bl	8005940 <HAL_RTC_SetAlarm_IT>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001030:	f7ff fcd4 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001034:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001038:	4618      	mov	r0, r3
 800103a:	3738      	adds	r7, #56	@ 0x38
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000124 	.word	0x20000124
 8001044:	200000dc 	.word	0x200000dc

08001048 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001052:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <TIMER_IF_StopTimer+0x2c>)
 8001054:	2201      	movs	r2, #1
 8001056:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001058:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800105c:	4806      	ldr	r0, [pc, #24]	@ (8001078 <TIMER_IF_StopTimer+0x30>)
 800105e:	f004 fd7b 	bl	8005b58 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001062:	4b05      	ldr	r3, [pc, #20]	@ (8001078 <TIMER_IF_StopTimer+0x30>)
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 800106a:	79fb      	ldrb	r3, [r7, #7]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40002800 	.word	0x40002800
 8001078:	200000dc 	.word	0x200000dc

0800107c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001080:	f000 f98e 	bl	80013a0 <GetTimerTicks>
 8001084:	4603      	mov	r3, r0
 8001086:	4a03      	ldr	r2, [pc, #12]	@ (8001094 <TIMER_IF_SetTimerContext+0x18>)
 8001088:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800108a:	4b02      	ldr	r3, [pc, #8]	@ (8001094 <TIMER_IF_SetTimerContext+0x18>)
 800108c:	681b      	ldr	r3, [r3, #0]
}
 800108e:	4618      	mov	r0, r3
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000124 	.word	0x20000124

08001098 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800109c:	4b02      	ldr	r3, [pc, #8]	@ (80010a8 <TIMER_IF_GetTimerContext+0x10>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	20000124 	.word	0x20000124

080010ac <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80010b6:	f000 f973 	bl	80013a0 <GetTimerTicks>
 80010ba:	4602      	mov	r2, r0
 80010bc:	4b04      	ldr	r3, [pc, #16]	@ (80010d0 <TIMER_IF_GetTimerElapsedTime+0x24>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 80010c4:	687b      	ldr	r3, [r7, #4]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000124 	.word	0x20000124

080010d4 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80010de:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <TIMER_IF_GetTimerValue+0x24>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d002      	beq.n	80010ec <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80010e6:	f000 f95b 	bl	80013a0 <GetTimerTicks>
 80010ea:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80010ec:	687b      	ldr	r3, [r7, #4]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000121 	.word	0x20000121

080010fc <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8001106:	2303      	movs	r3, #3
 8001108:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 800110a:	687b      	ldr	r3, [r7, #4]
}
 800110c:	4618      	mov	r0, r3
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr

08001116 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001116:	b5b0      	push	{r4, r5, r7, lr}
 8001118:	b084      	sub	sp, #16
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800111e:	2100      	movs	r1, #0
 8001120:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	2000      	movs	r0, #0
 8001126:	460a      	mov	r2, r1
 8001128:	4603      	mov	r3, r0
 800112a:	0d95      	lsrs	r5, r2, #22
 800112c:	0294      	lsls	r4, r2, #10
 800112e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001132:	f04f 0300 	mov.w	r3, #0
 8001136:	4620      	mov	r0, r4
 8001138:	4629      	mov	r1, r5
 800113a:	f7ff f825 	bl	8000188 <__aeabi_uldivmod>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4613      	mov	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8001146:	68fb      	ldr	r3, [r7, #12]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bdb0      	pop	{r4, r5, r7, pc}

08001150 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001150:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001154:	b085      	sub	sp, #20
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800115a:	2100      	movs	r1, #0
 800115c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	2000      	movs	r0, #0
 8001162:	460c      	mov	r4, r1
 8001164:	4605      	mov	r5, r0
 8001166:	4620      	mov	r0, r4
 8001168:	4629      	mov	r1, r5
 800116a:	f04f 0a00 	mov.w	sl, #0
 800116e:	f04f 0b00 	mov.w	fp, #0
 8001172:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001176:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800117a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800117e:	4650      	mov	r0, sl
 8001180:	4659      	mov	r1, fp
 8001182:	1b02      	subs	r2, r0, r4
 8001184:	eb61 0305 	sbc.w	r3, r1, r5
 8001188:	f04f 0000 	mov.w	r0, #0
 800118c:	f04f 0100 	mov.w	r1, #0
 8001190:	0099      	lsls	r1, r3, #2
 8001192:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001196:	0090      	lsls	r0, r2, #2
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	eb12 0804 	adds.w	r8, r2, r4
 80011a0:	eb43 0905 	adc.w	r9, r3, r5
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	f04f 0300 	mov.w	r3, #0
 80011ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80011b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80011b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80011b8:	4690      	mov	r8, r2
 80011ba:	4699      	mov	r9, r3
 80011bc:	4640      	mov	r0, r8
 80011be:	4649      	mov	r1, r9
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	f04f 0300 	mov.w	r3, #0
 80011c8:	0a82      	lsrs	r2, r0, #10
 80011ca:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80011ce:	0a8b      	lsrs	r3, r1, #10
 80011d0:	4613      	mov	r3, r2
 80011d2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80011d4:	68fb      	ldr	r3, [r7, #12]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80011e0:	4770      	bx	lr

080011e2 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b084      	sub	sp, #16
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ff93 	bl	8001116 <TIMER_IF_Convert_ms2Tick>
 80011f0:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 80011f2:	f000 f8d5 	bl	80013a0 <GetTimerTicks>
 80011f6:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80011f8:	e000      	b.n	80011fc <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 80011fa:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80011fc:	f000 f8d0 	bl	80013a0 <GetTimerTicks>
 8001200:	4602      	mov	r2, r0
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	429a      	cmp	r2, r3
 800120a:	d8f6      	bhi.n	80011fa <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800121e:	f00b ffd5 	bl	800d1cc <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b084      	sub	sp, #16
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001232:	f000 f8a5 	bl	8001380 <TIMER_IF_BkUp_Read_MSBticks>
 8001236:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3301      	adds	r3, #1
 800123c:	4618      	mov	r0, r3
 800123e:	f000 f88f 	bl	8001360 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 800124a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800124e:	b08c      	sub	sp, #48	@ 0x30
 8001250:	af00      	add	r7, sp, #0
 8001252:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8001258:	f000 f8a2 	bl	80013a0 <GetTimerTicks>
 800125c:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800125e:	f000 f88f 	bl	8001380 <TIMER_IF_BkUp_Read_MSBticks>
 8001262:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001266:	2200      	movs	r2, #0
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	60fa      	str	r2, [r7, #12]
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	000b      	movs	r3, r1
 8001278:	2200      	movs	r2, #0
 800127a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800127c:	2000      	movs	r0, #0
 800127e:	460c      	mov	r4, r1
 8001280:	4605      	mov	r5, r0
 8001282:	eb12 0804 	adds.w	r8, r2, r4
 8001286:	eb43 0905 	adc.w	r9, r3, r5
 800128a:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800128e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001292:	f04f 0200 	mov.w	r2, #0
 8001296:	f04f 0300 	mov.w	r3, #0
 800129a:	0a82      	lsrs	r2, r0, #10
 800129c:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80012a0:	0a8b      	lsrs	r3, r1, #10
 80012a2:	4613      	mov	r3, r2
 80012a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	2200      	movs	r2, #0
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80012b4:	f04f 0b00 	mov.w	fp, #0
 80012b8:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ff46 	bl	8001150 <TIMER_IF_Convert_Tick2ms>
 80012c4:	4603      	mov	r3, r0
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80012cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3730      	adds	r7, #48	@ 0x30
 80012d2:	46bd      	mov	sp, r7
 80012d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080012d8 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	2100      	movs	r1, #0
 80012e4:	4803      	ldr	r0, [pc, #12]	@ (80012f4 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 80012e6:	f004 fe07 	bl	8005ef8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200000dc 	.word	0x200000dc

080012f8 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	2101      	movs	r1, #1
 8001304:	4803      	ldr	r0, [pc, #12]	@ (8001314 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8001306:	f004 fdf7 	bl	8005ef8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200000dc 	.word	0x200000dc

08001318 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001322:	2100      	movs	r1, #0
 8001324:	4804      	ldr	r0, [pc, #16]	@ (8001338 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8001326:	f004 fdff 	bl	8005f28 <HAL_RTCEx_BKUPRead>
 800132a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 800132c:	687b      	ldr	r3, [r7, #4]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200000dc 	.word	0x200000dc

0800133c <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001346:	2101      	movs	r1, #1
 8001348:	4804      	ldr	r0, [pc, #16]	@ (800135c <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800134a:	f004 fded 	bl	8005f28 <HAL_RTCEx_BKUPRead>
 800134e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8001350:	687b      	ldr	r3, [r7, #4]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200000dc 	.word	0x200000dc

08001360 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	2102      	movs	r1, #2
 800136c:	4803      	ldr	r0, [pc, #12]	@ (800137c <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800136e:	f004 fdc3 	bl	8005ef8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200000dc 	.word	0x200000dc

08001380 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001386:	2102      	movs	r1, #2
 8001388:	4804      	ldr	r0, [pc, #16]	@ (800139c <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800138a:	f004 fdcd 	bl	8005f28 <HAL_RTCEx_BKUPRead>
 800138e:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8001390:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200000dc 	.word	0x200000dc

080013a0 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80013a6:	480b      	ldr	r0, [pc, #44]	@ (80013d4 <GetTimerTicks+0x34>)
 80013a8:	f7ff fdd8 	bl	8000f5c <LL_RTC_TIME_GetSubSecond>
 80013ac:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80013ae:	e003      	b.n	80013b8 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80013b0:	4808      	ldr	r0, [pc, #32]	@ (80013d4 <GetTimerTicks+0x34>)
 80013b2:	f7ff fdd3 	bl	8000f5c <LL_RTC_TIME_GetSubSecond>
 80013b6:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80013b8:	4806      	ldr	r0, [pc, #24]	@ (80013d4 <GetTimerTicks+0x34>)
 80013ba:	f7ff fdcf 	bl	8000f5c <LL_RTC_TIME_GetSubSecond>
 80013be:	4602      	mov	r2, r0
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d1f4      	bne.n	80013b0 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40002800 	.word	0x40002800

080013d8 <LL_AHB2_GRP1_EnableClock>:
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4013      	ands	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013fc:	68fb      	ldr	r3, [r7, #12]
}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <LL_APB2_GRP1_EnableClock>:
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001414:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001416:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4313      	orrs	r3, r2
 800141e:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001420:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001424:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4013      	ands	r3, r2
 800142a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800142c:	68fb      	ldr	r3, [r7, #12]
}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <LL_APB2_GRP1_DisableClock>:
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001440:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001444:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	43db      	mvns	r3, r3
 800144a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800144e:	4013      	ands	r3, r2
 8001450:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001460:	4b22      	ldr	r3, [pc, #136]	@ (80014ec <MX_USART1_UART_Init+0x90>)
 8001462:	4a23      	ldr	r2, [pc, #140]	@ (80014f0 <MX_USART1_UART_Init+0x94>)
 8001464:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001466:	4b21      	ldr	r3, [pc, #132]	@ (80014ec <MX_USART1_UART_Init+0x90>)
 8001468:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800146c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800146e:	4b1f      	ldr	r3, [pc, #124]	@ (80014ec <MX_USART1_UART_Init+0x90>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001474:	4b1d      	ldr	r3, [pc, #116]	@ (80014ec <MX_USART1_UART_Init+0x90>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800147a:	4b1c      	ldr	r3, [pc, #112]	@ (80014ec <MX_USART1_UART_Init+0x90>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001480:	4b1a      	ldr	r3, [pc, #104]	@ (80014ec <MX_USART1_UART_Init+0x90>)
 8001482:	220c      	movs	r2, #12
 8001484:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001486:	4b19      	ldr	r3, [pc, #100]	@ (80014ec <MX_USART1_UART_Init+0x90>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800148c:	4b17      	ldr	r3, [pc, #92]	@ (80014ec <MX_USART1_UART_Init+0x90>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001492:	4b16      	ldr	r3, [pc, #88]	@ (80014ec <MX_USART1_UART_Init+0x90>)
 8001494:	2200      	movs	r2, #0
 8001496:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001498:	4b14      	ldr	r3, [pc, #80]	@ (80014ec <MX_USART1_UART_Init+0x90>)
 800149a:	2200      	movs	r2, #0
 800149c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800149e:	4b13      	ldr	r3, [pc, #76]	@ (80014ec <MX_USART1_UART_Init+0x90>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014a4:	4811      	ldr	r0, [pc, #68]	@ (80014ec <MX_USART1_UART_Init+0x90>)
 80014a6:	f005 fa30 	bl	800690a <HAL_UART_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80014b0:	f7ff fa94 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014b4:	2100      	movs	r1, #0
 80014b6:	480d      	ldr	r0, [pc, #52]	@ (80014ec <MX_USART1_UART_Init+0x90>)
 80014b8:	f007 fb50 	bl	8008b5c <HAL_UARTEx_SetTxFifoThreshold>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80014c2:	f7ff fa8b 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014c6:	2100      	movs	r1, #0
 80014c8:	4808      	ldr	r0, [pc, #32]	@ (80014ec <MX_USART1_UART_Init+0x90>)
 80014ca:	f007 fb85 	bl	8008bd8 <HAL_UARTEx_SetRxFifoThreshold>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80014d4:	f7ff fa82 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80014d8:	4804      	ldr	r0, [pc, #16]	@ (80014ec <MX_USART1_UART_Init+0x90>)
 80014da:	f007 fb07 	bl	8008aec <HAL_UARTEx_DisableFifoMode>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80014e4:	f7ff fa7a 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000128 	.word	0x20000128
 80014f0:	40013800 	.word	0x40013800

080014f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b096      	sub	sp, #88	@ 0x58
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	2238      	movs	r2, #56	@ 0x38
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f00c fa5d 	bl	800d9d4 <memset>
  if(uartHandle->Instance==USART1)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a2f      	ldr	r2, [pc, #188]	@ (80015dc <HAL_UART_MspInit+0xe8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d156      	bne.n	80015d2 <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001524:	2301      	movs	r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001528:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800152c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800152e:	f107 030c 	add.w	r3, r7, #12
 8001532:	4618      	mov	r0, r3
 8001534:	f004 f868 	bl	8005608 <HAL_RCCEx_PeriphCLKConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800153e:	f7ff fa4d 	bl	80009dc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001542:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001546:	f7ff ff5f 	bl	8001408 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	2002      	movs	r0, #2
 800154c:	f7ff ff44 	bl	80013d8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001550:	23c0      	movs	r3, #192	@ 0xc0
 8001552:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001560:	2307      	movs	r3, #7
 8001562:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001564:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001568:	4619      	mov	r1, r3
 800156a:	481d      	ldr	r0, [pc, #116]	@ (80015e0 <HAL_UART_MspInit+0xec>)
 800156c:	f000 ff8e 	bl	800248c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8001570:	4b1c      	ldr	r3, [pc, #112]	@ (80015e4 <HAL_UART_MspInit+0xf0>)
 8001572:	4a1d      	ldr	r2, [pc, #116]	@ (80015e8 <HAL_UART_MspInit+0xf4>)
 8001574:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001576:	4b1b      	ldr	r3, [pc, #108]	@ (80015e4 <HAL_UART_MspInit+0xf0>)
 8001578:	2212      	movs	r2, #18
 800157a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800157c:	4b19      	ldr	r3, [pc, #100]	@ (80015e4 <HAL_UART_MspInit+0xf0>)
 800157e:	2210      	movs	r2, #16
 8001580:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001582:	4b18      	ldr	r3, [pc, #96]	@ (80015e4 <HAL_UART_MspInit+0xf0>)
 8001584:	2200      	movs	r2, #0
 8001586:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001588:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <HAL_UART_MspInit+0xf0>)
 800158a:	2280      	movs	r2, #128	@ 0x80
 800158c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <HAL_UART_MspInit+0xf0>)
 8001590:	2200      	movs	r2, #0
 8001592:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001594:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <HAL_UART_MspInit+0xf0>)
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800159a:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <HAL_UART_MspInit+0xf0>)
 800159c:	2200      	movs	r2, #0
 800159e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015a0:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <HAL_UART_MspInit+0xf0>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80015a6:	480f      	ldr	r0, [pc, #60]	@ (80015e4 <HAL_UART_MspInit+0xf0>)
 80015a8:	f000 fb7a 	bl	8001ca0 <HAL_DMA_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80015b2:	f7ff fa13 	bl	80009dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a0a      	ldr	r2, [pc, #40]	@ (80015e4 <HAL_UART_MspInit+0xf0>)
 80015ba:	67da      	str	r2, [r3, #124]	@ 0x7c
 80015bc:	4a09      	ldr	r2, [pc, #36]	@ (80015e4 <HAL_UART_MspInit+0xf0>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	2024      	movs	r0, #36	@ 0x24
 80015c8:	f000 fb27 	bl	8001c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015cc:	2024      	movs	r0, #36	@ 0x24
 80015ce:	f000 fb3e 	bl	8001c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80015d2:	bf00      	nop
 80015d4:	3758      	adds	r7, #88	@ 0x58
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40013800 	.word	0x40013800
 80015e0:	48000400 	.word	0x48000400
 80015e4:	200001bc 	.word	0x200001bc
 80015e8:	40020008 	.word	0x40020008

080015ec <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001628 <HAL_UART_MspDeInit+0x3c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d10f      	bne.n	800161e <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80015fe:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001602:	f7ff ff19 	bl	8001438 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7|GPIO_PIN_6);
 8001606:	21c0      	movs	r1, #192	@ 0xc0
 8001608:	4808      	ldr	r0, [pc, #32]	@ (800162c <HAL_UART_MspDeInit+0x40>)
 800160a:	f001 f89f 	bl	800274c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001612:	4618      	mov	r0, r3
 8001614:	f000 fbec 	bl	8001df0 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001618:	2024      	movs	r0, #36	@ 0x24
 800161a:	f000 fb26 	bl	8001c6a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40013800 	.word	0x40013800
 800162c:	48000400 	.word	0x48000400

08001630 <LL_APB2_GRP1_ForceReset>:
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8001638:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800163c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800163e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4313      	orrs	r3, r2
 8001646:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr

08001652 <LL_APB2_GRP1_ReleaseReset>:
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800165a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800165e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	43db      	mvns	r3, r3
 8001664:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001668:	4013      	ands	r3, r2
 800166a:	640b      	str	r3, [r1, #64]	@ 0x40
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
	...

08001678 <LL_EXTI_EnableIT_0_31>:
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <LL_EXTI_EnableIT_0_31+0x24>)
 8001682:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001686:	4905      	ldr	r1, [pc, #20]	@ (800169c <LL_EXTI_EnableIT_0_31+0x24>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4313      	orrs	r3, r2
 800168c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	58000800 	.word	0x58000800

080016a0 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80016a8:	4a07      	ldr	r2, [pc, #28]	@ (80016c8 <vcom_Init+0x28>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80016ae:	f7fe fefb 	bl	80004a8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80016b2:	f7ff fed3 	bl	800145c <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80016b6:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80016ba:	f7ff ffdd 	bl	8001678 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80016be:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000220 	.word	0x20000220

080016cc <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80016d0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80016d4:	f7ff ffac 	bl	8001630 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80016d8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80016dc:	f7ff ffb9 	bl	8001652 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 80016e0:	4804      	ldr	r0, [pc, #16]	@ (80016f4 <vcom_DeInit+0x28>)
 80016e2:	f7ff ff83 	bl	80015ec <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80016e6:	200f      	movs	r0, #15
 80016e8:	f000 fabf 	bl	8001c6a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80016ec:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000128 	.word	0x20000128

080016f8 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001704:	887b      	ldrh	r3, [r7, #2]
 8001706:	461a      	mov	r2, r3
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	4804      	ldr	r0, [pc, #16]	@ (800171c <vcom_Trace_DMA+0x24>)
 800170c:	f005 f99a 	bl	8006a44 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8001710:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000128 	.word	0x20000128

08001720 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001728:	4a19      	ldr	r2, [pc, #100]	@ (8001790 <vcom_ReceiveInit+0x70>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800172e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001732:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8001734:	f107 0308 	add.w	r3, r7, #8
 8001738:	e893 0006 	ldmia.w	r3, {r1, r2}
 800173c:	4815      	ldr	r0, [pc, #84]	@ (8001794 <vcom_ReceiveInit+0x74>)
 800173e:	f007 f948 	bl	80089d2 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8001742:	bf00      	nop
 8001744:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <vcom_ReceiveInit+0x74>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800174e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001752:	d0f7      	beq.n	8001744 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8001754:	bf00      	nop
 8001756:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <vcom_ReceiveInit+0x74>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001760:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001764:	d1f7      	bne.n	8001756 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001766:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <vcom_ReceiveInit+0x74>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <vcom_ReceiveInit+0x74>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001774:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8001776:	4807      	ldr	r0, [pc, #28]	@ (8001794 <vcom_ReceiveInit+0x74>)
 8001778:	f007 f986 	bl	8008a88 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 800177c:	2201      	movs	r2, #1
 800177e:	4906      	ldr	r1, [pc, #24]	@ (8001798 <vcom_ReceiveInit+0x78>)
 8001780:	4804      	ldr	r0, [pc, #16]	@ (8001794 <vcom_ReceiveInit+0x74>)
 8001782:	f005 f913 	bl	80069ac <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8001786:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001788:	4618      	mov	r0, r3
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000224 	.word	0x20000224
 8001794:	20000128 	.word	0x20000128
 8001798:	2000021c 	.word	0x2000021c

0800179c <vcom_Resume>:

void vcom_Resume(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017a0:	4808      	ldr	r0, [pc, #32]	@ (80017c4 <vcom_Resume+0x28>)
 80017a2:	f005 f8b2 	bl	800690a <HAL_UART_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <vcom_Resume+0x14>
  {
    Error_Handler();
 80017ac:	f7ff f916 	bl	80009dc <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80017b0:	4805      	ldr	r0, [pc, #20]	@ (80017c8 <vcom_Resume+0x2c>)
 80017b2:	f000 fa75 	bl	8001ca0 <HAL_DMA_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <vcom_Resume+0x24>
  {
    Error_Handler();
 80017bc:	f7ff f90e 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000128 	.word	0x20000128
 80017c8:	200001bc 	.word	0x200001bc

080017cc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a05      	ldr	r2, [pc, #20]	@ (80017f0 <HAL_UART_TxCpltCallback+0x24>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d103      	bne.n	80017e6 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80017de:	4b05      	ldr	r3, [pc, #20]	@ (80017f4 <HAL_UART_TxCpltCallback+0x28>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2000      	movs	r0, #0
 80017e4:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40013800 	.word	0x40013800
 80017f4:	20000220 	.word	0x20000220

080017f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0d      	ldr	r2, [pc, #52]	@ (800183c <HAL_UART_RxCpltCallback+0x44>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d113      	bne.n	8001832 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800180a:	4b0d      	ldr	r3, [pc, #52]	@ (8001840 <HAL_UART_RxCpltCallback+0x48>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00a      	beq.n	8001828 <HAL_UART_RxCpltCallback+0x30>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001818:	2b00      	cmp	r3, #0
 800181a:	d105      	bne.n	8001828 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 800181c:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <HAL_UART_RxCpltCallback+0x48>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2200      	movs	r2, #0
 8001822:	2101      	movs	r1, #1
 8001824:	4807      	ldr	r0, [pc, #28]	@ (8001844 <HAL_UART_RxCpltCallback+0x4c>)
 8001826:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8001828:	2201      	movs	r2, #1
 800182a:	4906      	ldr	r1, [pc, #24]	@ (8001844 <HAL_UART_RxCpltCallback+0x4c>)
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f005 f8bd 	bl	80069ac <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40013800 	.word	0x40013800
 8001840:	20000224 	.word	0x20000224
 8001844:	2000021c 	.word	0x2000021c

08001848 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001848:	480d      	ldr	r0, [pc, #52]	@ (8001880 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800184a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800184c:	f7ff fb80 	bl	8000f50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001850:	480c      	ldr	r0, [pc, #48]	@ (8001884 <LoopForever+0x6>)
  ldr r1, =_edata
 8001852:	490d      	ldr	r1, [pc, #52]	@ (8001888 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001854:	4a0d      	ldr	r2, [pc, #52]	@ (800188c <LoopForever+0xe>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001858:	e002      	b.n	8001860 <LoopCopyDataInit>

0800185a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800185c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185e:	3304      	adds	r3, #4

08001860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001864:	d3f9      	bcc.n	800185a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001866:	4a0a      	ldr	r2, [pc, #40]	@ (8001890 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001868:	4c0a      	ldr	r4, [pc, #40]	@ (8001894 <LoopForever+0x16>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800186c:	e001      	b.n	8001872 <LoopFillZerobss>

0800186e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001870:	3204      	adds	r2, #4

08001872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001874:	d3fb      	bcc.n	800186e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001876:	f00c f8b5 	bl	800d9e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800187a:	f7ff f803 	bl	8000884 <main>

0800187e <LoopForever>:

LoopForever:
    b LoopForever
 800187e:	e7fe      	b.n	800187e <LoopForever>
  ldr   r0, =_estack
 8001880:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001888:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 800188c:	0800de24 	.word	0x0800de24
  ldr r2, =_sbss
 8001890:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001894:	2000075c 	.word	0x2000075c

08001898 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001898:	e7fe      	b.n	8001898 <ADC_IRQHandler>
	...

0800189c <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80018a0:	4b04      	ldr	r3, [pc, #16]	@ (80018b4 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	4a03      	ldr	r2, [pc, #12]	@ (80018b4 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6053      	str	r3, [r2, #4]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	e0042000 	.word	0xe0042000

080018b8 <LL_DBGMCU_EnableDBGStopMode>:
  *        in Stop mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80018bc:	4b04      	ldr	r3, [pc, #16]	@ (80018d0 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	4a03      	ldr	r2, [pc, #12]	@ (80018d0 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 80018c2:	f043 0302 	orr.w	r3, r3, #2
 80018c6:	6053      	str	r3, [r2, #4]
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	e0042000 	.word	0xe0042000

080018d4 <LL_DBGMCU_EnableDBGStandbyMode>:
  *        in Standby mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_EnableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStandbyMode(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80018d8:	4b04      	ldr	r3, [pc, #16]	@ (80018ec <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	4a03      	ldr	r2, [pc, #12]	@ (80018ec <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80018de:	f043 0304 	orr.w	r3, r3, #4
 80018e2:	6053      	str	r3, [r2, #4]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	e0042000 	.word	0xe0042000

080018f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018fa:	2003      	movs	r0, #3
 80018fc:	f000 f982 	bl	8001c04 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001900:	f003 fca4 	bl	800524c <HAL_RCC_GetHCLKFreq>
 8001904:	4603      	mov	r3, r0
 8001906:	4a09      	ldr	r2, [pc, #36]	@ (800192c <HAL_Init+0x3c>)
 8001908:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800190a:	200f      	movs	r0, #15
 800190c:	f000 f810 	bl	8001930 <HAL_InitTick>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d002      	beq.n	800191c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	71fb      	strb	r3, [r7, #7]
 800191a:	e001      	b.n	8001920 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800191c:	f7ff f955 	bl	8000bca <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001920:	79fb      	ldrb	r3, [r7, #7]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000008 	.word	0x20000008

08001930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800193c:	4b17      	ldr	r3, [pc, #92]	@ (800199c <HAL_InitTick+0x6c>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d024      	beq.n	800198e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001944:	f003 fc82 	bl	800524c <HAL_RCC_GetHCLKFreq>
 8001948:	4602      	mov	r2, r0
 800194a:	4b14      	ldr	r3, [pc, #80]	@ (800199c <HAL_InitTick+0x6c>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	4619      	mov	r1, r3
 8001950:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001954:	fbb3 f3f1 	udiv	r3, r3, r1
 8001958:	fbb2 f3f3 	udiv	r3, r2, r3
 800195c:	4618      	mov	r0, r3
 800195e:	f000 f992 	bl	8001c86 <HAL_SYSTICK_Config>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10f      	bne.n	8001988 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b0f      	cmp	r3, #15
 800196c:	d809      	bhi.n	8001982 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800196e:	2200      	movs	r2, #0
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	f04f 30ff 	mov.w	r0, #4294967295
 8001976:	f000 f950 	bl	8001c1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800197a:	4a09      	ldr	r2, [pc, #36]	@ (80019a0 <HAL_InitTick+0x70>)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	e007      	b.n	8001992 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	73fb      	strb	r3, [r7, #15]
 8001986:	e004      	b.n	8001992 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]
 800198c:	e001      	b.n	8001992 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001992:	7bfb      	ldrb	r3, [r7, #15]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000010 	.word	0x20000010
 80019a0:	2000000c 	.word	0x2000000c

080019a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019a8:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <HAL_IncTick+0x1c>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b05      	ldr	r3, [pc, #20]	@ (80019c4 <HAL_IncTick+0x20>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	4a03      	ldr	r2, [pc, #12]	@ (80019c4 <HAL_IncTick+0x20>)
 80019b6:	6013      	str	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	20000010 	.word	0x20000010
 80019c4:	20000228 	.word	0x20000228

080019c8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80019cc:	4b04      	ldr	r3, [pc, #16]	@ (80019e0 <HAL_SuspendTick+0x18>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a03      	ldr	r2, [pc, #12]	@ (80019e0 <HAL_SuspendTick+0x18>)
 80019d2:	f023 0302 	bic.w	r3, r3, #2
 80019d6:	6013      	str	r3, [r2, #0]
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	e000e010 	.word	0xe000e010

080019e4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80019e8:	4b04      	ldr	r3, [pc, #16]	@ (80019fc <HAL_ResumeTick+0x18>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a03      	ldr	r2, [pc, #12]	@ (80019fc <HAL_ResumeTick+0x18>)
 80019ee:	f043 0302 	orr.w	r3, r3, #2
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr
 80019fc:	e000e010 	.word	0xe000e010

08001a00 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8001a04:	f7ff ff4a 	bl	800189c <LL_DBGMCU_EnableDBGSleepMode>
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8001a10:	f7ff ff52 	bl	80018b8 <LL_DBGMCU_EnableDBGStopMode>
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8001a1c:	f7ff ff5a 	bl	80018d4 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a34:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a40:	4013      	ands	r3, r2
 8001a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a56:	4a04      	ldr	r2, [pc, #16]	@ (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	60d3      	str	r3, [r2, #12]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a70:	4b04      	ldr	r3, [pc, #16]	@ (8001a84 <__NVIC_GetPriorityGrouping+0x18>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	0a1b      	lsrs	r3, r3, #8
 8001a76:	f003 0307 	and.w	r3, r3, #7
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	db0b      	blt.n	8001ab2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	f003 021f 	and.w	r2, r3, #31
 8001aa0:	4906      	ldr	r1, [pc, #24]	@ (8001abc <__NVIC_EnableIRQ+0x34>)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	095b      	lsrs	r3, r3, #5
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8001aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	e000e100 	.word	0xe000e100

08001ac0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	db12      	blt.n	8001af8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	f003 021f 	and.w	r2, r3, #31
 8001ad8:	490a      	ldr	r1, [pc, #40]	@ (8001b04 <__NVIC_DisableIRQ+0x44>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	095b      	lsrs	r3, r3, #5
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae6:	3320      	adds	r3, #32
 8001ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001aec:	f3bf 8f4f 	dsb	sy
}
 8001af0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001af2:	f3bf 8f6f 	isb	sy
}
 8001af6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000e100 	.word	0xe000e100

08001b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	db0a      	blt.n	8001b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	490c      	ldr	r1, [pc, #48]	@ (8001b54 <__NVIC_SetPriority+0x4c>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	0112      	lsls	r2, r2, #4
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b30:	e00a      	b.n	8001b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4908      	ldr	r1, [pc, #32]	@ (8001b58 <__NVIC_SetPriority+0x50>)
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	3b04      	subs	r3, #4
 8001b40:	0112      	lsls	r2, r2, #4
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	440b      	add	r3, r1
 8001b46:	761a      	strb	r2, [r3, #24]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000e100 	.word	0xe000e100
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	@ 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f1c3 0307 	rsb	r3, r3, #7
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	bf28      	it	cs
 8001b7a:	2304      	movcs	r3, #4
 8001b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3304      	adds	r3, #4
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d902      	bls.n	8001b8c <NVIC_EncodePriority+0x30>
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3b03      	subs	r3, #3
 8001b8a:	e000      	b.n	8001b8e <NVIC_EncodePriority+0x32>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	43d9      	mvns	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	4313      	orrs	r3, r2
         );
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3724      	adds	r7, #36	@ 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bd0:	d301      	bcc.n	8001bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00f      	b.n	8001bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c00 <SysTick_Config+0x40>)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bde:	210f      	movs	r1, #15
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f7ff ff90 	bl	8001b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be8:	4b05      	ldr	r3, [pc, #20]	@ (8001c00 <SysTick_Config+0x40>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bee:	4b04      	ldr	r3, [pc, #16]	@ (8001c00 <SysTick_Config+0x40>)
 8001bf0:	2207      	movs	r2, #7
 8001bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	e000e010 	.word	0xe000e010

08001c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff09 	bl	8001a24 <__NVIC_SetPriorityGrouping>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b086      	sub	sp, #24
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c28:	f7ff ff20 	bl	8001a6c <__NVIC_GetPriorityGrouping>
 8001c2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	6978      	ldr	r0, [r7, #20]
 8001c34:	f7ff ff92 	bl	8001b5c <NVIC_EncodePriority>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff61 	bl	8001b08 <__NVIC_SetPriority>
}
 8001c46:	bf00      	nop
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4603      	mov	r3, r0
 8001c56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff13 	bl	8001a88 <__NVIC_EnableIRQ>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	4603      	mov	r3, r0
 8001c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff21 	bl	8001ac0 <__NVIC_DisableIRQ>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ff96 	bl	8001bc0 <SysTick_Config>
 8001c94:	4603      	mov	r3, r0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e08e      	b.n	8001dd0 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4b47      	ldr	r3, [pc, #284]	@ (8001dd8 <HAL_DMA_Init+0x138>)
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d80f      	bhi.n	8001cde <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4b45      	ldr	r3, [pc, #276]	@ (8001ddc <HAL_DMA_Init+0x13c>)
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4a45      	ldr	r2, [pc, #276]	@ (8001de0 <HAL_DMA_Init+0x140>)
 8001cca:	fba2 2303 	umull	r2, r3, r2, r3
 8001cce:	091b      	lsrs	r3, r3, #4
 8001cd0:	009a      	lsls	r2, r3, #2
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a42      	ldr	r2, [pc, #264]	@ (8001de4 <HAL_DMA_Init+0x144>)
 8001cda:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cdc:	e00e      	b.n	8001cfc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4b40      	ldr	r3, [pc, #256]	@ (8001de8 <HAL_DMA_Init+0x148>)
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4a3d      	ldr	r2, [pc, #244]	@ (8001de0 <HAL_DMA_Init+0x140>)
 8001cea:	fba2 2303 	umull	r2, r3, r2, r3
 8001cee:	091b      	lsrs	r3, r3, #4
 8001cf0:	009a      	lsls	r2, r3, #2
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a3c      	ldr	r2, [pc, #240]	@ (8001dec <HAL_DMA_Init+0x14c>)
 8001cfa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6812      	ldr	r2, [r2, #0]
 8001d0e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d16:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6819      	ldr	r1, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 fb30 	bl	80023b4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d5c:	d102      	bne.n	8001d64 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d6c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d70:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d7a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d010      	beq.n	8001da6 <HAL_DMA_Init+0x106>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d80c      	bhi.n	8001da6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 fb59 	bl	8002444 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	e008      	b.n	8001db8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40020407 	.word	0x40020407
 8001ddc:	bffdfff8 	.word	0xbffdfff8
 8001de0:	cccccccd 	.word	0xcccccccd
 8001de4:	40020000 	.word	0x40020000
 8001de8:	bffdfbf8 	.word	0xbffdfbf8
 8001dec:	40020400 	.word	0x40020400

08001df0 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e07b      	b.n	8001efa <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0201 	bic.w	r2, r2, #1
 8001e10:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	4b3a      	ldr	r3, [pc, #232]	@ (8001f04 <HAL_DMA_DeInit+0x114>)
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d80f      	bhi.n	8001e3e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	461a      	mov	r2, r3
 8001e24:	4b38      	ldr	r3, [pc, #224]	@ (8001f08 <HAL_DMA_DeInit+0x118>)
 8001e26:	4413      	add	r3, r2
 8001e28:	4a38      	ldr	r2, [pc, #224]	@ (8001f0c <HAL_DMA_DeInit+0x11c>)
 8001e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	009a      	lsls	r2, r3, #2
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a35      	ldr	r2, [pc, #212]	@ (8001f10 <HAL_DMA_DeInit+0x120>)
 8001e3a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e3c:	e00e      	b.n	8001e5c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	4b33      	ldr	r3, [pc, #204]	@ (8001f14 <HAL_DMA_DeInit+0x124>)
 8001e46:	4413      	add	r3, r2
 8001e48:	4a30      	ldr	r2, [pc, #192]	@ (8001f0c <HAL_DMA_DeInit+0x11c>)
 8001e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4e:	091b      	lsrs	r3, r3, #4
 8001e50:	009a      	lsls	r2, r3, #2
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a2f      	ldr	r2, [pc, #188]	@ (8001f18 <HAL_DMA_DeInit+0x128>)
 8001e5a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e68:	f003 021c 	and.w	r2, r3, #28
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e70:	2101      	movs	r1, #1
 8001e72:	fa01 f202 	lsl.w	r2, r1, r2
 8001e76:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 fa9b 	bl	80023b4 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e8e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00f      	beq.n	8001eb8 <HAL_DMA_DeInit+0xc8>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d80b      	bhi.n	8001eb8 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 facf 	bl	8002444 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001eb6:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40020407 	.word	0x40020407
 8001f08:	bffdfff8 	.word	0xbffdfff8
 8001f0c:	cccccccd 	.word	0xcccccccd
 8001f10:	40020000 	.word	0x40020000
 8001f14:	bffdfbf8 	.word	0xbffdfbf8
 8001f18:	40020400 	.word	0x40020400

08001f1c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_DMA_Start_IT+0x20>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e069      	b.n	8002010 <HAL_DMA_Start_IT+0xf4>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d155      	bne.n	8001ffc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2202      	movs	r2, #2
 8001f54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0201 	bic.w	r2, r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	68b9      	ldr	r1, [r7, #8]
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f000 f9e0 	bl	800233a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d008      	beq.n	8001f94 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 020e 	orr.w	r2, r2, #14
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	e00f      	b.n	8001fb4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0204 	bic.w	r2, r2, #4
 8001fa2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 020a 	orr.w	r2, r2, #10
 8001fb2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d007      	beq.n	8001fd2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fd0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fe8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0201 	orr.w	r2, r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	e008      	b.n	800200e <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2280      	movs	r2, #128	@ 0x80
 8002000:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800200e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e04f      	b.n	80020ca <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d008      	beq.n	8002048 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2204      	movs	r2, #4
 800203a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e040      	b.n	80020ca <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 020e 	bic.w	r2, r2, #14
 8002056:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002062:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002066:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0201 	bic.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207c:	f003 021c 	and.w	r2, r3, #28
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002084:	2101      	movs	r1, #1
 8002086:	fa01 f202 	lsl.w	r2, r1, r2
 800208a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002094:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00c      	beq.n	80020b8 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020ac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80020b6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d005      	beq.n	80020f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2204      	movs	r2, #4
 80020f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	73fb      	strb	r3, [r7, #15]
 80020f6:	e047      	b.n	8002188 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 020e 	bic.w	r2, r2, #14
 8002106:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0201 	bic.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002122:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002126:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212c:	f003 021c 	and.w	r2, r3, #28
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002134:	2101      	movs	r1, #1
 8002136:	fa01 f202 	lsl.w	r2, r1, r2
 800213a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002144:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00c      	beq.n	8002168 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002158:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800215c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002166:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4798      	blx	r3
    }
  }
  return status;
 8002188:	7bfb      	ldrb	r3, [r7, #15]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b0:	f003 031c 	and.w	r3, r3, #28
 80021b4:	2204      	movs	r2, #4
 80021b6:	409a      	lsls	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d027      	beq.n	8002210 <HAL_DMA_IRQHandler+0x7c>
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d022      	beq.n	8002210 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0320 	and.w	r3, r3, #32
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d107      	bne.n	80021e8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0204 	bic.w	r2, r2, #4
 80021e6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ec:	f003 021c 	and.w	r2, r3, #28
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f4:	2104      	movs	r1, #4
 80021f6:	fa01 f202 	lsl.w	r2, r1, r2
 80021fa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 8081 	beq.w	8002308 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800220e:	e07b      	b.n	8002308 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002214:	f003 031c 	and.w	r3, r3, #28
 8002218:	2202      	movs	r2, #2
 800221a:	409a      	lsls	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4013      	ands	r3, r2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d03d      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x10c>
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d038      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0320 	and.w	r3, r3, #32
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10b      	bne.n	8002254 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 020a 	bic.w	r2, r2, #10
 800224a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	4b2e      	ldr	r3, [pc, #184]	@ (8002314 <HAL_DMA_IRQHandler+0x180>)
 800225c:	429a      	cmp	r2, r3
 800225e:	d909      	bls.n	8002274 <HAL_DMA_IRQHandler+0xe0>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002264:	f003 031c 	and.w	r3, r3, #28
 8002268:	4a2b      	ldr	r2, [pc, #172]	@ (8002318 <HAL_DMA_IRQHandler+0x184>)
 800226a:	2102      	movs	r1, #2
 800226c:	fa01 f303 	lsl.w	r3, r1, r3
 8002270:	6053      	str	r3, [r2, #4]
 8002272:	e008      	b.n	8002286 <HAL_DMA_IRQHandler+0xf2>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002278:	f003 031c 	and.w	r3, r3, #28
 800227c:	4a27      	ldr	r2, [pc, #156]	@ (800231c <HAL_DMA_IRQHandler+0x188>)
 800227e:	2102      	movs	r1, #2
 8002280:	fa01 f303 	lsl.w	r3, r1, r3
 8002284:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002292:	2b00      	cmp	r3, #0
 8002294:	d038      	beq.n	8002308 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800229e:	e033      	b.n	8002308 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a4:	f003 031c 	and.w	r3, r3, #28
 80022a8:	2208      	movs	r2, #8
 80022aa:	409a      	lsls	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d02a      	beq.n	800230a <HAL_DMA_IRQHandler+0x176>
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d025      	beq.n	800230a <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 020e 	bic.w	r2, r2, #14
 80022cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d2:	f003 021c 	and.w	r2, r3, #28
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	2101      	movs	r1, #1
 80022dc:	fa01 f202 	lsl.w	r2, r1, r2
 80022e0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d004      	beq.n	800230a <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002308:	bf00      	nop
 800230a:	bf00      	nop
}
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40020080 	.word	0x40020080
 8002318:	40020400 	.word	0x40020400
 800231c:	40020000 	.word	0x40020000

08002320 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800232e:	b2db      	uxtb	r3, r3
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr

0800233a <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800233a:	b480      	push	{r7}
 800233c:	b085      	sub	sp, #20
 800233e:	af00      	add	r7, sp, #0
 8002340:	60f8      	str	r0, [r7, #12]
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
 8002346:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002350:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002356:	2b00      	cmp	r3, #0
 8002358:	d004      	beq.n	8002364 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002362:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002368:	f003 021c 	and.w	r2, r3, #28
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002370:	2101      	movs	r1, #1
 8002372:	fa01 f202 	lsl.w	r2, r1, r2
 8002376:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b10      	cmp	r3, #16
 8002386:	d108      	bne.n	800239a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002398:	e007      	b.n	80023aa <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	60da      	str	r2, [r3, #12]
}
 80023aa:	bf00      	nop
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002434 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d813      	bhi.n	80023f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023cc:	089b      	lsrs	r3, r3, #2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80023d4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	3b08      	subs	r3, #8
 80023e4:	4a14      	ldr	r2, [pc, #80]	@ (8002438 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	091b      	lsrs	r3, r3, #4
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	e011      	b.n	8002414 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f4:	089b      	lsrs	r3, r3, #2
 80023f6:	009a      	lsls	r2, r3, #2
 80023f8:	4b10      	ldr	r3, [pc, #64]	@ (800243c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80023fa:	4413      	add	r3, r2
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	3b08      	subs	r3, #8
 8002408:	4a0b      	ldr	r2, [pc, #44]	@ (8002438 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	091b      	lsrs	r3, r3, #4
 8002410:	3307      	adds	r3, #7
 8002412:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a0a      	ldr	r2, [pc, #40]	@ (8002440 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002418:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f003 031f 	and.w	r3, r3, #31
 8002420:	2201      	movs	r2, #1
 8002422:	409a      	lsls	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002428:	bf00      	nop
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40020407 	.word	0x40020407
 8002438:	cccccccd 	.word	0xcccccccd
 800243c:	4002081c 	.word	0x4002081c
 8002440:	40020880 	.word	0x40020880

08002444 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002454:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4b0a      	ldr	r3, [pc, #40]	@ (8002484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800245a:	4413      	add	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	461a      	mov	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a08      	ldr	r2, [pc, #32]	@ (8002488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002468:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	3b01      	subs	r3, #1
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	2201      	movs	r2, #1
 8002474:	409a      	lsls	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800247a:	bf00      	nop
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr
 8002484:	1000823f 	.word	0x1000823f
 8002488:	40020940 	.word	0x40020940

0800248c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800249a:	e140      	b.n	800271e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	2101      	movs	r1, #1
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	fa01 f303 	lsl.w	r3, r1, r3
 80024a8:	4013      	ands	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 8132 	beq.w	8002718 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d005      	beq.n	80024cc <HAL_GPIO_Init+0x40>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d130      	bne.n	800252e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	2203      	movs	r2, #3
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002502:	2201      	movs	r2, #1
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4013      	ands	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	091b      	lsrs	r3, r3, #4
 8002518:	f003 0201 	and.w	r2, r3, #1
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	2b03      	cmp	r3, #3
 8002538:	d017      	beq.n	800256a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	2203      	movs	r2, #3
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4013      	ands	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d123      	bne.n	80025be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	08da      	lsrs	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3208      	adds	r2, #8
 800257e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002582:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	220f      	movs	r2, #15
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	4013      	ands	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	691a      	ldr	r2, [r3, #16]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	08da      	lsrs	r2, r3, #3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3208      	adds	r2, #8
 80025b8:	6939      	ldr	r1, [r7, #16]
 80025ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	2203      	movs	r2, #3
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 0203 	and.w	r2, r3, #3
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 808c 	beq.w	8002718 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002600:	4a4e      	ldr	r2, [pc, #312]	@ (800273c <HAL_GPIO_Init+0x2b0>)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	089b      	lsrs	r3, r3, #2
 8002606:	3302      	adds	r3, #2
 8002608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	2207      	movs	r2, #7
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4013      	ands	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800262a:	d00d      	beq.n	8002648 <HAL_GPIO_Init+0x1bc>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a44      	ldr	r2, [pc, #272]	@ (8002740 <HAL_GPIO_Init+0x2b4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d007      	beq.n	8002644 <HAL_GPIO_Init+0x1b8>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a43      	ldr	r2, [pc, #268]	@ (8002744 <HAL_GPIO_Init+0x2b8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d101      	bne.n	8002640 <HAL_GPIO_Init+0x1b4>
 800263c:	2302      	movs	r3, #2
 800263e:	e004      	b.n	800264a <HAL_GPIO_Init+0x1be>
 8002640:	2307      	movs	r3, #7
 8002642:	e002      	b.n	800264a <HAL_GPIO_Init+0x1be>
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <HAL_GPIO_Init+0x1be>
 8002648:	2300      	movs	r3, #0
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	f002 0203 	and.w	r2, r2, #3
 8002650:	0092      	lsls	r2, r2, #2
 8002652:	4093      	lsls	r3, r2
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800265a:	4938      	ldr	r1, [pc, #224]	@ (800273c <HAL_GPIO_Init+0x2b0>)
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	089b      	lsrs	r3, r3, #2
 8002660:	3302      	adds	r3, #2
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002668:	4b37      	ldr	r3, [pc, #220]	@ (8002748 <HAL_GPIO_Init+0x2bc>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	43db      	mvns	r3, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4013      	ands	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800268c:	4a2e      	ldr	r2, [pc, #184]	@ (8002748 <HAL_GPIO_Init+0x2bc>)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002692:	4b2d      	ldr	r3, [pc, #180]	@ (8002748 <HAL_GPIO_Init+0x2bc>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	43db      	mvns	r3, r3
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4013      	ands	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026b6:	4a24      	ldr	r2, [pc, #144]	@ (8002748 <HAL_GPIO_Init+0x2bc>)
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80026bc:	4b22      	ldr	r3, [pc, #136]	@ (8002748 <HAL_GPIO_Init+0x2bc>)
 80026be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026c2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4013      	ands	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80026e2:	4a19      	ldr	r2, [pc, #100]	@ (8002748 <HAL_GPIO_Init+0x2bc>)
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80026ea:	4b17      	ldr	r3, [pc, #92]	@ (8002748 <HAL_GPIO_Init+0x2bc>)
 80026ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026f0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002710:	4a0d      	ldr	r2, [pc, #52]	@ (8002748 <HAL_GPIO_Init+0x2bc>)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	3301      	adds	r3, #1
 800271c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	fa22 f303 	lsr.w	r3, r2, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	f47f aeb7 	bne.w	800249c <HAL_GPIO_Init+0x10>
  }
}
 800272e:	bf00      	nop
 8002730:	bf00      	nop
 8002732:	371c      	adds	r7, #28
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40010000 	.word	0x40010000
 8002740:	48000400 	.word	0x48000400
 8002744:	48000800 	.word	0x48000800
 8002748:	58000800 	.word	0x58000800

0800274c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800274c:	b480      	push	{r7}
 800274e:	b087      	sub	sp, #28
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800275a:	e0af      	b.n	80028bc <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800275c:	2201      	movs	r2, #1
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	4013      	ands	r3, r2
 8002768:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 80a2 	beq.w	80028b6 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002772:	4a59      	ldr	r2, [pc, #356]	@ (80028d8 <HAL_GPIO_DeInit+0x18c>)
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	089b      	lsrs	r3, r3, #2
 8002778:	3302      	adds	r3, #2
 800277a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	2207      	movs	r2, #7
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4013      	ands	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800279a:	d00d      	beq.n	80027b8 <HAL_GPIO_DeInit+0x6c>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a4f      	ldr	r2, [pc, #316]	@ (80028dc <HAL_GPIO_DeInit+0x190>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d007      	beq.n	80027b4 <HAL_GPIO_DeInit+0x68>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a4e      	ldr	r2, [pc, #312]	@ (80028e0 <HAL_GPIO_DeInit+0x194>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d101      	bne.n	80027b0 <HAL_GPIO_DeInit+0x64>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e004      	b.n	80027ba <HAL_GPIO_DeInit+0x6e>
 80027b0:	2307      	movs	r3, #7
 80027b2:	e002      	b.n	80027ba <HAL_GPIO_DeInit+0x6e>
 80027b4:	2301      	movs	r3, #1
 80027b6:	e000      	b.n	80027ba <HAL_GPIO_DeInit+0x6e>
 80027b8:	2300      	movs	r3, #0
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	f002 0203 	and.w	r2, r2, #3
 80027c0:	0092      	lsls	r2, r2, #2
 80027c2:	4093      	lsls	r3, r2
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d136      	bne.n	8002838 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80027ca:	4b46      	ldr	r3, [pc, #280]	@ (80028e4 <HAL_GPIO_DeInit+0x198>)
 80027cc:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	4943      	ldr	r1, [pc, #268]	@ (80028e4 <HAL_GPIO_DeInit+0x198>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80027dc:	4b41      	ldr	r3, [pc, #260]	@ (80028e4 <HAL_GPIO_DeInit+0x198>)
 80027de:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	493f      	ldr	r1, [pc, #252]	@ (80028e4 <HAL_GPIO_DeInit+0x198>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80027ee:	4b3d      	ldr	r3, [pc, #244]	@ (80028e4 <HAL_GPIO_DeInit+0x198>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	493b      	ldr	r1, [pc, #236]	@ (80028e4 <HAL_GPIO_DeInit+0x198>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80027fc:	4b39      	ldr	r3, [pc, #228]	@ (80028e4 <HAL_GPIO_DeInit+0x198>)
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	43db      	mvns	r3, r3
 8002804:	4937      	ldr	r1, [pc, #220]	@ (80028e4 <HAL_GPIO_DeInit+0x198>)
 8002806:	4013      	ands	r3, r2
 8002808:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	2207      	movs	r2, #7
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800281a:	4a2f      	ldr	r2, [pc, #188]	@ (80028d8 <HAL_GPIO_DeInit+0x18c>)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	089b      	lsrs	r3, r3, #2
 8002820:	3302      	adds	r3, #2
 8002822:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	43da      	mvns	r2, r3
 800282a:	482b      	ldr	r0, [pc, #172]	@ (80028d8 <HAL_GPIO_DeInit+0x18c>)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	089b      	lsrs	r3, r3, #2
 8002830:	400a      	ands	r2, r1
 8002832:	3302      	adds	r3, #2
 8002834:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	2103      	movs	r1, #3
 8002842:	fa01 f303 	lsl.w	r3, r1, r3
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	08da      	lsrs	r2, r3, #3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3208      	adds	r2, #8
 8002854:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	220f      	movs	r2, #15
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	08d2      	lsrs	r2, r2, #3
 800286c:	4019      	ands	r1, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3208      	adds	r2, #8
 8002872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	2103      	movs	r1, #3
 8002880:	fa01 f303 	lsl.w	r3, r1, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	401a      	ands	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	2101      	movs	r1, #1
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	fa01 f303 	lsl.w	r3, r1, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	401a      	ands	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	2103      	movs	r1, #3
 80028aa:	fa01 f303 	lsl.w	r3, r1, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	401a      	ands	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	60da      	str	r2, [r3, #12]
    }

    position++;
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	3301      	adds	r3, #1
 80028ba:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f47f af49 	bne.w	800275c <HAL_GPIO_DeInit+0x10>
  }
}
 80028ca:	bf00      	nop
 80028cc:	bf00      	nop
 80028ce:	371c      	adds	r7, #28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40010000 	.word	0x40010000
 80028dc:	48000400 	.word	0x48000400
 80028e0:	48000800 	.word	0x48000800
 80028e4:	58000800 	.word	0x58000800

080028e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	807b      	strh	r3, [r7, #2]
 80028f4:	4613      	mov	r3, r2
 80028f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028f8:	787b      	ldrb	r3, [r7, #1]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028fe:	887a      	ldrh	r2, [r7, #2]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002904:	e002      	b.n	800290c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002906:	887a      	ldrh	r2, [r7, #2]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr

08002916 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e081      	b.n	8002a2c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d106      	bne.n	8002942 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7fd fe87 	bl	8000650 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2224      	movs	r2, #36	@ 0x24
 8002946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0201 	bic.w	r2, r2, #1
 8002958:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002966:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002976:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d107      	bne.n	8002990 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800298c:	609a      	str	r2, [r3, #8]
 800298e:	e006      	b.n	800299e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800299c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d104      	bne.n	80029b0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029ae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6812      	ldr	r2, [r2, #0]
 80029ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029c2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029d2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69d9      	ldr	r1, [r3, #28]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1a      	ldr	r2, [r3, #32]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0201 	orr.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af02      	add	r7, sp, #8
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	460b      	mov	r3, r1
 8002a42:	817b      	strh	r3, [r7, #10]
 8002a44:	4613      	mov	r3, r2
 8002a46:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	d153      	bne.n	8002afc <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a62:	d101      	bne.n	8002a68 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8002a64:	2302      	movs	r3, #2
 8002a66:	e04a      	b.n	8002afe <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d101      	bne.n	8002a76 <HAL_I2C_Master_Transmit_IT+0x42>
 8002a72:	2302      	movs	r3, #2
 8002a74:	e043      	b.n	8002afe <HAL_I2C_Master_Transmit_IT+0xca>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2221      	movs	r2, #33	@ 0x21
 8002a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2210      	movs	r2, #16
 8002a8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	893a      	ldrh	r2, [r7, #8]
 8002a9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4a19      	ldr	r2, [pc, #100]	@ (8002b08 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8002aa4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4a18      	ldr	r2, [pc, #96]	@ (8002b0c <HAL_I2C_Master_Transmit_IT+0xd8>)
 8002aaa:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2bff      	cmp	r3, #255	@ 0xff
 8002ab4:	d906      	bls.n	8002ac4 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	22ff      	movs	r2, #255	@ 0xff
 8002aba:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002abc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	e007      	b.n	8002ad4 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002ace:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ad2:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	8979      	ldrh	r1, [r7, #10]
 8002adc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b10 <HAL_I2C_Master_Transmit_IT+0xdc>)
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f001 f994 	bl	8003e10 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002af0:	2101      	movs	r1, #1
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f001 f9bc 	bl	8003e70 <I2C_Enable_IRQ>

    return HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	e000      	b.n	8002afe <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002afc:	2302      	movs	r3, #2
  }
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	ffff0000 	.word	0xffff0000
 8002b0c:	08002d77 	.word	0x08002d77
 8002b10:	80002000 	.word	0x80002000

08002b14 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	607a      	str	r2, [r7, #4]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	460b      	mov	r3, r1
 8002b22:	817b      	strh	r3, [r7, #10]
 8002b24:	4613      	mov	r3, r2
 8002b26:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b20      	cmp	r3, #32
 8002b32:	d153      	bne.n	8002bdc <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b42:	d101      	bne.n	8002b48 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8002b44:	2302      	movs	r3, #2
 8002b46:	e04a      	b.n	8002bde <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_I2C_Master_Receive_IT+0x42>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e043      	b.n	8002bde <HAL_I2C_Master_Receive_IT+0xca>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2222      	movs	r2, #34	@ 0x22
 8002b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2210      	movs	r2, #16
 8002b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	893a      	ldrh	r2, [r7, #8]
 8002b7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4a19      	ldr	r2, [pc, #100]	@ (8002be8 <HAL_I2C_Master_Receive_IT+0xd4>)
 8002b84:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4a18      	ldr	r2, [pc, #96]	@ (8002bec <HAL_I2C_Master_Receive_IT+0xd8>)
 8002b8a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2bff      	cmp	r3, #255	@ 0xff
 8002b94:	d906      	bls.n	8002ba4 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	22ff      	movs	r2, #255	@ 0xff
 8002b9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002b9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	e007      	b.n	8002bb4 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002bae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bb2:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	8979      	ldrh	r1, [r7, #10]
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf0 <HAL_I2C_Master_Receive_IT+0xdc>)
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f001 f924 	bl	8003e10 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002bd0:	2102      	movs	r1, #2
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f001 f94c 	bl	8003e70 <I2C_Enable_IRQ>

    return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e000      	b.n	8002bde <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002bdc:	2302      	movs	r3, #2
  }
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	ffff0000 	.word	0xffff0000
 8002bec:	08002d77 	.word	0x08002d77
 8002bf0:	80002400 	.word	0x80002400

08002bf4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	68f9      	ldr	r1, [r7, #12]
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	4798      	blx	r3
  }
}
 8002c20:	bf00      	nop
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00f      	beq.n	8002c6a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c58:	f043 0201 	orr.w	r2, r3, #1
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c68:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00f      	beq.n	8002c94 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00a      	beq.n	8002c94 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c82:	f043 0208 	orr.w	r2, r3, #8
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c92:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00f      	beq.n	8002cbe <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00a      	beq.n	8002cbe <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cac:	f043 0202 	orr.w	r2, r3, #2
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cbc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f003 030b 	and.w	r3, r3, #11
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002cce:	68f9      	ldr	r1, [r7, #12]
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 ff65 	bl	8003ba0 <I2C_ITError>
  }
}
 8002cd6:	bf00      	nop
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr

08002d02 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	70fb      	strb	r3, [r7, #3]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr

08002d40 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr

08002d76 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b088      	sub	sp, #32
 8002d7a:	af02      	add	r7, sp, #8
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <I2C_Master_ISR_IT+0x1e>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e108      	b.n	8002fa6 <I2C_Master_ISR_IT+0x230>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d012      	beq.n	8002dcc <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00d      	beq.n	8002dcc <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2210      	movs	r2, #16
 8002db6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbc:	f043 0204 	orr.w	r2, r3, #4
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 ffe2 	bl	8003d8e <I2C_Flush_TXDR>
 8002dca:	e0d9      	b.n	8002f80 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d022      	beq.n	8002e1c <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d01d      	beq.n	8002e1c <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f023 0304 	bic.w	r3, r3, #4
 8002de6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfa:	1c5a      	adds	r2, r3, #1
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e1a:	e0b1      	b.n	8002f80 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d01d      	beq.n	8002e62 <I2C_Master_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d018      	beq.n	8002e62 <I2C_Master_ISR_IT+0xec>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e34:	781a      	ldrb	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e60:	e08e      	b.n	8002f80 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d05c      	beq.n	8002f26 <I2C_Master_ISR_IT+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d057      	beq.n	8002f26 <I2C_Master_ISR_IT+0x1b0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d040      	beq.n	8002f02 <I2C_Master_ISR_IT+0x18c>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d13c      	bne.n	8002f02 <I2C_Master_ISR_IT+0x18c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e94:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2bff      	cmp	r3, #255	@ 0xff
 8002e9e:	d90e      	bls.n	8002ebe <I2C_Master_ISR_IT+0x148>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	22ff      	movs	r2, #255	@ 0xff
 8002ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	8a79      	ldrh	r1, [r7, #18]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 ffaa 	bl	8003e10 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ebc:	e032      	b.n	8002f24 <I2C_Master_ISR_IT+0x1ae>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ecc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ed0:	d00b      	beq.n	8002eea <I2C_Master_ISR_IT+0x174>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed6:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002edc:	8a79      	ldrh	r1, [r7, #18]
 8002ede:	2000      	movs	r0, #0
 8002ee0:	9000      	str	r0, [sp, #0]
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 ff94 	bl	8003e10 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ee8:	e01c      	b.n	8002f24 <I2C_Master_ISR_IT+0x1ae>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	8a79      	ldrh	r1, [r7, #18]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 ff88 	bl	8003e10 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f00:	e010      	b.n	8002f24 <I2C_Master_ISR_IT+0x1ae>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f10:	d003      	beq.n	8002f1a <I2C_Master_ISR_IT+0x1a4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 fb88 	bl	8003628 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f18:	e032      	b.n	8002f80 <I2C_Master_ISR_IT+0x20a>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002f1a:	2140      	movs	r1, #64	@ 0x40
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 fe3f 	bl	8003ba0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f22:	e02d      	b.n	8002f80 <I2C_Master_ISR_IT+0x20a>
 8002f24:	e02c      	b.n	8002f80 <I2C_Master_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d027      	beq.n	8002f80 <I2C_Master_ISR_IT+0x20a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d022      	beq.n	8002f80 <I2C_Master_ISR_IT+0x20a>
  {
    if (hi2c->XferCount == 0U)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d119      	bne.n	8002f78 <I2C_Master_ISR_IT+0x202>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f52:	d015      	beq.n	8002f80 <I2C_Master_ISR_IT+0x20a>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f5c:	d108      	bne.n	8002f70 <I2C_Master_ISR_IT+0x1fa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f6c:	605a      	str	r2, [r3, #4]
 8002f6e:	e007      	b.n	8002f80 <I2C_Master_ISR_IT+0x20a>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 fb59 	bl	8003628 <I2C_ITMasterSeqCplt>
 8002f76:	e003      	b.n	8002f80 <I2C_Master_ISR_IT+0x20a>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002f78:	2140      	movs	r1, #64	@ 0x40
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 fe10 	bl	8003ba0 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f003 0320 	and.w	r3, r3, #32
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d008      	beq.n	8002f9c <I2C_Master_ISR_IT+0x226>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <I2C_Master_ISR_IT+0x226>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002f94:	6979      	ldr	r1, [r7, #20]
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 fbe0 	bl	800375c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b086      	sub	sp, #24
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	60f8      	str	r0, [r7, #12]
 8002fb6:	60b9      	str	r1, [r7, #8]
 8002fb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <I2C_Slave_ISR_IT+0x24>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e0e1      	b.n	8003196 <I2C_Slave_ISR_IT+0x1e8>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f003 0320 	and.w	r3, r3, #32
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002fee:	6939      	ldr	r1, [r7, #16]
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 fc7b 	bl	80038ec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d04b      	beq.n	8003098 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003006:	2b00      	cmp	r3, #0
 8003008:	d046      	beq.n	8003098 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800300e:	b29b      	uxth	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d128      	bne.n	8003066 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b28      	cmp	r3, #40	@ 0x28
 800301e:	d108      	bne.n	8003032 <I2C_Slave_ISR_IT+0x84>
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003026:	d104      	bne.n	8003032 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003028:	6939      	ldr	r1, [r7, #16]
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 fd64 	bl	8003af8 <I2C_ITListenCplt>
 8003030:	e031      	b.n	8003096 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b29      	cmp	r3, #41	@ 0x29
 800303c:	d10e      	bne.n	800305c <I2C_Slave_ISR_IT+0xae>
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003044:	d00a      	beq.n	800305c <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2210      	movs	r2, #16
 800304c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 fe9d 	bl	8003d8e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 fb24 	bl	80036a2 <I2C_ITSlaveSeqCplt>
 800305a:	e01c      	b.n	8003096 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2210      	movs	r2, #16
 8003062:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003064:	e08f      	b.n	8003186 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2210      	movs	r2, #16
 800306c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003072:	f043 0204 	orr.w	r2, r3, #4
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <I2C_Slave_ISR_IT+0xda>
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003086:	d17e      	bne.n	8003186 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308c:	4619      	mov	r1, r3
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 fd86 	bl	8003ba0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003094:	e077      	b.n	8003186 <I2C_Slave_ISR_IT+0x1d8>
 8003096:	e076      	b.n	8003186 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d02f      	beq.n	8003102 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d02a      	beq.n	8003102 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d018      	beq.n	80030e8 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030de:	b29b      	uxth	r3, r3
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d14b      	bne.n	800318a <I2C_Slave_ISR_IT+0x1dc>
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030f8:	d047      	beq.n	800318a <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 fad1 	bl	80036a2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003100:	e043      	b.n	800318a <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d009      	beq.n	8003120 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003112:	2b00      	cmp	r3, #0
 8003114:	d004      	beq.n	8003120 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003116:	6939      	ldr	r1, [r7, #16]
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 fa01 	bl	8003520 <I2C_ITAddrCplt>
 800311e:	e035      	b.n	800318c <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d030      	beq.n	800318c <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003130:	2b00      	cmp	r3, #0
 8003132:	d02b      	beq.n	800318c <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d018      	beq.n	8003170 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003142:	781a      	ldrb	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003158:	b29b      	uxth	r3, r3
 800315a:	3b01      	subs	r3, #1
 800315c:	b29a      	uxth	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800316e:	e00d      	b.n	800318c <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003176:	d002      	beq.n	800317e <I2C_Slave_ISR_IT+0x1d0>
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 fa8f 	bl	80036a2 <I2C_ITSlaveSeqCplt>
 8003184:	e002      	b.n	800318c <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8003186:	bf00      	nop
 8003188:	e000      	b.n	800318c <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 800318a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b088      	sub	sp, #32
 80031a2:	af02      	add	r7, sp, #8
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <I2C_Master_ISR_DMA+0x1a>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e0d9      	b.n	800336c <I2C_Master_ISR_DMA+0x1ce>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f003 0310 	and.w	r3, r3, #16
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d016      	beq.n	80031f8 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d011      	beq.n	80031f8 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2210      	movs	r2, #16
 80031da:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e0:	f043 0204 	orr.w	r2, r3, #4
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80031e8:	2120      	movs	r1, #32
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 fe40 	bl	8003e70 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 fdcc 	bl	8003d8e <I2C_Flush_TXDR>
 80031f6:	e0b4      	b.n	8003362 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d071      	beq.n	80032e6 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003208:	2b00      	cmp	r3, #0
 800320a:	d06c      	beq.n	80032e6 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800321a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d04e      	beq.n	80032c4 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	b29b      	uxth	r3, r3
 800322e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003232:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	2bff      	cmp	r3, #255	@ 0xff
 800323c:	d906      	bls.n	800324c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	22ff      	movs	r2, #255	@ 0xff
 8003242:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8003244:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	e010      	b.n	800326e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800325e:	d003      	beq.n	8003268 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003264:	617b      	str	r3, [r7, #20]
 8003266:	e002      	b.n	800326e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003268:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800326c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003272:	b2da      	uxtb	r2, r3
 8003274:	8a79      	ldrh	r1, [r7, #18]
 8003276:	2300      	movs	r3, #0
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 fdc7 	bl	8003e10 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	b29a      	uxth	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b22      	cmp	r3, #34	@ 0x22
 800329e:	d108      	bne.n	80032b2 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032ae:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80032b0:	e057      	b.n	8003362 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032c0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80032c2:	e04e      	b.n	8003362 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032d2:	d003      	beq.n	80032dc <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 f9a7 	bl	8003628 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80032da:	e042      	b.n	8003362 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80032dc:	2140      	movs	r1, #64	@ 0x40
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 fc5e 	bl	8003ba0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80032e4:	e03d      	b.n	8003362 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d028      	beq.n	8003342 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d023      	beq.n	8003342 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d119      	bne.n	8003338 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800330e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003312:	d025      	beq.n	8003360 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003318:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800331c:	d108      	bne.n	8003330 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800332c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800332e:	e017      	b.n	8003360 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 f979 	bl	8003628 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003336:	e013      	b.n	8003360 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003338:	2140      	movs	r1, #64	@ 0x40
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 fc30 	bl	8003ba0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003340:	e00e      	b.n	8003360 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	f003 0320 	and.w	r3, r3, #32
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003352:	2b00      	cmp	r3, #0
 8003354:	d005      	beq.n	8003362 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003356:	68b9      	ldr	r1, [r7, #8]
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f9ff 	bl	800375c <I2C_ITMasterCplt>
 800335e:	e000      	b.n	8003362 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8003360:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003384:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <I2C_Slave_ISR_DMA+0x24>
 8003394:	2302      	movs	r3, #2
 8003396:	e0bf      	b.n	8003518 <I2C_Slave_ISR_DMA+0x1a4>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d008      	beq.n	80033bc <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 fa98 	bl	80038ec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 8095 	beq.w	80034f2 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 808f 	beq.w	80034f2 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d104      	bne.n	80033e8 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d07d      	beq.n	80034e4 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00c      	beq.n	800340a <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8003406:	2301      	movs	r3, #1
 8003408:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00c      	beq.n	800342c <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d007      	beq.n	800342c <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8003428:	2301      	movs	r3, #1
 800342a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d128      	bne.n	8003484 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b28      	cmp	r3, #40	@ 0x28
 800343c:	d108      	bne.n	8003450 <I2C_Slave_ISR_DMA+0xdc>
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003444:	d104      	bne.n	8003450 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003446:	68b9      	ldr	r1, [r7, #8]
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 fb55 	bl	8003af8 <I2C_ITListenCplt>
 800344e:	e048      	b.n	80034e2 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b29      	cmp	r3, #41	@ 0x29
 800345a:	d10e      	bne.n	800347a <I2C_Slave_ISR_DMA+0x106>
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003462:	d00a      	beq.n	800347a <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2210      	movs	r2, #16
 800346a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 fc8e 	bl	8003d8e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f915 	bl	80036a2 <I2C_ITSlaveSeqCplt>
 8003478:	e033      	b.n	80034e2 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2210      	movs	r2, #16
 8003480:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003482:	e034      	b.n	80034ee <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2210      	movs	r2, #16
 800348a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003490:	f043 0204 	orr.w	r2, r3, #4
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800349e:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <I2C_Slave_ISR_DMA+0x13a>
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034ac:	d11f      	bne.n	80034ee <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034ae:	7dfb      	ldrb	r3, [r7, #23]
 80034b0:	2b21      	cmp	r3, #33	@ 0x21
 80034b2:	d002      	beq.n	80034ba <I2C_Slave_ISR_DMA+0x146>
 80034b4:	7dfb      	ldrb	r3, [r7, #23]
 80034b6:	2b29      	cmp	r3, #41	@ 0x29
 80034b8:	d103      	bne.n	80034c2 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2221      	movs	r2, #33	@ 0x21
 80034be:	631a      	str	r2, [r3, #48]	@ 0x30
 80034c0:	e008      	b.n	80034d4 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80034c2:	7dfb      	ldrb	r3, [r7, #23]
 80034c4:	2b22      	cmp	r3, #34	@ 0x22
 80034c6:	d002      	beq.n	80034ce <I2C_Slave_ISR_DMA+0x15a>
 80034c8:	7dfb      	ldrb	r3, [r7, #23]
 80034ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80034cc:	d102      	bne.n	80034d4 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2222      	movs	r2, #34	@ 0x22
 80034d2:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d8:	4619      	mov	r1, r3
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 fb60 	bl	8003ba0 <I2C_ITError>
      if (treatdmanack == 1U)
 80034e0:	e005      	b.n	80034ee <I2C_Slave_ISR_DMA+0x17a>
 80034e2:	e004      	b.n	80034ee <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2210      	movs	r2, #16
 80034ea:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80034ec:	e00f      	b.n	800350e <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 80034ee:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80034f0:	e00d      	b.n	800350e <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d008      	beq.n	800350e <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003506:	68b9      	ldr	r1, [r7, #8]
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 f809 	bl	8003520 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3720      	adds	r7, #32
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003530:	b2db      	uxtb	r3, r3
 8003532:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003536:	2b28      	cmp	r3, #40	@ 0x28
 8003538:	d16a      	bne.n	8003610 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	0c1b      	lsrs	r3, r3, #16
 8003542:	b2db      	uxtb	r3, r3
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	0c1b      	lsrs	r3, r3, #16
 8003552:	b29b      	uxth	r3, r3
 8003554:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003558:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	b29b      	uxth	r3, r3
 8003562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003566:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	b29b      	uxth	r3, r3
 8003570:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003574:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d138      	bne.n	80035f0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800357e:	897b      	ldrh	r3, [r7, #10]
 8003580:	09db      	lsrs	r3, r3, #7
 8003582:	b29a      	uxth	r2, r3
 8003584:	89bb      	ldrh	r3, [r7, #12]
 8003586:	4053      	eors	r3, r2
 8003588:	b29b      	uxth	r3, r3
 800358a:	f003 0306 	and.w	r3, r3, #6
 800358e:	2b00      	cmp	r3, #0
 8003590:	d11c      	bne.n	80035cc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003592:	897b      	ldrh	r3, [r7, #10]
 8003594:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d13b      	bne.n	8003620 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2208      	movs	r2, #8
 80035b4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80035be:	89ba      	ldrh	r2, [r7, #12]
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
 80035c2:	4619      	mov	r1, r3
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff fb9c 	bl	8002d02 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80035ca:	e029      	b.n	8003620 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80035cc:	893b      	ldrh	r3, [r7, #8]
 80035ce:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80035d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fcb5 	bl	8003f44 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80035e2:	89ba      	ldrh	r2, [r7, #12]
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	4619      	mov	r1, r3
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff fb8a 	bl	8002d02 <HAL_I2C_AddrCallback>
}
 80035ee:	e017      	b.n	8003620 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80035f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 fca5 	bl	8003f44 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003602:	89ba      	ldrh	r2, [r7, #12]
 8003604:	7bfb      	ldrb	r3, [r7, #15]
 8003606:	4619      	mov	r1, r3
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7ff fb7a 	bl	8002d02 <HAL_I2C_AddrCallback>
}
 800360e:	e007      	b.n	8003620 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2208      	movs	r2, #8
 8003616:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003620:	bf00      	nop
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b21      	cmp	r3, #33	@ 0x21
 8003642:	d115      	bne.n	8003670 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2211      	movs	r2, #17
 8003650:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003658:	2101      	movs	r1, #1
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 fc72 	bl	8003f44 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7fd f885 	bl	8000778 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800366e:	e014      	b.n	800369a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2212      	movs	r2, #18
 800367c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003684:	2102      	movs	r1, #2
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fc5c 	bl	8003f44 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f7fd f85d 	bl	8000754 <HAL_I2C_MasterRxCpltCallback>
}
 800369a:	bf00      	nop
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d008      	beq.n	80036d6 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	e00c      	b.n	80036f0 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d007      	beq.n	80036f0 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036ee:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b29      	cmp	r3, #41	@ 0x29
 80036fa:	d112      	bne.n	8003722 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2228      	movs	r2, #40	@ 0x28
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2221      	movs	r2, #33	@ 0x21
 8003708:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800370a:	2101      	movs	r1, #1
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 fc19 	bl	8003f44 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff fadf 	bl	8002cde <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003720:	e017      	b.n	8003752 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b2a      	cmp	r3, #42	@ 0x2a
 800372c:	d111      	bne.n	8003752 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2228      	movs	r2, #40	@ 0x28
 8003732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2222      	movs	r2, #34	@ 0x22
 800373a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800373c:	2102      	movs	r1, #2
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fc00 	bl	8003f44 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff facf 	bl	8002cf0 <HAL_I2C_SlaveRxCpltCallback>
}
 8003752:	bf00      	nop
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2220      	movs	r2, #32
 8003770:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b21      	cmp	r3, #33	@ 0x21
 800377c:	d107      	bne.n	800378e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800377e:	2101      	movs	r1, #1
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 fbdf 	bl	8003f44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2211      	movs	r2, #17
 800378a:	631a      	str	r2, [r3, #48]	@ 0x30
 800378c:	e00c      	b.n	80037a8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b22      	cmp	r3, #34	@ 0x22
 8003798:	d106      	bne.n	80037a8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800379a:	2102      	movs	r1, #2
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 fbd1 	bl	8003f44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2212      	movs	r2, #18
 80037a6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6859      	ldr	r1, [r3, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	4b4c      	ldr	r3, [pc, #304]	@ (80038e4 <I2C_ITMasterCplt+0x188>)
 80037b4:	400b      	ands	r3, r1
 80037b6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a49      	ldr	r2, [pc, #292]	@ (80038e8 <I2C_ITMasterCplt+0x18c>)
 80037c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f003 0310 	and.w	r3, r3, #16
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d009      	beq.n	80037e2 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2210      	movs	r2, #16
 80037d4:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037da:	f043 0204 	orr.w	r2, r3, #4
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b60      	cmp	r3, #96	@ 0x60
 80037ec:	d10a      	bne.n	8003804 <I2C_ITMasterCplt+0xa8>
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003802:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fac2 	bl	8003d8e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b60      	cmp	r3, #96	@ 0x60
 800381a:	d002      	beq.n	8003822 <I2C_ITMasterCplt+0xc6>
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d006      	beq.n	8003830 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003826:	4619      	mov	r1, r3
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f9b9 	bl	8003ba0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800382e:	e054      	b.n	80038da <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b21      	cmp	r3, #33	@ 0x21
 800383a:	d124      	bne.n	8003886 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b40      	cmp	r3, #64	@ 0x40
 8003854:	d10b      	bne.n	800386e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7ff fa61 	bl	8002d2e <HAL_I2C_MemTxCpltCallback>
}
 800386c:	e035      	b.n	80038da <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7fc ff7a 	bl	8000778 <HAL_I2C_MasterTxCpltCallback>
}
 8003884:	e029      	b.n	80038da <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b22      	cmp	r3, #34	@ 0x22
 8003890:	d123      	bne.n	80038da <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b40      	cmp	r3, #64	@ 0x40
 80038aa:	d10b      	bne.n	80038c4 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff fa3f 	bl	8002d40 <HAL_I2C_MemRxCpltCallback>
}
 80038c2:	e00a      	b.n	80038da <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7fc ff3d 	bl	8000754 <HAL_I2C_MasterRxCpltCallback>
}
 80038da:	bf00      	nop
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	fe00e800 	.word	0xfe00e800
 80038e8:	ffff0000 	.word	0xffff0000

080038ec <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003908:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2220      	movs	r2, #32
 8003910:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	2b21      	cmp	r3, #33	@ 0x21
 8003916:	d002      	beq.n	800391e <I2C_ITSlaveCplt+0x32>
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	2b29      	cmp	r3, #41	@ 0x29
 800391c:	d108      	bne.n	8003930 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800391e:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fb0e 	bl	8003f44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2221      	movs	r2, #33	@ 0x21
 800392c:	631a      	str	r2, [r3, #48]	@ 0x30
 800392e:	e00d      	b.n	800394c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	2b22      	cmp	r3, #34	@ 0x22
 8003934:	d002      	beq.n	800393c <I2C_ITSlaveCplt+0x50>
 8003936:	7bfb      	ldrb	r3, [r7, #15]
 8003938:	2b2a      	cmp	r3, #42	@ 0x2a
 800393a:	d107      	bne.n	800394c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800393c:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 faff 	bl	8003f44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2222      	movs	r2, #34	@ 0x22
 800394a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800395a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6859      	ldr	r1, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	4b62      	ldr	r3, [pc, #392]	@ (8003af0 <I2C_ITSlaveCplt+0x204>)
 8003968:	400b      	ands	r3, r1
 800396a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 fa0e 	bl	8003d8e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d013      	beq.n	80039a4 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800398a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003990:	2b00      	cmp	r3, #0
 8003992:	d01f      	beq.n	80039d4 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	b29a      	uxth	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039a2:	e017      	b.n	80039d4 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d012      	beq.n	80039d4 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039bc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d006      	beq.n	80039d4 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d020      	beq.n	8003a20 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f023 0304 	bic.w	r3, r3, #4
 80039e4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00c      	beq.n	8003a20 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d005      	beq.n	8003a36 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a2e:	f043 0204 	orr.w	r2, r3, #4
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d010      	beq.n	8003a6e <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a50:	4619      	mov	r1, r3
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f8a4 	bl	8003ba0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b28      	cmp	r3, #40	@ 0x28
 8003a62:	d141      	bne.n	8003ae8 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003a64:	6979      	ldr	r1, [r7, #20]
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f846 	bl	8003af8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a6c:	e03c      	b.n	8003ae8 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a72:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a76:	d014      	beq.n	8003aa2 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff fe12 	bl	80036a2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a1c      	ldr	r2, [pc, #112]	@ (8003af4 <I2C_ITSlaveCplt+0x208>)
 8003a82:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff f93e 	bl	8002d1c <HAL_I2C_ListenCpltCallback>
}
 8003aa0:	e022      	b.n	8003ae8 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b22      	cmp	r3, #34	@ 0x22
 8003aac:	d10e      	bne.n	8003acc <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff f913 	bl	8002cf0 <HAL_I2C_SlaveRxCpltCallback>
}
 8003aca:	e00d      	b.n	8003ae8 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff f8fb 	bl	8002cde <HAL_I2C_SlaveTxCpltCallback>
}
 8003ae8:	bf00      	nop
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	fe00e800 	.word	0xfe00e800
 8003af4:	ffff0000 	.word	0xffff0000

08003af8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a25      	ldr	r2, [pc, #148]	@ (8003b9c <I2C_ITListenCplt+0xa4>)
 8003b06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d022      	beq.n	8003b74 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d012      	beq.n	8003b74 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6c:	f043 0204 	orr.w	r2, r3, #4
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b74:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f9e3 	bl	8003f44 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2210      	movs	r2, #16
 8003b84:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff f8c4 	bl	8002d1c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003b94:	bf00      	nop
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	ffff0000 	.word	0xffff0000

08003ba0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a5d      	ldr	r2, [pc, #372]	@ (8003d34 <I2C_ITError+0x194>)
 8003bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	2b28      	cmp	r3, #40	@ 0x28
 8003bd6:	d005      	beq.n	8003be4 <I2C_ITError+0x44>
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	2b29      	cmp	r3, #41	@ 0x29
 8003bdc:	d002      	beq.n	8003be4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003be2:	d10b      	bne.n	8003bfc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003be4:	2103      	movs	r1, #3
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f9ac 	bl	8003f44 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2228      	movs	r2, #40	@ 0x28
 8003bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a50      	ldr	r2, [pc, #320]	@ (8003d38 <I2C_ITError+0x198>)
 8003bf8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003bfa:	e011      	b.n	8003c20 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003bfc:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f99f 	bl	8003f44 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b60      	cmp	r3, #96	@ 0x60
 8003c10:	d003      	beq.n	8003c1a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    }
    hi2c->XferISR       = NULL;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c24:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d039      	beq.n	8003ca2 <I2C_ITError+0x102>
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b11      	cmp	r3, #17
 8003c32:	d002      	beq.n	8003c3a <I2C_ITError+0x9a>
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b21      	cmp	r3, #33	@ 0x21
 8003c38:	d133      	bne.n	8003ca2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c48:	d107      	bne.n	8003c5a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003c58:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fe fb5e 	bl	8002320 <HAL_DMA_GetState>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d017      	beq.n	8003c9a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c6e:	4a33      	ldr	r2, [pc, #204]	@ (8003d3c <I2C_ITError+0x19c>)
 8003c70:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fe fa28 	bl	80020d4 <HAL_DMA_Abort_IT>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d04d      	beq.n	8003d26 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c94:	4610      	mov	r0, r2
 8003c96:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c98:	e045      	b.n	8003d26 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f850 	bl	8003d40 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ca0:	e041      	b.n	8003d26 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d039      	beq.n	8003d1e <I2C_ITError+0x17e>
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b12      	cmp	r3, #18
 8003cae:	d002      	beq.n	8003cb6 <I2C_ITError+0x116>
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2b22      	cmp	r3, #34	@ 0x22
 8003cb4:	d133      	bne.n	8003d1e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cc4:	d107      	bne.n	8003cd6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cd4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe fb20 	bl	8002320 <HAL_DMA_GetState>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d017      	beq.n	8003d16 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cea:	4a14      	ldr	r2, [pc, #80]	@ (8003d3c <I2C_ITError+0x19c>)
 8003cec:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fe f9ea 	bl	80020d4 <HAL_DMA_Abort_IT>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d011      	beq.n	8003d2a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d10:	4610      	mov	r0, r2
 8003d12:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d14:	e009      	b.n	8003d2a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f812 	bl	8003d40 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d1c:	e005      	b.n	8003d2a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f80e 	bl	8003d40 <I2C_TreatErrorCallback>
  }
}
 8003d24:	e002      	b.n	8003d2c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d26:	bf00      	nop
 8003d28:	e000      	b.n	8003d2c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d2a:	bf00      	nop
}
 8003d2c:	bf00      	nop
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	ffff0000 	.word	0xffff0000
 8003d38:	08002faf 	.word	0x08002faf
 8003d3c:	08003dd5 	.word	0x08003dd5

08003d40 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b60      	cmp	r3, #96	@ 0x60
 8003d52:	d10e      	bne.n	8003d72 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fe fffa 	bl	8002d64 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d70:	e009      	b.n	8003d86 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7fe ffe6 	bl	8002d52 <HAL_I2C_ErrorCallback>
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d103      	bne.n	8003dac <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2200      	movs	r2, #0
 8003daa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d007      	beq.n	8003dca <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699a      	ldr	r2, [r3, #24]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0201 	orr.w	r2, r2, #1
 8003dc8:	619a      	str	r2, [r3, #24]
  }
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr

08003dd4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de0:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dee:	2200      	movs	r2, #0
 8003df0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dfe:	2200      	movs	r2, #0
 8003e00:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f7ff ff9c 	bl	8003d40 <I2C_TreatErrorCallback>
}
 8003e08:	bf00      	nop
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	607b      	str	r3, [r7, #4]
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	817b      	strh	r3, [r7, #10]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e22:	897b      	ldrh	r3, [r7, #10]
 8003e24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e28:	7a7b      	ldrb	r3, [r7, #9]
 8003e2a:	041b      	lsls	r3, r3, #16
 8003e2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e30:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e3e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	0d5b      	lsrs	r3, r3, #21
 8003e4a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003e4e:	4b07      	ldr	r3, [pc, #28]	@ (8003e6c <I2C_TransferConfig+0x5c>)
 8003e50:	430b      	orrs	r3, r1
 8003e52:	43db      	mvns	r3, r3
 8003e54:	ea02 0103 	and.w	r1, r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr
 8003e6c:	03ff63ff 	.word	0x03ff63ff

08003e70 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e84:	4a2d      	ldr	r2, [pc, #180]	@ (8003f3c <I2C_Enable_IRQ+0xcc>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d004      	beq.n	8003e94 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003e8e:	4a2c      	ldr	r2, [pc, #176]	@ (8003f40 <I2C_Enable_IRQ+0xd0>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d11d      	bne.n	8003ed0 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003e94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	da03      	bge.n	8003ea4 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003ea2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003ea4:	887b      	ldrh	r3, [r7, #2]
 8003ea6:	2b10      	cmp	r3, #16
 8003ea8:	d103      	bne.n	8003eb2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003eb0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003eb2:	887b      	ldrh	r3, [r7, #2]
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d103      	bne.n	8003ec0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003ebe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003ec0:	887b      	ldrh	r3, [r7, #2]
 8003ec2:	2b40      	cmp	r3, #64	@ 0x40
 8003ec4:	d12c      	bne.n	8003f20 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ecc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003ece:	e027      	b.n	8003f20 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003ed0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	da03      	bge.n	8003ee0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003ede:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003ee0:	887b      	ldrh	r3, [r7, #2]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003ef0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003ef2:	887b      	ldrh	r3, [r7, #2]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003f02:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003f04:	887b      	ldrh	r3, [r7, #2]
 8003f06:	2b10      	cmp	r3, #16
 8003f08:	d103      	bne.n	8003f12 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003f10:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003f12:	887b      	ldrh	r3, [r7, #2]
 8003f14:	2b20      	cmp	r3, #32
 8003f16:	d103      	bne.n	8003f20 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f043 0320 	orr.w	r3, r3, #32
 8003f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6819      	ldr	r1, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	601a      	str	r2, [r3, #0]
}
 8003f30:	bf00      	nop
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bc80      	pop	{r7}
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	0800319f 	.word	0x0800319f
 8003f40:	08003375 	.word	0x08003375

08003f44 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003f54:	887b      	ldrh	r3, [r7, #2]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00f      	beq.n	8003f7e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003f64:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003f72:	2b28      	cmp	r3, #40	@ 0x28
 8003f74:	d003      	beq.n	8003f7e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003f7c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003f7e:	887b      	ldrh	r3, [r7, #2]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00f      	beq.n	8003fa8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003f8e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003f9c:	2b28      	cmp	r3, #40	@ 0x28
 8003f9e:	d003      	beq.n	8003fa8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003fa6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003fa8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	da03      	bge.n	8003fb8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003fb6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003fb8:	887b      	ldrh	r3, [r7, #2]
 8003fba:	2b10      	cmp	r3, #16
 8003fbc:	d103      	bne.n	8003fc6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003fc4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003fc6:	887b      	ldrh	r3, [r7, #2]
 8003fc8:	2b20      	cmp	r3, #32
 8003fca:	d103      	bne.n	8003fd4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f043 0320 	orr.w	r3, r3, #32
 8003fd2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003fd4:	887b      	ldrh	r3, [r7, #2]
 8003fd6:	2b40      	cmp	r3, #64	@ 0x40
 8003fd8:	d103      	bne.n	8003fe2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fe0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6819      	ldr	r1, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	43da      	mvns	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	400a      	ands	r2, r1
 8003ff2:	601a      	str	r2, [r3, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bc80      	pop	{r7}
 8003ffc:	4770      	bx	lr

08003ffe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b20      	cmp	r3, #32
 8004012:	d138      	bne.n	8004086 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800401e:	2302      	movs	r3, #2
 8004020:	e032      	b.n	8004088 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2224      	movs	r2, #36	@ 0x24
 800402e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0201 	bic.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004050:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6819      	ldr	r1, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f042 0201 	orr.w	r2, r2, #1
 8004070:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	e000      	b.n	8004088 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004086:	2302      	movs	r3, #2
  }
}
 8004088:	4618      	mov	r0, r3
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	bc80      	pop	{r7}
 8004090:	4770      	bx	lr

08004092 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004092:	b480      	push	{r7}
 8004094:	b085      	sub	sp, #20
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b20      	cmp	r3, #32
 80040a6:	d139      	bne.n	800411c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e033      	b.n	800411e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2224      	movs	r2, #36	@ 0x24
 80040c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0201 	bic.w	r2, r2, #1
 80040d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80040e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	021b      	lsls	r3, r3, #8
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0201 	orr.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	e000      	b.n	800411e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800411c:	2302      	movs	r3, #2
  }
}
 800411e:	4618      	mov	r0, r3
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr

08004128 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800412c:	4b04      	ldr	r3, [pc, #16]	@ (8004140 <HAL_PWR_EnableBkUpAccess+0x18>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a03      	ldr	r2, [pc, #12]	@ (8004140 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004136:	6013      	str	r3, [r2, #0]
}
 8004138:	bf00      	nop
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr
 8004140:	58000400 	.word	0x58000400

08004144 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10c      	bne.n	8004170 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004156:	4b13      	ldr	r3, [pc, #76]	@ (80041a4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800415e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004162:	d10d      	bne.n	8004180 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004164:	f000 f83c 	bl	80041e0 <HAL_PWREx_DisableLowPowerRunMode>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d008      	beq.n	8004180 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 800416e:	e015      	b.n	800419c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004170:	4b0c      	ldr	r3, [pc, #48]	@ (80041a4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800417c:	f000 f822 	bl	80041c4 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004180:	4b09      	ldr	r3, [pc, #36]	@ (80041a8 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	4a08      	ldr	r2, [pc, #32]	@ (80041a8 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004186:	f023 0304 	bic.w	r3, r3, #4
 800418a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800418c:	78fb      	ldrb	r3, [r7, #3]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004192:	bf30      	wfi
 8004194:	e002      	b.n	800419c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004196:	bf40      	sev
    __WFE();
 8004198:	bf20      	wfe
    __WFE();
 800419a:	bf20      	wfe
  }
}
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	58000400 	.word	0x58000400
 80041a8:	e000ed00 	.word	0xe000ed00

080041ac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80041b0:	4b03      	ldr	r3, [pc, #12]	@ (80041c0 <HAL_PWREx_GetVoltageRange+0x14>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr
 80041c0:	58000400 	.word	0x58000400

080041c4 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80041c8:	4b04      	ldr	r3, [pc, #16]	@ (80041dc <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a03      	ldr	r2, [pc, #12]	@ (80041dc <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80041ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041d2:	6013      	str	r3, [r2, #0]
}
 80041d4:	bf00      	nop
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr
 80041dc:	58000400 	.word	0x58000400

080041e0 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80041e6:	4b16      	ldr	r3, [pc, #88]	@ (8004240 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a15      	ldr	r2, [pc, #84]	@ (8004240 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80041ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041f0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80041f2:	4b14      	ldr	r3, [pc, #80]	@ (8004244 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2232      	movs	r2, #50	@ 0x32
 80041f8:	fb02 f303 	mul.w	r3, r2, r3
 80041fc:	4a12      	ldr	r2, [pc, #72]	@ (8004248 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80041fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004202:	0c9b      	lsrs	r3, r3, #18
 8004204:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004206:	e002      	b.n	800420e <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3b01      	subs	r3, #1
 800420c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800420e:	4b0c      	ldr	r3, [pc, #48]	@ (8004240 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004216:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800421a:	d102      	bne.n	8004222 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f2      	bne.n	8004208 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004222:	4b07      	ldr	r3, [pc, #28]	@ (8004240 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800422a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800422e:	d101      	bne.n	8004234 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e000      	b.n	8004236 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	bc80      	pop	{r7}
 800423e:	4770      	bx	lr
 8004240:	58000400 	.word	0x58000400
 8004244:	20000008 	.word	0x20000008
 8004248:	431bde83 	.word	0x431bde83

0800424c <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8004256:	4b10      	ldr	r3, [pc, #64]	@ (8004298 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f023 0307 	bic.w	r3, r3, #7
 800425e:	4a0e      	ldr	r2, [pc, #56]	@ (8004298 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004260:	f043 0302 	orr.w	r3, r3, #2
 8004264:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004266:	4b0d      	ldr	r3, [pc, #52]	@ (800429c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	4a0c      	ldr	r2, [pc, #48]	@ (800429c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800426c:	f043 0304 	orr.w	r3, r3, #4
 8004270:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004272:	79fb      	ldrb	r3, [r7, #7]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004278:	bf30      	wfi
 800427a:	e002      	b.n	8004282 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800427c:	bf40      	sev
    __WFE();
 800427e:	bf20      	wfe
    __WFE();
 8004280:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004282:	4b06      	ldr	r3, [pc, #24]	@ (800429c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	4a05      	ldr	r2, [pc, #20]	@ (800429c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004288:	f023 0304 	bic.w	r3, r3, #4
 800428c:	6113      	str	r3, [r2, #16]
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	bc80      	pop	{r7}
 8004296:	4770      	bx	lr
 8004298:	58000400 	.word	0x58000400
 800429c:	e000ed00 	.word	0xe000ed00

080042a0 <LL_PWR_IsEnabledBkUpAccess>:
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80042a4:	4b06      	ldr	r3, [pc, #24]	@ (80042c0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042b0:	d101      	bne.n	80042b6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr
 80042c0:	58000400 	.word	0x58000400

080042c4 <LL_RCC_HSE_EnableTcxo>:
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80042c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80042d6:	6013      	str	r3, [r2, #0]
}
 80042d8:	bf00      	nop
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr

080042e0 <LL_RCC_HSE_DisableTcxo>:
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80042e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80042f2:	6013      	str	r3, [r2, #0]
}
 80042f4:	bf00      	nop
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr

080042fc <LL_RCC_HSE_IsEnabledDiv2>:
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004300:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800430a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800430e:	d101      	bne.n	8004314 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004310:	2301      	movs	r3, #1
 8004312:	e000      	b.n	8004316 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	46bd      	mov	sp, r7
 800431a:	bc80      	pop	{r7}
 800431c:	4770      	bx	lr

0800431e <LL_RCC_HSE_Enable>:
{
 800431e:	b480      	push	{r7}
 8004320:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004322:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800432c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004330:	6013      	str	r3, [r2, #0]
}
 8004332:	bf00      	nop
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr

0800433a <LL_RCC_HSE_Disable>:
{
 800433a:	b480      	push	{r7}
 800433c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800433e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004348:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800434c:	6013      	str	r3, [r2, #0]
}
 800434e:	bf00      	nop
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	4770      	bx	lr

08004356 <LL_RCC_HSE_IsReady>:
{
 8004356:	b480      	push	{r7}
 8004358:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800435a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004364:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004368:	d101      	bne.n	800436e <LL_RCC_HSE_IsReady+0x18>
 800436a:	2301      	movs	r3, #1
 800436c:	e000      	b.n	8004370 <LL_RCC_HSE_IsReady+0x1a>
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr

08004378 <LL_RCC_HSI_Enable>:
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800437c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004386:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800438a:	6013      	str	r3, [r2, #0]
}
 800438c:	bf00      	nop
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr

08004394 <LL_RCC_HSI_Disable>:
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004398:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043a6:	6013      	str	r3, [r2, #0]
}
 80043a8:	bf00      	nop
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bc80      	pop	{r7}
 80043ae:	4770      	bx	lr

080043b0 <LL_RCC_HSI_IsReady>:
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80043b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043c2:	d101      	bne.n	80043c8 <LL_RCC_HSI_IsReady+0x18>
 80043c4:	2301      	movs	r3, #1
 80043c6:	e000      	b.n	80043ca <LL_RCC_HSI_IsReady+0x1a>
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr

080043d2 <LL_RCC_HSI_SetCalibTrimming>:
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80043da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	061b      	lsls	r3, r3, #24
 80043e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043ec:	4313      	orrs	r3, r2
 80043ee:	604b      	str	r3, [r1, #4]
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr

080043fa <LL_RCC_LSE_IsReady>:
{
 80043fa:	b480      	push	{r7}
 80043fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80043fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b02      	cmp	r3, #2
 800440c:	d101      	bne.n	8004412 <LL_RCC_LSE_IsReady+0x18>
 800440e:	2301      	movs	r3, #1
 8004410:	e000      	b.n	8004414 <LL_RCC_LSE_IsReady+0x1a>
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr

0800441c <LL_RCC_LSI_Enable>:
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004420:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004424:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004428:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800442c:	f043 0301 	orr.w	r3, r3, #1
 8004430:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004434:	bf00      	nop
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr

0800443c <LL_RCC_LSI_Disable>:
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004440:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004444:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004448:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800444c:	f023 0301 	bic.w	r3, r3, #1
 8004450:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004454:	bf00      	nop
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr

0800445c <LL_RCC_LSI_IsReady>:
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004464:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b02      	cmp	r3, #2
 800446e:	d101      	bne.n	8004474 <LL_RCC_LSI_IsReady+0x18>
 8004470:	2301      	movs	r3, #1
 8004472:	e000      	b.n	8004476 <LL_RCC_LSI_IsReady+0x1a>
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	46bd      	mov	sp, r7
 800447a:	bc80      	pop	{r7}
 800447c:	4770      	bx	lr

0800447e <LL_RCC_MSI_Enable>:
{
 800447e:	b480      	push	{r7}
 8004480:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004482:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800448c:	f043 0301 	orr.w	r3, r3, #1
 8004490:	6013      	str	r3, [r2, #0]
}
 8004492:	bf00      	nop
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr

0800449a <LL_RCC_MSI_Disable>:
{
 800449a:	b480      	push	{r7}
 800449c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800449e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044a8:	f023 0301 	bic.w	r3, r3, #1
 80044ac:	6013      	str	r3, [r2, #0]
}
 80044ae:	bf00      	nop
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bc80      	pop	{r7}
 80044b4:	4770      	bx	lr

080044b6 <LL_RCC_MSI_IsReady>:
{
 80044b6:	b480      	push	{r7}
 80044b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80044ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d101      	bne.n	80044cc <LL_RCC_MSI_IsReady+0x16>
 80044c8:	2301      	movs	r3, #1
 80044ca:	e000      	b.n	80044ce <LL_RCC_MSI_IsReady+0x18>
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bc80      	pop	{r7}
 80044d4:	4770      	bx	lr

080044d6 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80044d6:	b480      	push	{r7}
 80044d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80044da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d101      	bne.n	80044ec <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80044e8:	2301      	movs	r3, #1
 80044ea:	e000      	b.n	80044ee <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bc80      	pop	{r7}
 80044f4:	4770      	bx	lr

080044f6 <LL_RCC_MSI_GetRange>:
{
 80044f6:	b480      	push	{r7}
 80044f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80044fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004504:	4618      	mov	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr

0800450c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004514:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004518:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 800451c:	4618      	mov	r0, r3
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr

08004524 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800452c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800453e:	4313      	orrs	r3, r2
 8004540:	604b      	str	r3, [r1, #4]
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	bc80      	pop	{r7}
 800454a:	4770      	bx	lr

0800454c <LL_RCC_SetSysClkSource>:
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004554:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f023 0203 	bic.w	r2, r3, #3
 800455e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4313      	orrs	r3, r2
 8004566:	608b      	str	r3, [r1, #8]
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	4770      	bx	lr

08004572 <LL_RCC_GetSysClkSource>:
{
 8004572:	b480      	push	{r7}
 8004574:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004576:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 030c 	and.w	r3, r3, #12
}
 8004580:	4618      	mov	r0, r3
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr

08004588 <LL_RCC_SetAHBPrescaler>:
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004590:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800459a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	608b      	str	r3, [r1, #8]
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bc80      	pop	{r7}
 80045ac:	4770      	bx	lr

080045ae <LL_RCC_SetAHB3Prescaler>:
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80045b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80045be:	f023 020f 	bic.w	r2, r3, #15
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	091b      	lsrs	r3, r3, #4
 80045c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr

080045da <LL_RCC_SetAPB1Prescaler>:
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80045e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	608b      	str	r3, [r1, #8]
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <LL_RCC_SetAPB2Prescaler>:
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004608:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004612:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4313      	orrs	r3, r2
 800461a:	608b      	str	r3, [r1, #8]
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	bc80      	pop	{r7}
 8004624:	4770      	bx	lr

08004626 <LL_RCC_GetAHBPrescaler>:
{
 8004626:	b480      	push	{r7}
 8004628:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800462a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004634:	4618      	mov	r0, r3
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr

0800463c <LL_RCC_GetAHB3Prescaler>:
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004640:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004644:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800464e:	4618      	mov	r0, r3
 8004650:	46bd      	mov	sp, r7
 8004652:	bc80      	pop	{r7}
 8004654:	4770      	bx	lr

08004656 <LL_RCC_GetAPB1Prescaler>:
{
 8004656:	b480      	push	{r7}
 8004658:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800465a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8004664:	4618      	mov	r0, r3
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr

0800466c <LL_RCC_GetAPB2Prescaler>:
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004670:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800467a:	4618      	mov	r0, r3
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr

08004682 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004682:	b480      	push	{r7}
 8004684:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004686:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004690:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004694:	6013      	str	r3, [r2, #0]
}
 8004696:	bf00      	nop
 8004698:	46bd      	mov	sp, r7
 800469a:	bc80      	pop	{r7}
 800469c:	4770      	bx	lr

0800469e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800469e:	b480      	push	{r7}
 80046a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80046a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046b0:	6013      	str	r3, [r2, #0]
}
 80046b2:	bf00      	nop
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bc80      	pop	{r7}
 80046b8:	4770      	bx	lr

080046ba <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80046ba:	b480      	push	{r7}
 80046bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80046be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046cc:	d101      	bne.n	80046d2 <LL_RCC_PLL_IsReady+0x18>
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <LL_RCC_PLL_IsReady+0x1a>
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr

080046dc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80046e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	0a1b      	lsrs	r3, r3, #8
 80046e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bc80      	pop	{r7}
 80046f2:	4770      	bx	lr

080046f4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80046f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004702:	4618      	mov	r0, r3
 8004704:	46bd      	mov	sp, r7
 8004706:	bc80      	pop	{r7}
 8004708:	4770      	bx	lr

0800470a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800470a:	b480      	push	{r7}
 800470c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800470e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8004718:	4618      	mov	r0, r3
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr

08004720 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004724:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f003 0303 	and.w	r3, r3, #3
}
 800472e:	4618      	mov	r0, r3
 8004730:	46bd      	mov	sp, r7
 8004732:	bc80      	pop	{r7}
 8004734:	4770      	bx	lr

08004736 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004736:	b480      	push	{r7}
 8004738:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800473a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004748:	d101      	bne.n	800474e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800474a:	2301      	movs	r3, #1
 800474c:	e000      	b.n	8004750 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr

08004758 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800475c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004760:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004764:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800476c:	d101      	bne.n	8004772 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr

0800477c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800478a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800478e:	d101      	bne.n	8004794 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004790:	2301      	movs	r3, #1
 8004792:	e000      	b.n	8004796 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr

0800479e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800479e:	b480      	push	{r7}
 80047a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80047a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047b0:	d101      	bne.n	80047b6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80047b2:	2301      	movs	r3, #1
 80047b4:	e000      	b.n	80047b8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bc80      	pop	{r7}
 80047be:	4770      	bx	lr

080047c0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e36f      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047d2:	f7ff fece 	bl	8004572 <LL_RCC_GetSysClkSource>
 80047d6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047d8:	f7ff ffa2 	bl	8004720 <LL_RCC_PLL_GetMainSource>
 80047dc:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0320 	and.w	r3, r3, #32
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 80c4 	beq.w	8004974 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d005      	beq.n	80047fe <HAL_RCC_OscConfig+0x3e>
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	2b0c      	cmp	r3, #12
 80047f6:	d176      	bne.n	80048e6 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d173      	bne.n	80048e6 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e353      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800480e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_RCC_OscConfig+0x68>
 800481c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004826:	e006      	b.n	8004836 <HAL_RCC_OscConfig+0x76>
 8004828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800482c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004830:	091b      	lsrs	r3, r3, #4
 8004832:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004836:	4293      	cmp	r3, r2
 8004838:	d222      	bcs.n	8004880 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fd3c 	bl	80052bc <RCC_SetFlashLatencyFromMSIRange>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e331      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800484e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004858:	f043 0308 	orr.w	r3, r3, #8
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800486c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004870:	4313      	orrs	r3, r2
 8004872:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff fe53 	bl	8004524 <LL_RCC_MSI_SetCalibTrimming>
 800487e:	e021      	b.n	80048c4 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004880:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800488a:	f043 0308 	orr.w	r3, r3, #8
 800488e:	6013      	str	r3, [r2, #0]
 8004890:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80048a2:	4313      	orrs	r3, r2
 80048a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff fe3a 	bl	8004524 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 fd01 	bl	80052bc <RCC_SetFlashLatencyFromMSIRange>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e2f6      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80048c4:	f000 fcc2 	bl	800524c <HAL_RCC_GetHCLKFreq>
 80048c8:	4603      	mov	r3, r0
 80048ca:	4aa7      	ldr	r2, [pc, #668]	@ (8004b68 <HAL_RCC_OscConfig+0x3a8>)
 80048cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80048ce:	4ba7      	ldr	r3, [pc, #668]	@ (8004b6c <HAL_RCC_OscConfig+0x3ac>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fd f82c 	bl	8001930 <HAL_InitTick>
 80048d8:	4603      	mov	r3, r0
 80048da:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80048dc:	7cfb      	ldrb	r3, [r7, #19]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d047      	beq.n	8004972 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80048e2:	7cfb      	ldrb	r3, [r7, #19]
 80048e4:	e2e5      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d02c      	beq.n	8004948 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048ee:	f7ff fdc6 	bl	800447e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048f2:	f7fc fa9f 	bl	8000e34 <HAL_GetTick>
 80048f6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048fa:	f7fc fa9b 	bl	8000e34 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e2d2      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 800490c:	f7ff fdd3 	bl	80044b6 <LL_RCC_MSI_IsReady>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d0f1      	beq.n	80048fa <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004916:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004920:	f043 0308 	orr.w	r3, r3, #8
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004934:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004938:	4313      	orrs	r3, r2
 800493a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff fdef 	bl	8004524 <LL_RCC_MSI_SetCalibTrimming>
 8004946:	e015      	b.n	8004974 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004948:	f7ff fda7 	bl	800449a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800494c:	f7fc fa72 	bl	8000e34 <HAL_GetTick>
 8004950:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004954:	f7fc fa6e 	bl	8000e34 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e2a5      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004966:	f7ff fda6 	bl	80044b6 <LL_RCC_MSI_IsReady>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1f1      	bne.n	8004954 <HAL_RCC_OscConfig+0x194>
 8004970:	e000      	b.n	8004974 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004972:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b00      	cmp	r3, #0
 800497e:	d058      	beq.n	8004a32 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	2b08      	cmp	r3, #8
 8004984:	d005      	beq.n	8004992 <HAL_RCC_OscConfig+0x1d2>
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	2b0c      	cmp	r3, #12
 800498a:	d108      	bne.n	800499e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	2b03      	cmp	r3, #3
 8004990:	d105      	bne.n	800499e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d14b      	bne.n	8004a32 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e289      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800499e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80049b0:	4313      	orrs	r3, r2
 80049b2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049bc:	d102      	bne.n	80049c4 <HAL_RCC_OscConfig+0x204>
 80049be:	f7ff fcae 	bl	800431e <LL_RCC_HSE_Enable>
 80049c2:	e00d      	b.n	80049e0 <HAL_RCC_OscConfig+0x220>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80049cc:	d104      	bne.n	80049d8 <HAL_RCC_OscConfig+0x218>
 80049ce:	f7ff fc79 	bl	80042c4 <LL_RCC_HSE_EnableTcxo>
 80049d2:	f7ff fca4 	bl	800431e <LL_RCC_HSE_Enable>
 80049d6:	e003      	b.n	80049e0 <HAL_RCC_OscConfig+0x220>
 80049d8:	f7ff fcaf 	bl	800433a <LL_RCC_HSE_Disable>
 80049dc:	f7ff fc80 	bl	80042e0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d012      	beq.n	8004a0e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e8:	f7fc fa24 	bl	8000e34 <HAL_GetTick>
 80049ec:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f0:	f7fc fa20 	bl	8000e34 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	@ 0x64
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e257      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004a02:	f7ff fca8 	bl	8004356 <LL_RCC_HSE_IsReady>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0f1      	beq.n	80049f0 <HAL_RCC_OscConfig+0x230>
 8004a0c:	e011      	b.n	8004a32 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0e:	f7fc fa11 	bl	8000e34 <HAL_GetTick>
 8004a12:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a16:	f7fc fa0d 	bl	8000e34 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b64      	cmp	r3, #100	@ 0x64
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e244      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004a28:	f7ff fc95 	bl	8004356 <LL_RCC_HSE_IsReady>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f1      	bne.n	8004a16 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d046      	beq.n	8004acc <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d005      	beq.n	8004a50 <HAL_RCC_OscConfig+0x290>
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	2b0c      	cmp	r3, #12
 8004a48:	d10e      	bne.n	8004a68 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d10b      	bne.n	8004a68 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e22a      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff fcb6 	bl	80043d2 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004a66:	e031      	b.n	8004acc <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d019      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a70:	f7ff fc82 	bl	8004378 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a74:	f7fc f9de 	bl	8000e34 <HAL_GetTick>
 8004a78:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a7c:	f7fc f9da 	bl	8000e34 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e211      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004a8e:	f7ff fc8f 	bl	80043b0 <LL_RCC_HSI_IsReady>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0f1      	beq.n	8004a7c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff fc98 	bl	80043d2 <LL_RCC_HSI_SetCalibTrimming>
 8004aa2:	e013      	b.n	8004acc <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aa4:	f7ff fc76 	bl	8004394 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa8:	f7fc f9c4 	bl	8000e34 <HAL_GetTick>
 8004aac:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ab0:	f7fc f9c0 	bl	8000e34 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e1f7      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004ac2:	f7ff fc75 	bl	80043b0 <LL_RCC_HSI_IsReady>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1f1      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0308 	and.w	r3, r3, #8
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d06e      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d056      	beq.n	8004b8e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8004ae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ae8:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69da      	ldr	r2, [r3, #28]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f003 0310 	and.w	r3, r3, #16
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d031      	beq.n	8004b5c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d006      	beq.n	8004b10 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e1d0      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d013      	beq.n	8004b42 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8004b1a:	f7ff fc8f 	bl	800443c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b1e:	f7fc f989 	bl	8000e34 <HAL_GetTick>
 8004b22:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8004b24:	e008      	b.n	8004b38 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b26:	f7fc f985 	bl	8000e34 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b11      	cmp	r3, #17
 8004b32:	d901      	bls.n	8004b38 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e1bc      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8004b38:	f7ff fc90 	bl	800445c <LL_RCC_LSI_IsReady>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f1      	bne.n	8004b26 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8004b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b4a:	f023 0210 	bic.w	r2, r3, #16
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b5c:	f7ff fc5e 	bl	800441c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b60:	f7fc f968 	bl	8000e34 <HAL_GetTick>
 8004b64:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8004b66:	e00c      	b.n	8004b82 <HAL_RCC_OscConfig+0x3c2>
 8004b68:	20000008 	.word	0x20000008
 8004b6c:	2000000c 	.word	0x2000000c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b70:	f7fc f960 	bl	8000e34 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b11      	cmp	r3, #17
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e197      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8004b82:	f7ff fc6b 	bl	800445c <LL_RCC_LSI_IsReady>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0f1      	beq.n	8004b70 <HAL_RCC_OscConfig+0x3b0>
 8004b8c:	e013      	b.n	8004bb6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b8e:	f7ff fc55 	bl	800443c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b92:	f7fc f94f 	bl	8000e34 <HAL_GetTick>
 8004b96:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b9a:	f7fc f94b 	bl	8000e34 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b11      	cmp	r3, #17
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e182      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8004bac:	f7ff fc56 	bl	800445c <LL_RCC_LSI_IsReady>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1f1      	bne.n	8004b9a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0304 	and.w	r3, r3, #4
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 80d8 	beq.w	8004d74 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004bc4:	f7ff fb6c 	bl	80042a0 <LL_PWR_IsEnabledBkUpAccess>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d113      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004bce:	f7ff faab 	bl	8004128 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bd2:	f7fc f92f 	bl	8000e34 <HAL_GetTick>
 8004bd6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004bd8:	e008      	b.n	8004bec <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bda:	f7fc f92b 	bl	8000e34 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e162      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004bec:	f7ff fb58 	bl	80042a0 <LL_PWR_IsEnabledBkUpAccess>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0f1      	beq.n	8004bda <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d07b      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	2b85      	cmp	r3, #133	@ 0x85
 8004c04:	d003      	beq.n	8004c0e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	2b05      	cmp	r3, #5
 8004c0c:	d109      	bne.n	8004c22 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004c0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c1a:	f043 0304 	orr.w	r3, r3, #4
 8004c1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c22:	f7fc f907 	bl	8000e34 <HAL_GetTick>
 8004c26:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c34:	f043 0301 	orr.w	r3, r3, #1
 8004c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004c3c:	e00a      	b.n	8004c54 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c3e:	f7fc f8f9 	bl	8000e34 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e12e      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004c54:	f7ff fbd1 	bl	80043fa <LL_RCC_LSE_IsReady>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0ef      	beq.n	8004c3e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	2b81      	cmp	r3, #129	@ 0x81
 8004c64:	d003      	beq.n	8004c6e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	2b85      	cmp	r3, #133	@ 0x85
 8004c6c:	d121      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6e:	f7fc f8e1 	bl	8000e34 <HAL_GetTick>
 8004c72:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004c88:	e00a      	b.n	8004ca0 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c8a:	f7fc f8d3 	bl	8000e34 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e108      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ca8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0ec      	beq.n	8004c8a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004cb0:	e060      	b.n	8004d74 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb2:	f7fc f8bf 	bl	8000e34 <HAL_GetTick>
 8004cb6:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004cb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004cc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004ccc:	e00a      	b.n	8004ce4 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cce:	f7fc f8b1 	bl	8000e34 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e0e6      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004ce4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1ec      	bne.n	8004cce <HAL_RCC_OscConfig+0x50e>
 8004cf4:	e03e      	b.n	8004d74 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf6:	f7fc f89d 	bl	8000e34 <HAL_GetTick>
 8004cfa:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004cfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004d10:	e00a      	b.n	8004d28 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d12:	f7fc f88f 	bl	8000e34 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e0c4      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1ec      	bne.n	8004d12 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d38:	f7fc f87c 	bl	8000e34 <HAL_GetTick>
 8004d3c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d4a:	f023 0301 	bic.w	r3, r3, #1
 8004d4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004d52:	e00a      	b.n	8004d6a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d54:	f7fc f86e 	bl	8000e34 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e0a3      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004d6a:	f7ff fb46 	bl	80043fa <LL_RCC_LSE_IsReady>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1ef      	bne.n	8004d54 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 8099 	beq.w	8004eb0 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	2b0c      	cmp	r3, #12
 8004d82:	d06c      	beq.n	8004e5e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d14b      	bne.n	8004e24 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d8c:	f7ff fc87 	bl	800469e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d90:	f7fc f850 	bl	8000e34 <HAL_GetTick>
 8004d94:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004d96:	e008      	b.n	8004daa <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d98:	f7fc f84c 	bl	8000e34 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b0a      	cmp	r3, #10
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e083      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004daa:	f7ff fc86 	bl	80046ba <LL_RCC_PLL_IsReady>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1f1      	bne.n	8004d98 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004db4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	4b40      	ldr	r3, [pc, #256]	@ (8004ebc <HAL_RCC_OscConfig+0x6fc>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004dc6:	4311      	orrs	r1, r2
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004dcc:	0212      	lsls	r2, r2, #8
 8004dce:	4311      	orrs	r1, r2
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004dd4:	4311      	orrs	r1, r2
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004dda:	4311      	orrs	r1, r2
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004de0:	430a      	orrs	r2, r1
 8004de2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dea:	f7ff fc4a 	bl	8004682 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004dee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dfc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfe:	f7fc f819 	bl	8000e34 <HAL_GetTick>
 8004e02:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e06:	f7fc f815 	bl	8000e34 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b0a      	cmp	r3, #10
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e04c      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004e18:	f7ff fc4f 	bl	80046ba <LL_RCC_PLL_IsReady>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0f1      	beq.n	8004e06 <HAL_RCC_OscConfig+0x646>
 8004e22:	e045      	b.n	8004eb0 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e24:	f7ff fc3b 	bl	800469e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e28:	f7fc f804 	bl	8000e34 <HAL_GetTick>
 8004e2c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e30:	f7fc f800 	bl	8000e34 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b0a      	cmp	r3, #10
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e037      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004e42:	f7ff fc3a 	bl	80046ba <LL_RCC_PLL_IsReady>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1f1      	bne.n	8004e30 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004e4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e56:	4b1a      	ldr	r3, [pc, #104]	@ (8004ec0 <HAL_RCC_OscConfig+0x700>)
 8004e58:	4013      	ands	r3, r2
 8004e5a:	60cb      	str	r3, [r1, #12]
 8004e5c:	e028      	b.n	8004eb0 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d101      	bne.n	8004e6a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e023      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	f003 0203 	and.w	r2, r3, #3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d115      	bne.n	8004eac <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d10e      	bne.n	8004eac <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e98:	021b      	lsls	r3, r3, #8
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d106      	bne.n	8004eac <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d001      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e000      	b.n	8004eb2 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3720      	adds	r7, #32
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	11c1808c 	.word	0x11c1808c
 8004ec0:	eefefffc 	.word	0xeefefffc

08004ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e10f      	b.n	80050f8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ed8:	4b89      	ldr	r3, [pc, #548]	@ (8005100 <HAL_RCC_ClockConfig+0x23c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d91b      	bls.n	8004f1e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ee6:	4b86      	ldr	r3, [pc, #536]	@ (8005100 <HAL_RCC_ClockConfig+0x23c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f023 0207 	bic.w	r2, r3, #7
 8004eee:	4984      	ldr	r1, [pc, #528]	@ (8005100 <HAL_RCC_ClockConfig+0x23c>)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ef6:	f7fb ff9d 	bl	8000e34 <HAL_GetTick>
 8004efa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efc:	e008      	b.n	8004f10 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004efe:	f7fb ff99 	bl	8000e34 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e0f3      	b.n	80050f8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f10:	4b7b      	ldr	r3, [pc, #492]	@ (8005100 <HAL_RCC_ClockConfig+0x23c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d1ef      	bne.n	8004efe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d016      	beq.n	8004f58 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7ff fb2a 	bl	8004588 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f34:	f7fb ff7e 	bl	8000e34 <HAL_GetTick>
 8004f38:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f3c:	f7fb ff7a 	bl	8000e34 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e0d4      	b.n	80050f8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004f4e:	f7ff fbf2 	bl	8004736 <LL_RCC_IsActiveFlag_HPRE>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0f1      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d016      	beq.n	8004f92 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff fb20 	bl	80045ae <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f6e:	f7fb ff61 	bl	8000e34 <HAL_GetTick>
 8004f72:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f76:	f7fb ff5d 	bl	8000e34 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e0b7      	b.n	80050f8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004f88:	f7ff fbe6 	bl	8004758 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0f1      	beq.n	8004f76 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0304 	and.w	r3, r3, #4
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d016      	beq.n	8004fcc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7ff fb19 	bl	80045da <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004fa8:	f7fb ff44 	bl	8000e34 <HAL_GetTick>
 8004fac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004fb0:	f7fb ff40 	bl	8000e34 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e09a      	b.n	80050f8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004fc2:	f7ff fbdb 	bl	800477c <LL_RCC_IsActiveFlag_PPRE1>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0f1      	beq.n	8004fb0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0308 	and.w	r3, r3, #8
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d017      	beq.n	8005008 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff fb0e 	bl	8004600 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004fe4:	f7fb ff26 	bl	8000e34 <HAL_GetTick>
 8004fe8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004fec:	f7fb ff22 	bl	8000e34 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e07c      	b.n	80050f8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004ffe:	f7ff fbce 	bl	800479e <LL_RCC_IsActiveFlag_PPRE2>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0f1      	beq.n	8004fec <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b00      	cmp	r3, #0
 8005012:	d043      	beq.n	800509c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2b02      	cmp	r3, #2
 800501a:	d106      	bne.n	800502a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800501c:	f7ff f99b 	bl	8004356 <LL_RCC_HSE_IsReady>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d11e      	bne.n	8005064 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e066      	b.n	80050f8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2b03      	cmp	r3, #3
 8005030:	d106      	bne.n	8005040 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005032:	f7ff fb42 	bl	80046ba <LL_RCC_PLL_IsReady>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d113      	bne.n	8005064 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e05b      	b.n	80050f8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d106      	bne.n	8005056 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005048:	f7ff fa35 	bl	80044b6 <LL_RCC_MSI_IsReady>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d108      	bne.n	8005064 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e050      	b.n	80050f8 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005056:	f7ff f9ab 	bl	80043b0 <LL_RCC_HSI_IsReady>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e049      	b.n	80050f8 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff fa6f 	bl	800454c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800506e:	f7fb fee1 	bl	8000e34 <HAL_GetTick>
 8005072:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005074:	e00a      	b.n	800508c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005076:	f7fb fedd 	bl	8000e34 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005084:	4293      	cmp	r3, r2
 8005086:	d901      	bls.n	800508c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e035      	b.n	80050f8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800508c:	f7ff fa71 	bl	8004572 <LL_RCC_GetSysClkSource>
 8005090:	4602      	mov	r2, r0
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	429a      	cmp	r2, r3
 800509a:	d1ec      	bne.n	8005076 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800509c:	4b18      	ldr	r3, [pc, #96]	@ (8005100 <HAL_RCC_ClockConfig+0x23c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d21b      	bcs.n	80050e2 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050aa:	4b15      	ldr	r3, [pc, #84]	@ (8005100 <HAL_RCC_ClockConfig+0x23c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f023 0207 	bic.w	r2, r3, #7
 80050b2:	4913      	ldr	r1, [pc, #76]	@ (8005100 <HAL_RCC_ClockConfig+0x23c>)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050ba:	f7fb febb 	bl	8000e34 <HAL_GetTick>
 80050be:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80050c2:	f7fb feb7 	bl	8000e34 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e011      	b.n	80050f8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005100 <HAL_RCC_ClockConfig+0x23c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d1ef      	bne.n	80050c2 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80050e2:	f000 f8b3 	bl	800524c <HAL_RCC_GetHCLKFreq>
 80050e6:	4603      	mov	r3, r0
 80050e8:	4a06      	ldr	r2, [pc, #24]	@ (8005104 <HAL_RCC_ClockConfig+0x240>)
 80050ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80050ec:	4b06      	ldr	r3, [pc, #24]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7fc fc1d 	bl	8001930 <HAL_InitTick>
 80050f6:	4603      	mov	r3, r0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	58004000 	.word	0x58004000
 8005104:	20000008 	.word	0x20000008
 8005108:	2000000c 	.word	0x2000000c

0800510c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800510c:	b590      	push	{r4, r7, lr}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800511a:	f7ff fa2a 	bl	8004572 <LL_RCC_GetSysClkSource>
 800511e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005120:	f7ff fafe 	bl	8004720 <LL_RCC_PLL_GetMainSource>
 8005124:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d005      	beq.n	8005138 <HAL_RCC_GetSysClockFreq+0x2c>
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b0c      	cmp	r3, #12
 8005130:	d139      	bne.n	80051a6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d136      	bne.n	80051a6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005138:	f7ff f9cd 	bl	80044d6 <LL_RCC_MSI_IsEnabledRangeSelect>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d115      	bne.n	800516e <HAL_RCC_GetSysClockFreq+0x62>
 8005142:	f7ff f9c8 	bl	80044d6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005146:	4603      	mov	r3, r0
 8005148:	2b01      	cmp	r3, #1
 800514a:	d106      	bne.n	800515a <HAL_RCC_GetSysClockFreq+0x4e>
 800514c:	f7ff f9d3 	bl	80044f6 <LL_RCC_MSI_GetRange>
 8005150:	4603      	mov	r3, r0
 8005152:	0a1b      	lsrs	r3, r3, #8
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	e005      	b.n	8005166 <HAL_RCC_GetSysClockFreq+0x5a>
 800515a:	f7ff f9d7 	bl	800450c <LL_RCC_MSI_GetRangeAfterStandby>
 800515e:	4603      	mov	r3, r0
 8005160:	0a1b      	lsrs	r3, r3, #8
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	4a36      	ldr	r2, [pc, #216]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x134>)
 8005168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800516c:	e014      	b.n	8005198 <HAL_RCC_GetSysClockFreq+0x8c>
 800516e:	f7ff f9b2 	bl	80044d6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005172:	4603      	mov	r3, r0
 8005174:	2b01      	cmp	r3, #1
 8005176:	d106      	bne.n	8005186 <HAL_RCC_GetSysClockFreq+0x7a>
 8005178:	f7ff f9bd 	bl	80044f6 <LL_RCC_MSI_GetRange>
 800517c:	4603      	mov	r3, r0
 800517e:	091b      	lsrs	r3, r3, #4
 8005180:	f003 030f 	and.w	r3, r3, #15
 8005184:	e005      	b.n	8005192 <HAL_RCC_GetSysClockFreq+0x86>
 8005186:	f7ff f9c1 	bl	800450c <LL_RCC_MSI_GetRangeAfterStandby>
 800518a:	4603      	mov	r3, r0
 800518c:	091b      	lsrs	r3, r3, #4
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	4a2b      	ldr	r2, [pc, #172]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x134>)
 8005194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005198:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d115      	bne.n	80051cc <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80051a4:	e012      	b.n	80051cc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2b04      	cmp	r3, #4
 80051aa:	d102      	bne.n	80051b2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051ac:	4b25      	ldr	r3, [pc, #148]	@ (8005244 <HAL_RCC_GetSysClockFreq+0x138>)
 80051ae:	617b      	str	r3, [r7, #20]
 80051b0:	e00c      	b.n	80051cc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	d109      	bne.n	80051cc <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80051b8:	f7ff f8a0 	bl	80042fc <LL_RCC_HSE_IsEnabledDiv2>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d102      	bne.n	80051c8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80051c2:	4b20      	ldr	r3, [pc, #128]	@ (8005244 <HAL_RCC_GetSysClockFreq+0x138>)
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	e001      	b.n	80051cc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80051c8:	4b1f      	ldr	r3, [pc, #124]	@ (8005248 <HAL_RCC_GetSysClockFreq+0x13c>)
 80051ca:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051cc:	f7ff f9d1 	bl	8004572 <LL_RCC_GetSysClkSource>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b0c      	cmp	r3, #12
 80051d4:	d12f      	bne.n	8005236 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80051d6:	f7ff faa3 	bl	8004720 <LL_RCC_PLL_GetMainSource>
 80051da:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d003      	beq.n	80051ea <HAL_RCC_GetSysClockFreq+0xde>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b03      	cmp	r3, #3
 80051e6:	d003      	beq.n	80051f0 <HAL_RCC_GetSysClockFreq+0xe4>
 80051e8:	e00d      	b.n	8005206 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80051ea:	4b16      	ldr	r3, [pc, #88]	@ (8005244 <HAL_RCC_GetSysClockFreq+0x138>)
 80051ec:	60fb      	str	r3, [r7, #12]
        break;
 80051ee:	e00d      	b.n	800520c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80051f0:	f7ff f884 	bl	80042fc <LL_RCC_HSE_IsEnabledDiv2>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d102      	bne.n	8005200 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80051fa:	4b12      	ldr	r3, [pc, #72]	@ (8005244 <HAL_RCC_GetSysClockFreq+0x138>)
 80051fc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80051fe:	e005      	b.n	800520c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005200:	4b11      	ldr	r3, [pc, #68]	@ (8005248 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005202:	60fb      	str	r3, [r7, #12]
        break;
 8005204:	e002      	b.n	800520c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	60fb      	str	r3, [r7, #12]
        break;
 800520a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800520c:	f7ff fa66 	bl	80046dc <LL_RCC_PLL_GetN>
 8005210:	4602      	mov	r2, r0
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	fb03 f402 	mul.w	r4, r3, r2
 8005218:	f7ff fa77 	bl	800470a <LL_RCC_PLL_GetDivider>
 800521c:	4603      	mov	r3, r0
 800521e:	091b      	lsrs	r3, r3, #4
 8005220:	3301      	adds	r3, #1
 8005222:	fbb4 f4f3 	udiv	r4, r4, r3
 8005226:	f7ff fa65 	bl	80046f4 <LL_RCC_PLL_GetR>
 800522a:	4603      	mov	r3, r0
 800522c:	0f5b      	lsrs	r3, r3, #29
 800522e:	3301      	adds	r3, #1
 8005230:	fbb4 f3f3 	udiv	r3, r4, r3
 8005234:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005236:	697b      	ldr	r3, [r7, #20]
}
 8005238:	4618      	mov	r0, r3
 800523a:	371c      	adds	r7, #28
 800523c:	46bd      	mov	sp, r7
 800523e:	bd90      	pop	{r4, r7, pc}
 8005240:	0800dbe4 	.word	0x0800dbe4
 8005244:	00f42400 	.word	0x00f42400
 8005248:	01e84800 	.word	0x01e84800

0800524c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800524c:	b598      	push	{r3, r4, r7, lr}
 800524e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005250:	f7ff ff5c 	bl	800510c <HAL_RCC_GetSysClockFreq>
 8005254:	4604      	mov	r4, r0
 8005256:	f7ff f9e6 	bl	8004626 <LL_RCC_GetAHBPrescaler>
 800525a:	4603      	mov	r3, r0
 800525c:	091b      	lsrs	r3, r3, #4
 800525e:	f003 030f 	and.w	r3, r3, #15
 8005262:	4a03      	ldr	r2, [pc, #12]	@ (8005270 <HAL_RCC_GetHCLKFreq+0x24>)
 8005264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005268:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800526c:	4618      	mov	r0, r3
 800526e:	bd98      	pop	{r3, r4, r7, pc}
 8005270:	0800db84 	.word	0x0800db84

08005274 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005274:	b598      	push	{r3, r4, r7, lr}
 8005276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005278:	f7ff ffe8 	bl	800524c <HAL_RCC_GetHCLKFreq>
 800527c:	4604      	mov	r4, r0
 800527e:	f7ff f9ea 	bl	8004656 <LL_RCC_GetAPB1Prescaler>
 8005282:	4603      	mov	r3, r0
 8005284:	0a1b      	lsrs	r3, r3, #8
 8005286:	4a03      	ldr	r2, [pc, #12]	@ (8005294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800528c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005290:	4618      	mov	r0, r3
 8005292:	bd98      	pop	{r3, r4, r7, pc}
 8005294:	0800dbc4 	.word	0x0800dbc4

08005298 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005298:	b598      	push	{r3, r4, r7, lr}
 800529a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800529c:	f7ff ffd6 	bl	800524c <HAL_RCC_GetHCLKFreq>
 80052a0:	4604      	mov	r4, r0
 80052a2:	f7ff f9e3 	bl	800466c <LL_RCC_GetAPB2Prescaler>
 80052a6:	4603      	mov	r3, r0
 80052a8:	0adb      	lsrs	r3, r3, #11
 80052aa:	4a03      	ldr	r2, [pc, #12]	@ (80052b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052b0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	bd98      	pop	{r3, r4, r7, pc}
 80052b8:	0800dbc4 	.word	0x0800dbc4

080052bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80052bc:	b590      	push	{r4, r7, lr}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	091b      	lsrs	r3, r3, #4
 80052c8:	f003 030f 	and.w	r3, r3, #15
 80052cc:	4a10      	ldr	r2, [pc, #64]	@ (8005310 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80052ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052d2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80052d4:	f7ff f9b2 	bl	800463c <LL_RCC_GetAHB3Prescaler>
 80052d8:	4603      	mov	r3, r0
 80052da:	091b      	lsrs	r3, r3, #4
 80052dc:	f003 030f 	and.w	r3, r3, #15
 80052e0:	4a0c      	ldr	r2, [pc, #48]	@ (8005314 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80052e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ec:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	4a09      	ldr	r2, [pc, #36]	@ (8005318 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80052f2:	fba2 2303 	umull	r2, r3, r2, r3
 80052f6:	0c9c      	lsrs	r4, r3, #18
 80052f8:	f7fe ff58 	bl	80041ac <HAL_PWREx_GetVoltageRange>
 80052fc:	4603      	mov	r3, r0
 80052fe:	4619      	mov	r1, r3
 8005300:	4620      	mov	r0, r4
 8005302:	f000 f80b 	bl	800531c <RCC_SetFlashLatency>
 8005306:	4603      	mov	r3, r0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	bd90      	pop	{r4, r7, pc}
 8005310:	0800dbe4 	.word	0x0800dbe4
 8005314:	0800db84 	.word	0x0800db84
 8005318:	431bde83 	.word	0x431bde83

0800531c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08e      	sub	sp, #56	@ 0x38
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005326:	4a3a      	ldr	r2, [pc, #232]	@ (8005410 <RCC_SetFlashLatency+0xf4>)
 8005328:	f107 0320 	add.w	r3, r7, #32
 800532c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005330:	6018      	str	r0, [r3, #0]
 8005332:	3304      	adds	r3, #4
 8005334:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005336:	4a37      	ldr	r2, [pc, #220]	@ (8005414 <RCC_SetFlashLatency+0xf8>)
 8005338:	f107 0318 	add.w	r3, r7, #24
 800533c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005340:	6018      	str	r0, [r3, #0]
 8005342:	3304      	adds	r3, #4
 8005344:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005346:	4a34      	ldr	r2, [pc, #208]	@ (8005418 <RCC_SetFlashLatency+0xfc>)
 8005348:	f107 030c 	add.w	r3, r7, #12
 800534c:	ca07      	ldmia	r2, {r0, r1, r2}
 800534e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005352:	2300      	movs	r3, #0
 8005354:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800535c:	d11b      	bne.n	8005396 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800535e:	2300      	movs	r3, #0
 8005360:	633b      	str	r3, [r7, #48]	@ 0x30
 8005362:	e014      	b.n	800538e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	3338      	adds	r3, #56	@ 0x38
 800536a:	443b      	add	r3, r7
 800536c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005370:	461a      	mov	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4293      	cmp	r3, r2
 8005376:	d807      	bhi.n	8005388 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	3338      	adds	r3, #56	@ 0x38
 800537e:	443b      	add	r3, r7
 8005380:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005384:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005386:	e021      	b.n	80053cc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538a:	3301      	adds	r3, #1
 800538c:	633b      	str	r3, [r7, #48]	@ 0x30
 800538e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005390:	2b02      	cmp	r3, #2
 8005392:	d9e7      	bls.n	8005364 <RCC_SetFlashLatency+0x48>
 8005394:	e01a      	b.n	80053cc <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005396:	2300      	movs	r3, #0
 8005398:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800539a:	e014      	b.n	80053c6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800539c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	3338      	adds	r3, #56	@ 0x38
 80053a2:	443b      	add	r3, r7
 80053a4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80053a8:	461a      	mov	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d807      	bhi.n	80053c0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80053b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	3338      	adds	r3, #56	@ 0x38
 80053b6:	443b      	add	r3, r7
 80053b8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80053bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80053be:	e005      	b.n	80053cc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80053c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c2:	3301      	adds	r3, #1
 80053c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d9e7      	bls.n	800539c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80053cc:	4b13      	ldr	r3, [pc, #76]	@ (800541c <RCC_SetFlashLatency+0x100>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f023 0207 	bic.w	r2, r3, #7
 80053d4:	4911      	ldr	r1, [pc, #68]	@ (800541c <RCC_SetFlashLatency+0x100>)
 80053d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d8:	4313      	orrs	r3, r2
 80053da:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80053dc:	f7fb fd2a 	bl	8000e34 <HAL_GetTick>
 80053e0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80053e2:	e008      	b.n	80053f6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80053e4:	f7fb fd26 	bl	8000e34 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d901      	bls.n	80053f6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e007      	b.n	8005406 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80053f6:	4b09      	ldr	r3, [pc, #36]	@ (800541c <RCC_SetFlashLatency+0x100>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0307 	and.w	r3, r3, #7
 80053fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005400:	429a      	cmp	r2, r3
 8005402:	d1ef      	bne.n	80053e4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3738      	adds	r7, #56	@ 0x38
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	0800da68 	.word	0x0800da68
 8005414:	0800da70 	.word	0x0800da70
 8005418:	0800da78 	.word	0x0800da78
 800541c:	58004000 	.word	0x58004000

08005420 <LL_RCC_LSE_IsReady>:
{
 8005420:	b480      	push	{r7}
 8005422:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b02      	cmp	r3, #2
 8005432:	d101      	bne.n	8005438 <LL_RCC_LSE_IsReady+0x18>
 8005434:	2301      	movs	r3, #1
 8005436:	e000      	b.n	800543a <LL_RCC_LSE_IsReady+0x1a>
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	46bd      	mov	sp, r7
 800543e:	bc80      	pop	{r7}
 8005440:	4770      	bx	lr

08005442 <LL_RCC_SetUSARTClockSource>:
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800544a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800544e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	0c1b      	lsrs	r3, r3, #16
 8005456:	43db      	mvns	r3, r3
 8005458:	401a      	ands	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	b29b      	uxth	r3, r3
 800545e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005462:	4313      	orrs	r3, r2
 8005464:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	bc80      	pop	{r7}
 8005470:	4770      	bx	lr

08005472 <LL_RCC_SetI2SClockSource>:
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800547a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800547e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005482:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005486:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4313      	orrs	r3, r2
 800548e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005492:	bf00      	nop
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr

0800549c <LL_RCC_SetLPUARTClockSource>:
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80054a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80054b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bc80      	pop	{r7}
 80054c4:	4770      	bx	lr

080054c6 <LL_RCC_SetI2CClockSource>:
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80054ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	091b      	lsrs	r3, r3, #4
 80054da:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80054de:	43db      	mvns	r3, r3
 80054e0:	401a      	ands	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80054ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bc80      	pop	{r7}
 80054fc:	4770      	bx	lr

080054fe <LL_RCC_SetLPTIMClockSource>:
{
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005506:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800550a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	0c1b      	lsrs	r3, r3, #16
 8005512:	041b      	lsls	r3, r3, #16
 8005514:	43db      	mvns	r3, r3
 8005516:	401a      	ands	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	041b      	lsls	r3, r3, #16
 800551c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005520:	4313      	orrs	r3, r2
 8005522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005526:	bf00      	nop
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	bc80      	pop	{r7}
 800552e:	4770      	bx	lr

08005530 <LL_RCC_SetRNGClockSource>:
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800553c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005540:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005544:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	bc80      	pop	{r7}
 8005558:	4770      	bx	lr

0800555a <LL_RCC_SetADCClockSource>:
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005562:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800556a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800556e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4313      	orrs	r3, r2
 8005576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	bc80      	pop	{r7}
 8005582:	4770      	bx	lr

08005584 <LL_RCC_SetRTCClockSource>:
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800558c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005594:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005598:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bc80      	pop	{r7}
 80055ac:	4770      	bx	lr

080055ae <LL_RCC_GetRTCClockSource>:
{
 80055ae:	b480      	push	{r7}
 80055b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80055b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80055be:	4618      	mov	r0, r3
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bc80      	pop	{r7}
 80055c4:	4770      	bx	lr

080055c6 <LL_RCC_ForceBackupDomainReset>:
{
 80055c6:	b480      	push	{r7}
 80055c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80055ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80055de:	bf00      	nop
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bc80      	pop	{r7}
 80055e4:	4770      	bx	lr

080055e6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80055e6:	b480      	push	{r7}
 80055e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80055ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80055fe:	bf00      	nop
 8005600:	46bd      	mov	sp, r7
 8005602:	bc80      	pop	{r7}
 8005604:	4770      	bx	lr
	...

08005608 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005610:	2300      	movs	r3, #0
 8005612:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005614:	2300      	movs	r3, #0
 8005616:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005618:	2300      	movs	r3, #0
 800561a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d058      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8005628:	f7fe fd7e 	bl	8004128 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800562c:	f7fb fc02 	bl	8000e34 <HAL_GetTick>
 8005630:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005632:	e009      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005634:	f7fb fbfe 	bl	8000e34 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d902      	bls.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	74fb      	strb	r3, [r7, #19]
        break;
 8005646:	e006      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005648:	4b7b      	ldr	r3, [pc, #492]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005650:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005654:	d1ee      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8005656:	7cfb      	ldrb	r3, [r7, #19]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d13c      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800565c:	f7ff ffa7 	bl	80055ae <LL_RCC_GetRTCClockSource>
 8005660:	4602      	mov	r2, r0
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005666:	429a      	cmp	r2, r3
 8005668:	d00f      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800566a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800566e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005672:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005676:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005678:	f7ff ffa5 	bl	80055c6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800567c:	f7ff ffb3 	bl	80055e6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005680:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d014      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005694:	f7fb fbce 	bl	8000e34 <HAL_GetTick>
 8005698:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800569a:	e00b      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800569c:	f7fb fbca 	bl	8000e34 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d902      	bls.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	74fb      	strb	r3, [r7, #19]
            break;
 80056b2:	e004      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80056b4:	f7ff feb4 	bl	8005420 <LL_RCC_LSE_IsReady>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d1ee      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80056be:	7cfb      	ldrb	r3, [r7, #19]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d105      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff ff5b 	bl	8005584 <LL_RCC_SetRTCClockSource>
 80056ce:	e004      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056d0:	7cfb      	ldrb	r3, [r7, #19]
 80056d2:	74bb      	strb	r3, [r7, #18]
 80056d4:	e001      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d6:	7cfb      	ldrb	r3, [r7, #19]
 80056d8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d004      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7ff fea9 	bl	8005442 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d004      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff fe9e 	bl	8005442 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0320 	and.w	r3, r3, #32
 800570e:	2b00      	cmp	r3, #0
 8005710:	d004      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	4618      	mov	r0, r3
 8005718:	f7ff fec0 	bl	800549c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005724:	2b00      	cmp	r3, #0
 8005726:	d004      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	4618      	mov	r0, r3
 800572e:	f7ff fee6 	bl	80054fe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800573a:	2b00      	cmp	r3, #0
 800573c:	d004      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005742:	4618      	mov	r0, r3
 8005744:	f7ff fedb 	bl	80054fe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005750:	2b00      	cmp	r3, #0
 8005752:	d004      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005758:	4618      	mov	r0, r3
 800575a:	f7ff fed0 	bl	80054fe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005766:	2b00      	cmp	r3, #0
 8005768:	d004      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff fea9 	bl	80054c6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800577c:	2b00      	cmp	r3, #0
 800577e:	d004      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	4618      	mov	r0, r3
 8005786:	f7ff fe9e 	bl	80054c6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005792:	2b00      	cmp	r3, #0
 8005794:	d004      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff fe93 	bl	80054c6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0310 	and.w	r3, r3, #16
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d011      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7ff fe5e 	bl	8005472 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057be:	d107      	bne.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80057c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d010      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff fea5 	bl	8005530 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d107      	bne.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80057ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057fc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d011      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff fea3 	bl	800555a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005818:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800581c:	d107      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800581e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800582c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800582e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3718      	adds	r7, #24
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	58000400 	.word	0x58000400

0800583c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d071      	beq.n	8005932 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d106      	bne.n	8005868 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7fb f93a 	bl	8000adc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005870:	4b32      	ldr	r3, [pc, #200]	@ (800593c <HAL_RTC_Init+0x100>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f003 0310 	and.w	r3, r3, #16
 8005878:	2b10      	cmp	r3, #16
 800587a:	d051      	beq.n	8005920 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800587c:	4b2f      	ldr	r3, [pc, #188]	@ (800593c <HAL_RTC_Init+0x100>)
 800587e:	22ca      	movs	r2, #202	@ 0xca
 8005880:	625a      	str	r2, [r3, #36]	@ 0x24
 8005882:	4b2e      	ldr	r3, [pc, #184]	@ (800593c <HAL_RTC_Init+0x100>)
 8005884:	2253      	movs	r2, #83	@ 0x53
 8005886:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 fa11 	bl	8005cb0 <RTC_EnterInitMode>
 800588e:	4603      	mov	r3, r0
 8005890:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8005892:	7bfb      	ldrb	r3, [r7, #15]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d13f      	bne.n	8005918 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005898:	4b28      	ldr	r3, [pc, #160]	@ (800593c <HAL_RTC_Init+0x100>)
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	4a27      	ldr	r2, [pc, #156]	@ (800593c <HAL_RTC_Init+0x100>)
 800589e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 80058a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058a6:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80058a8:	4b24      	ldr	r3, [pc, #144]	@ (800593c <HAL_RTC_Init+0x100>)
 80058aa:	699a      	ldr	r2, [r3, #24]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6859      	ldr	r1, [r3, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	4319      	orrs	r1, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	430b      	orrs	r3, r1
 80058bc:	491f      	ldr	r1, [pc, #124]	@ (800593c <HAL_RTC_Init+0x100>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	041b      	lsls	r3, r3, #16
 80058cc:	491b      	ldr	r1, [pc, #108]	@ (800593c <HAL_RTC_Init+0x100>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80058d2:	4b1a      	ldr	r3, [pc, #104]	@ (800593c <HAL_RTC_Init+0x100>)
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e2:	430b      	orrs	r3, r1
 80058e4:	4915      	ldr	r1, [pc, #84]	@ (800593c <HAL_RTC_Init+0x100>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fa14 	bl	8005d18 <RTC_ExitInitMode>
 80058f0:	4603      	mov	r3, r0
 80058f2:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10e      	bne.n	8005918 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80058fa:	4b10      	ldr	r3, [pc, #64]	@ (800593c <HAL_RTC_Init+0x100>)
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a19      	ldr	r1, [r3, #32]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	4319      	orrs	r1, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	430b      	orrs	r3, r1
 8005912:	490a      	ldr	r1, [pc, #40]	@ (800593c <HAL_RTC_Init+0x100>)
 8005914:	4313      	orrs	r3, r2
 8005916:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005918:	4b08      	ldr	r3, [pc, #32]	@ (800593c <HAL_RTC_Init+0x100>)
 800591a:	22ff      	movs	r2, #255	@ 0xff
 800591c:	625a      	str	r2, [r3, #36]	@ 0x24
 800591e:	e001      	b.n	8005924 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005924:	7bfb      	ldrb	r3, [r7, #15]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d103      	bne.n	8005932 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8005932:	7bfb      	ldrb	r3, [r7, #15]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40002800 	.word	0x40002800

08005940 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005940:	b590      	push	{r4, r7, lr}
 8005942:	b087      	sub	sp, #28
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005956:	2b01      	cmp	r3, #1
 8005958:	d101      	bne.n	800595e <HAL_RTC_SetAlarm_IT+0x1e>
 800595a:	2302      	movs	r3, #2
 800595c:	e0f3      	b.n	8005b46 <HAL_RTC_SetAlarm_IT+0x206>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2202      	movs	r2, #2
 800596a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800596e:	4b78      	ldr	r3, [pc, #480]	@ (8005b50 <HAL_RTC_SetAlarm_IT+0x210>)
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005976:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800597e:	d06a      	beq.n	8005a56 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d13a      	bne.n	80059fc <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005986:	4b72      	ldr	r3, [pc, #456]	@ (8005b50 <HAL_RTC_SetAlarm_IT+0x210>)
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800598e:	2b00      	cmp	r3, #0
 8005990:	d102      	bne.n	8005998 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2200      	movs	r2, #0
 8005996:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 f9f5 	bl	8005d94 <RTC_ByteToBcd2>
 80059aa:	4603      	mov	r3, r0
 80059ac:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	785b      	ldrb	r3, [r3, #1]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 f9ee 	bl	8005d94 <RTC_ByteToBcd2>
 80059b8:	4603      	mov	r3, r0
 80059ba:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80059bc:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	789b      	ldrb	r3, [r3, #2]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 f9e6 	bl	8005d94 <RTC_ByteToBcd2>
 80059c8:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80059ca:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	78db      	ldrb	r3, [r3, #3]
 80059d2:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80059d4:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 f9d8 	bl	8005d94 <RTC_ByteToBcd2>
 80059e4:	4603      	mov	r3, r0
 80059e6:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80059e8:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80059f0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80059f6:	4313      	orrs	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]
 80059fa:	e02c      	b.n	8005a56 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8005a04:	d00d      	beq.n	8005a22 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a0e:	d008      	beq.n	8005a22 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005a10:	4b4f      	ldr	r3, [pc, #316]	@ (8005b50 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d102      	bne.n	8005a22 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	785b      	ldrb	r3, [r3, #1]
 8005a2c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005a2e:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005a34:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	78db      	ldrb	r3, [r3, #3]
 8005a3a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005a3c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005a44:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005a46:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005a4c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005a52:	4313      	orrs	r3, r2
 8005a54:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a56:	4b3e      	ldr	r3, [pc, #248]	@ (8005b50 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a58:	22ca      	movs	r2, #202	@ 0xca
 8005a5a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a5c:	4b3c      	ldr	r3, [pc, #240]	@ (8005b50 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a5e:	2253      	movs	r2, #83	@ 0x53
 8005a60:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a6a:	d12c      	bne.n	8005ac6 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005a6c:	4b38      	ldr	r3, [pc, #224]	@ (8005b50 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	4a37      	ldr	r2, [pc, #220]	@ (8005b50 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a72:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005a76:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005a78:	4b35      	ldr	r3, [pc, #212]	@ (8005b50 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a84:	d107      	bne.n	8005a96 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	699a      	ldr	r2, [r3, #24]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	4930      	ldr	r1, [pc, #192]	@ (8005b50 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	644b      	str	r3, [r1, #68]	@ 0x44
 8005a94:	e006      	b.n	8005aa4 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8005a96:	4a2e      	ldr	r2, [pc, #184]	@ (8005b50 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8005a9c:	4a2c      	ldr	r2, [pc, #176]	@ (8005b50 <HAL_RTC_SetAlarm_IT+0x210>)
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8005aa4:	4a2a      	ldr	r2, [pc, #168]	@ (8005b50 <HAL_RTC_SetAlarm_IT+0x210>)
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab0:	f043 0201 	orr.w	r2, r3, #1
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005ab8:	4b25      	ldr	r3, [pc, #148]	@ (8005b50 <HAL_RTC_SetAlarm_IT+0x210>)
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	4a24      	ldr	r2, [pc, #144]	@ (8005b50 <HAL_RTC_SetAlarm_IT+0x210>)
 8005abe:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8005ac2:	6193      	str	r3, [r2, #24]
 8005ac4:	e02b      	b.n	8005b1e <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005ac6:	4b22      	ldr	r3, [pc, #136]	@ (8005b50 <HAL_RTC_SetAlarm_IT+0x210>)
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	4a21      	ldr	r2, [pc, #132]	@ (8005b50 <HAL_RTC_SetAlarm_IT+0x210>)
 8005acc:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8005ad0:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8005b50 <HAL_RTC_SetAlarm_IT+0x210>)
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ade:	d107      	bne.n	8005af0 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	699a      	ldr	r2, [r3, #24]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	69db      	ldr	r3, [r3, #28]
 8005ae8:	4919      	ldr	r1, [pc, #100]	@ (8005b50 <HAL_RTC_SetAlarm_IT+0x210>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8005aee:	e006      	b.n	8005afe <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8005af0:	4a17      	ldr	r2, [pc, #92]	@ (8005b50 <HAL_RTC_SetAlarm_IT+0x210>)
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8005af6:	4a16      	ldr	r2, [pc, #88]	@ (8005b50 <HAL_RTC_SetAlarm_IT+0x210>)
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8005afe:	4a14      	ldr	r2, [pc, #80]	@ (8005b50 <HAL_RTC_SetAlarm_IT+0x210>)
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0a:	f043 0202 	orr.w	r2, r3, #2
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005b12:	4b0f      	ldr	r3, [pc, #60]	@ (8005b50 <HAL_RTC_SetAlarm_IT+0x210>)
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	4a0e      	ldr	r2, [pc, #56]	@ (8005b50 <HAL_RTC_SetAlarm_IT+0x210>)
 8005b18:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8005b1c:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b54 <HAL_RTC_SetAlarm_IT+0x214>)
 8005b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b24:	4a0b      	ldr	r2, [pc, #44]	@ (8005b54 <HAL_RTC_SetAlarm_IT+0x214>)
 8005b26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b2a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b2e:	4b08      	ldr	r3, [pc, #32]	@ (8005b50 <HAL_RTC_SetAlarm_IT+0x210>)
 8005b30:	22ff      	movs	r2, #255	@ 0xff
 8005b32:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	371c      	adds	r7, #28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd90      	pop	{r4, r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	40002800 	.word	0x40002800
 8005b54:	58000800 	.word	0x58000800

08005b58 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d101      	bne.n	8005b70 <HAL_RTC_DeactivateAlarm+0x18>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e048      	b.n	8005c02 <HAL_RTC_DeactivateAlarm+0xaa>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b80:	4b22      	ldr	r3, [pc, #136]	@ (8005c0c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005b82:	22ca      	movs	r2, #202	@ 0xca
 8005b84:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b86:	4b21      	ldr	r3, [pc, #132]	@ (8005c0c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005b88:	2253      	movs	r2, #83	@ 0x53
 8005b8a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b92:	d115      	bne.n	8005bc0 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005b94:	4b1d      	ldr	r3, [pc, #116]	@ (8005c0c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	4a1c      	ldr	r2, [pc, #112]	@ (8005c0c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005b9a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005b9e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8005ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8005c0c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ba4:	4a19      	ldr	r2, [pc, #100]	@ (8005c0c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005ba6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005baa:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb0:	f023 0201 	bic.w	r2, r3, #1
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005bb8:	4b14      	ldr	r3, [pc, #80]	@ (8005c0c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005bba:	2201      	movs	r2, #1
 8005bbc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005bbe:	e014      	b.n	8005bea <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005bc0:	4b12      	ldr	r3, [pc, #72]	@ (8005c0c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	4a11      	ldr	r2, [pc, #68]	@ (8005c0c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005bc6:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8005bca:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8005bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8005c0c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bd0:	4a0e      	ldr	r2, [pc, #56]	@ (8005c0c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005bd2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005bd6:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bdc:	f023 0202 	bic.w	r2, r3, #2
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005be4:	4b09      	ldr	r3, [pc, #36]	@ (8005c0c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005be6:	2202      	movs	r2, #2
 8005be8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bea:	4b08      	ldr	r3, [pc, #32]	@ (8005c0c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005bec:	22ff      	movs	r2, #255	@ 0xff
 8005bee:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bc80      	pop	{r7}
 8005c0a:	4770      	bx	lr
 8005c0c:	40002800 	.word	0x40002800

08005c10 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8005c18:	4b11      	ldr	r3, [pc, #68]	@ (8005c60 <HAL_RTC_AlarmIRQHandler+0x50>)
 8005c1a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c20:	4013      	ands	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d005      	beq.n	8005c3a <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c60 <HAL_RTC_AlarmIRQHandler+0x50>)
 8005c30:	2201      	movs	r2, #1
 8005c32:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f7fb faee 	bl	8001216 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d005      	beq.n	8005c50 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005c44:	4b06      	ldr	r3, [pc, #24]	@ (8005c60 <HAL_RTC_AlarmIRQHandler+0x50>)
 8005c46:	2202      	movs	r2, #2
 8005c48:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f94a 	bl	8005ee4 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8005c58:	bf00      	nop
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	40002800 	.word	0x40002800

08005c64 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8005c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8005cac <HAL_RTC_WaitForSynchro+0x48>)
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	4a0e      	ldr	r2, [pc, #56]	@ (8005cac <HAL_RTC_WaitForSynchro+0x48>)
 8005c72:	f023 0320 	bic.w	r3, r3, #32
 8005c76:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005c78:	f7fb f8dc 	bl	8000e34 <HAL_GetTick>
 8005c7c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005c7e:	e009      	b.n	8005c94 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c80:	f7fb f8d8 	bl	8000e34 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c8e:	d901      	bls.n	8005c94 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e006      	b.n	8005ca2 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005c94:	4b05      	ldr	r3, [pc, #20]	@ (8005cac <HAL_RTC_WaitForSynchro+0x48>)
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f003 0320 	and.w	r3, r3, #32
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0ef      	beq.n	8005c80 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	40002800 	.word	0x40002800

08005cb0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005cbc:	4b15      	ldr	r3, [pc, #84]	@ (8005d14 <RTC_EnterInitMode+0x64>)
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d120      	bne.n	8005d0a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005cc8:	4b12      	ldr	r3, [pc, #72]	@ (8005d14 <RTC_EnterInitMode+0x64>)
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	4a11      	ldr	r2, [pc, #68]	@ (8005d14 <RTC_EnterInitMode+0x64>)
 8005cce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cd2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005cd4:	f7fb f8ae 	bl	8000e34 <HAL_GetTick>
 8005cd8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005cda:	e00d      	b.n	8005cf8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005cdc:	f7fb f8aa 	bl	8000e34 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005cea:	d905      	bls.n	8005cf8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2203      	movs	r2, #3
 8005cf4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005cf8:	4b06      	ldr	r3, [pc, #24]	@ (8005d14 <RTC_EnterInitMode+0x64>)
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d102      	bne.n	8005d0a <RTC_EnterInitMode+0x5a>
 8005d04:	7bfb      	ldrb	r3, [r7, #15]
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	d1e8      	bne.n	8005cdc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	40002800 	.word	0x40002800

08005d18 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005d24:	4b1a      	ldr	r3, [pc, #104]	@ (8005d90 <RTC_ExitInitMode+0x78>)
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	4a19      	ldr	r2, [pc, #100]	@ (8005d90 <RTC_ExitInitMode+0x78>)
 8005d2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d2e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005d30:	4b17      	ldr	r3, [pc, #92]	@ (8005d90 <RTC_ExitInitMode+0x78>)
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	f003 0320 	and.w	r3, r3, #32
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10c      	bne.n	8005d56 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7ff ff91 	bl	8005c64 <HAL_RTC_WaitForSynchro>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01e      	beq.n	8005d86 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2203      	movs	r2, #3
 8005d4c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	73fb      	strb	r3, [r7, #15]
 8005d54:	e017      	b.n	8005d86 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005d56:	4b0e      	ldr	r3, [pc, #56]	@ (8005d90 <RTC_ExitInitMode+0x78>)
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	4a0d      	ldr	r2, [pc, #52]	@ (8005d90 <RTC_ExitInitMode+0x78>)
 8005d5c:	f023 0320 	bic.w	r3, r3, #32
 8005d60:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7ff ff7e 	bl	8005c64 <HAL_RTC_WaitForSynchro>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d005      	beq.n	8005d7a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2203      	movs	r2, #3
 8005d72:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005d7a:	4b05      	ldr	r3, [pc, #20]	@ (8005d90 <RTC_ExitInitMode+0x78>)
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	4a04      	ldr	r2, [pc, #16]	@ (8005d90 <RTC_ExitInitMode+0x78>)
 8005d80:	f043 0320 	orr.w	r3, r3, #32
 8005d84:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40002800 	.word	0x40002800

08005d94 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8005da6:	e005      	b.n	8005db4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	3301      	adds	r3, #1
 8005dac:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8005dae:	7afb      	ldrb	r3, [r7, #11]
 8005db0:	3b0a      	subs	r3, #10
 8005db2:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8005db4:	7afb      	ldrb	r3, [r7, #11]
 8005db6:	2b09      	cmp	r3, #9
 8005db8:	d8f6      	bhi.n	8005da8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	7afb      	ldrb	r3, [r7, #11]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	b2db      	uxtb	r3, r3
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bc80      	pop	{r7}
 8005dd0:	4770      	bx	lr
	...

08005dd4 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d101      	bne.n	8005dea <HAL_RTCEx_EnableBypassShadow+0x16>
 8005de6:	2302      	movs	r3, #2
 8005de8:	e01f      	b.n	8005e2a <HAL_RTCEx_EnableBypassShadow+0x56>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2202      	movs	r2, #2
 8005df6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8005e34 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8005dfc:	22ca      	movs	r2, #202	@ 0xca
 8005dfe:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e00:	4b0c      	ldr	r3, [pc, #48]	@ (8005e34 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8005e02:	2253      	movs	r2, #83	@ 0x53
 8005e04:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005e06:	4b0b      	ldr	r3, [pc, #44]	@ (8005e34 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8005e34 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8005e0c:	f043 0320 	orr.w	r3, r3, #32
 8005e10:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e12:	4b08      	ldr	r3, [pc, #32]	@ (8005e34 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8005e14:	22ff      	movs	r2, #255	@ 0xff
 8005e16:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bc80      	pop	{r7}
 8005e32:	4770      	bx	lr
 8005e34:	40002800 	.word	0x40002800

08005e38 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d101      	bne.n	8005e4e <HAL_RTCEx_SetSSRU_IT+0x16>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	e027      	b.n	8005e9e <HAL_RTCEx_SetSSRU_IT+0x66>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2202      	movs	r2, #2
 8005e5a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e5e:	4b12      	ldr	r3, [pc, #72]	@ (8005ea8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8005e60:	22ca      	movs	r2, #202	@ 0xca
 8005e62:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e64:	4b10      	ldr	r3, [pc, #64]	@ (8005ea8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8005e66:	2253      	movs	r2, #83	@ 0x53
 8005e68:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8005e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8005ea8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8005ea8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8005e70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e74:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8005e76:	4b0d      	ldr	r3, [pc, #52]	@ (8005eac <HAL_RTCEx_SetSSRU_IT+0x74>)
 8005e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e7c:	4a0b      	ldr	r2, [pc, #44]	@ (8005eac <HAL_RTCEx_SetSSRU_IT+0x74>)
 8005e7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e82:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e86:	4b08      	ldr	r3, [pc, #32]	@ (8005ea8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8005e88:	22ff      	movs	r2, #255	@ 0xff
 8005e8a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bc80      	pop	{r7}
 8005ea6:	4770      	bx	lr
 8005ea8:	40002800 	.word	0x40002800
 8005eac:	58000800 	.word	0x58000800

08005eb0 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8005eb8:	4b09      	ldr	r3, [pc, #36]	@ (8005ee0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8005eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d005      	beq.n	8005ed0 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8005ec4:	4b06      	ldr	r3, [pc, #24]	@ (8005ee0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8005ec6:	2240      	movs	r2, #64	@ 0x40
 8005ec8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7fb f9ad 	bl	800122a <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8005ed8:	bf00      	nop
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	40002800 	.word	0x40002800

08005ee4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bc80      	pop	{r7}
 8005ef4:	4770      	bx	lr
	...

08005ef8 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8005f04:	4b07      	ldr	r3, [pc, #28]	@ (8005f24 <HAL_RTCEx_BKUPWrite+0x2c>)
 8005f06:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	4413      	add	r3, r2
 8005f10:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	601a      	str	r2, [r3, #0]
}
 8005f18:	bf00      	nop
 8005f1a:	371c      	adds	r7, #28
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bc80      	pop	{r7}
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	4000b100 	.word	0x4000b100

08005f28 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8005f32:	4b07      	ldr	r3, [pc, #28]	@ (8005f50 <HAL_RTCEx_BKUPRead+0x28>)
 8005f34:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bc80      	pop	{r7}
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	4000b100 	.word	0x4000b100

08005f54 <LL_PWR_SetRadioBusyTrigger>:
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8005f5c:	4b06      	ldr	r3, [pc, #24]	@ (8005f78 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005f64:	4904      	ldr	r1, [pc, #16]	@ (8005f78 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	608b      	str	r3, [r1, #8]
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	58000400 	.word	0x58000400

08005f7c <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005f80:	4b05      	ldr	r3, [pc, #20]	@ (8005f98 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8005f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f86:	4a04      	ldr	r2, [pc, #16]	@ (8005f98 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8005f88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005f90:	bf00      	nop
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bc80      	pop	{r7}
 8005f96:	4770      	bx	lr
 8005f98:	58000400 	.word	0x58000400

08005f9c <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005fa0:	4b05      	ldr	r3, [pc, #20]	@ (8005fb8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8005fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fa6:	4a04      	ldr	r2, [pc, #16]	@ (8005fb8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8005fa8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005fac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005fb0:	bf00      	nop
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bc80      	pop	{r7}
 8005fb6:	4770      	bx	lr
 8005fb8:	58000400 	.word	0x58000400

08005fbc <LL_PWR_ClearFlag_RFBUSY>:
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005fc0:	4b03      	ldr	r3, [pc, #12]	@ (8005fd0 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8005fc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005fc6:	619a      	str	r2, [r3, #24]
}
 8005fc8:	bf00      	nop
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bc80      	pop	{r7}
 8005fce:	4770      	bx	lr
 8005fd0:	58000400 	.word	0x58000400

08005fd4 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005fd8:	4b06      	ldr	r3, [pc, #24]	@ (8005ff4 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d101      	bne.n	8005fe8 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e000      	b.n	8005fea <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bc80      	pop	{r7}
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	58000400 	.word	0x58000400

08005ff8 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8005ffc:	4b06      	ldr	r3, [pc, #24]	@ (8006018 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b04      	cmp	r3, #4
 8006006:	d101      	bne.n	800600c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8006008:	2301      	movs	r3, #1
 800600a:	e000      	b.n	800600e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	46bd      	mov	sp, r7
 8006012:	bc80      	pop	{r7}
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	58000400 	.word	0x58000400

0800601c <LL_RCC_RF_DisableReset>:
{
 800601c:	b480      	push	{r7}
 800601e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006020:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006024:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006028:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800602c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006030:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006034:	bf00      	nop
 8006036:	46bd      	mov	sp, r7
 8006038:	bc80      	pop	{r7}
 800603a:	4770      	bx	lr

0800603c <LL_RCC_IsRFUnderReset>:
{
 800603c:	b480      	push	{r7}
 800603e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006040:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006044:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006048:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800604c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006050:	d101      	bne.n	8006056 <LL_RCC_IsRFUnderReset+0x1a>
 8006052:	2301      	movs	r3, #1
 8006054:	e000      	b.n	8006058 <LL_RCC_IsRFUnderReset+0x1c>
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	46bd      	mov	sp, r7
 800605c:	bc80      	pop	{r7}
 800605e:	4770      	bx	lr

08006060 <LL_EXTI_EnableIT_32_63>:
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006068:	4b06      	ldr	r3, [pc, #24]	@ (8006084 <LL_EXTI_EnableIT_32_63+0x24>)
 800606a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800606e:	4905      	ldr	r1, [pc, #20]	@ (8006084 <LL_EXTI_EnableIT_32_63+0x24>)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4313      	orrs	r3, r2
 8006074:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	bc80      	pop	{r7}
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	58000800 	.word	0x58000800

08006088 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d103      	bne.n	800609e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	73fb      	strb	r3, [r7, #15]
    return status;
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	e052      	b.n	8006144 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	799b      	ldrb	r3, [r3, #6]
 80060a6:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80060a8:	7bbb      	ldrb	r3, [r7, #14]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d002      	beq.n	80060b4 <HAL_SUBGHZ_Init+0x2c>
 80060ae:	7bbb      	ldrb	r3, [r7, #14]
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d109      	bne.n	80060c8 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7fa fe28 	bl	8000d10 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80060c0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80060c4:	f7ff ffcc 	bl	8006060 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80060c8:	7bbb      	ldrb	r3, [r7, #14]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d126      	bne.n	800611c <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2202      	movs	r2, #2
 80060d2:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80060d4:	f7ff ffa2 	bl	800601c <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80060d8:	4b1c      	ldr	r3, [pc, #112]	@ (800614c <HAL_SUBGHZ_Init+0xc4>)
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	4613      	mov	r3, r2
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	1a9b      	subs	r3, r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	0cdb      	lsrs	r3, r3, #19
 80060e6:	2264      	movs	r2, #100	@ 0x64
 80060e8:	fb02 f303 	mul.w	r3, r2, r3
 80060ec:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d105      	bne.n	8006100 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	609a      	str	r2, [r3, #8]
        break;
 80060fe:	e007      	b.n	8006110 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	3b01      	subs	r3, #1
 8006104:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006106:	f7ff ff99 	bl	800603c <LL_RCC_IsRFUnderReset>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1ee      	bne.n	80060ee <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006110:	f7ff ff34 	bl	8005f7c <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8006114:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006118:	f7ff ff1c 	bl	8005f54 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800611c:	f7ff ff4e 	bl	8005fbc <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006120:	7bfb      	ldrb	r3, [r7, #15]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10a      	bne.n	800613c <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4618      	mov	r0, r3
 800612c:	f000 faac 	bl	8006688 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	719a      	strb	r2, [r3, #6]

  return status;
 8006142:	7bfb      	ldrb	r3, [r7, #15]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	20000008 	.word	0x20000008

08006150 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	607a      	str	r2, [r7, #4]
 800615a:	461a      	mov	r2, r3
 800615c:	460b      	mov	r3, r1
 800615e:	817b      	strh	r3, [r7, #10]
 8006160:	4613      	mov	r3, r2
 8006162:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	799b      	ldrb	r3, [r3, #6]
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b01      	cmp	r3, #1
 800616c:	d14a      	bne.n	8006204 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	795b      	ldrb	r3, [r3, #5]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d101      	bne.n	800617a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8006176:	2302      	movs	r3, #2
 8006178:	e045      	b.n	8006206 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2201      	movs	r2, #1
 800617e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2202      	movs	r2, #2
 8006184:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 fb4c 	bl	8006824 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800618c:	f7ff ff06 	bl	8005f9c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006190:	210d      	movs	r1, #13
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 fa98 	bl	80066c8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006198:	897b      	ldrh	r3, [r7, #10]
 800619a:	0a1b      	lsrs	r3, r3, #8
 800619c:	b29b      	uxth	r3, r3
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	4619      	mov	r1, r3
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f000 fa90 	bl	80066c8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80061a8:	897b      	ldrh	r3, [r7, #10]
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	4619      	mov	r1, r3
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f000 fa8a 	bl	80066c8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80061b4:	2300      	movs	r3, #0
 80061b6:	82bb      	strh	r3, [r7, #20]
 80061b8:	e00a      	b.n	80061d0 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80061ba:	8abb      	ldrh	r3, [r7, #20]
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	4413      	add	r3, r2
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	4619      	mov	r1, r3
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 fa7f 	bl	80066c8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80061ca:	8abb      	ldrh	r3, [r7, #20]
 80061cc:	3301      	adds	r3, #1
 80061ce:	82bb      	strh	r3, [r7, #20]
 80061d0:	8aba      	ldrh	r2, [r7, #20]
 80061d2:	893b      	ldrh	r3, [r7, #8]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d3f0      	bcc.n	80061ba <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80061d8:	f7ff fed0 	bl	8005f7c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 fb45 	bl	800686c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	75fb      	strb	r3, [r7, #23]
 80061ee:	e001      	b.n	80061f4 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80061f0:	2300      	movs	r3, #0
 80061f2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2201      	movs	r2, #1
 80061f8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	715a      	strb	r2, [r3, #5]

    return status;
 8006200:	7dfb      	ldrb	r3, [r7, #23]
 8006202:	e000      	b.n	8006206 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006204:	2302      	movs	r3, #2
  }
}
 8006206:	4618      	mov	r0, r3
 8006208:	3718      	adds	r7, #24
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b088      	sub	sp, #32
 8006212:	af00      	add	r7, sp, #0
 8006214:	60f8      	str	r0, [r7, #12]
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	461a      	mov	r2, r3
 800621a:	460b      	mov	r3, r1
 800621c:	817b      	strh	r3, [r7, #10]
 800621e:	4613      	mov	r3, r2
 8006220:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	799b      	ldrb	r3, [r3, #6]
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b01      	cmp	r3, #1
 800622e:	d14a      	bne.n	80062c6 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	795b      	ldrb	r3, [r3, #5]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d101      	bne.n	800623c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8006238:	2302      	movs	r3, #2
 800623a:	e045      	b.n	80062c8 <HAL_SUBGHZ_ReadRegisters+0xba>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2201      	movs	r2, #1
 8006240:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f000 faee 	bl	8006824 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006248:	f7ff fea8 	bl	8005f9c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800624c:	211d      	movs	r1, #29
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f000 fa3a 	bl	80066c8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006254:	897b      	ldrh	r3, [r7, #10]
 8006256:	0a1b      	lsrs	r3, r3, #8
 8006258:	b29b      	uxth	r3, r3
 800625a:	b2db      	uxtb	r3, r3
 800625c:	4619      	mov	r1, r3
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 fa32 	bl	80066c8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006264:	897b      	ldrh	r3, [r7, #10]
 8006266:	b2db      	uxtb	r3, r3
 8006268:	4619      	mov	r1, r3
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 fa2c 	bl	80066c8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006270:	2100      	movs	r1, #0
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 fa28 	bl	80066c8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006278:	2300      	movs	r3, #0
 800627a:	82fb      	strh	r3, [r7, #22]
 800627c:	e009      	b.n	8006292 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800627e:	69b9      	ldr	r1, [r7, #24]
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 fa77 	bl	8006774 <SUBGHZSPI_Receive>
      pData++;
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	3301      	adds	r3, #1
 800628a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800628c:	8afb      	ldrh	r3, [r7, #22]
 800628e:	3301      	adds	r3, #1
 8006290:	82fb      	strh	r3, [r7, #22]
 8006292:	8afa      	ldrh	r2, [r7, #22]
 8006294:	893b      	ldrh	r3, [r7, #8]
 8006296:	429a      	cmp	r2, r3
 8006298:	d3f1      	bcc.n	800627e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800629a:	f7ff fe6f 	bl	8005f7c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 fae4 	bl	800686c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	77fb      	strb	r3, [r7, #31]
 80062b0:	e001      	b.n	80062b6 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2201      	movs	r2, #1
 80062ba:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	715a      	strb	r2, [r3, #5]

    return status;
 80062c2:	7ffb      	ldrb	r3, [r7, #31]
 80062c4:	e000      	b.n	80062c8 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80062c6:	2302      	movs	r3, #2
  }
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3720      	adds	r7, #32
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	607a      	str	r2, [r7, #4]
 80062da:	461a      	mov	r2, r3
 80062dc:	460b      	mov	r3, r1
 80062de:	72fb      	strb	r3, [r7, #11]
 80062e0:	4613      	mov	r3, r2
 80062e2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	799b      	ldrb	r3, [r3, #6]
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d14a      	bne.n	8006384 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	795b      	ldrb	r3, [r3, #5]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d101      	bne.n	80062fa <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80062f6:	2302      	movs	r3, #2
 80062f8:	e045      	b.n	8006386 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2201      	movs	r2, #1
 80062fe:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 fa8f 	bl	8006824 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006306:	7afb      	ldrb	r3, [r7, #11]
 8006308:	2b84      	cmp	r3, #132	@ 0x84
 800630a:	d002      	beq.n	8006312 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800630c:	7afb      	ldrb	r3, [r7, #11]
 800630e:	2b94      	cmp	r3, #148	@ 0x94
 8006310:	d103      	bne.n	800631a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2201      	movs	r2, #1
 8006316:	711a      	strb	r2, [r3, #4]
 8006318:	e002      	b.n	8006320 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006320:	f7ff fe3c 	bl	8005f9c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006324:	7afb      	ldrb	r3, [r7, #11]
 8006326:	4619      	mov	r1, r3
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f000 f9cd 	bl	80066c8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800632e:	2300      	movs	r3, #0
 8006330:	82bb      	strh	r3, [r7, #20]
 8006332:	e00a      	b.n	800634a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006334:	8abb      	ldrh	r3, [r7, #20]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	4413      	add	r3, r2
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	4619      	mov	r1, r3
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 f9c2 	bl	80066c8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006344:	8abb      	ldrh	r3, [r7, #20]
 8006346:	3301      	adds	r3, #1
 8006348:	82bb      	strh	r3, [r7, #20]
 800634a:	8aba      	ldrh	r2, [r7, #20]
 800634c:	893b      	ldrh	r3, [r7, #8]
 800634e:	429a      	cmp	r2, r3
 8006350:	d3f0      	bcc.n	8006334 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006352:	f7ff fe13 	bl	8005f7c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8006356:	7afb      	ldrb	r3, [r7, #11]
 8006358:	2b84      	cmp	r3, #132	@ 0x84
 800635a:	d002      	beq.n	8006362 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 fa85 	bl	800686c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d002      	beq.n	8006370 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	75fb      	strb	r3, [r7, #23]
 800636e:	e001      	b.n	8006374 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006370:	2300      	movs	r3, #0
 8006372:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2201      	movs	r2, #1
 8006378:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	715a      	strb	r2, [r3, #5]

    return status;
 8006380:	7dfb      	ldrb	r3, [r7, #23]
 8006382:	e000      	b.n	8006386 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006384:	2302      	movs	r3, #2
  }
}
 8006386:	4618      	mov	r0, r3
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b088      	sub	sp, #32
 8006392:	af00      	add	r7, sp, #0
 8006394:	60f8      	str	r0, [r7, #12]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	461a      	mov	r2, r3
 800639a:	460b      	mov	r3, r1
 800639c:	72fb      	strb	r3, [r7, #11]
 800639e:	4613      	mov	r3, r2
 80063a0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	799b      	ldrb	r3, [r3, #6]
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d13d      	bne.n	800642c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	795b      	ldrb	r3, [r3, #5]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d101      	bne.n	80063bc <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80063b8:	2302      	movs	r3, #2
 80063ba:	e038      	b.n	800642e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2201      	movs	r2, #1
 80063c0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f000 fa2e 	bl	8006824 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80063c8:	f7ff fde8 	bl	8005f9c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80063cc:	7afb      	ldrb	r3, [r7, #11]
 80063ce:	4619      	mov	r1, r3
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 f979 	bl	80066c8 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80063d6:	2100      	movs	r1, #0
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 f975 	bl	80066c8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80063de:	2300      	movs	r3, #0
 80063e0:	82fb      	strh	r3, [r7, #22]
 80063e2:	e009      	b.n	80063f8 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80063e4:	69b9      	ldr	r1, [r7, #24]
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 f9c4 	bl	8006774 <SUBGHZSPI_Receive>
      pData++;
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	3301      	adds	r3, #1
 80063f0:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80063f2:	8afb      	ldrh	r3, [r7, #22]
 80063f4:	3301      	adds	r3, #1
 80063f6:	82fb      	strh	r3, [r7, #22]
 80063f8:	8afa      	ldrh	r2, [r7, #22]
 80063fa:	893b      	ldrh	r3, [r7, #8]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d3f1      	bcc.n	80063e4 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006400:	f7ff fdbc 	bl	8005f7c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 fa31 	bl	800686c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	77fb      	strb	r3, [r7, #31]
 8006416:	e001      	b.n	800641c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2201      	movs	r2, #1
 8006420:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	715a      	strb	r2, [r3, #5]

    return status;
 8006428:	7ffb      	ldrb	r3, [r7, #31]
 800642a:	e000      	b.n	800642e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800642c:	2302      	movs	r3, #2
  }
}
 800642e:	4618      	mov	r0, r3
 8006430:	3720      	adds	r7, #32
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b086      	sub	sp, #24
 800643a:	af00      	add	r7, sp, #0
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	607a      	str	r2, [r7, #4]
 8006440:	461a      	mov	r2, r3
 8006442:	460b      	mov	r3, r1
 8006444:	72fb      	strb	r3, [r7, #11]
 8006446:	4613      	mov	r3, r2
 8006448:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	799b      	ldrb	r3, [r3, #6]
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b01      	cmp	r3, #1
 8006452:	d13e      	bne.n	80064d2 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	795b      	ldrb	r3, [r3, #5]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d101      	bne.n	8006460 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800645c:	2302      	movs	r3, #2
 800645e:	e039      	b.n	80064d4 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2201      	movs	r2, #1
 8006464:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f000 f9dc 	bl	8006824 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800646c:	f7ff fd96 	bl	8005f9c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8006470:	210e      	movs	r1, #14
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 f928 	bl	80066c8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006478:	7afb      	ldrb	r3, [r7, #11]
 800647a:	4619      	mov	r1, r3
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 f923 	bl	80066c8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006482:	2300      	movs	r3, #0
 8006484:	82bb      	strh	r3, [r7, #20]
 8006486:	e00a      	b.n	800649e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006488:	8abb      	ldrh	r3, [r7, #20]
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	4413      	add	r3, r2
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	4619      	mov	r1, r3
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 f918 	bl	80066c8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006498:	8abb      	ldrh	r3, [r7, #20]
 800649a:	3301      	adds	r3, #1
 800649c:	82bb      	strh	r3, [r7, #20]
 800649e:	8aba      	ldrh	r2, [r7, #20]
 80064a0:	893b      	ldrh	r3, [r7, #8]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d3f0      	bcc.n	8006488 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80064a6:	f7ff fd69 	bl	8005f7c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f000 f9de 	bl	800686c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	75fb      	strb	r3, [r7, #23]
 80064bc:	e001      	b.n	80064c2 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2201      	movs	r2, #1
 80064c6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	715a      	strb	r2, [r3, #5]

    return status;
 80064ce:	7dfb      	ldrb	r3, [r7, #23]
 80064d0:	e000      	b.n	80064d4 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80064d2:	2302      	movs	r3, #2
  }
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3718      	adds	r7, #24
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b088      	sub	sp, #32
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	607a      	str	r2, [r7, #4]
 80064e6:	461a      	mov	r2, r3
 80064e8:	460b      	mov	r3, r1
 80064ea:	72fb      	strb	r3, [r7, #11]
 80064ec:	4613      	mov	r3, r2
 80064ee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	799b      	ldrb	r3, [r3, #6]
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d141      	bne.n	8006582 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	795b      	ldrb	r3, [r3, #5]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d101      	bne.n	800650a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8006506:	2302      	movs	r3, #2
 8006508:	e03c      	b.n	8006584 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2201      	movs	r2, #1
 800650e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 f987 	bl	8006824 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006516:	f7ff fd41 	bl	8005f9c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800651a:	211e      	movs	r1, #30
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 f8d3 	bl	80066c8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006522:	7afb      	ldrb	r3, [r7, #11]
 8006524:	4619      	mov	r1, r3
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 f8ce 	bl	80066c8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800652c:	2100      	movs	r1, #0
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f000 f8ca 	bl	80066c8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006534:	2300      	movs	r3, #0
 8006536:	82fb      	strh	r3, [r7, #22]
 8006538:	e009      	b.n	800654e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800653a:	69b9      	ldr	r1, [r7, #24]
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 f919 	bl	8006774 <SUBGHZSPI_Receive>
      pData++;
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	3301      	adds	r3, #1
 8006546:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006548:	8afb      	ldrh	r3, [r7, #22]
 800654a:	3301      	adds	r3, #1
 800654c:	82fb      	strh	r3, [r7, #22]
 800654e:	8afa      	ldrh	r2, [r7, #22]
 8006550:	893b      	ldrh	r3, [r7, #8]
 8006552:	429a      	cmp	r2, r3
 8006554:	d3f1      	bcc.n	800653a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006556:	f7ff fd11 	bl	8005f7c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 f986 	bl	800686c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	77fb      	strb	r3, [r7, #31]
 800656c:	e001      	b.n	8006572 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2201      	movs	r2, #1
 8006576:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	715a      	strb	r2, [r3, #5]

    return status;
 800657e:	7ffb      	ldrb	r3, [r7, #31]
 8006580:	e000      	b.n	8006584 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006582:	2302      	movs	r3, #2
  }
}
 8006584:	4618      	mov	r0, r3
 8006586:	3720      	adds	r7, #32
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8006594:	2300      	movs	r3, #0
 8006596:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8006598:	f107 020c 	add.w	r2, r7, #12
 800659c:	2302      	movs	r3, #2
 800659e:	2112      	movs	r1, #18
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7ff fef4 	bl	800638e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80065a6:	7b3b      	ldrb	r3, [r7, #12]
 80065a8:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 80065aa:	89fb      	ldrh	r3, [r7, #14]
 80065ac:	021b      	lsls	r3, r3, #8
 80065ae:	b21a      	sxth	r2, r3
 80065b0:	7b7b      	ldrb	r3, [r7, #13]
 80065b2:	b21b      	sxth	r3, r3
 80065b4:	4313      	orrs	r3, r2
 80065b6:	b21b      	sxth	r3, r3
 80065b8:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80065ba:	f107 020c 	add.w	r2, r7, #12
 80065be:	2302      	movs	r3, #2
 80065c0:	2102      	movs	r1, #2
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7ff fe84 	bl	80062d0 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80065c8:	89fb      	ldrh	r3, [r7, #14]
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f005 fbf0 	bl	800bdb8 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80065d8:	89fb      	ldrh	r3, [r7, #14]
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f005 fbf6 	bl	800bdd4 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80065e8:	89fb      	ldrh	r3, [r7, #14]
 80065ea:	f003 0304 	and.w	r3, r3, #4
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f005 fc46 	bl	800be84 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80065f8:	89fb      	ldrh	r3, [r7, #14]
 80065fa:	f003 0308 	and.w	r3, r3, #8
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f005 fc4c 	bl	800bea0 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8006608:	89fb      	ldrh	r3, [r7, #14]
 800660a:	f003 0310 	and.w	r3, r3, #16
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f005 fc52 	bl	800bebc <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8006618:	89fb      	ldrh	r3, [r7, #14]
 800661a:	f003 0320 	and.w	r3, r3, #32
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f005 fc20 	bl	800be68 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8006628:	89fb      	ldrh	r3, [r7, #14]
 800662a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800662e:	2b00      	cmp	r3, #0
 8006630:	d002      	beq.n	8006638 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f005 fbdc 	bl	800bdf0 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8006638:	89fb      	ldrh	r3, [r7, #14]
 800663a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00d      	beq.n	800665e <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8006642:	89fb      	ldrh	r3, [r7, #14]
 8006644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006648:	2b00      	cmp	r3, #0
 800664a:	d004      	beq.n	8006656 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800664c:	2101      	movs	r1, #1
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f005 fbdc 	bl	800be0c <HAL_SUBGHZ_CADStatusCallback>
 8006654:	e003      	b.n	800665e <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8006656:	2100      	movs	r1, #0
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f005 fbd7 	bl	800be0c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800665e:	89fb      	ldrh	r3, [r7, #14]
 8006660:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f005 fbed 	bl	800be48 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800666e:	89fb      	ldrh	r3, [r7, #14]
 8006670:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f005 fc2d 	bl	800bed8 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800667e:	bf00      	nop
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
	...

08006688 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006690:	4b0c      	ldr	r3, [pc, #48]	@ (80066c4 <SUBGHZSPI_Init+0x3c>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a0b      	ldr	r2, [pc, #44]	@ (80066c4 <SUBGHZSPI_Init+0x3c>)
 8006696:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800669a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800669c:	4a09      	ldr	r2, [pc, #36]	@ (80066c4 <SUBGHZSPI_Init+0x3c>)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 80066a4:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80066a6:	4b07      	ldr	r3, [pc, #28]	@ (80066c4 <SUBGHZSPI_Init+0x3c>)
 80066a8:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80066ac:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80066ae:	4b05      	ldr	r3, [pc, #20]	@ (80066c4 <SUBGHZSPI_Init+0x3c>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a04      	ldr	r2, [pc, #16]	@ (80066c4 <SUBGHZSPI_Init+0x3c>)
 80066b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066b8:	6013      	str	r3, [r2, #0]
}
 80066ba:	bf00      	nop
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	bc80      	pop	{r7}
 80066c2:	4770      	bx	lr
 80066c4:	58010000 	.word	0x58010000

080066c8 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	460b      	mov	r3, r1
 80066d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80066d4:	2300      	movs	r3, #0
 80066d6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80066d8:	4b23      	ldr	r3, [pc, #140]	@ (8006768 <SUBGHZSPI_Transmit+0xa0>)
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	4613      	mov	r3, r2
 80066de:	00db      	lsls	r3, r3, #3
 80066e0:	1a9b      	subs	r3, r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	0cdb      	lsrs	r3, r3, #19
 80066e6:	2264      	movs	r2, #100	@ 0x64
 80066e8:	fb02 f303 	mul.w	r3, r2, r3
 80066ec:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d105      	bne.n	8006700 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	609a      	str	r2, [r3, #8]
      break;
 80066fe:	e008      	b.n	8006712 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	3b01      	subs	r3, #1
 8006704:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006706:	4b19      	ldr	r3, [pc, #100]	@ (800676c <SUBGHZSPI_Transmit+0xa4>)
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b02      	cmp	r3, #2
 8006710:	d1ed      	bne.n	80066ee <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8006712:	4b17      	ldr	r3, [pc, #92]	@ (8006770 <SUBGHZSPI_Transmit+0xa8>)
 8006714:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	78fa      	ldrb	r2, [r7, #3]
 800671a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800671c:	4b12      	ldr	r3, [pc, #72]	@ (8006768 <SUBGHZSPI_Transmit+0xa0>)
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	4613      	mov	r3, r2
 8006722:	00db      	lsls	r3, r3, #3
 8006724:	1a9b      	subs	r3, r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	0cdb      	lsrs	r3, r3, #19
 800672a:	2264      	movs	r2, #100	@ 0x64
 800672c:	fb02 f303 	mul.w	r3, r2, r3
 8006730:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d105      	bne.n	8006744 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	609a      	str	r2, [r3, #8]
      break;
 8006742:	e008      	b.n	8006756 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	3b01      	subs	r3, #1
 8006748:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800674a:	4b08      	ldr	r3, [pc, #32]	@ (800676c <SUBGHZSPI_Transmit+0xa4>)
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b01      	cmp	r3, #1
 8006754:	d1ed      	bne.n	8006732 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006756:	4b05      	ldr	r3, [pc, #20]	@ (800676c <SUBGHZSPI_Transmit+0xa4>)
 8006758:	68db      	ldr	r3, [r3, #12]

  return status;
 800675a:	7dfb      	ldrb	r3, [r7, #23]
}
 800675c:	4618      	mov	r0, r3
 800675e:	371c      	adds	r7, #28
 8006760:	46bd      	mov	sp, r7
 8006762:	bc80      	pop	{r7}
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	20000008 	.word	0x20000008
 800676c:	58010000 	.word	0x58010000
 8006770:	5801000c 	.word	0x5801000c

08006774 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800677e:	2300      	movs	r3, #0
 8006780:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006782:	4b25      	ldr	r3, [pc, #148]	@ (8006818 <SUBGHZSPI_Receive+0xa4>)
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	4613      	mov	r3, r2
 8006788:	00db      	lsls	r3, r3, #3
 800678a:	1a9b      	subs	r3, r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	0cdb      	lsrs	r3, r3, #19
 8006790:	2264      	movs	r2, #100	@ 0x64
 8006792:	fb02 f303 	mul.w	r3, r2, r3
 8006796:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d105      	bne.n	80067aa <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	609a      	str	r2, [r3, #8]
      break;
 80067a8:	e008      	b.n	80067bc <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3b01      	subs	r3, #1
 80067ae:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80067b0:	4b1a      	ldr	r3, [pc, #104]	@ (800681c <SUBGHZSPI_Receive+0xa8>)
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f003 0302 	and.w	r3, r3, #2
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d1ed      	bne.n	8006798 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80067bc:	4b18      	ldr	r3, [pc, #96]	@ (8006820 <SUBGHZSPI_Receive+0xac>)
 80067be:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	22ff      	movs	r2, #255	@ 0xff
 80067c4:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80067c6:	4b14      	ldr	r3, [pc, #80]	@ (8006818 <SUBGHZSPI_Receive+0xa4>)
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	4613      	mov	r3, r2
 80067cc:	00db      	lsls	r3, r3, #3
 80067ce:	1a9b      	subs	r3, r3, r2
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	0cdb      	lsrs	r3, r3, #19
 80067d4:	2264      	movs	r2, #100	@ 0x64
 80067d6:	fb02 f303 	mul.w	r3, r2, r3
 80067da:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d105      	bne.n	80067ee <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	609a      	str	r2, [r3, #8]
      break;
 80067ec:	e008      	b.n	8006800 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	3b01      	subs	r3, #1
 80067f2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80067f4:	4b09      	ldr	r3, [pc, #36]	@ (800681c <SUBGHZSPI_Receive+0xa8>)
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d1ed      	bne.n	80067dc <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006800:	4b06      	ldr	r3, [pc, #24]	@ (800681c <SUBGHZSPI_Receive+0xa8>)
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	b2da      	uxtb	r2, r3
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	701a      	strb	r2, [r3, #0]

  return status;
 800680a:	7dfb      	ldrb	r3, [r7, #23]
}
 800680c:	4618      	mov	r0, r3
 800680e:	371c      	adds	r7, #28
 8006810:	46bd      	mov	sp, r7
 8006812:	bc80      	pop	{r7}
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	20000008 	.word	0x20000008
 800681c:	58010000 	.word	0x58010000
 8006820:	5801000c 	.word	0x5801000c

08006824 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	791b      	ldrb	r3, [r3, #4]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d111      	bne.n	8006858 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8006834:	4b0c      	ldr	r3, [pc, #48]	@ (8006868 <SUBGHZ_CheckDeviceReady+0x44>)
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	4613      	mov	r3, r2
 800683a:	005b      	lsls	r3, r3, #1
 800683c:	4413      	add	r3, r2
 800683e:	00db      	lsls	r3, r3, #3
 8006840:	0c1b      	lsrs	r3, r3, #16
 8006842:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006844:	f7ff fbaa 	bl	8005f9c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3b01      	subs	r3, #1
 800684c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1f9      	bne.n	8006848 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006854:	f7ff fb92 	bl	8005f7c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f807 	bl	800686c <SUBGHZ_WaitOnBusy>
 800685e:	4603      	mov	r3, r0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	20000008 	.word	0x20000008

0800686c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8006874:	2300      	movs	r3, #0
 8006876:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8006878:	4b12      	ldr	r3, [pc, #72]	@ (80068c4 <SUBGHZ_WaitOnBusy+0x58>)
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	4613      	mov	r3, r2
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	4413      	add	r3, r2
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	0d1b      	lsrs	r3, r3, #20
 8006886:	2264      	movs	r2, #100	@ 0x64
 8006888:	fb02 f303 	mul.w	r3, r2, r3
 800688c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800688e:	f7ff fbb3 	bl	8005ff8 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8006892:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d105      	bne.n	80068a6 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2202      	movs	r2, #2
 80068a2:	609a      	str	r2, [r3, #8]
      break;
 80068a4:	e009      	b.n	80068ba <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	3b01      	subs	r3, #1
 80068aa:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80068ac:	f7ff fb92 	bl	8005fd4 <LL_PWR_IsActiveFlag_RFBUSYS>
 80068b0:	4602      	mov	r2, r0
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	4013      	ands	r3, r2
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d0e9      	beq.n	800688e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80068ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3718      	adds	r7, #24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	20000008 	.word	0x20000008

080068c8 <LL_RCC_GetUSARTClockSource>:
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80068d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	401a      	ands	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	041b      	lsls	r3, r3, #16
 80068e0:	4313      	orrs	r3, r2
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bc80      	pop	{r7}
 80068ea:	4770      	bx	lr

080068ec <LL_RCC_GetLPUARTClockSource>:
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80068f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4013      	ands	r3, r2
}
 8006900:	4618      	mov	r0, r3
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	bc80      	pop	{r7}
 8006908:	4770      	bx	lr

0800690a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b082      	sub	sp, #8
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d101      	bne.n	800691c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e042      	b.n	80069a2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006922:	2b00      	cmp	r3, #0
 8006924:	d106      	bne.n	8006934 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7fa fde0 	bl	80014f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2224      	movs	r2, #36	@ 0x24
 8006938:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0201 	bic.w	r2, r2, #1
 800694a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fc3b 	bl	80071c8 <UART_SetConfig>
 8006952:	4603      	mov	r3, r0
 8006954:	2b01      	cmp	r3, #1
 8006956:	d101      	bne.n	800695c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e022      	b.n	80069a2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006960:	2b00      	cmp	r3, #0
 8006962:	d002      	beq.n	800696a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fea3 	bl	80076b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006978:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006988:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f042 0201 	orr.w	r2, r2, #1
 8006998:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 ff29 	bl	80077f2 <UART_CheckIdleState>
 80069a0:	4603      	mov	r3, r0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3708      	adds	r7, #8
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
	...

080069ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b08a      	sub	sp, #40	@ 0x28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	4613      	mov	r3, r2
 80069b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069c0:	2b20      	cmp	r3, #32
 80069c2:	d137      	bne.n	8006a34 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d002      	beq.n	80069d0 <HAL_UART_Receive_IT+0x24>
 80069ca:	88fb      	ldrh	r3, [r7, #6]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d101      	bne.n	80069d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e030      	b.n	8006a36 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a18      	ldr	r2, [pc, #96]	@ (8006a40 <HAL_UART_Receive_IT+0x94>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d01f      	beq.n	8006a24 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d018      	beq.n	8006a24 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	e853 3f00 	ldrex	r3, [r3]
 80069fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a06:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a10:	623b      	str	r3, [r7, #32]
 8006a12:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a14:	69f9      	ldr	r1, [r7, #28]
 8006a16:	6a3a      	ldr	r2, [r7, #32]
 8006a18:	e841 2300 	strex	r3, r2, [r1]
 8006a1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1e6      	bne.n	80069f2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a24:	88fb      	ldrh	r3, [r7, #6]
 8006a26:	461a      	mov	r2, r3
 8006a28:	68b9      	ldr	r1, [r7, #8]
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f000 fff8 	bl	8007a20 <UART_Start_Receive_IT>
 8006a30:	4603      	mov	r3, r0
 8006a32:	e000      	b.n	8006a36 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006a34:	2302      	movs	r3, #2
  }
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3728      	adds	r7, #40	@ 0x28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	40008000 	.word	0x40008000

08006a44 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b08a      	sub	sp, #40	@ 0x28
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a58:	2b20      	cmp	r3, #32
 8006a5a:	d167      	bne.n	8006b2c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d002      	beq.n	8006a68 <HAL_UART_Transmit_DMA+0x24>
 8006a62:	88fb      	ldrh	r3, [r7, #6]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e060      	b.n	8006b2e <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	88fa      	ldrh	r2, [r7, #6]
 8006a76:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	88fa      	ldrh	r2, [r7, #6]
 8006a7e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2221      	movs	r2, #33	@ 0x21
 8006a8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d028      	beq.n	8006aec <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a9e:	4a26      	ldr	r2, [pc, #152]	@ (8006b38 <HAL_UART_Transmit_DMA+0xf4>)
 8006aa0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006aa6:	4a25      	ldr	r2, [pc, #148]	@ (8006b3c <HAL_UART_Transmit_DMA+0xf8>)
 8006aa8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006aae:	4a24      	ldr	r2, [pc, #144]	@ (8006b40 <HAL_UART_Transmit_DMA+0xfc>)
 8006ab0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	3328      	adds	r3, #40	@ 0x28
 8006aca:	461a      	mov	r2, r3
 8006acc:	88fb      	ldrh	r3, [r7, #6]
 8006ace:	f7fb fa25 	bl	8001f1c <HAL_DMA_Start_IT>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d009      	beq.n	8006aec <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2210      	movs	r2, #16
 8006adc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e020      	b.n	8006b2e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2240      	movs	r2, #64	@ 0x40
 8006af2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3308      	adds	r3, #8
 8006afa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	e853 3f00 	ldrex	r3, [r3]
 8006b02:	613b      	str	r3, [r7, #16]
   return(result);
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	3308      	adds	r3, #8
 8006b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b14:	623a      	str	r2, [r7, #32]
 8006b16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b18:	69f9      	ldr	r1, [r7, #28]
 8006b1a:	6a3a      	ldr	r2, [r7, #32]
 8006b1c:	e841 2300 	strex	r3, r2, [r1]
 8006b20:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1e5      	bne.n	8006af4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	e000      	b.n	8006b2e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006b2c:	2302      	movs	r3, #2
  }
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3728      	adds	r7, #40	@ 0x28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	08007dab 	.word	0x08007dab
 8006b3c:	08007e45 	.word	0x08007e45
 8006b40:	08007e61 	.word	0x08007e61

08006b44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b0ba      	sub	sp, #232	@ 0xe8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006b6e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006b72:	4013      	ands	r3, r2
 8006b74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006b78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d11b      	bne.n	8006bb8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b84:	f003 0320 	and.w	r3, r3, #32
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d015      	beq.n	8006bb8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b90:	f003 0320 	and.w	r3, r3, #32
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d105      	bne.n	8006ba4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d009      	beq.n	8006bb8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f000 82e3 	beq.w	8007174 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	4798      	blx	r3
      }
      return;
 8006bb6:	e2dd      	b.n	8007174 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006bb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 8123 	beq.w	8006e08 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006bc2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006bc6:	4b8d      	ldr	r3, [pc, #564]	@ (8006dfc <HAL_UART_IRQHandler+0x2b8>)
 8006bc8:	4013      	ands	r3, r2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d106      	bne.n	8006bdc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006bce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006bd2:	4b8b      	ldr	r3, [pc, #556]	@ (8006e00 <HAL_UART_IRQHandler+0x2bc>)
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f000 8116 	beq.w	8006e08 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d011      	beq.n	8006c0c <HAL_UART_IRQHandler+0xc8>
 8006be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00b      	beq.n	8006c0c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c02:	f043 0201 	orr.w	r2, r3, #1
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d011      	beq.n	8006c3c <HAL_UART_IRQHandler+0xf8>
 8006c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00b      	beq.n	8006c3c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2202      	movs	r2, #2
 8006c2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c32:	f043 0204 	orr.w	r2, r3, #4
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c40:	f003 0304 	and.w	r3, r3, #4
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d011      	beq.n	8006c6c <HAL_UART_IRQHandler+0x128>
 8006c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00b      	beq.n	8006c6c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2204      	movs	r2, #4
 8006c5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c62:	f043 0202 	orr.w	r2, r3, #2
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c70:	f003 0308 	and.w	r3, r3, #8
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d017      	beq.n	8006ca8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c7c:	f003 0320 	and.w	r3, r3, #32
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d105      	bne.n	8006c90 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006c84:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006c88:	4b5c      	ldr	r3, [pc, #368]	@ (8006dfc <HAL_UART_IRQHandler+0x2b8>)
 8006c8a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00b      	beq.n	8006ca8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2208      	movs	r2, #8
 8006c96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c9e:	f043 0208 	orr.w	r2, r3, #8
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d012      	beq.n	8006cda <HAL_UART_IRQHandler+0x196>
 8006cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cb8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00c      	beq.n	8006cda <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006cc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cd0:	f043 0220 	orr.w	r2, r3, #32
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 8249 	beq.w	8007178 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cea:	f003 0320 	and.w	r3, r3, #32
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d013      	beq.n	8006d1a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cf6:	f003 0320 	and.w	r3, r3, #32
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d105      	bne.n	8006d0a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006cfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d007      	beq.n	8006d1a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d003      	beq.n	8006d1a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d20:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d2e:	2b40      	cmp	r3, #64	@ 0x40
 8006d30:	d005      	beq.n	8006d3e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d36:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d054      	beq.n	8006de8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 ffce 	bl	8007ce0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d4e:	2b40      	cmp	r3, #64	@ 0x40
 8006d50:	d146      	bne.n	8006de0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3308      	adds	r3, #8
 8006d58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006d68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3308      	adds	r3, #8
 8006d7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006d7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006d82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006d8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006d8e:	e841 2300 	strex	r3, r2, [r1]
 8006d92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006d96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1d9      	bne.n	8006d52 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d017      	beq.n	8006dd8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dae:	4a15      	ldr	r2, [pc, #84]	@ (8006e04 <HAL_UART_IRQHandler+0x2c0>)
 8006db0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7fb f98b 	bl	80020d4 <HAL_DMA_Abort_IT>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d019      	beq.n	8006df8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006dd2:	4610      	mov	r0, r2
 8006dd4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd6:	e00f      	b.n	8006df8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f9e0 	bl	800719e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dde:	e00b      	b.n	8006df8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f9dc 	bl	800719e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006de6:	e007      	b.n	8006df8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f9d8 	bl	800719e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006df6:	e1bf      	b.n	8007178 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df8:	bf00      	nop
    return;
 8006dfa:	e1bd      	b.n	8007178 <HAL_UART_IRQHandler+0x634>
 8006dfc:	10000001 	.word	0x10000001
 8006e00:	04000120 	.word	0x04000120
 8006e04:	08007ee1 	.word	0x08007ee1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	f040 8153 	bne.w	80070b8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e16:	f003 0310 	and.w	r3, r3, #16
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 814c 	beq.w	80070b8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e24:	f003 0310 	and.w	r3, r3, #16
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 8145 	beq.w	80070b8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2210      	movs	r2, #16
 8006e34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e40:	2b40      	cmp	r3, #64	@ 0x40
 8006e42:	f040 80bb 	bne.w	8006fbc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 818f 	beq.w	800717c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	f080 8187 	bcs.w	800717c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0320 	and.w	r3, r3, #32
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f040 8087 	bne.w	8006f9a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006e98:	e853 3f00 	ldrex	r3, [r3]
 8006e9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ea4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ea8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006eb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006eba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006ec2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ec6:	e841 2300 	strex	r3, r2, [r1]
 8006eca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006ece:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1da      	bne.n	8006e8c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3308      	adds	r3, #8
 8006edc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ede:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ee0:	e853 3f00 	ldrex	r3, [r3]
 8006ee4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006ee6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ee8:	f023 0301 	bic.w	r3, r3, #1
 8006eec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3308      	adds	r3, #8
 8006ef6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006efa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006efe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006f02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006f06:	e841 2300 	strex	r3, r2, [r1]
 8006f0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006f0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1e1      	bne.n	8006ed6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	3308      	adds	r3, #8
 8006f18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f1c:	e853 3f00 	ldrex	r3, [r3]
 8006f20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006f22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3308      	adds	r3, #8
 8006f32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006f36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006f38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006f3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006f3e:	e841 2300 	strex	r3, r2, [r1]
 8006f42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006f44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1e3      	bne.n	8006f12 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f60:	e853 3f00 	ldrex	r3, [r3]
 8006f64:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f68:	f023 0310 	bic.w	r3, r3, #16
 8006f6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	461a      	mov	r2, r3
 8006f76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f7c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f82:	e841 2300 	strex	r3, r2, [r1]
 8006f86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1e4      	bne.n	8006f58 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7fb f83f 	bl	8002018 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f8fb 	bl	80071b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fba:	e0df      	b.n	800717c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 80d1 	beq.w	8007180 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006fde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f000 80cc 	beq.w	8007180 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ff8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ffc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	461a      	mov	r2, r3
 8007006:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800700a:	647b      	str	r3, [r7, #68]	@ 0x44
 800700c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007010:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007012:	e841 2300 	strex	r3, r2, [r1]
 8007016:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1e4      	bne.n	8006fe8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3308      	adds	r3, #8
 8007024:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007028:	e853 3f00 	ldrex	r3, [r3]
 800702c:	623b      	str	r3, [r7, #32]
   return(result);
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007034:	f023 0301 	bic.w	r3, r3, #1
 8007038:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	3308      	adds	r3, #8
 8007042:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007046:	633a      	str	r2, [r7, #48]	@ 0x30
 8007048:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800704c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800704e:	e841 2300 	strex	r3, r2, [r1]
 8007052:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1e1      	bne.n	800701e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2220      	movs	r2, #32
 800705e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	e853 3f00 	ldrex	r3, [r3]
 800707a:	60fb      	str	r3, [r7, #12]
   return(result);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f023 0310 	bic.w	r3, r3, #16
 8007082:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	461a      	mov	r2, r3
 800708c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007090:	61fb      	str	r3, [r7, #28]
 8007092:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007094:	69b9      	ldr	r1, [r7, #24]
 8007096:	69fa      	ldr	r2, [r7, #28]
 8007098:	e841 2300 	strex	r3, r2, [r1]
 800709c:	617b      	str	r3, [r7, #20]
   return(result);
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1e4      	bne.n	800706e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2202      	movs	r2, #2
 80070a8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80070ae:	4619      	mov	r1, r3
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 f87d 	bl	80071b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070b6:	e063      	b.n	8007180 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80070b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00e      	beq.n	80070e2 <HAL_UART_IRQHandler+0x59e>
 80070c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d008      	beq.n	80070e2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80070d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f001 fc5e 	bl	800899c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070e0:	e051      	b.n	8007186 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80070e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d014      	beq.n	8007118 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80070ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d105      	bne.n	8007106 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80070fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d008      	beq.n	8007118 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800710a:	2b00      	cmp	r3, #0
 800710c:	d03a      	beq.n	8007184 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	4798      	blx	r3
    }
    return;
 8007116:	e035      	b.n	8007184 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800711c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007120:	2b00      	cmp	r3, #0
 8007122:	d009      	beq.n	8007138 <HAL_UART_IRQHandler+0x5f4>
 8007124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800712c:	2b00      	cmp	r3, #0
 800712e:	d003      	beq.n	8007138 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 feeb 	bl	8007f0c <UART_EndTransmit_IT>
    return;
 8007136:	e026      	b.n	8007186 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800713c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007140:	2b00      	cmp	r3, #0
 8007142:	d009      	beq.n	8007158 <HAL_UART_IRQHandler+0x614>
 8007144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007148:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800714c:	2b00      	cmp	r3, #0
 800714e:	d003      	beq.n	8007158 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f001 fc35 	bl	80089c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007156:	e016      	b.n	8007186 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800715c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d010      	beq.n	8007186 <HAL_UART_IRQHandler+0x642>
 8007164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007168:	2b00      	cmp	r3, #0
 800716a:	da0c      	bge.n	8007186 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f001 fc1e 	bl	80089ae <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007172:	e008      	b.n	8007186 <HAL_UART_IRQHandler+0x642>
      return;
 8007174:	bf00      	nop
 8007176:	e006      	b.n	8007186 <HAL_UART_IRQHandler+0x642>
    return;
 8007178:	bf00      	nop
 800717a:	e004      	b.n	8007186 <HAL_UART_IRQHandler+0x642>
      return;
 800717c:	bf00      	nop
 800717e:	e002      	b.n	8007186 <HAL_UART_IRQHandler+0x642>
      return;
 8007180:	bf00      	nop
 8007182:	e000      	b.n	8007186 <HAL_UART_IRQHandler+0x642>
    return;
 8007184:	bf00      	nop
  }
}
 8007186:	37e8      	adds	r7, #232	@ 0xe8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	bc80      	pop	{r7}
 800719c:	4770      	bx	lr

0800719e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800719e:	b480      	push	{r7}
 80071a0:	b083      	sub	sp, #12
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80071a6:	bf00      	nop
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bc80      	pop	{r7}
 80071ae:	4770      	bx	lr

080071b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	460b      	mov	r3, r1
 80071ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bc80      	pop	{r7}
 80071c4:	4770      	bx	lr
	...

080071c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071cc:	b08c      	sub	sp, #48	@ 0x30
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	689a      	ldr	r2, [r3, #8]
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	431a      	orrs	r2, r3
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	431a      	orrs	r2, r3
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	69db      	ldr	r3, [r3, #28]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	4b94      	ldr	r3, [pc, #592]	@ (8007448 <UART_SetConfig+0x280>)
 80071f8:	4013      	ands	r3, r2
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	6812      	ldr	r2, [r2, #0]
 80071fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007200:	430b      	orrs	r3, r1
 8007202:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	68da      	ldr	r2, [r3, #12]
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a89      	ldr	r2, [pc, #548]	@ (800744c <UART_SetConfig+0x284>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d004      	beq.n	8007234 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007230:	4313      	orrs	r3, r2
 8007232:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800723e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	6812      	ldr	r2, [r2, #0]
 8007246:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007248:	430b      	orrs	r3, r1
 800724a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007252:	f023 010f 	bic.w	r1, r3, #15
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	430a      	orrs	r2, r1
 8007260:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a7a      	ldr	r2, [pc, #488]	@ (8007450 <UART_SetConfig+0x288>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d127      	bne.n	80072bc <UART_SetConfig+0xf4>
 800726c:	2003      	movs	r0, #3
 800726e:	f7ff fb2b 	bl	80068c8 <LL_RCC_GetUSARTClockSource>
 8007272:	4603      	mov	r3, r0
 8007274:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8007278:	2b03      	cmp	r3, #3
 800727a:	d81b      	bhi.n	80072b4 <UART_SetConfig+0xec>
 800727c:	a201      	add	r2, pc, #4	@ (adr r2, 8007284 <UART_SetConfig+0xbc>)
 800727e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007282:	bf00      	nop
 8007284:	08007295 	.word	0x08007295
 8007288:	080072a5 	.word	0x080072a5
 800728c:	0800729d 	.word	0x0800729d
 8007290:	080072ad 	.word	0x080072ad
 8007294:	2301      	movs	r3, #1
 8007296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800729a:	e080      	b.n	800739e <UART_SetConfig+0x1d6>
 800729c:	2302      	movs	r3, #2
 800729e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072a2:	e07c      	b.n	800739e <UART_SetConfig+0x1d6>
 80072a4:	2304      	movs	r3, #4
 80072a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072aa:	e078      	b.n	800739e <UART_SetConfig+0x1d6>
 80072ac:	2308      	movs	r3, #8
 80072ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072b2:	e074      	b.n	800739e <UART_SetConfig+0x1d6>
 80072b4:	2310      	movs	r3, #16
 80072b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072ba:	e070      	b.n	800739e <UART_SetConfig+0x1d6>
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a64      	ldr	r2, [pc, #400]	@ (8007454 <UART_SetConfig+0x28c>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d138      	bne.n	8007338 <UART_SetConfig+0x170>
 80072c6:	200c      	movs	r0, #12
 80072c8:	f7ff fafe 	bl	80068c8 <LL_RCC_GetUSARTClockSource>
 80072cc:	4603      	mov	r3, r0
 80072ce:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80072d2:	2b0c      	cmp	r3, #12
 80072d4:	d82c      	bhi.n	8007330 <UART_SetConfig+0x168>
 80072d6:	a201      	add	r2, pc, #4	@ (adr r2, 80072dc <UART_SetConfig+0x114>)
 80072d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072dc:	08007311 	.word	0x08007311
 80072e0:	08007331 	.word	0x08007331
 80072e4:	08007331 	.word	0x08007331
 80072e8:	08007331 	.word	0x08007331
 80072ec:	08007321 	.word	0x08007321
 80072f0:	08007331 	.word	0x08007331
 80072f4:	08007331 	.word	0x08007331
 80072f8:	08007331 	.word	0x08007331
 80072fc:	08007319 	.word	0x08007319
 8007300:	08007331 	.word	0x08007331
 8007304:	08007331 	.word	0x08007331
 8007308:	08007331 	.word	0x08007331
 800730c:	08007329 	.word	0x08007329
 8007310:	2300      	movs	r3, #0
 8007312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007316:	e042      	b.n	800739e <UART_SetConfig+0x1d6>
 8007318:	2302      	movs	r3, #2
 800731a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800731e:	e03e      	b.n	800739e <UART_SetConfig+0x1d6>
 8007320:	2304      	movs	r3, #4
 8007322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007326:	e03a      	b.n	800739e <UART_SetConfig+0x1d6>
 8007328:	2308      	movs	r3, #8
 800732a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800732e:	e036      	b.n	800739e <UART_SetConfig+0x1d6>
 8007330:	2310      	movs	r3, #16
 8007332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007336:	e032      	b.n	800739e <UART_SetConfig+0x1d6>
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a43      	ldr	r2, [pc, #268]	@ (800744c <UART_SetConfig+0x284>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d12a      	bne.n	8007398 <UART_SetConfig+0x1d0>
 8007342:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8007346:	f7ff fad1 	bl	80068ec <LL_RCC_GetLPUARTClockSource>
 800734a:	4603      	mov	r3, r0
 800734c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007350:	d01a      	beq.n	8007388 <UART_SetConfig+0x1c0>
 8007352:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007356:	d81b      	bhi.n	8007390 <UART_SetConfig+0x1c8>
 8007358:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800735c:	d00c      	beq.n	8007378 <UART_SetConfig+0x1b0>
 800735e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007362:	d815      	bhi.n	8007390 <UART_SetConfig+0x1c8>
 8007364:	2b00      	cmp	r3, #0
 8007366:	d003      	beq.n	8007370 <UART_SetConfig+0x1a8>
 8007368:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800736c:	d008      	beq.n	8007380 <UART_SetConfig+0x1b8>
 800736e:	e00f      	b.n	8007390 <UART_SetConfig+0x1c8>
 8007370:	2300      	movs	r3, #0
 8007372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007376:	e012      	b.n	800739e <UART_SetConfig+0x1d6>
 8007378:	2302      	movs	r3, #2
 800737a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800737e:	e00e      	b.n	800739e <UART_SetConfig+0x1d6>
 8007380:	2304      	movs	r3, #4
 8007382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007386:	e00a      	b.n	800739e <UART_SetConfig+0x1d6>
 8007388:	2308      	movs	r3, #8
 800738a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800738e:	e006      	b.n	800739e <UART_SetConfig+0x1d6>
 8007390:	2310      	movs	r3, #16
 8007392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007396:	e002      	b.n	800739e <UART_SetConfig+0x1d6>
 8007398:	2310      	movs	r3, #16
 800739a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a2a      	ldr	r2, [pc, #168]	@ (800744c <UART_SetConfig+0x284>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	f040 80a4 	bne.w	80074f2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80073aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80073ae:	2b08      	cmp	r3, #8
 80073b0:	d823      	bhi.n	80073fa <UART_SetConfig+0x232>
 80073b2:	a201      	add	r2, pc, #4	@ (adr r2, 80073b8 <UART_SetConfig+0x1f0>)
 80073b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b8:	080073dd 	.word	0x080073dd
 80073bc:	080073fb 	.word	0x080073fb
 80073c0:	080073e5 	.word	0x080073e5
 80073c4:	080073fb 	.word	0x080073fb
 80073c8:	080073eb 	.word	0x080073eb
 80073cc:	080073fb 	.word	0x080073fb
 80073d0:	080073fb 	.word	0x080073fb
 80073d4:	080073fb 	.word	0x080073fb
 80073d8:	080073f3 	.word	0x080073f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073dc:	f7fd ff4a 	bl	8005274 <HAL_RCC_GetPCLK1Freq>
 80073e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073e2:	e010      	b.n	8007406 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073e4:	4b1c      	ldr	r3, [pc, #112]	@ (8007458 <UART_SetConfig+0x290>)
 80073e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80073e8:	e00d      	b.n	8007406 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073ea:	f7fd fe8f 	bl	800510c <HAL_RCC_GetSysClockFreq>
 80073ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073f0:	e009      	b.n	8007406 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80073f8:	e005      	b.n	8007406 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007404:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 8137 	beq.w	800767c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007412:	4a12      	ldr	r2, [pc, #72]	@ (800745c <UART_SetConfig+0x294>)
 8007414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007418:	461a      	mov	r2, r3
 800741a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007420:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	4613      	mov	r3, r2
 8007428:	005b      	lsls	r3, r3, #1
 800742a:	4413      	add	r3, r2
 800742c:	69ba      	ldr	r2, [r7, #24]
 800742e:	429a      	cmp	r2, r3
 8007430:	d305      	bcc.n	800743e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007438:	69ba      	ldr	r2, [r7, #24]
 800743a:	429a      	cmp	r2, r3
 800743c:	d910      	bls.n	8007460 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007444:	e11a      	b.n	800767c <UART_SetConfig+0x4b4>
 8007446:	bf00      	nop
 8007448:	cfff69f3 	.word	0xcfff69f3
 800744c:	40008000 	.word	0x40008000
 8007450:	40013800 	.word	0x40013800
 8007454:	40004400 	.word	0x40004400
 8007458:	00f42400 	.word	0x00f42400
 800745c:	0800dc74 	.word	0x0800dc74
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007462:	2200      	movs	r2, #0
 8007464:	60bb      	str	r3, [r7, #8]
 8007466:	60fa      	str	r2, [r7, #12]
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800746c:	4a8e      	ldr	r2, [pc, #568]	@ (80076a8 <UART_SetConfig+0x4e0>)
 800746e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007472:	b29b      	uxth	r3, r3
 8007474:	2200      	movs	r2, #0
 8007476:	603b      	str	r3, [r7, #0]
 8007478:	607a      	str	r2, [r7, #4]
 800747a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800747e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007482:	f7f8 fe81 	bl	8000188 <__aeabi_uldivmod>
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	4610      	mov	r0, r2
 800748c:	4619      	mov	r1, r3
 800748e:	f04f 0200 	mov.w	r2, #0
 8007492:	f04f 0300 	mov.w	r3, #0
 8007496:	020b      	lsls	r3, r1, #8
 8007498:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800749c:	0202      	lsls	r2, r0, #8
 800749e:	6979      	ldr	r1, [r7, #20]
 80074a0:	6849      	ldr	r1, [r1, #4]
 80074a2:	0849      	lsrs	r1, r1, #1
 80074a4:	2000      	movs	r0, #0
 80074a6:	460c      	mov	r4, r1
 80074a8:	4605      	mov	r5, r0
 80074aa:	eb12 0804 	adds.w	r8, r2, r4
 80074ae:	eb43 0905 	adc.w	r9, r3, r5
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	469a      	mov	sl, r3
 80074ba:	4693      	mov	fp, r2
 80074bc:	4652      	mov	r2, sl
 80074be:	465b      	mov	r3, fp
 80074c0:	4640      	mov	r0, r8
 80074c2:	4649      	mov	r1, r9
 80074c4:	f7f8 fe60 	bl	8000188 <__aeabi_uldivmod>
 80074c8:	4602      	mov	r2, r0
 80074ca:	460b      	mov	r3, r1
 80074cc:	4613      	mov	r3, r2
 80074ce:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074d6:	d308      	bcc.n	80074ea <UART_SetConfig+0x322>
 80074d8:	6a3b      	ldr	r3, [r7, #32]
 80074da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074de:	d204      	bcs.n	80074ea <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	6a3a      	ldr	r2, [r7, #32]
 80074e6:	60da      	str	r2, [r3, #12]
 80074e8:	e0c8      	b.n	800767c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80074f0:	e0c4      	b.n	800767c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074fa:	d167      	bne.n	80075cc <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80074fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007500:	2b08      	cmp	r3, #8
 8007502:	d828      	bhi.n	8007556 <UART_SetConfig+0x38e>
 8007504:	a201      	add	r2, pc, #4	@ (adr r2, 800750c <UART_SetConfig+0x344>)
 8007506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750a:	bf00      	nop
 800750c:	08007531 	.word	0x08007531
 8007510:	08007539 	.word	0x08007539
 8007514:	08007541 	.word	0x08007541
 8007518:	08007557 	.word	0x08007557
 800751c:	08007547 	.word	0x08007547
 8007520:	08007557 	.word	0x08007557
 8007524:	08007557 	.word	0x08007557
 8007528:	08007557 	.word	0x08007557
 800752c:	0800754f 	.word	0x0800754f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007530:	f7fd fea0 	bl	8005274 <HAL_RCC_GetPCLK1Freq>
 8007534:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007536:	e014      	b.n	8007562 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007538:	f7fd feae 	bl	8005298 <HAL_RCC_GetPCLK2Freq>
 800753c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800753e:	e010      	b.n	8007562 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007540:	4b5a      	ldr	r3, [pc, #360]	@ (80076ac <UART_SetConfig+0x4e4>)
 8007542:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007544:	e00d      	b.n	8007562 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007546:	f7fd fde1 	bl	800510c <HAL_RCC_GetSysClockFreq>
 800754a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800754c:	e009      	b.n	8007562 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800754e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007552:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007554:	e005      	b.n	8007562 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8007556:	2300      	movs	r3, #0
 8007558:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007560:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 8089 	beq.w	800767c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800756e:	4a4e      	ldr	r2, [pc, #312]	@ (80076a8 <UART_SetConfig+0x4e0>)
 8007570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007574:	461a      	mov	r2, r3
 8007576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007578:	fbb3 f3f2 	udiv	r3, r3, r2
 800757c:	005a      	lsls	r2, r3, #1
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	085b      	lsrs	r3, r3, #1
 8007584:	441a      	add	r2, r3
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	fbb2 f3f3 	udiv	r3, r2, r3
 800758e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007590:	6a3b      	ldr	r3, [r7, #32]
 8007592:	2b0f      	cmp	r3, #15
 8007594:	d916      	bls.n	80075c4 <UART_SetConfig+0x3fc>
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800759c:	d212      	bcs.n	80075c4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800759e:	6a3b      	ldr	r3, [r7, #32]
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	f023 030f 	bic.w	r3, r3, #15
 80075a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075a8:	6a3b      	ldr	r3, [r7, #32]
 80075aa:	085b      	lsrs	r3, r3, #1
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	f003 0307 	and.w	r3, r3, #7
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	8bfb      	ldrh	r3, [r7, #30]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	8bfa      	ldrh	r2, [r7, #30]
 80075c0:	60da      	str	r2, [r3, #12]
 80075c2:	e05b      	b.n	800767c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80075ca:	e057      	b.n	800767c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80075cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d828      	bhi.n	8007626 <UART_SetConfig+0x45e>
 80075d4:	a201      	add	r2, pc, #4	@ (adr r2, 80075dc <UART_SetConfig+0x414>)
 80075d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075da:	bf00      	nop
 80075dc:	08007601 	.word	0x08007601
 80075e0:	08007609 	.word	0x08007609
 80075e4:	08007611 	.word	0x08007611
 80075e8:	08007627 	.word	0x08007627
 80075ec:	08007617 	.word	0x08007617
 80075f0:	08007627 	.word	0x08007627
 80075f4:	08007627 	.word	0x08007627
 80075f8:	08007627 	.word	0x08007627
 80075fc:	0800761f 	.word	0x0800761f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007600:	f7fd fe38 	bl	8005274 <HAL_RCC_GetPCLK1Freq>
 8007604:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007606:	e014      	b.n	8007632 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007608:	f7fd fe46 	bl	8005298 <HAL_RCC_GetPCLK2Freq>
 800760c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800760e:	e010      	b.n	8007632 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007610:	4b26      	ldr	r3, [pc, #152]	@ (80076ac <UART_SetConfig+0x4e4>)
 8007612:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007614:	e00d      	b.n	8007632 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007616:	f7fd fd79 	bl	800510c <HAL_RCC_GetSysClockFreq>
 800761a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800761c:	e009      	b.n	8007632 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800761e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007622:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007624:	e005      	b.n	8007632 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8007626:	2300      	movs	r3, #0
 8007628:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007630:	bf00      	nop
    }

    if (pclk != 0U)
 8007632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007634:	2b00      	cmp	r3, #0
 8007636:	d021      	beq.n	800767c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800763c:	4a1a      	ldr	r2, [pc, #104]	@ (80076a8 <UART_SetConfig+0x4e0>)
 800763e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007642:	461a      	mov	r2, r3
 8007644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007646:	fbb3 f2f2 	udiv	r2, r3, r2
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	085b      	lsrs	r3, r3, #1
 8007650:	441a      	add	r2, r3
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	fbb2 f3f3 	udiv	r3, r2, r3
 800765a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800765c:	6a3b      	ldr	r3, [r7, #32]
 800765e:	2b0f      	cmp	r3, #15
 8007660:	d909      	bls.n	8007676 <UART_SetConfig+0x4ae>
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007668:	d205      	bcs.n	8007676 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800766a:	6a3b      	ldr	r3, [r7, #32]
 800766c:	b29a      	uxth	r2, r3
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	60da      	str	r2, [r3, #12]
 8007674:	e002      	b.n	800767c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	2201      	movs	r2, #1
 8007680:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	2201      	movs	r2, #1
 8007688:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	2200      	movs	r2, #0
 8007690:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	2200      	movs	r2, #0
 8007696:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007698:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800769c:	4618      	mov	r0, r3
 800769e:	3730      	adds	r7, #48	@ 0x30
 80076a0:	46bd      	mov	sp, r7
 80076a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076a6:	bf00      	nop
 80076a8:	0800dc74 	.word	0x0800dc74
 80076ac:	00f42400 	.word	0x00f42400

080076b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00a      	beq.n	80076da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076de:	f003 0302 	and.w	r3, r3, #2
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00a      	beq.n	800771e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007722:	f003 0308 	and.w	r3, r3, #8
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	430a      	orrs	r2, r1
 800773e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007744:	f003 0310 	and.w	r3, r3, #16
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00a      	beq.n	8007762 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	430a      	orrs	r2, r1
 8007760:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007766:	f003 0320 	and.w	r3, r3, #32
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00a      	beq.n	8007784 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	430a      	orrs	r2, r1
 8007782:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800778c:	2b00      	cmp	r3, #0
 800778e:	d01a      	beq.n	80077c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	430a      	orrs	r2, r1
 80077a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077ae:	d10a      	bne.n	80077c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00a      	beq.n	80077e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	605a      	str	r2, [r3, #4]
  }
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bc80      	pop	{r7}
 80077f0:	4770      	bx	lr

080077f2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b086      	sub	sp, #24
 80077f6:	af02      	add	r7, sp, #8
 80077f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007802:	f7f9 fb17 	bl	8000e34 <HAL_GetTick>
 8007806:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 0308 	and.w	r3, r3, #8
 8007812:	2b08      	cmp	r3, #8
 8007814:	d10e      	bne.n	8007834 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007816:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f832 	bl	800788e <UART_WaitOnFlagUntilTimeout>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	e028      	b.n	8007886 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 0304 	and.w	r3, r3, #4
 800783e:	2b04      	cmp	r3, #4
 8007840:	d10e      	bne.n	8007860 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007842:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f81c 	bl	800788e <UART_WaitOnFlagUntilTimeout>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d001      	beq.n	8007860 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e012      	b.n	8007886 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2220      	movs	r2, #32
 8007864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2220      	movs	r2, #32
 800786c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b09c      	sub	sp, #112	@ 0x70
 8007892:	af00      	add	r7, sp, #0
 8007894:	60f8      	str	r0, [r7, #12]
 8007896:	60b9      	str	r1, [r7, #8]
 8007898:	603b      	str	r3, [r7, #0]
 800789a:	4613      	mov	r3, r2
 800789c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800789e:	e0a9      	b.n	80079f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a6:	f000 80a5 	beq.w	80079f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078aa:	f7f9 fac3 	bl	8000e34 <HAL_GetTick>
 80078ae:	4602      	mov	r2, r0
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	1ad3      	subs	r3, r2, r3
 80078b4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d302      	bcc.n	80078c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80078ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d140      	bne.n	8007942 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078c8:	e853 3f00 	ldrex	r3, [r3]
 80078cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80078ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078d0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80078d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	461a      	mov	r2, r3
 80078dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078e0:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80078e4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80078e6:	e841 2300 	strex	r3, r2, [r1]
 80078ea:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80078ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1e6      	bne.n	80078c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	3308      	adds	r3, #8
 80078f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078fc:	e853 3f00 	ldrex	r3, [r3]
 8007900:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007904:	f023 0301 	bic.w	r3, r3, #1
 8007908:	663b      	str	r3, [r7, #96]	@ 0x60
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	3308      	adds	r3, #8
 8007910:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007912:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007914:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007916:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007918:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800791a:	e841 2300 	strex	r3, r2, [r1]
 800791e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007920:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1e5      	bne.n	80078f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2220      	movs	r2, #32
 800792a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2220      	movs	r2, #32
 8007932:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e069      	b.n	8007a16 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 0304 	and.w	r3, r3, #4
 800794c:	2b00      	cmp	r3, #0
 800794e:	d051      	beq.n	80079f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	69db      	ldr	r3, [r3, #28]
 8007956:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800795a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800795e:	d149      	bne.n	80079f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007968:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007972:	e853 3f00 	ldrex	r3, [r3]
 8007976:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800797e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	461a      	mov	r2, r3
 8007986:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007988:	637b      	str	r3, [r7, #52]	@ 0x34
 800798a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800798e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007990:	e841 2300 	strex	r3, r2, [r1]
 8007994:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1e6      	bne.n	800796a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	3308      	adds	r3, #8
 80079a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	e853 3f00 	ldrex	r3, [r3]
 80079aa:	613b      	str	r3, [r7, #16]
   return(result);
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f023 0301 	bic.w	r3, r3, #1
 80079b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3308      	adds	r3, #8
 80079ba:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80079bc:	623a      	str	r2, [r7, #32]
 80079be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c0:	69f9      	ldr	r1, [r7, #28]
 80079c2:	6a3a      	ldr	r2, [r7, #32]
 80079c4:	e841 2300 	strex	r3, r2, [r1]
 80079c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1e5      	bne.n	800799c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2220      	movs	r2, #32
 80079d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2220      	movs	r2, #32
 80079dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2220      	movs	r2, #32
 80079e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e010      	b.n	8007a16 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	69da      	ldr	r2, [r3, #28]
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	4013      	ands	r3, r2
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	bf0c      	ite	eq
 8007a04:	2301      	moveq	r3, #1
 8007a06:	2300      	movne	r3, #0
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	79fb      	ldrb	r3, [r7, #7]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	f43f af46 	beq.w	80078a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3770      	adds	r7, #112	@ 0x70
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
	...

08007a20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b0a3      	sub	sp, #140	@ 0x8c
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	88fa      	ldrh	r2, [r7, #6]
 8007a38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	88fa      	ldrh	r2, [r7, #6]
 8007a40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a52:	d10e      	bne.n	8007a72 <UART_Start_Receive_IT+0x52>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d105      	bne.n	8007a68 <UART_Start_Receive_IT+0x48>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007a62:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007a66:	e02d      	b.n	8007ac4 <UART_Start_Receive_IT+0xa4>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	22ff      	movs	r2, #255	@ 0xff
 8007a6c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007a70:	e028      	b.n	8007ac4 <UART_Start_Receive_IT+0xa4>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10d      	bne.n	8007a96 <UART_Start_Receive_IT+0x76>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d104      	bne.n	8007a8c <UART_Start_Receive_IT+0x6c>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	22ff      	movs	r2, #255	@ 0xff
 8007a86:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007a8a:	e01b      	b.n	8007ac4 <UART_Start_Receive_IT+0xa4>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	227f      	movs	r2, #127	@ 0x7f
 8007a90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007a94:	e016      	b.n	8007ac4 <UART_Start_Receive_IT+0xa4>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a9e:	d10d      	bne.n	8007abc <UART_Start_Receive_IT+0x9c>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d104      	bne.n	8007ab2 <UART_Start_Receive_IT+0x92>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	227f      	movs	r2, #127	@ 0x7f
 8007aac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007ab0:	e008      	b.n	8007ac4 <UART_Start_Receive_IT+0xa4>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	223f      	movs	r2, #63	@ 0x3f
 8007ab6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007aba:	e003      	b.n	8007ac4 <UART_Start_Receive_IT+0xa4>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2222      	movs	r2, #34	@ 0x22
 8007ad0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3308      	adds	r3, #8
 8007ada:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007adc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ade:	e853 3f00 	ldrex	r3, [r3]
 8007ae2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007ae4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ae6:	f043 0301 	orr.w	r3, r3, #1
 8007aea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	3308      	adds	r3, #8
 8007af4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007af8:	673a      	str	r2, [r7, #112]	@ 0x70
 8007afa:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007afe:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007b00:	e841 2300 	strex	r3, r2, [r1]
 8007b04:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007b06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1e3      	bne.n	8007ad4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b14:	d14f      	bne.n	8007bb6 <UART_Start_Receive_IT+0x196>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007b1c:	88fa      	ldrh	r2, [r7, #6]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d349      	bcc.n	8007bb6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b2a:	d107      	bne.n	8007b3c <UART_Start_Receive_IT+0x11c>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d103      	bne.n	8007b3c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	4a46      	ldr	r2, [pc, #280]	@ (8007c50 <UART_Start_Receive_IT+0x230>)
 8007b38:	675a      	str	r2, [r3, #116]	@ 0x74
 8007b3a:	e002      	b.n	8007b42 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	4a45      	ldr	r2, [pc, #276]	@ (8007c54 <UART_Start_Receive_IT+0x234>)
 8007b40:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d01a      	beq.n	8007b80 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b52:	e853 3f00 	ldrex	r3, [r3]
 8007b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007b58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	461a      	mov	r2, r3
 8007b68:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b6e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b70:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007b72:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007b74:	e841 2300 	strex	r3, r2, [r1]
 8007b78:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1e4      	bne.n	8007b4a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	3308      	adds	r3, #8
 8007b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b8a:	e853 3f00 	ldrex	r3, [r3]
 8007b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3308      	adds	r3, #8
 8007b9e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007ba0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007ba2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007ba6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ba8:	e841 2300 	strex	r3, r2, [r1]
 8007bac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007bae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1e5      	bne.n	8007b80 <UART_Start_Receive_IT+0x160>
 8007bb4:	e046      	b.n	8007c44 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bbe:	d107      	bne.n	8007bd0 <UART_Start_Receive_IT+0x1b0>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d103      	bne.n	8007bd0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	4a23      	ldr	r2, [pc, #140]	@ (8007c58 <UART_Start_Receive_IT+0x238>)
 8007bcc:	675a      	str	r2, [r3, #116]	@ 0x74
 8007bce:	e002      	b.n	8007bd6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4a22      	ldr	r2, [pc, #136]	@ (8007c5c <UART_Start_Receive_IT+0x23c>)
 8007bd4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d019      	beq.n	8007c12 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be6:	e853 3f00 	ldrex	r3, [r3]
 8007bea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bee:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007bf2:	677b      	str	r3, [r7, #116]	@ 0x74
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bfe:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007c02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c04:	e841 2300 	strex	r3, r2, [r1]
 8007c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1e6      	bne.n	8007bde <UART_Start_Receive_IT+0x1be>
 8007c10:	e018      	b.n	8007c44 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	e853 3f00 	ldrex	r3, [r3]
 8007c1e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	f043 0320 	orr.w	r3, r3, #32
 8007c26:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c30:	623b      	str	r3, [r7, #32]
 8007c32:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c34:	69f9      	ldr	r1, [r7, #28]
 8007c36:	6a3a      	ldr	r2, [r7, #32]
 8007c38:	e841 2300 	strex	r3, r2, [r1]
 8007c3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1e6      	bne.n	8007c12 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	378c      	adds	r7, #140	@ 0x8c
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bc80      	pop	{r7}
 8007c4e:	4770      	bx	lr
 8007c50:	08008635 	.word	0x08008635
 8007c54:	080082d5 	.word	0x080082d5
 8007c58:	0800811d 	.word	0x0800811d
 8007c5c:	08007f65 	.word	0x08007f65

08007c60 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b08f      	sub	sp, #60	@ 0x3c
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6e:	6a3b      	ldr	r3, [r7, #32]
 8007c70:	e853 3f00 	ldrex	r3, [r3]
 8007c74:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	461a      	mov	r2, r3
 8007c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c88:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c8e:	e841 2300 	strex	r3, r2, [r1]
 8007c92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1e6      	bne.n	8007c68 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	3308      	adds	r3, #8
 8007ca0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	e853 3f00 	ldrex	r3, [r3]
 8007ca8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007cb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	3308      	adds	r3, #8
 8007cb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cba:	61ba      	str	r2, [r7, #24]
 8007cbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbe:	6979      	ldr	r1, [r7, #20]
 8007cc0:	69ba      	ldr	r2, [r7, #24]
 8007cc2:	e841 2300 	strex	r3, r2, [r1]
 8007cc6:	613b      	str	r3, [r7, #16]
   return(result);
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1e5      	bne.n	8007c9a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2220      	movs	r2, #32
 8007cd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007cd6:	bf00      	nop
 8007cd8:	373c      	adds	r7, #60	@ 0x3c
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bc80      	pop	{r7}
 8007cde:	4770      	bx	lr

08007ce0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b095      	sub	sp, #84	@ 0x54
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cf0:	e853 3f00 	ldrex	r3, [r3]
 8007cf4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	461a      	mov	r2, r3
 8007d04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d06:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d08:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d0e:	e841 2300 	strex	r3, r2, [r1]
 8007d12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1e6      	bne.n	8007ce8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	3308      	adds	r3, #8
 8007d20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d22:	6a3b      	ldr	r3, [r7, #32]
 8007d24:	e853 3f00 	ldrex	r3, [r3]
 8007d28:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d30:	f023 0301 	bic.w	r3, r3, #1
 8007d34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3308      	adds	r3, #8
 8007d3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d46:	e841 2300 	strex	r3, r2, [r1]
 8007d4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1e3      	bne.n	8007d1a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d118      	bne.n	8007d8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	e853 3f00 	ldrex	r3, [r3]
 8007d66:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	f023 0310 	bic.w	r3, r3, #16
 8007d6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	461a      	mov	r2, r3
 8007d76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d78:	61bb      	str	r3, [r7, #24]
 8007d7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7c:	6979      	ldr	r1, [r7, #20]
 8007d7e:	69ba      	ldr	r2, [r7, #24]
 8007d80:	e841 2300 	strex	r3, r2, [r1]
 8007d84:	613b      	str	r3, [r7, #16]
   return(result);
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1e6      	bne.n	8007d5a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2220      	movs	r2, #32
 8007d90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007da0:	bf00      	nop
 8007da2:	3754      	adds	r7, #84	@ 0x54
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bc80      	pop	{r7}
 8007da8:	4770      	bx	lr

08007daa <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b090      	sub	sp, #64	@ 0x40
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007db6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0320 	and.w	r3, r3, #32
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d137      	bne.n	8007e36 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3308      	adds	r3, #8
 8007dd4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd8:	e853 3f00 	ldrex	r3, [r3]
 8007ddc:	623b      	str	r3, [r7, #32]
   return(result);
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007de4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	3308      	adds	r3, #8
 8007dec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007dee:	633a      	str	r2, [r7, #48]	@ 0x30
 8007df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007df4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e5      	bne.n	8007dce <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	e853 3f00 	ldrex	r3, [r3]
 8007e0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e16:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e20:	61fb      	str	r3, [r7, #28]
 8007e22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e24:	69b9      	ldr	r1, [r7, #24]
 8007e26:	69fa      	ldr	r2, [r7, #28]
 8007e28:	e841 2300 	strex	r3, r2, [r1]
 8007e2c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1e6      	bne.n	8007e02 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e34:	e002      	b.n	8007e3c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007e36:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007e38:	f7f9 fcc8 	bl	80017cc <HAL_UART_TxCpltCallback>
}
 8007e3c:	bf00      	nop
 8007e3e:	3740      	adds	r7, #64	@ 0x40
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e50:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f7ff f99a 	bl	800718c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e58:	bf00      	nop
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e6c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e74:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e7c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e88:	2b80      	cmp	r3, #128	@ 0x80
 8007e8a:	d109      	bne.n	8007ea0 <UART_DMAError+0x40>
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	2b21      	cmp	r3, #33	@ 0x21
 8007e90:	d106      	bne.n	8007ea0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007e9a:	6978      	ldr	r0, [r7, #20]
 8007e9c:	f7ff fee0 	bl	8007c60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eaa:	2b40      	cmp	r3, #64	@ 0x40
 8007eac:	d109      	bne.n	8007ec2 <UART_DMAError+0x62>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2b22      	cmp	r3, #34	@ 0x22
 8007eb2:	d106      	bne.n	8007ec2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007ebc:	6978      	ldr	r0, [r7, #20]
 8007ebe:	f7ff ff0f 	bl	8007ce0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ec8:	f043 0210 	orr.w	r2, r3, #16
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ed2:	6978      	ldr	r0, [r7, #20]
 8007ed4:	f7ff f963 	bl	800719e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ed8:	bf00      	nop
 8007eda:	3718      	adds	r7, #24
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f7ff f94d 	bl	800719e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f04:	bf00      	nop
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b088      	sub	sp, #32
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	e853 3f00 	ldrex	r3, [r3]
 8007f20:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f28:	61fb      	str	r3, [r7, #28]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	61bb      	str	r3, [r7, #24]
 8007f34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f36:	6979      	ldr	r1, [r7, #20]
 8007f38:	69ba      	ldr	r2, [r7, #24]
 8007f3a:	e841 2300 	strex	r3, r2, [r1]
 8007f3e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1e6      	bne.n	8007f14 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2220      	movs	r2, #32
 8007f4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7f9 fc39 	bl	80017cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f5a:	bf00      	nop
 8007f5c:	3720      	adds	r7, #32
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
	...

08007f64 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b09c      	sub	sp, #112	@ 0x70
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007f72:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f7c:	2b22      	cmp	r3, #34	@ 0x22
 8007f7e:	f040 80be 	bne.w	80080fe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f88:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007f90:	b2d9      	uxtb	r1, r3
 8007f92:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007f96:	b2da      	uxtb	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f9c:	400a      	ands	r2, r1
 8007f9e:	b2d2      	uxtb	r2, r2
 8007fa0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fa6:	1c5a      	adds	r2, r3, #1
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f040 80a1 	bne.w	800810e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fd4:	e853 3f00 	ldrex	r3, [r3]
 8007fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007fda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fe0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007fea:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007fec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ff0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ff2:	e841 2300 	strex	r3, r2, [r1]
 8007ff6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ff8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1e6      	bne.n	8007fcc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3308      	adds	r3, #8
 8008004:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008008:	e853 3f00 	ldrex	r3, [r3]
 800800c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800800e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008010:	f023 0301 	bic.w	r3, r3, #1
 8008014:	667b      	str	r3, [r7, #100]	@ 0x64
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	3308      	adds	r3, #8
 800801c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800801e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008020:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008022:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008024:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008026:	e841 2300 	strex	r3, r2, [r1]
 800802a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800802c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1e5      	bne.n	8007ffe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2220      	movs	r2, #32
 8008036:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a33      	ldr	r2, [pc, #204]	@ (8008118 <UART_RxISR_8BIT+0x1b4>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d01f      	beq.n	8008090 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800805a:	2b00      	cmp	r3, #0
 800805c:	d018      	beq.n	8008090 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008066:	e853 3f00 	ldrex	r3, [r3]
 800806a:	623b      	str	r3, [r7, #32]
   return(result);
 800806c:	6a3b      	ldr	r3, [r7, #32]
 800806e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008072:	663b      	str	r3, [r7, #96]	@ 0x60
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	461a      	mov	r2, r3
 800807a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800807c:	633b      	str	r3, [r7, #48]	@ 0x30
 800807e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008080:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008082:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008084:	e841 2300 	strex	r3, r2, [r1]
 8008088:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800808a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1e6      	bne.n	800805e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008094:	2b01      	cmp	r3, #1
 8008096:	d12e      	bne.n	80080f6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	e853 3f00 	ldrex	r3, [r3]
 80080aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f023 0310 	bic.w	r3, r3, #16
 80080b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	461a      	mov	r2, r3
 80080ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080bc:	61fb      	str	r3, [r7, #28]
 80080be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c0:	69b9      	ldr	r1, [r7, #24]
 80080c2:	69fa      	ldr	r2, [r7, #28]
 80080c4:	e841 2300 	strex	r3, r2, [r1]
 80080c8:	617b      	str	r3, [r7, #20]
   return(result);
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1e6      	bne.n	800809e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	f003 0310 	and.w	r3, r3, #16
 80080da:	2b10      	cmp	r3, #16
 80080dc:	d103      	bne.n	80080e6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2210      	movs	r2, #16
 80080e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80080ec:	4619      	mov	r1, r3
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7ff f85e 	bl	80071b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080f4:	e00b      	b.n	800810e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7f9 fb7e 	bl	80017f8 <HAL_UART_RxCpltCallback>
}
 80080fc:	e007      	b.n	800810e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	699a      	ldr	r2, [r3, #24]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f042 0208 	orr.w	r2, r2, #8
 800810c:	619a      	str	r2, [r3, #24]
}
 800810e:	bf00      	nop
 8008110:	3770      	adds	r7, #112	@ 0x70
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	40008000 	.word	0x40008000

0800811c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b09c      	sub	sp, #112	@ 0x70
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800812a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008134:	2b22      	cmp	r3, #34	@ 0x22
 8008136:	f040 80be 	bne.w	80082b6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008140:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008148:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800814a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800814e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008152:	4013      	ands	r3, r2
 8008154:	b29a      	uxth	r2, r3
 8008156:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008158:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800815e:	1c9a      	adds	r2, r3, #2
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800816a:	b29b      	uxth	r3, r3
 800816c:	3b01      	subs	r3, #1
 800816e:	b29a      	uxth	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800817c:	b29b      	uxth	r3, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	f040 80a1 	bne.w	80082c6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800818c:	e853 3f00 	ldrex	r3, [r3]
 8008190:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008192:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008194:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008198:	667b      	str	r3, [r7, #100]	@ 0x64
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	461a      	mov	r2, r3
 80081a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80081a4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80081a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80081aa:	e841 2300 	strex	r3, r2, [r1]
 80081ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80081b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1e6      	bne.n	8008184 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	3308      	adds	r3, #8
 80081bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081c0:	e853 3f00 	ldrex	r3, [r3]
 80081c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80081c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c8:	f023 0301 	bic.w	r3, r3, #1
 80081cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	3308      	adds	r3, #8
 80081d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80081d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80081d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80081dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80081de:	e841 2300 	strex	r3, r2, [r1]
 80081e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80081e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1e5      	bne.n	80081b6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2220      	movs	r2, #32
 80081ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a33      	ldr	r2, [pc, #204]	@ (80082d0 <UART_RxISR_16BIT+0x1b4>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d01f      	beq.n	8008248 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008212:	2b00      	cmp	r3, #0
 8008214:	d018      	beq.n	8008248 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821c:	6a3b      	ldr	r3, [r7, #32]
 800821e:	e853 3f00 	ldrex	r3, [r3]
 8008222:	61fb      	str	r3, [r7, #28]
   return(result);
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800822a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	461a      	mov	r2, r3
 8008232:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008234:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008236:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008238:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800823a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800823c:	e841 2300 	strex	r3, r2, [r1]
 8008240:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1e6      	bne.n	8008216 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800824c:	2b01      	cmp	r3, #1
 800824e:	d12e      	bne.n	80082ae <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	e853 3f00 	ldrex	r3, [r3]
 8008262:	60bb      	str	r3, [r7, #8]
   return(result);
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	f023 0310 	bic.w	r3, r3, #16
 800826a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	461a      	mov	r2, r3
 8008272:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008274:	61bb      	str	r3, [r7, #24]
 8008276:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008278:	6979      	ldr	r1, [r7, #20]
 800827a:	69ba      	ldr	r2, [r7, #24]
 800827c:	e841 2300 	strex	r3, r2, [r1]
 8008280:	613b      	str	r3, [r7, #16]
   return(result);
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1e6      	bne.n	8008256 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	69db      	ldr	r3, [r3, #28]
 800828e:	f003 0310 	and.w	r3, r3, #16
 8008292:	2b10      	cmp	r3, #16
 8008294:	d103      	bne.n	800829e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2210      	movs	r2, #16
 800829c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80082a4:	4619      	mov	r1, r3
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7fe ff82 	bl	80071b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082ac:	e00b      	b.n	80082c6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7f9 faa2 	bl	80017f8 <HAL_UART_RxCpltCallback>
}
 80082b4:	e007      	b.n	80082c6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	699a      	ldr	r2, [r3, #24]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f042 0208 	orr.w	r2, r2, #8
 80082c4:	619a      	str	r2, [r3, #24]
}
 80082c6:	bf00      	nop
 80082c8:	3770      	adds	r7, #112	@ 0x70
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	40008000 	.word	0x40008000

080082d4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b0ac      	sub	sp, #176	@ 0xb0
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80082e2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	69db      	ldr	r3, [r3, #28]
 80082ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800830a:	2b22      	cmp	r3, #34	@ 0x22
 800830c:	f040 8182 	bne.w	8008614 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008316:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800831a:	e125      	b.n	8008568 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008322:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008326:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800832a:	b2d9      	uxtb	r1, r3
 800832c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008330:	b2da      	uxtb	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008336:	400a      	ands	r2, r1
 8008338:	b2d2      	uxtb	r2, r2
 800833a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008340:	1c5a      	adds	r2, r3, #1
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800834c:	b29b      	uxth	r3, r3
 800834e:	3b01      	subs	r3, #1
 8008350:	b29a      	uxth	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008362:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008366:	f003 0307 	and.w	r3, r3, #7
 800836a:	2b00      	cmp	r3, #0
 800836c:	d053      	beq.n	8008416 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800836e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008372:	f003 0301 	and.w	r3, r3, #1
 8008376:	2b00      	cmp	r3, #0
 8008378:	d011      	beq.n	800839e <UART_RxISR_8BIT_FIFOEN+0xca>
 800837a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800837e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00b      	beq.n	800839e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2201      	movs	r2, #1
 800838c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008394:	f043 0201 	orr.w	r2, r3, #1
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800839e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083a2:	f003 0302 	and.w	r3, r3, #2
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d011      	beq.n	80083ce <UART_RxISR_8BIT_FIFOEN+0xfa>
 80083aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80083ae:	f003 0301 	and.w	r3, r3, #1
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00b      	beq.n	80083ce <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2202      	movs	r2, #2
 80083bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083c4:	f043 0204 	orr.w	r2, r3, #4
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083d2:	f003 0304 	and.w	r3, r3, #4
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d011      	beq.n	80083fe <UART_RxISR_8BIT_FIFOEN+0x12a>
 80083da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00b      	beq.n	80083fe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2204      	movs	r2, #4
 80083ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083f4:	f043 0202 	orr.w	r2, r3, #2
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008404:	2b00      	cmp	r3, #0
 8008406:	d006      	beq.n	8008416 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f7fe fec8 	bl	800719e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800841c:	b29b      	uxth	r3, r3
 800841e:	2b00      	cmp	r3, #0
 8008420:	f040 80a2 	bne.w	8008568 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800842c:	e853 3f00 	ldrex	r3, [r3]
 8008430:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008432:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008434:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008438:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	461a      	mov	r2, r3
 8008442:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008446:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008448:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800844c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800844e:	e841 2300 	strex	r3, r2, [r1]
 8008452:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008454:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1e4      	bne.n	8008424 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	3308      	adds	r3, #8
 8008460:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008462:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008464:	e853 3f00 	ldrex	r3, [r3]
 8008468:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800846a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800846c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008470:	f023 0301 	bic.w	r3, r3, #1
 8008474:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3308      	adds	r3, #8
 800847e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008482:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008484:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008486:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008488:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008490:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e1      	bne.n	800845a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2220      	movs	r2, #32
 800849a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a5f      	ldr	r2, [pc, #380]	@ (800862c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d021      	beq.n	80084f8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d01a      	beq.n	80084f8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084ca:	e853 3f00 	ldrex	r3, [r3]
 80084ce:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80084d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80084d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	461a      	mov	r2, r3
 80084e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80084e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80084e6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80084ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80084ec:	e841 2300 	strex	r3, r2, [r1]
 80084f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80084f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1e4      	bne.n	80084c2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d130      	bne.n	8008562 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800850e:	e853 3f00 	ldrex	r3, [r3]
 8008512:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008516:	f023 0310 	bic.w	r3, r3, #16
 800851a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	461a      	mov	r2, r3
 8008524:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008528:	643b      	str	r3, [r7, #64]	@ 0x40
 800852a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800852e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008530:	e841 2300 	strex	r3, r2, [r1]
 8008534:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1e4      	bne.n	8008506 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	69db      	ldr	r3, [r3, #28]
 8008542:	f003 0310 	and.w	r3, r3, #16
 8008546:	2b10      	cmp	r3, #16
 8008548:	d103      	bne.n	8008552 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2210      	movs	r2, #16
 8008550:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f7fe fe28 	bl	80071b0 <HAL_UARTEx_RxEventCallback>
 8008560:	e002      	b.n	8008568 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7f9 f948 	bl	80017f8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008568:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800856c:	2b00      	cmp	r3, #0
 800856e:	d006      	beq.n	800857e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008574:	f003 0320 	and.w	r3, r3, #32
 8008578:	2b00      	cmp	r3, #0
 800857a:	f47f aecf 	bne.w	800831c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008584:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008588:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800858c:	2b00      	cmp	r3, #0
 800858e:	d049      	beq.n	8008624 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008596:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800859a:	429a      	cmp	r2, r3
 800859c:	d242      	bcs.n	8008624 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	3308      	adds	r3, #8
 80085a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a6:	6a3b      	ldr	r3, [r7, #32]
 80085a8:	e853 3f00 	ldrex	r3, [r3]
 80085ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80085b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	3308      	adds	r3, #8
 80085be:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80085c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80085c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085ca:	e841 2300 	strex	r3, r2, [r1]
 80085ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1e3      	bne.n	800859e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a15      	ldr	r2, [pc, #84]	@ (8008630 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80085da:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	e853 3f00 	ldrex	r3, [r3]
 80085e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	f043 0320 	orr.w	r3, r3, #32
 80085f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	461a      	mov	r2, r3
 80085fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80085fe:	61bb      	str	r3, [r7, #24]
 8008600:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008602:	6979      	ldr	r1, [r7, #20]
 8008604:	69ba      	ldr	r2, [r7, #24]
 8008606:	e841 2300 	strex	r3, r2, [r1]
 800860a:	613b      	str	r3, [r7, #16]
   return(result);
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1e4      	bne.n	80085dc <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008612:	e007      	b.n	8008624 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	699a      	ldr	r2, [r3, #24]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f042 0208 	orr.w	r2, r2, #8
 8008622:	619a      	str	r2, [r3, #24]
}
 8008624:	bf00      	nop
 8008626:	37b0      	adds	r7, #176	@ 0xb0
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	40008000 	.word	0x40008000
 8008630:	08007f65 	.word	0x08007f65

08008634 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b0ae      	sub	sp, #184	@ 0xb8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008642:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	69db      	ldr	r3, [r3, #28]
 800864c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800866a:	2b22      	cmp	r3, #34	@ 0x22
 800866c:	f040 8186 	bne.w	800897c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008676:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800867a:	e129      	b.n	80088d0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008682:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800868a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800868e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008692:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008696:	4013      	ands	r3, r2
 8008698:	b29a      	uxth	r2, r3
 800869a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800869e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086a4:	1c9a      	adds	r2, r3, #2
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	3b01      	subs	r3, #1
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	69db      	ldr	r3, [r3, #28]
 80086c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80086c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80086ca:	f003 0307 	and.w	r3, r3, #7
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d053      	beq.n	800877a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d011      	beq.n	8008702 <UART_RxISR_16BIT_FIFOEN+0xce>
 80086de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00b      	beq.n	8008702 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2201      	movs	r2, #1
 80086f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086f8:	f043 0201 	orr.w	r2, r3, #1
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008702:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008706:	f003 0302 	and.w	r3, r3, #2
 800870a:	2b00      	cmp	r3, #0
 800870c:	d011      	beq.n	8008732 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800870e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008712:	f003 0301 	and.w	r3, r3, #1
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00b      	beq.n	8008732 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2202      	movs	r2, #2
 8008720:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008728:	f043 0204 	orr.w	r2, r3, #4
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008732:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008736:	f003 0304 	and.w	r3, r3, #4
 800873a:	2b00      	cmp	r3, #0
 800873c:	d011      	beq.n	8008762 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800873e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008742:	f003 0301 	and.w	r3, r3, #1
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00b      	beq.n	8008762 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2204      	movs	r2, #4
 8008750:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008758:	f043 0202 	orr.w	r2, r3, #2
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008768:	2b00      	cmp	r3, #0
 800876a:	d006      	beq.n	800877a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f7fe fd16 	bl	800719e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008780:	b29b      	uxth	r3, r3
 8008782:	2b00      	cmp	r3, #0
 8008784:	f040 80a4 	bne.w	80088d0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008790:	e853 3f00 	ldrex	r3, [r3]
 8008794:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008796:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008798:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800879c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	461a      	mov	r2, r3
 80087a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80087aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80087ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80087b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80087b6:	e841 2300 	strex	r3, r2, [r1]
 80087ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80087bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1e2      	bne.n	8008788 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	3308      	adds	r3, #8
 80087c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087cc:	e853 3f00 	ldrex	r3, [r3]
 80087d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80087d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80087d8:	f023 0301 	bic.w	r3, r3, #1
 80087dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	3308      	adds	r3, #8
 80087e6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80087ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80087ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80087f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80087f2:	e841 2300 	strex	r3, r2, [r1]
 80087f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80087f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1e1      	bne.n	80087c2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2220      	movs	r2, #32
 8008802:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a5f      	ldr	r2, [pc, #380]	@ (8008994 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d021      	beq.n	8008860 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d01a      	beq.n	8008860 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008832:	e853 3f00 	ldrex	r3, [r3]
 8008836:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008838:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800883a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800883e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	461a      	mov	r2, r3
 8008848:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800884c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800884e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008850:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008852:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008854:	e841 2300 	strex	r3, r2, [r1]
 8008858:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800885a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1e4      	bne.n	800882a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008864:	2b01      	cmp	r3, #1
 8008866:	d130      	bne.n	80088ca <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008876:	e853 3f00 	ldrex	r3, [r3]
 800887a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800887c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800887e:	f023 0310 	bic.w	r3, r3, #16
 8008882:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	461a      	mov	r2, r3
 800888c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008890:	647b      	str	r3, [r7, #68]	@ 0x44
 8008892:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008894:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008896:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008898:	e841 2300 	strex	r3, r2, [r1]
 800889c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800889e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d1e4      	bne.n	800886e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	69db      	ldr	r3, [r3, #28]
 80088aa:	f003 0310 	and.w	r3, r3, #16
 80088ae:	2b10      	cmp	r3, #16
 80088b0:	d103      	bne.n	80088ba <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2210      	movs	r2, #16
 80088b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80088c0:	4619      	mov	r1, r3
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7fe fc74 	bl	80071b0 <HAL_UARTEx_RxEventCallback>
 80088c8:	e002      	b.n	80088d0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f7f8 ff94 	bl	80017f8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80088d0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d006      	beq.n	80088e6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80088d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80088dc:	f003 0320 	and.w	r3, r3, #32
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f47f aecb 	bne.w	800867c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088ec:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80088f0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d049      	beq.n	800898c <UART_RxISR_16BIT_FIFOEN+0x358>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80088fe:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008902:	429a      	cmp	r2, r3
 8008904:	d242      	bcs.n	800898c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3308      	adds	r3, #8
 800890c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008910:	e853 3f00 	ldrex	r3, [r3]
 8008914:	623b      	str	r3, [r7, #32]
   return(result);
 8008916:	6a3b      	ldr	r3, [r7, #32]
 8008918:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800891c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	3308      	adds	r3, #8
 8008926:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800892a:	633a      	str	r2, [r7, #48]	@ 0x30
 800892c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008932:	e841 2300 	strex	r3, r2, [r1]
 8008936:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1e3      	bne.n	8008906 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a15      	ldr	r2, [pc, #84]	@ (8008998 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008942:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	e853 3f00 	ldrex	r3, [r3]
 8008950:	60fb      	str	r3, [r7, #12]
   return(result);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f043 0320 	orr.w	r3, r3, #32
 8008958:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	461a      	mov	r2, r3
 8008962:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008966:	61fb      	str	r3, [r7, #28]
 8008968:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896a:	69b9      	ldr	r1, [r7, #24]
 800896c:	69fa      	ldr	r2, [r7, #28]
 800896e:	e841 2300 	strex	r3, r2, [r1]
 8008972:	617b      	str	r3, [r7, #20]
   return(result);
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1e4      	bne.n	8008944 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800897a:	e007      	b.n	800898c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	699a      	ldr	r2, [r3, #24]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f042 0208 	orr.w	r2, r2, #8
 800898a:	619a      	str	r2, [r3, #24]
}
 800898c:	bf00      	nop
 800898e:	37b8      	adds	r7, #184	@ 0xb8
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	40008000 	.word	0x40008000
 8008998:	0800811d 	.word	0x0800811d

0800899c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80089a4:	bf00      	nop
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bc80      	pop	{r7}
 80089ac:	4770      	bx	lr

080089ae <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80089ae:	b480      	push	{r7}
 80089b0:	b083      	sub	sp, #12
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80089b6:	bf00      	nop
 80089b8:	370c      	adds	r7, #12
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bc80      	pop	{r7}
 80089be:	4770      	bx	lr

080089c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80089c8:	bf00      	nop
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bc80      	pop	{r7}
 80089d0:	4770      	bx	lr

080089d2 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b088      	sub	sp, #32
 80089d6:	af02      	add	r7, sp, #8
 80089d8:	60f8      	str	r0, [r7, #12]
 80089da:	1d3b      	adds	r3, r7, #4
 80089dc:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 80089e0:	2300      	movs	r3, #0
 80089e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d101      	bne.n	80089f2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 80089ee:	2302      	movs	r3, #2
 80089f0:	e046      	b.n	8008a80 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2224      	movs	r2, #36	@ 0x24
 80089fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f022 0201 	bic.w	r2, r2, #1
 8008a10:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	430a      	orrs	r2, r1
 8008a24:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d105      	bne.n	8008a38 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8008a2c:	1d3b      	adds	r3, r7, #4
 8008a2e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f000 f90e 	bl	8008c54 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f042 0201 	orr.w	r2, r2, #1
 8008a46:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a48:	f7f8 f9f4 	bl	8000e34 <HAL_GetTick>
 8008a4c:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a4e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f7fe ff16 	bl	800788e <UART_WaitOnFlagUntilTimeout>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d002      	beq.n	8008a6e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	75fb      	strb	r3, [r7, #23]
 8008a6c:	e003      	b.n	8008a76 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2220      	movs	r2, #32
 8008a72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 8008a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3718      	adds	r7, #24
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b089      	sub	sp, #36	@ 0x24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d101      	bne.n	8008a9e <HAL_UARTEx_EnableStopMode+0x16>
 8008a9a:	2302      	movs	r3, #2
 8008a9c:	e021      	b.n	8008ae2 <HAL_UARTEx_EnableStopMode+0x5a>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	e853 3f00 	ldrex	r3, [r3]
 8008ab2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	f043 0302 	orr.w	r3, r3, #2
 8008aba:	61fb      	str	r3, [r7, #28]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	61bb      	str	r3, [r7, #24]
 8008ac6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac8:	6979      	ldr	r1, [r7, #20]
 8008aca:	69ba      	ldr	r2, [r7, #24]
 8008acc:	e841 2300 	strex	r3, r2, [r1]
 8008ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1e6      	bne.n	8008aa6 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3724      	adds	r7, #36	@ 0x24
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bc80      	pop	{r7}
 8008aea:	4770      	bx	lr

08008aec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d101      	bne.n	8008b02 <HAL_UARTEx_DisableFifoMode+0x16>
 8008afe:	2302      	movs	r3, #2
 8008b00:	e027      	b.n	8008b52 <HAL_UARTEx_DisableFifoMode+0x66>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2201      	movs	r2, #1
 8008b06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2224      	movs	r2, #36	@ 0x24
 8008b0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f022 0201 	bic.w	r2, r2, #1
 8008b28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008b30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2220      	movs	r2, #32
 8008b44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3714      	adds	r7, #20
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bc80      	pop	{r7}
 8008b5a:	4770      	bx	lr

08008b5c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d101      	bne.n	8008b74 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008b70:	2302      	movs	r3, #2
 8008b72:	e02d      	b.n	8008bd0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2224      	movs	r2, #36	@ 0x24
 8008b80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f022 0201 	bic.w	r2, r2, #1
 8008b9a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	683a      	ldr	r2, [r7, #0]
 8008bac:	430a      	orrs	r2, r1
 8008bae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f871 	bl	8008c98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2220      	movs	r2, #32
 8008bc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d101      	bne.n	8008bf0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008bec:	2302      	movs	r3, #2
 8008bee:	e02d      	b.n	8008c4c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2224      	movs	r2, #36	@ 0x24
 8008bfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f022 0201 	bic.w	r2, r2, #1
 8008c16:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	683a      	ldr	r2, [r7, #0]
 8008c28:	430a      	orrs	r2, r1
 8008c2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f833 	bl	8008c98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2220      	movs	r2, #32
 8008c3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	1d3b      	adds	r3, r7, #4
 8008c5e:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	f023 0210 	bic.w	r2, r3, #16
 8008c6c:	893b      	ldrh	r3, [r7, #8]
 8008c6e:	4619      	mov	r1, r3
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	430a      	orrs	r2, r1
 8008c76:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 8008c82:	7abb      	ldrb	r3, [r7, #10]
 8008c84:	061a      	lsls	r2, r3, #24
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	430a      	orrs	r2, r1
 8008c8c:	605a      	str	r2, [r3, #4]
}
 8008c8e:	bf00      	nop
 8008c90:	3714      	adds	r7, #20
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bc80      	pop	{r7}
 8008c96:	4770      	bx	lr

08008c98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d108      	bne.n	8008cba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008cb8:	e031      	b.n	8008d1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008cba:	2308      	movs	r3, #8
 8008cbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008cbe:	2308      	movs	r3, #8
 8008cc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	0e5b      	lsrs	r3, r3, #25
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	f003 0307 	and.w	r3, r3, #7
 8008cd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	0f5b      	lsrs	r3, r3, #29
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	f003 0307 	and.w	r3, r3, #7
 8008ce0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ce2:	7bbb      	ldrb	r3, [r7, #14]
 8008ce4:	7b3a      	ldrb	r2, [r7, #12]
 8008ce6:	4910      	ldr	r1, [pc, #64]	@ (8008d28 <UARTEx_SetNbDataToProcess+0x90>)
 8008ce8:	5c8a      	ldrb	r2, [r1, r2]
 8008cea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008cee:	7b3a      	ldrb	r2, [r7, #12]
 8008cf0:	490e      	ldr	r1, [pc, #56]	@ (8008d2c <UARTEx_SetNbDataToProcess+0x94>)
 8008cf2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cf4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cf8:	b29a      	uxth	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d00:	7bfb      	ldrb	r3, [r7, #15]
 8008d02:	7b7a      	ldrb	r2, [r7, #13]
 8008d04:	4908      	ldr	r1, [pc, #32]	@ (8008d28 <UARTEx_SetNbDataToProcess+0x90>)
 8008d06:	5c8a      	ldrb	r2, [r1, r2]
 8008d08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d0c:	7b7a      	ldrb	r2, [r7, #13]
 8008d0e:	4907      	ldr	r1, [pc, #28]	@ (8008d2c <UARTEx_SetNbDataToProcess+0x94>)
 8008d10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d12:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d16:	b29a      	uxth	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008d1e:	bf00      	nop
 8008d20:	3714      	adds	r7, #20
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bc80      	pop	{r7}
 8008d26:	4770      	bx	lr
 8008d28:	0800dc8c 	.word	0x0800dc8c
 8008d2c:	0800dc94 	.word	0x0800dc94

08008d30 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af02      	add	r7, sp, #8
 8008d36:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8008d38:	4a24      	ldr	r2, [pc, #144]	@ (8008dcc <RadioInit+0x9c>)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8008d3e:	4b24      	ldr	r3, [pc, #144]	@ (8008dd0 <RadioInit+0xa0>)
 8008d40:	2200      	movs	r2, #0
 8008d42:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8008d44:	4b22      	ldr	r3, [pc, #136]	@ (8008dd0 <RadioInit+0xa0>)
 8008d46:	2200      	movs	r2, #0
 8008d48:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8008d4a:	4b21      	ldr	r3, [pc, #132]	@ (8008dd0 <RadioInit+0xa0>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008d50:	4b1f      	ldr	r3, [pc, #124]	@ (8008dd0 <RadioInit+0xa0>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8008d56:	481f      	ldr	r0, [pc, #124]	@ (8008dd4 <RadioInit+0xa4>)
 8008d58:	f001 ffc0 	bl	800acdc <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8008d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8008dd0 <RadioInit+0xa0>)
 8008d5e:	2200      	movs	r2, #0
 8008d60:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8008d62:	4b1b      	ldr	r3, [pc, #108]	@ (8008dd0 <RadioInit+0xa0>)
 8008d64:	2200      	movs	r2, #0
 8008d66:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8008d68:	f002 fa54 	bl	800b214 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	2000      	movs	r0, #0
 8008d70:	f002 fe20 	bl	800b9b4 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8008d74:	2204      	movs	r2, #4
 8008d76:	2100      	movs	r1, #0
 8008d78:	2001      	movs	r0, #1
 8008d7a:	f002 fbdd 	bl	800b538 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008d7e:	2300      	movs	r3, #0
 8008d80:	2200      	movs	r2, #0
 8008d82:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8008d86:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8008d8a:	f002 fb0d 	bl	800b3a8 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8008d8e:	f000 fe99 	bl	8009ac4 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8008d92:	2300      	movs	r3, #0
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	4b10      	ldr	r3, [pc, #64]	@ (8008dd8 <RadioInit+0xa8>)
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f04f 31ff 	mov.w	r1, #4294967295
 8008d9e:	480f      	ldr	r0, [pc, #60]	@ (8008ddc <RadioInit+0xac>)
 8008da0:	f004 f8d6 	bl	800cf50 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8008da4:	2300      	movs	r3, #0
 8008da6:	9300      	str	r3, [sp, #0]
 8008da8:	4b0d      	ldr	r3, [pc, #52]	@ (8008de0 <RadioInit+0xb0>)
 8008daa:	2200      	movs	r2, #0
 8008dac:	f04f 31ff 	mov.w	r1, #4294967295
 8008db0:	480c      	ldr	r0, [pc, #48]	@ (8008de4 <RadioInit+0xb4>)
 8008db2:	f004 f8cd 	bl	800cf50 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8008db6:	4809      	ldr	r0, [pc, #36]	@ (8008ddc <RadioInit+0xac>)
 8008db8:	f004 f96e 	bl	800d098 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8008dbc:	4809      	ldr	r0, [pc, #36]	@ (8008de4 <RadioInit+0xb4>)
 8008dbe:	f004 f96b 	bl	800d098 <UTIL_TIMER_Stop>
}
 8008dc2:	bf00      	nop
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	2000032c 	.word	0x2000032c
 8008dd0:	20000330 	.word	0x20000330
 8008dd4:	08009eb9 	.word	0x08009eb9
 8008dd8:	08009e41 	.word	0x08009e41
 8008ddc:	2000038c 	.word	0x2000038c
 8008de0:	08009e55 	.word	0x08009e55
 8008de4:	200003a4 	.word	0x200003a4

08008de8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8008dec:	f001 ffbe 	bl	800ad6c <SUBGRF_GetOperatingMode>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b07      	cmp	r3, #7
 8008df4:	d00a      	beq.n	8008e0c <RadioGetStatus+0x24>
 8008df6:	2b07      	cmp	r3, #7
 8008df8:	dc0a      	bgt.n	8008e10 <RadioGetStatus+0x28>
 8008dfa:	2b04      	cmp	r3, #4
 8008dfc:	d002      	beq.n	8008e04 <RadioGetStatus+0x1c>
 8008dfe:	2b05      	cmp	r3, #5
 8008e00:	d002      	beq.n	8008e08 <RadioGetStatus+0x20>
 8008e02:	e005      	b.n	8008e10 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8008e04:	2302      	movs	r3, #2
 8008e06:	e004      	b.n	8008e12 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e002      	b.n	8008e12 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8008e0c:	2303      	movs	r3, #3
 8008e0e:	e000      	b.n	8008e12 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8008e10:	2300      	movs	r3, #0
    }
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	bd80      	pop	{r7, pc}
	...

08008e18 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	4603      	mov	r3, r0
 8008e20:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8008e22:	4a2a      	ldr	r2, [pc, #168]	@ (8008ecc <RadioSetModem+0xb4>)
 8008e24:	79fb      	ldrb	r3, [r7, #7]
 8008e26:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8008e28:	79fb      	ldrb	r3, [r7, #7]
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f003 f995 	bl	800c15a <RFW_SetRadioModem>
    switch( modem )
 8008e30:	79fb      	ldrb	r3, [r7, #7]
 8008e32:	2b05      	cmp	r3, #5
 8008e34:	d80e      	bhi.n	8008e54 <RadioSetModem+0x3c>
 8008e36:	a201      	add	r2, pc, #4	@ (adr r2, 8008e3c <RadioSetModem+0x24>)
 8008e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3c:	08008e63 	.word	0x08008e63
 8008e40:	08008e71 	.word	0x08008e71
 8008e44:	08008e55 	.word	0x08008e55
 8008e48:	08008e97 	.word	0x08008e97
 8008e4c:	08008ea5 	.word	0x08008ea5
 8008e50:	08008eb3 	.word	0x08008eb3
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8008e54:	2003      	movs	r0, #3
 8008e56:	f002 fb49 	bl	800b4ec <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8008ecc <RadioSetModem+0xb4>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	735a      	strb	r2, [r3, #13]
        break;
 8008e60:	e02f      	b.n	8008ec2 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8008e62:	2000      	movs	r0, #0
 8008e64:	f002 fb42 	bl	800b4ec <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008e68:	4b18      	ldr	r3, [pc, #96]	@ (8008ecc <RadioSetModem+0xb4>)
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	735a      	strb	r2, [r3, #13]
        break;
 8008e6e:	e028      	b.n	8008ec2 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8008e70:	2001      	movs	r0, #1
 8008e72:	f002 fb3b 	bl	800b4ec <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8008e76:	4b15      	ldr	r3, [pc, #84]	@ (8008ecc <RadioSetModem+0xb4>)
 8008e78:	7b5a      	ldrb	r2, [r3, #13]
 8008e7a:	4b14      	ldr	r3, [pc, #80]	@ (8008ecc <RadioSetModem+0xb4>)
 8008e7c:	7b1b      	ldrb	r3, [r3, #12]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d01e      	beq.n	8008ec0 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8008e82:	4b12      	ldr	r3, [pc, #72]	@ (8008ecc <RadioSetModem+0xb4>)
 8008e84:	7b1a      	ldrb	r2, [r3, #12]
 8008e86:	4b11      	ldr	r3, [pc, #68]	@ (8008ecc <RadioSetModem+0xb4>)
 8008e88:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8008e8a:	4b10      	ldr	r3, [pc, #64]	@ (8008ecc <RadioSetModem+0xb4>)
 8008e8c:	7b5b      	ldrb	r3, [r3, #13]
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 ffa0 	bl	8009dd4 <RadioSetPublicNetwork>
        }
        break;
 8008e94:	e014      	b.n	8008ec0 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8008e96:	2002      	movs	r0, #2
 8008e98:	f002 fb28 	bl	800b4ec <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8008ecc <RadioSetModem+0xb4>)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	735a      	strb	r2, [r3, #13]
        break;
 8008ea2:	e00e      	b.n	8008ec2 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8008ea4:	2002      	movs	r0, #2
 8008ea6:	f002 fb21 	bl	800b4ec <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008eaa:	4b08      	ldr	r3, [pc, #32]	@ (8008ecc <RadioSetModem+0xb4>)
 8008eac:	2200      	movs	r2, #0
 8008eae:	735a      	strb	r2, [r3, #13]
        break;
 8008eb0:	e007      	b.n	8008ec2 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8008eb2:	2000      	movs	r0, #0
 8008eb4:	f002 fb1a 	bl	800b4ec <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008eb8:	4b04      	ldr	r3, [pc, #16]	@ (8008ecc <RadioSetModem+0xb4>)
 8008eba:	2200      	movs	r2, #0
 8008ebc:	735a      	strb	r2, [r3, #13]
        break;
 8008ebe:	e000      	b.n	8008ec2 <RadioSetModem+0xaa>
        break;
 8008ec0:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8008ec2:	bf00      	nop
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	20000330 	.word	0x20000330

08008ed0 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f002 fac1 	bl	800b460 <SUBGRF_SetRfFrequency>
}
 8008ede:	bf00      	nop
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b090      	sub	sp, #64	@ 0x40
 8008eea:	af0a      	add	r7, sp, #40	@ 0x28
 8008eec:	60f8      	str	r0, [r7, #12]
 8008eee:	60b9      	str	r1, [r7, #8]
 8008ef0:	603b      	str	r3, [r7, #0]
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8008efa:	2300      	movs	r3, #0
 8008efc:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8008f02:	f000 fdf2 	bl	8009aea <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8008f06:	2000      	movs	r0, #0
 8008f08:	f7ff ff86 	bl	8008e18 <RadioSetModem>

    RadioSetChannel( freq );
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f7ff ffdf 	bl	8008ed0 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8008f12:	2301      	movs	r3, #1
 8008f14:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f16:	2300      	movs	r3, #0
 8008f18:	9308      	str	r3, [sp, #32]
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	9307      	str	r3, [sp, #28]
 8008f1e:	2300      	movs	r3, #0
 8008f20:	9306      	str	r3, [sp, #24]
 8008f22:	2300      	movs	r3, #0
 8008f24:	9305      	str	r3, [sp, #20]
 8008f26:	2300      	movs	r3, #0
 8008f28:	9304      	str	r3, [sp, #16]
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	9303      	str	r3, [sp, #12]
 8008f2e:	2300      	movs	r3, #0
 8008f30:	9302      	str	r3, [sp, #8]
 8008f32:	2303      	movs	r3, #3
 8008f34:	9301      	str	r3, [sp, #4]
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8008f40:	68b9      	ldr	r1, [r7, #8]
 8008f42:	2000      	movs	r0, #0
 8008f44:	f000 f83c 	bl	8008fc0 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8008f48:	2000      	movs	r0, #0
 8008f4a:	f000 fdd5 	bl	8009af8 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8008f4e:	f000 ff6f 	bl	8009e30 <RadioGetWakeupTime>
 8008f52:	4603      	mov	r3, r0
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7f7 ff81 	bl	8000e5c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8008f5a:	f004 f9b7 	bl	800d2cc <UTIL_TIMER_GetCurrentTime>
 8008f5e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8008f60:	e00d      	b.n	8008f7e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8008f62:	2000      	movs	r0, #0
 8008f64:	f000 feb6 	bl	8009cd4 <RadioRssi>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8008f6c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8008f70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	dd02      	ble.n	8008f7e <RadioIsChannelFree+0x98>
        {
            status = false;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	75fb      	strb	r3, [r7, #23]
            break;
 8008f7c:	e006      	b.n	8008f8c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8008f7e:	6938      	ldr	r0, [r7, #16]
 8008f80:	f004 f9b6 	bl	800d2f0 <UTIL_TIMER_GetElapsedTime>
 8008f84:	4602      	mov	r2, r0
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d8ea      	bhi.n	8008f62 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8008f8c:	f000 fdad 	bl	8009aea <RadioStandby>

    return status;
 8008f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3718      	adds	r7, #24
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b082      	sub	sp, #8
 8008f9e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	2100      	movs	r1, #0
 8008faa:	2000      	movs	r0, #0
 8008fac:	f002 f9fc 	bl	800b3a8 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8008fb0:	f001 ffad 	bl	800af0e <SUBGRF_GetRandom>
 8008fb4:	6078      	str	r0, [r7, #4]

    return rnd;
 8008fb6:	687b      	ldr	r3, [r7, #4]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b08a      	sub	sp, #40	@ 0x28
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60b9      	str	r1, [r7, #8]
 8008fc8:	607a      	str	r2, [r7, #4]
 8008fca:	461a      	mov	r2, r3
 8008fcc:	4603      	mov	r3, r0
 8008fce:	73fb      	strb	r3, [r7, #15]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8008fd4:	4ab9      	ldr	r2, [pc, #740]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 8008fd6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8008fda:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8008fdc:	f003 f87b 	bl	800c0d6 <RFW_DeInit>
    if( rxContinuous == true )
 8008fe0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d001      	beq.n	8008fec <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8008fec:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d004      	beq.n	8008ffe <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8008ff4:	4ab2      	ldr	r2, [pc, #712]	@ (80092c0 <RadioSetRxConfig+0x300>)
 8008ff6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008ffa:	7013      	strb	r3, [r2, #0]
 8008ffc:	e002      	b.n	8009004 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8008ffe:	4bb0      	ldr	r3, [pc, #704]	@ (80092c0 <RadioSetRxConfig+0x300>)
 8009000:	22ff      	movs	r2, #255	@ 0xff
 8009002:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8009004:	7bfb      	ldrb	r3, [r7, #15]
 8009006:	2b05      	cmp	r3, #5
 8009008:	d009      	beq.n	800901e <RadioSetRxConfig+0x5e>
 800900a:	2b05      	cmp	r3, #5
 800900c:	f300 81d7 	bgt.w	80093be <RadioSetRxConfig+0x3fe>
 8009010:	2b00      	cmp	r3, #0
 8009012:	f000 80bf 	beq.w	8009194 <RadioSetRxConfig+0x1d4>
 8009016:	2b01      	cmp	r3, #1
 8009018:	f000 8124 	beq.w	8009264 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 800901c:	e1cf      	b.n	80093be <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800901e:	2001      	movs	r0, #1
 8009020:	f002 f8ba 	bl	800b198 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009024:	4ba5      	ldr	r3, [pc, #660]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 8009026:	2200      	movs	r2, #0
 8009028:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800902c:	4aa3      	ldr	r2, [pc, #652]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8009032:	4ba2      	ldr	r3, [pc, #648]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 8009034:	2209      	movs	r2, #9
 8009036:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800903a:	4ba0      	ldr	r3, [pc, #640]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 800903c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8009040:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8009042:	68b8      	ldr	r0, [r7, #8]
 8009044:	f002 ff7a 	bl	800bf3c <SUBGRF_GetFskBandwidthRegValue>
 8009048:	4603      	mov	r3, r0
 800904a:	461a      	mov	r2, r3
 800904c:	4b9b      	ldr	r3, [pc, #620]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 800904e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009052:	4b9a      	ldr	r3, [pc, #616]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 8009054:	2200      	movs	r2, #0
 8009056:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8009058:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800905a:	00db      	lsls	r3, r3, #3
 800905c:	b29a      	uxth	r2, r3
 800905e:	4b97      	ldr	r3, [pc, #604]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 8009060:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8009062:	4b96      	ldr	r3, [pc, #600]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 8009064:	2200      	movs	r2, #0
 8009066:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8009068:	4b94      	ldr	r3, [pc, #592]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 800906a:	2210      	movs	r2, #16
 800906c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800906e:	4b93      	ldr	r3, [pc, #588]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 8009070:	2200      	movs	r2, #0
 8009072:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8009074:	4b91      	ldr	r3, [pc, #580]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 8009076:	2200      	movs	r2, #0
 8009078:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800907a:	4b91      	ldr	r3, [pc, #580]	@ (80092c0 <RadioSetRxConfig+0x300>)
 800907c:	781a      	ldrb	r2, [r3, #0]
 800907e:	4b8f      	ldr	r3, [pc, #572]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 8009080:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8009082:	4b8e      	ldr	r3, [pc, #568]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 8009084:	2201      	movs	r2, #1
 8009086:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8009088:	4b8c      	ldr	r3, [pc, #560]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 800908a:	2200      	movs	r2, #0
 800908c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800908e:	2005      	movs	r0, #5
 8009090:	f7ff fec2 	bl	8008e18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009094:	488b      	ldr	r0, [pc, #556]	@ (80092c4 <RadioSetRxConfig+0x304>)
 8009096:	f002 fb1d 	bl	800b6d4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800909a:	488b      	ldr	r0, [pc, #556]	@ (80092c8 <RadioSetRxConfig+0x308>)
 800909c:	f002 fbec 	bl	800b878 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80090a0:	4a8a      	ldr	r2, [pc, #552]	@ (80092cc <RadioSetRxConfig+0x30c>)
 80090a2:	f107 031c 	add.w	r3, r7, #28
 80090a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80090aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80090ae:	f107 031c 	add.w	r3, r7, #28
 80090b2:	4618      	mov	r0, r3
 80090b4:	f001 fea9 	bl	800ae0a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80090b8:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80090bc:	f001 fef4 	bl	800aea8 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 80090c0:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 80090c4:	f000 fe24 	bl	8009d10 <RadioRead>
 80090c8:	4603      	mov	r3, r0
 80090ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 80090ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090d2:	f023 0310 	bic.w	r3, r3, #16
 80090d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80090da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090de:	4619      	mov	r1, r3
 80090e0:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 80090e4:	f000 fe02 	bl	8009cec <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80090e8:	2104      	movs	r1, #4
 80090ea:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 80090ee:	f000 fdfd 	bl	8009cec <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80090f2:	f640 009b 	movw	r0, #2203	@ 0x89b
 80090f6:	f000 fe0b 	bl	8009d10 <RadioRead>
 80090fa:	4603      	mov	r3, r0
 80090fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8009100:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009104:	f023 031c 	bic.w	r3, r3, #28
 8009108:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 800910c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009110:	f043 0308 	orr.w	r3, r3, #8
 8009114:	b2db      	uxtb	r3, r3
 8009116:	4619      	mov	r1, r3
 8009118:	f640 009b 	movw	r0, #2203	@ 0x89b
 800911c:	f000 fde6 	bl	8009cec <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8009120:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8009124:	f000 fdf4 	bl	8009d10 <RadioRead>
 8009128:	4603      	mov	r3, r0
 800912a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800912e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009132:	f023 0318 	bic.w	r3, r3, #24
 8009136:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 800913a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800913e:	f043 0318 	orr.w	r3, r3, #24
 8009142:	b2db      	uxtb	r3, r3
 8009144:	4619      	mov	r1, r3
 8009146:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 800914a:	f000 fdcf 	bl	8009cec <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 800914e:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8009152:	f000 fddd 	bl	8009d10 <RadioRead>
 8009156:	4603      	mov	r3, r0
 8009158:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800915c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009160:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009164:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8009168:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800916c:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8009170:	b2db      	uxtb	r3, r3
 8009172:	4619      	mov	r1, r3
 8009174:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8009178:	f000 fdb8 	bl	8009cec <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800917c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800917e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8009182:	fb02 f303 	mul.w	r3, r2, r3
 8009186:	461a      	mov	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	fbb2 f3f3 	udiv	r3, r2, r3
 800918e:	4a4b      	ldr	r2, [pc, #300]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 8009190:	6093      	str	r3, [r2, #8]
            break;
 8009192:	e115      	b.n	80093c0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8009194:	2000      	movs	r0, #0
 8009196:	f001 ffff 	bl	800b198 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800919a:	4b48      	ldr	r3, [pc, #288]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 800919c:	2200      	movs	r2, #0
 800919e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80091a2:	4a46      	ldr	r2, [pc, #280]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80091a8:	4b44      	ldr	r3, [pc, #272]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 80091aa:	220b      	movs	r2, #11
 80091ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80091b0:	68b8      	ldr	r0, [r7, #8]
 80091b2:	f002 fec3 	bl	800bf3c <SUBGRF_GetFskBandwidthRegValue>
 80091b6:	4603      	mov	r3, r0
 80091b8:	461a      	mov	r2, r3
 80091ba:	4b40      	ldr	r3, [pc, #256]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 80091bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80091c0:	4b3e      	ldr	r3, [pc, #248]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80091c6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80091c8:	00db      	lsls	r3, r3, #3
 80091ca:	b29a      	uxth	r2, r3
 80091cc:	4b3b      	ldr	r3, [pc, #236]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 80091ce:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80091d0:	4b3a      	ldr	r3, [pc, #232]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 80091d2:	2204      	movs	r2, #4
 80091d4:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80091d6:	4b39      	ldr	r3, [pc, #228]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 80091d8:	2218      	movs	r2, #24
 80091da:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80091dc:	4b37      	ldr	r3, [pc, #220]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 80091de:	2200      	movs	r2, #0
 80091e0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80091e2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80091e6:	f083 0301 	eor.w	r3, r3, #1
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	461a      	mov	r2, r3
 80091ee:	4b33      	ldr	r3, [pc, #204]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 80091f0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80091f2:	4b33      	ldr	r3, [pc, #204]	@ (80092c0 <RadioSetRxConfig+0x300>)
 80091f4:	781a      	ldrb	r2, [r3, #0]
 80091f6:	4b31      	ldr	r3, [pc, #196]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 80091f8:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80091fa:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d003      	beq.n	800920a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8009202:	4b2e      	ldr	r3, [pc, #184]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 8009204:	22f2      	movs	r2, #242	@ 0xf2
 8009206:	75da      	strb	r2, [r3, #23]
 8009208:	e002      	b.n	8009210 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800920a:	4b2c      	ldr	r3, [pc, #176]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 800920c:	2201      	movs	r2, #1
 800920e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8009210:	4b2a      	ldr	r3, [pc, #168]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 8009212:	2201      	movs	r2, #1
 8009214:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8009216:	f000 fc68 	bl	8009aea <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800921a:	2000      	movs	r0, #0
 800921c:	f7ff fdfc 	bl	8008e18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009220:	4828      	ldr	r0, [pc, #160]	@ (80092c4 <RadioSetRxConfig+0x304>)
 8009222:	f002 fa57 	bl	800b6d4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009226:	4828      	ldr	r0, [pc, #160]	@ (80092c8 <RadioSetRxConfig+0x308>)
 8009228:	f002 fb26 	bl	800b878 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800922c:	4a28      	ldr	r2, [pc, #160]	@ (80092d0 <RadioSetRxConfig+0x310>)
 800922e:	f107 0314 	add.w	r3, r7, #20
 8009232:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009236:	e883 0003 	stmia.w	r3, {r0, r1}
 800923a:	f107 0314 	add.w	r3, r7, #20
 800923e:	4618      	mov	r0, r3
 8009240:	f001 fde3 	bl	800ae0a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8009244:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8009248:	f001 fe2e 	bl	800aea8 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800924c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800924e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8009252:	fb02 f303 	mul.w	r3, r2, r3
 8009256:	461a      	mov	r2, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	fbb2 f3f3 	udiv	r3, r2, r3
 800925e:	4a17      	ldr	r2, [pc, #92]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 8009260:	6093      	str	r3, [r2, #8]
            break;
 8009262:	e0ad      	b.n	80093c0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8009264:	2000      	movs	r0, #0
 8009266:	f001 ff97 	bl	800b198 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800926a:	4b14      	ldr	r3, [pc, #80]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 800926c:	2201      	movs	r2, #1
 800926e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	b2da      	uxtb	r2, r3
 8009276:	4b11      	ldr	r3, [pc, #68]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 8009278:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800927c:	4a15      	ldr	r2, [pc, #84]	@ (80092d4 <RadioSetRxConfig+0x314>)
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	4413      	add	r3, r2
 8009282:	781a      	ldrb	r2, [r3, #0]
 8009284:	4b0d      	ldr	r3, [pc, #52]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 8009286:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800928a:	4a0c      	ldr	r2, [pc, #48]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 800928c:	7bbb      	ldrb	r3, [r7, #14]
 800928e:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d105      	bne.n	80092a4 <RadioSetRxConfig+0x2e4>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2b0b      	cmp	r3, #11
 800929c:	d008      	beq.n	80092b0 <RadioSetRxConfig+0x2f0>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2b0c      	cmp	r3, #12
 80092a2:	d005      	beq.n	80092b0 <RadioSetRxConfig+0x2f0>
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d116      	bne.n	80092d8 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2b0c      	cmp	r3, #12
 80092ae:	d113      	bne.n	80092d8 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80092b0:	4b02      	ldr	r3, [pc, #8]	@ (80092bc <RadioSetRxConfig+0x2fc>)
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80092b8:	e012      	b.n	80092e0 <RadioSetRxConfig+0x320>
 80092ba:	bf00      	nop
 80092bc:	20000330 	.word	0x20000330
 80092c0:	20000011 	.word	0x20000011
 80092c4:	20000368 	.word	0x20000368
 80092c8:	2000033e 	.word	0x2000033e
 80092cc:	0800da84 	.word	0x0800da84
 80092d0:	0800da8c 	.word	0x0800da8c
 80092d4:	0800dd28 	.word	0x0800dd28
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80092d8:	4b3b      	ldr	r3, [pc, #236]	@ (80093c8 <RadioSetRxConfig+0x408>)
 80092da:	2200      	movs	r2, #0
 80092dc:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80092e0:	4b39      	ldr	r3, [pc, #228]	@ (80093c8 <RadioSetRxConfig+0x408>)
 80092e2:	2201      	movs	r2, #1
 80092e4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80092e6:	4b38      	ldr	r3, [pc, #224]	@ (80093c8 <RadioSetRxConfig+0x408>)
 80092e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80092ec:	2b05      	cmp	r3, #5
 80092ee:	d004      	beq.n	80092fa <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80092f0:	4b35      	ldr	r3, [pc, #212]	@ (80093c8 <RadioSetRxConfig+0x408>)
 80092f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80092f6:	2b06      	cmp	r3, #6
 80092f8:	d10a      	bne.n	8009310 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80092fa:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80092fc:	2b0b      	cmp	r3, #11
 80092fe:	d803      	bhi.n	8009308 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8009300:	4b31      	ldr	r3, [pc, #196]	@ (80093c8 <RadioSetRxConfig+0x408>)
 8009302:	220c      	movs	r2, #12
 8009304:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8009306:	e006      	b.n	8009316 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009308:	4a2f      	ldr	r2, [pc, #188]	@ (80093c8 <RadioSetRxConfig+0x408>)
 800930a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800930c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800930e:	e002      	b.n	8009316 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009310:	4a2d      	ldr	r2, [pc, #180]	@ (80093c8 <RadioSetRxConfig+0x408>)
 8009312:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009314:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8009316:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 800931a:	4b2b      	ldr	r3, [pc, #172]	@ (80093c8 <RadioSetRxConfig+0x408>)
 800931c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800931e:	4b2b      	ldr	r3, [pc, #172]	@ (80093cc <RadioSetRxConfig+0x40c>)
 8009320:	781a      	ldrb	r2, [r3, #0]
 8009322:	4b29      	ldr	r3, [pc, #164]	@ (80093c8 <RadioSetRxConfig+0x408>)
 8009324:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8009326:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 800932a:	4b27      	ldr	r3, [pc, #156]	@ (80093c8 <RadioSetRxConfig+0x408>)
 800932c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8009330:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8009334:	4b24      	ldr	r3, [pc, #144]	@ (80093c8 <RadioSetRxConfig+0x408>)
 8009336:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 800933a:	f000 fbd6 	bl	8009aea <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800933e:	2001      	movs	r0, #1
 8009340:	f7ff fd6a 	bl	8008e18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009344:	4822      	ldr	r0, [pc, #136]	@ (80093d0 <RadioSetRxConfig+0x410>)
 8009346:	f002 f9c5 	bl	800b6d4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800934a:	4822      	ldr	r0, [pc, #136]	@ (80093d4 <RadioSetRxConfig+0x414>)
 800934c:	f002 fa94 	bl	800b878 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8009350:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009352:	b2db      	uxtb	r3, r3
 8009354:	4618      	mov	r0, r3
 8009356:	f001 ff2e 	bl	800b1b6 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 800935a:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 800935e:	f002 fbe7 	bl	800bb30 <SUBGRF_ReadRegister>
 8009362:	4603      	mov	r3, r0
 8009364:	f003 0301 	and.w	r3, r3, #1
 8009368:	b2db      	uxtb	r3, r3
 800936a:	4619      	mov	r1, r3
 800936c:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8009370:	f002 fbca 	bl	800bb08 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8009374:	4b14      	ldr	r3, [pc, #80]	@ (80093c8 <RadioSetRxConfig+0x408>)
 8009376:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800937a:	2b01      	cmp	r3, #1
 800937c:	d10d      	bne.n	800939a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800937e:	f240 7036 	movw	r0, #1846	@ 0x736
 8009382:	f002 fbd5 	bl	800bb30 <SUBGRF_ReadRegister>
 8009386:	4603      	mov	r3, r0
 8009388:	f023 0304 	bic.w	r3, r3, #4
 800938c:	b2db      	uxtb	r3, r3
 800938e:	4619      	mov	r1, r3
 8009390:	f240 7036 	movw	r0, #1846	@ 0x736
 8009394:	f002 fbb8 	bl	800bb08 <SUBGRF_WriteRegister>
 8009398:	e00c      	b.n	80093b4 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800939a:	f240 7036 	movw	r0, #1846	@ 0x736
 800939e:	f002 fbc7 	bl	800bb30 <SUBGRF_ReadRegister>
 80093a2:	4603      	mov	r3, r0
 80093a4:	f043 0304 	orr.w	r3, r3, #4
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	4619      	mov	r1, r3
 80093ac:	f240 7036 	movw	r0, #1846	@ 0x736
 80093b0:	f002 fbaa 	bl	800bb08 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80093b4:	4b04      	ldr	r3, [pc, #16]	@ (80093c8 <RadioSetRxConfig+0x408>)
 80093b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80093ba:	609a      	str	r2, [r3, #8]
            break;
 80093bc:	e000      	b.n	80093c0 <RadioSetRxConfig+0x400>
            break;
 80093be:	bf00      	nop
    }
}
 80093c0:	bf00      	nop
 80093c2:	3728      	adds	r7, #40	@ 0x28
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	20000330 	.word	0x20000330
 80093cc:	20000011 	.word	0x20000011
 80093d0:	20000368 	.word	0x20000368
 80093d4:	2000033e 	.word	0x2000033e

080093d8 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b086      	sub	sp, #24
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60ba      	str	r2, [r7, #8]
 80093e0:	607b      	str	r3, [r7, #4]
 80093e2:	4603      	mov	r3, r0
 80093e4:	73fb      	strb	r3, [r7, #15]
 80093e6:	460b      	mov	r3, r1
 80093e8:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 80093ea:	f002 fe74 	bl	800c0d6 <RFW_DeInit>
    switch( modem )
 80093ee:	7bfb      	ldrb	r3, [r7, #15]
 80093f0:	2b04      	cmp	r3, #4
 80093f2:	f000 80c7 	beq.w	8009584 <RadioSetTxConfig+0x1ac>
 80093f6:	2b04      	cmp	r3, #4
 80093f8:	f300 80d6 	bgt.w	80095a8 <RadioSetTxConfig+0x1d0>
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d002      	beq.n	8009406 <RadioSetTxConfig+0x2e>
 8009400:	2b01      	cmp	r3, #1
 8009402:	d059      	beq.n	80094b8 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8009404:	e0d0      	b.n	80095a8 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009406:	4b77      	ldr	r3, [pc, #476]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 8009408:	2200      	movs	r2, #0
 800940a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800940e:	4a75      	ldr	r2, [pc, #468]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 8009410:	6a3b      	ldr	r3, [r7, #32]
 8009412:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8009414:	4b73      	ldr	r3, [pc, #460]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 8009416:	220b      	movs	r2, #11
 8009418:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f002 fd8d 	bl	800bf3c <SUBGRF_GetFskBandwidthRegValue>
 8009422:	4603      	mov	r3, r0
 8009424:	461a      	mov	r2, r3
 8009426:	4b6f      	ldr	r3, [pc, #444]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 8009428:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800942c:	4a6d      	ldr	r2, [pc, #436]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009432:	4b6c      	ldr	r3, [pc, #432]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 8009434:	2200      	movs	r2, #0
 8009436:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8009438:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800943a:	00db      	lsls	r3, r3, #3
 800943c:	b29a      	uxth	r2, r3
 800943e:	4b69      	ldr	r3, [pc, #420]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 8009440:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8009442:	4b68      	ldr	r3, [pc, #416]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 8009444:	2204      	movs	r2, #4
 8009446:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8009448:	4b66      	ldr	r3, [pc, #408]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 800944a:	2218      	movs	r2, #24
 800944c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800944e:	4b65      	ldr	r3, [pc, #404]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 8009450:	2200      	movs	r2, #0
 8009452:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8009454:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009458:	f083 0301 	eor.w	r3, r3, #1
 800945c:	b2db      	uxtb	r3, r3
 800945e:	461a      	mov	r2, r3
 8009460:	4b60      	ldr	r3, [pc, #384]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 8009462:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8009464:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009468:	2b00      	cmp	r3, #0
 800946a:	d003      	beq.n	8009474 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800946c:	4b5d      	ldr	r3, [pc, #372]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 800946e:	22f2      	movs	r2, #242	@ 0xf2
 8009470:	75da      	strb	r2, [r3, #23]
 8009472:	e002      	b.n	800947a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8009474:	4b5b      	ldr	r3, [pc, #364]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 8009476:	2201      	movs	r2, #1
 8009478:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800947a:	4b5a      	ldr	r3, [pc, #360]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 800947c:	2201      	movs	r2, #1
 800947e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8009480:	f000 fb33 	bl	8009aea <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8009484:	2000      	movs	r0, #0
 8009486:	f7ff fcc7 	bl	8008e18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800948a:	4857      	ldr	r0, [pc, #348]	@ (80095e8 <RadioSetTxConfig+0x210>)
 800948c:	f002 f922 	bl	800b6d4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009490:	4856      	ldr	r0, [pc, #344]	@ (80095ec <RadioSetTxConfig+0x214>)
 8009492:	f002 f9f1 	bl	800b878 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8009496:	4a56      	ldr	r2, [pc, #344]	@ (80095f0 <RadioSetTxConfig+0x218>)
 8009498:	f107 0310 	add.w	r3, r7, #16
 800949c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80094a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80094a4:	f107 0310 	add.w	r3, r7, #16
 80094a8:	4618      	mov	r0, r3
 80094aa:	f001 fcae 	bl	800ae0a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80094ae:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80094b2:	f001 fcf9 	bl	800aea8 <SUBGRF_SetWhiteningSeed>
            break;
 80094b6:	e078      	b.n	80095aa <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80094b8:	4b4a      	ldr	r3, [pc, #296]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80094c0:	6a3b      	ldr	r3, [r7, #32]
 80094c2:	b2da      	uxtb	r2, r3
 80094c4:	4b47      	ldr	r3, [pc, #284]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 80094c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80094ca:	4a4a      	ldr	r2, [pc, #296]	@ (80095f4 <RadioSetTxConfig+0x21c>)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4413      	add	r3, r2
 80094d0:	781a      	ldrb	r2, [r3, #0]
 80094d2:	4b44      	ldr	r3, [pc, #272]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 80094d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80094d8:	4a42      	ldr	r2, [pc, #264]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 80094da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80094de:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d105      	bne.n	80094f4 <RadioSetTxConfig+0x11c>
 80094e8:	6a3b      	ldr	r3, [r7, #32]
 80094ea:	2b0b      	cmp	r3, #11
 80094ec:	d008      	beq.n	8009500 <RadioSetTxConfig+0x128>
 80094ee:	6a3b      	ldr	r3, [r7, #32]
 80094f0:	2b0c      	cmp	r3, #12
 80094f2:	d005      	beq.n	8009500 <RadioSetTxConfig+0x128>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d107      	bne.n	800950a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80094fa:	6a3b      	ldr	r3, [r7, #32]
 80094fc:	2b0c      	cmp	r3, #12
 80094fe:	d104      	bne.n	800950a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8009500:	4b38      	ldr	r3, [pc, #224]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 8009502:	2201      	movs	r2, #1
 8009504:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8009508:	e003      	b.n	8009512 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800950a:	4b36      	ldr	r3, [pc, #216]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 800950c:	2200      	movs	r2, #0
 800950e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009512:	4b34      	ldr	r3, [pc, #208]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 8009514:	2201      	movs	r2, #1
 8009516:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8009518:	4b32      	ldr	r3, [pc, #200]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 800951a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800951e:	2b05      	cmp	r3, #5
 8009520:	d004      	beq.n	800952c <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8009522:	4b30      	ldr	r3, [pc, #192]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 8009524:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8009528:	2b06      	cmp	r3, #6
 800952a:	d10a      	bne.n	8009542 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 800952c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800952e:	2b0b      	cmp	r3, #11
 8009530:	d803      	bhi.n	800953a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8009532:	4b2c      	ldr	r3, [pc, #176]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 8009534:	220c      	movs	r2, #12
 8009536:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8009538:	e006      	b.n	8009548 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800953a:	4a2a      	ldr	r2, [pc, #168]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 800953c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800953e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8009540:	e002      	b.n	8009548 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009542:	4a28      	ldr	r2, [pc, #160]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 8009544:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009546:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8009548:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800954c:	4b25      	ldr	r3, [pc, #148]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 800954e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8009550:	4b29      	ldr	r3, [pc, #164]	@ (80095f8 <RadioSetTxConfig+0x220>)
 8009552:	781a      	ldrb	r2, [r3, #0]
 8009554:	4b23      	ldr	r3, [pc, #140]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 8009556:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8009558:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800955c:	4b21      	ldr	r3, [pc, #132]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 800955e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8009562:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8009566:	4b1f      	ldr	r3, [pc, #124]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 8009568:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 800956c:	f000 fabd 	bl	8009aea <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8009570:	2001      	movs	r0, #1
 8009572:	f7ff fc51 	bl	8008e18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009576:	481c      	ldr	r0, [pc, #112]	@ (80095e8 <RadioSetTxConfig+0x210>)
 8009578:	f002 f8ac 	bl	800b6d4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800957c:	481b      	ldr	r0, [pc, #108]	@ (80095ec <RadioSetTxConfig+0x214>)
 800957e:	f002 f97b 	bl	800b878 <SUBGRF_SetPacketParams>
            break;
 8009582:	e012      	b.n	80095aa <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8009584:	2004      	movs	r0, #4
 8009586:	f7ff fc47 	bl	8008e18 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800958a:	4b16      	ldr	r3, [pc, #88]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 800958c:	2202      	movs	r2, #2
 800958e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8009592:	4a14      	ldr	r2, [pc, #80]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 8009594:	6a3b      	ldr	r3, [r7, #32]
 8009596:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8009598:	4b12      	ldr	r3, [pc, #72]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 800959a:	2216      	movs	r2, #22
 800959c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80095a0:	4811      	ldr	r0, [pc, #68]	@ (80095e8 <RadioSetTxConfig+0x210>)
 80095a2:	f002 f897 	bl	800b6d4 <SUBGRF_SetModulationParams>
            break;
 80095a6:	e000      	b.n	80095aa <RadioSetTxConfig+0x1d2>
            break;
 80095a8:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80095aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095ae:	4618      	mov	r0, r3
 80095b0:	f002 fbc6 	bl	800bd40 <SUBGRF_SetRfTxPower>
 80095b4:	4603      	mov	r3, r0
 80095b6:	461a      	mov	r2, r3
 80095b8:	4b0a      	ldr	r3, [pc, #40]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 80095ba:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80095be:	210e      	movs	r1, #14
 80095c0:	f640 101f 	movw	r0, #2335	@ 0x91f
 80095c4:	f002 faa0 	bl	800bb08 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80095c8:	4b06      	ldr	r3, [pc, #24]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 80095ca:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80095ce:	4618      	mov	r0, r3
 80095d0:	f002 fd95 	bl	800c0fe <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80095d4:	4a03      	ldr	r2, [pc, #12]	@ (80095e4 <RadioSetTxConfig+0x20c>)
 80095d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095d8:	6053      	str	r3, [r2, #4]
}
 80095da:	bf00      	nop
 80095dc:	3718      	adds	r7, #24
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	20000330 	.word	0x20000330
 80095e8:	20000368 	.word	0x20000368
 80095ec:	2000033e 	.word	0x2000033e
 80095f0:	0800da8c 	.word	0x0800da8c
 80095f4:	0800dd28 	.word	0x0800dd28
 80095f8:	20000011 	.word	0x20000011

080095fc <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
    return true;
 8009604:	2301      	movs	r3, #1
}
 8009606:	4618      	mov	r0, r3
 8009608:	370c      	adds	r7, #12
 800960a:	46bd      	mov	sp, r7
 800960c:	bc80      	pop	{r7}
 800960e:	4770      	bx	lr

08009610 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8009610:	b480      	push	{r7}
 8009612:	b085      	sub	sp, #20
 8009614:	af00      	add	r7, sp, #0
 8009616:	4603      	mov	r3, r0
 8009618:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800961a:	2300      	movs	r3, #0
 800961c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800961e:	79fb      	ldrb	r3, [r7, #7]
 8009620:	2b0a      	cmp	r3, #10
 8009622:	d83e      	bhi.n	80096a2 <RadioGetLoRaBandwidthInHz+0x92>
 8009624:	a201      	add	r2, pc, #4	@ (adr r2, 800962c <RadioGetLoRaBandwidthInHz+0x1c>)
 8009626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800962a:	bf00      	nop
 800962c:	08009659 	.word	0x08009659
 8009630:	08009669 	.word	0x08009669
 8009634:	08009679 	.word	0x08009679
 8009638:	08009689 	.word	0x08009689
 800963c:	08009691 	.word	0x08009691
 8009640:	08009697 	.word	0x08009697
 8009644:	0800969d 	.word	0x0800969d
 8009648:	080096a3 	.word	0x080096a3
 800964c:	08009661 	.word	0x08009661
 8009650:	08009671 	.word	0x08009671
 8009654:	08009681 	.word	0x08009681
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8009658:	f641 6384 	movw	r3, #7812	@ 0x1e84
 800965c:	60fb      	str	r3, [r7, #12]
        break;
 800965e:	e020      	b.n	80096a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8009660:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8009664:	60fb      	str	r3, [r7, #12]
        break;
 8009666:	e01c      	b.n	80096a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8009668:	f643 5309 	movw	r3, #15625	@ 0x3d09
 800966c:	60fb      	str	r3, [r7, #12]
        break;
 800966e:	e018      	b.n	80096a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8009670:	f245 1361 	movw	r3, #20833	@ 0x5161
 8009674:	60fb      	str	r3, [r7, #12]
        break;
 8009676:	e014      	b.n	80096a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8009678:	f647 2312 	movw	r3, #31250	@ 0x7a12
 800967c:	60fb      	str	r3, [r7, #12]
        break;
 800967e:	e010      	b.n	80096a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8009680:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8009684:	60fb      	str	r3, [r7, #12]
        break;
 8009686:	e00c      	b.n	80096a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8009688:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800968c:	60fb      	str	r3, [r7, #12]
        break;
 800968e:	e008      	b.n	80096a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8009690:	4b07      	ldr	r3, [pc, #28]	@ (80096b0 <RadioGetLoRaBandwidthInHz+0xa0>)
 8009692:	60fb      	str	r3, [r7, #12]
        break;
 8009694:	e005      	b.n	80096a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8009696:	4b07      	ldr	r3, [pc, #28]	@ (80096b4 <RadioGetLoRaBandwidthInHz+0xa4>)
 8009698:	60fb      	str	r3, [r7, #12]
        break;
 800969a:	e002      	b.n	80096a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800969c:	4b06      	ldr	r3, [pc, #24]	@ (80096b8 <RadioGetLoRaBandwidthInHz+0xa8>)
 800969e:	60fb      	str	r3, [r7, #12]
        break;
 80096a0:	bf00      	nop
    }

    return bandwidthInHz;
 80096a2:	68fb      	ldr	r3, [r7, #12]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3714      	adds	r7, #20
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bc80      	pop	{r7}
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	0001e848 	.word	0x0001e848
 80096b4:	0003d090 	.word	0x0003d090
 80096b8:	0007a120 	.word	0x0007a120

080096bc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	4608      	mov	r0, r1
 80096c6:	4611      	mov	r1, r2
 80096c8:	461a      	mov	r2, r3
 80096ca:	4603      	mov	r3, r0
 80096cc:	70fb      	strb	r3, [r7, #3]
 80096ce:	460b      	mov	r3, r1
 80096d0:	803b      	strh	r3, [r7, #0]
 80096d2:	4613      	mov	r3, r2
 80096d4:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 80096d6:	883b      	ldrh	r3, [r7, #0]
 80096d8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80096da:	78ba      	ldrb	r2, [r7, #2]
 80096dc:	f082 0201 	eor.w	r2, r2, #1
 80096e0:	b2d2      	uxtb	r2, r2
 80096e2:	2a00      	cmp	r2, #0
 80096e4:	d001      	beq.n	80096ea <RadioGetGfskTimeOnAirNumerator+0x2e>
 80096e6:	2208      	movs	r2, #8
 80096e8:	e000      	b.n	80096ec <RadioGetGfskTimeOnAirNumerator+0x30>
 80096ea:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80096ec:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80096ee:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80096f2:	7c3b      	ldrb	r3, [r7, #16]
 80096f4:	7d39      	ldrb	r1, [r7, #20]
 80096f6:	2900      	cmp	r1, #0
 80096f8:	d001      	beq.n	80096fe <RadioGetGfskTimeOnAirNumerator+0x42>
 80096fa:	2102      	movs	r1, #2
 80096fc:	e000      	b.n	8009700 <RadioGetGfskTimeOnAirNumerator+0x44>
 80096fe:	2100      	movs	r1, #0
 8009700:	440b      	add	r3, r1
 8009702:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8009704:	4413      	add	r3, r2
}
 8009706:	4618      	mov	r0, r3
 8009708:	370c      	adds	r7, #12
 800970a:	46bd      	mov	sp, r7
 800970c:	bc80      	pop	{r7}
 800970e:	4770      	bx	lr

08009710 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8009710:	b480      	push	{r7}
 8009712:	b08b      	sub	sp, #44	@ 0x2c
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	4611      	mov	r1, r2
 800971c:	461a      	mov	r2, r3
 800971e:	460b      	mov	r3, r1
 8009720:	71fb      	strb	r3, [r7, #7]
 8009722:	4613      	mov	r3, r2
 8009724:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8009726:	79fb      	ldrb	r3, [r7, #7]
 8009728:	3304      	adds	r3, #4
 800972a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 800972c:	2300      	movs	r3, #0
 800972e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	2b05      	cmp	r3, #5
 8009736:	d002      	beq.n	800973e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	2b06      	cmp	r3, #6
 800973c:	d104      	bne.n	8009748 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800973e:	88bb      	ldrh	r3, [r7, #4]
 8009740:	2b0b      	cmp	r3, #11
 8009742:	d801      	bhi.n	8009748 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8009744:	230c      	movs	r3, #12
 8009746:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d105      	bne.n	800975a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	2b0b      	cmp	r3, #11
 8009752:	d008      	beq.n	8009766 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	2b0c      	cmp	r3, #12
 8009758:	d005      	beq.n	8009766 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d105      	bne.n	800976c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	2b0c      	cmp	r3, #12
 8009764:	d102      	bne.n	800976c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8009766:	2301      	movs	r3, #1
 8009768:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800976c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009770:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8009772:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009776:	2a00      	cmp	r2, #0
 8009778:	d001      	beq.n	800977e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 800977a:	2210      	movs	r2, #16
 800977c:	e000      	b.n	8009780 <RadioGetLoRaTimeOnAirNumerator+0x70>
 800977e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8009780:	4413      	add	r3, r2
 8009782:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8009788:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 800978a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800978e:	2a00      	cmp	r2, #0
 8009790:	d001      	beq.n	8009796 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8009792:	2200      	movs	r2, #0
 8009794:	e000      	b.n	8009798 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8009796:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8009798:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800979a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	2b06      	cmp	r3, #6
 80097a0:	d803      	bhi.n	80097aa <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	623b      	str	r3, [r7, #32]
 80097a8:	e00e      	b.n	80097c8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	3308      	adds	r3, #8
 80097ae:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80097b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d004      	beq.n	80097c2 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	3b02      	subs	r3, #2
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	623b      	str	r3, [r7, #32]
 80097c0:	e002      	b.n	80097c8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	da01      	bge.n	80097d2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80097ce:	2300      	movs	r3, #0
 80097d0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80097d2:	69fa      	ldr	r2, [r7, #28]
 80097d4:	6a3b      	ldr	r3, [r7, #32]
 80097d6:	4413      	add	r3, r2
 80097d8:	1e5a      	subs	r2, r3, #1
 80097da:	6a3b      	ldr	r3, [r7, #32]
 80097dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	fb03 f202 	mul.w	r2, r3, r2
 80097e6:	88bb      	ldrh	r3, [r7, #4]
 80097e8:	4413      	add	r3, r2
    int32_t intermediate =
 80097ea:	330c      	adds	r3, #12
 80097ec:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	2b06      	cmp	r3, #6
 80097f2:	d802      	bhi.n	80097fa <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80097f4:	69bb      	ldr	r3, [r7, #24]
 80097f6:	3302      	adds	r3, #2
 80097f8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	1c5a      	adds	r2, r3, #1
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	3b02      	subs	r3, #2
 8009804:	fa02 f303 	lsl.w	r3, r2, r3
}
 8009808:	4618      	mov	r0, r3
 800980a:	372c      	adds	r7, #44	@ 0x2c
 800980c:	46bd      	mov	sp, r7
 800980e:	bc80      	pop	{r7}
 8009810:	4770      	bx	lr
	...

08009814 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b08a      	sub	sp, #40	@ 0x28
 8009818:	af04      	add	r7, sp, #16
 800981a:	60b9      	str	r1, [r7, #8]
 800981c:	607a      	str	r2, [r7, #4]
 800981e:	461a      	mov	r2, r3
 8009820:	4603      	mov	r3, r0
 8009822:	73fb      	strb	r3, [r7, #15]
 8009824:	4613      	mov	r3, r2
 8009826:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8009828:	2300      	movs	r3, #0
 800982a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 800982c:	2301      	movs	r3, #1
 800982e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8009830:	7bfb      	ldrb	r3, [r7, #15]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d002      	beq.n	800983c <RadioTimeOnAir+0x28>
 8009836:	2b01      	cmp	r3, #1
 8009838:	d017      	beq.n	800986a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 800983a:	e035      	b.n	80098a8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800983c:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8009840:	8c3a      	ldrh	r2, [r7, #32]
 8009842:	7bb9      	ldrb	r1, [r7, #14]
 8009844:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009848:	9301      	str	r3, [sp, #4]
 800984a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	4603      	mov	r3, r0
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f7ff ff32 	bl	80096bc <RadioGetGfskTimeOnAirNumerator>
 8009858:	4603      	mov	r3, r0
 800985a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800985e:	fb02 f303 	mul.w	r3, r2, r3
 8009862:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	613b      	str	r3, [r7, #16]
        break;
 8009868:	e01e      	b.n	80098a8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800986a:	8c39      	ldrh	r1, [r7, #32]
 800986c:	7bba      	ldrb	r2, [r7, #14]
 800986e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009872:	9302      	str	r3, [sp, #8]
 8009874:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009878:	9301      	str	r3, [sp, #4]
 800987a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	460b      	mov	r3, r1
 8009882:	6879      	ldr	r1, [r7, #4]
 8009884:	68b8      	ldr	r0, [r7, #8]
 8009886:	f7ff ff43 	bl	8009710 <RadioGetLoRaTimeOnAirNumerator>
 800988a:	4603      	mov	r3, r0
 800988c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009890:	fb02 f303 	mul.w	r3, r2, r3
 8009894:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8009896:	4a0a      	ldr	r2, [pc, #40]	@ (80098c0 <RadioTimeOnAir+0xac>)
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	4413      	add	r3, r2
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	4618      	mov	r0, r3
 80098a0:	f7ff feb6 	bl	8009610 <RadioGetLoRaBandwidthInHz>
 80098a4:	6138      	str	r0, [r7, #16]
        break;
 80098a6:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 80098a8:	697a      	ldr	r2, [r7, #20]
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	4413      	add	r3, r2
 80098ae:	1e5a      	subs	r2, r3, #1
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3718      	adds	r7, #24
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	0800dd28 	.word	0x0800dd28

080098c4 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	460b      	mov	r3, r1
 80098ce:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80098d0:	2300      	movs	r3, #0
 80098d2:	2200      	movs	r2, #0
 80098d4:	f240 2101 	movw	r1, #513	@ 0x201
 80098d8:	f240 2001 	movw	r0, #513	@ 0x201
 80098dc:	f001 fd64 	bl	800b3a8 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80098e0:	4b73      	ldr	r3, [pc, #460]	@ (8009ab0 <RadioSend+0x1ec>)
 80098e2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80098e6:	2101      	movs	r1, #1
 80098e8:	4618      	mov	r0, r3
 80098ea:	f002 fa01 	bl	800bcf0 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80098ee:	4b70      	ldr	r3, [pc, #448]	@ (8009ab0 <RadioSend+0x1ec>)
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d112      	bne.n	800991c <RadioSend+0x58>
 80098f6:	4b6e      	ldr	r3, [pc, #440]	@ (8009ab0 <RadioSend+0x1ec>)
 80098f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80098fc:	2b06      	cmp	r3, #6
 80098fe:	d10d      	bne.n	800991c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8009900:	f640 0089 	movw	r0, #2185	@ 0x889
 8009904:	f002 f914 	bl	800bb30 <SUBGRF_ReadRegister>
 8009908:	4603      	mov	r3, r0
 800990a:	f023 0304 	bic.w	r3, r3, #4
 800990e:	b2db      	uxtb	r3, r3
 8009910:	4619      	mov	r1, r3
 8009912:	f640 0089 	movw	r0, #2185	@ 0x889
 8009916:	f002 f8f7 	bl	800bb08 <SUBGRF_WriteRegister>
 800991a:	e00c      	b.n	8009936 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800991c:	f640 0089 	movw	r0, #2185	@ 0x889
 8009920:	f002 f906 	bl	800bb30 <SUBGRF_ReadRegister>
 8009924:	4603      	mov	r3, r0
 8009926:	f043 0304 	orr.w	r3, r3, #4
 800992a:	b2db      	uxtb	r3, r3
 800992c:	4619      	mov	r1, r3
 800992e:	f640 0089 	movw	r0, #2185	@ 0x889
 8009932:	f002 f8e9 	bl	800bb08 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8009936:	4b5e      	ldr	r3, [pc, #376]	@ (8009ab0 <RadioSend+0x1ec>)
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	2b04      	cmp	r3, #4
 800993c:	f200 80a8 	bhi.w	8009a90 <RadioSend+0x1cc>
 8009940:	a201      	add	r2, pc, #4	@ (adr r2, 8009948 <RadioSend+0x84>)
 8009942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009946:	bf00      	nop
 8009948:	08009977 	.word	0x08009977
 800994c:	0800995d 	.word	0x0800995d
 8009950:	08009977 	.word	0x08009977
 8009954:	080099d9 	.word	0x080099d9
 8009958:	080099f9 	.word	0x080099f9
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800995c:	4a54      	ldr	r2, [pc, #336]	@ (8009ab0 <RadioSend+0x1ec>)
 800995e:	78fb      	ldrb	r3, [r7, #3]
 8009960:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009962:	4854      	ldr	r0, [pc, #336]	@ (8009ab4 <RadioSend+0x1f0>)
 8009964:	f001 ff88 	bl	800b878 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8009968:	78fb      	ldrb	r3, [r7, #3]
 800996a:	2200      	movs	r2, #0
 800996c:	4619      	mov	r1, r3
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f001 fa38 	bl	800ade4 <SUBGRF_SendPayload>
            break;
 8009974:	e08d      	b.n	8009a92 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8009976:	f002 fbb4 	bl	800c0e2 <RFW_Is_Init>
 800997a:	4603      	mov	r3, r0
 800997c:	2b01      	cmp	r3, #1
 800997e:	d11e      	bne.n	80099be <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8009980:	f107 020d 	add.w	r2, r7, #13
 8009984:	78fb      	ldrb	r3, [r7, #3]
 8009986:	4619      	mov	r1, r3
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f002 fbc2 	bl	800c112 <RFW_TransmitInit>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10c      	bne.n	80099ae <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8009994:	7b7a      	ldrb	r2, [r7, #13]
 8009996:	4b46      	ldr	r3, [pc, #280]	@ (8009ab0 <RadioSend+0x1ec>)
 8009998:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800999a:	4846      	ldr	r0, [pc, #280]	@ (8009ab4 <RadioSend+0x1f0>)
 800999c:	f001 ff6c 	bl	800b878 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80099a0:	7b7b      	ldrb	r3, [r7, #13]
 80099a2:	2200      	movs	r2, #0
 80099a4:	4619      	mov	r1, r3
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f001 fa1c 	bl	800ade4 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80099ac:	e071      	b.n	8009a92 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 80099ae:	4b42      	ldr	r3, [pc, #264]	@ (8009ab8 <RadioSend+0x1f4>)
 80099b0:	2201      	movs	r2, #1
 80099b2:	2100      	movs	r1, #0
 80099b4:	2002      	movs	r0, #2
 80099b6:	f002 fd1d 	bl	800c3f4 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 80099ba:	2303      	movs	r3, #3
 80099bc:	e073      	b.n	8009aa6 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80099be:	4a3c      	ldr	r2, [pc, #240]	@ (8009ab0 <RadioSend+0x1ec>)
 80099c0:	78fb      	ldrb	r3, [r7, #3]
 80099c2:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80099c4:	483b      	ldr	r0, [pc, #236]	@ (8009ab4 <RadioSend+0x1f0>)
 80099c6:	f001 ff57 	bl	800b878 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80099ca:	78fb      	ldrb	r3, [r7, #3]
 80099cc:	2200      	movs	r2, #0
 80099ce:	4619      	mov	r1, r3
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f001 fa07 	bl	800ade4 <SUBGRF_SendPayload>
            break;
 80099d6:	e05c      	b.n	8009a92 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80099d8:	4b35      	ldr	r3, [pc, #212]	@ (8009ab0 <RadioSend+0x1ec>)
 80099da:	2202      	movs	r2, #2
 80099dc:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80099de:	4a34      	ldr	r2, [pc, #208]	@ (8009ab0 <RadioSend+0x1ec>)
 80099e0:	78fb      	ldrb	r3, [r7, #3]
 80099e2:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80099e4:	4833      	ldr	r0, [pc, #204]	@ (8009ab4 <RadioSend+0x1f0>)
 80099e6:	f001 ff47 	bl	800b878 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80099ea:	78fb      	ldrb	r3, [r7, #3]
 80099ec:	2200      	movs	r2, #0
 80099ee:	4619      	mov	r1, r3
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f001 f9f7 	bl	800ade4 <SUBGRF_SendPayload>
            break;
 80099f6:	e04c      	b.n	8009a92 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80099f8:	78fb      	ldrb	r3, [r7, #3]
 80099fa:	461a      	mov	r2, r3
 80099fc:	6879      	ldr	r1, [r7, #4]
 80099fe:	482f      	ldr	r0, [pc, #188]	@ (8009abc <RadioSend+0x1f8>)
 8009a00:	f000 fcca 	bl	800a398 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8009a04:	4b2a      	ldr	r3, [pc, #168]	@ (8009ab0 <RadioSend+0x1ec>)
 8009a06:	2202      	movs	r2, #2
 8009a08:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8009a0a:	78fb      	ldrb	r3, [r7, #3]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	b2da      	uxtb	r2, r3
 8009a10:	4b27      	ldr	r3, [pc, #156]	@ (8009ab0 <RadioSend+0x1ec>)
 8009a12:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009a14:	4827      	ldr	r0, [pc, #156]	@ (8009ab4 <RadioSend+0x1f0>)
 8009a16:	f001 ff2f 	bl	800b878 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	20f1      	movs	r0, #241	@ 0xf1
 8009a1e:	f000 f965 	bl	8009cec <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8009a22:	2100      	movs	r1, #0
 8009a24:	20f0      	movs	r0, #240	@ 0xf0
 8009a26:	f000 f961 	bl	8009cec <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8009a2a:	4b21      	ldr	r3, [pc, #132]	@ (8009ab0 <RadioSend+0x1ec>)
 8009a2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a2e:	2b64      	cmp	r3, #100	@ 0x64
 8009a30:	d108      	bne.n	8009a44 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8009a32:	2170      	movs	r1, #112	@ 0x70
 8009a34:	20f3      	movs	r0, #243	@ 0xf3
 8009a36:	f000 f959 	bl	8009cec <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8009a3a:	211d      	movs	r1, #29
 8009a3c:	20f2      	movs	r0, #242	@ 0xf2
 8009a3e:	f000 f955 	bl	8009cec <RadioWrite>
 8009a42:	e007      	b.n	8009a54 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8009a44:	21e1      	movs	r1, #225	@ 0xe1
 8009a46:	20f3      	movs	r0, #243	@ 0xf3
 8009a48:	f000 f950 	bl	8009cec <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8009a4c:	2104      	movs	r1, #4
 8009a4e:	20f2      	movs	r0, #242	@ 0xf2
 8009a50:	f000 f94c 	bl	8009cec <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8009a54:	78fb      	ldrb	r3, [r7, #3]
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	00db      	lsls	r3, r3, #3
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	3302      	adds	r3, #2
 8009a5e:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8009a60:	89fb      	ldrh	r3, [r7, #14]
 8009a62:	0a1b      	lsrs	r3, r3, #8
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	4619      	mov	r1, r3
 8009a6a:	20f4      	movs	r0, #244	@ 0xf4
 8009a6c:	f000 f93e 	bl	8009cec <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8009a70:	89fb      	ldrh	r3, [r7, #14]
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	4619      	mov	r1, r3
 8009a76:	20f5      	movs	r0, #245	@ 0xf5
 8009a78:	f000 f938 	bl	8009cec <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8009a7c:	78fb      	ldrb	r3, [r7, #3]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8009a86:	4619      	mov	r1, r3
 8009a88:	480c      	ldr	r0, [pc, #48]	@ (8009abc <RadioSend+0x1f8>)
 8009a8a:	f001 f9ab 	bl	800ade4 <SUBGRF_SendPayload>
            break;
 8009a8e:	e000      	b.n	8009a92 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8009a90:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8009a92:	4b07      	ldr	r3, [pc, #28]	@ (8009ab0 <RadioSend+0x1ec>)
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	4619      	mov	r1, r3
 8009a98:	4809      	ldr	r0, [pc, #36]	@ (8009ac0 <RadioSend+0x1fc>)
 8009a9a:	f003 fb6d 	bl	800d178 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8009a9e:	4808      	ldr	r0, [pc, #32]	@ (8009ac0 <RadioSend+0x1fc>)
 8009aa0:	f003 fa8c 	bl	800cfbc <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	20000330 	.word	0x20000330
 8009ab4:	2000033e 	.word	0x2000033e
 8009ab8:	0800da94 	.word	0x0800da94
 8009abc:	2000022c 	.word	0x2000022c
 8009ac0:	2000038c 	.word	0x2000038c

08009ac4 <RadioSleep>:

static void RadioSleep( void )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8009aca:	2300      	movs	r3, #0
 8009acc:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8009ace:	793b      	ldrb	r3, [r7, #4]
 8009ad0:	f043 0304 	orr.w	r3, r3, #4
 8009ad4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8009ad6:	7938      	ldrb	r0, [r7, #4]
 8009ad8:	f001 fa60 	bl	800af9c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8009adc:	2002      	movs	r0, #2
 8009ade:	f7f7 f9bd 	bl	8000e5c <HAL_Delay>
}
 8009ae2:	bf00      	nop
 8009ae4:	3708      	adds	r7, #8
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <RadioStandby>:

static void RadioStandby( void )
{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8009aee:	2000      	movs	r0, #0
 8009af0:	f001 fa86 	bl	800b000 <SUBGRF_SetStandby>
}
 8009af4:	bf00      	nop
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8009b00:	f002 faef 	bl	800c0e2 <RFW_Is_Init>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d102      	bne.n	8009b10 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8009b0a:	f002 fb12 	bl	800c132 <RFW_ReceiveInit>
 8009b0e:	e007      	b.n	8009b20 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009b10:	2300      	movs	r3, #0
 8009b12:	2200      	movs	r2, #0
 8009b14:	f240 2162 	movw	r1, #610	@ 0x262
 8009b18:	f240 2062 	movw	r0, #610	@ 0x262
 8009b1c:	f001 fc44 	bl	800b3a8 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d006      	beq.n	8009b34 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8009b26:	6879      	ldr	r1, [r7, #4]
 8009b28:	4811      	ldr	r0, [pc, #68]	@ (8009b70 <RadioRx+0x78>)
 8009b2a:	f003 fb25 	bl	800d178 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8009b2e:	4810      	ldr	r0, [pc, #64]	@ (8009b70 <RadioRx+0x78>)
 8009b30:	f003 fa44 	bl	800cfbc <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8009b34:	4b0f      	ldr	r3, [pc, #60]	@ (8009b74 <RadioRx+0x7c>)
 8009b36:	2200      	movs	r2, #0
 8009b38:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8009b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8009b74 <RadioRx+0x7c>)
 8009b3c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009b40:	2100      	movs	r1, #0
 8009b42:	4618      	mov	r0, r3
 8009b44:	f002 f8d4 	bl	800bcf0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8009b48:	4b0a      	ldr	r3, [pc, #40]	@ (8009b74 <RadioRx+0x7c>)
 8009b4a:	785b      	ldrb	r3, [r3, #1]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d004      	beq.n	8009b5a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8009b50:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8009b54:	f001 fa90 	bl	800b078 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8009b58:	e005      	b.n	8009b66 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8009b5a:	4b06      	ldr	r3, [pc, #24]	@ (8009b74 <RadioRx+0x7c>)
 8009b5c:	689b      	ldr	r3, [r3, #8]
 8009b5e:	019b      	lsls	r3, r3, #6
 8009b60:	4618      	mov	r0, r3
 8009b62:	f001 fa89 	bl	800b078 <SUBGRF_SetRx>
}
 8009b66:	bf00      	nop
 8009b68:	3708      	adds	r7, #8
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	200003a4 	.word	0x200003a4
 8009b74:	20000330 	.word	0x20000330

08009b78 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8009b80:	f002 faaf 	bl	800c0e2 <RFW_Is_Init>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d102      	bne.n	8009b90 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8009b8a:	f002 fad2 	bl	800c132 <RFW_ReceiveInit>
 8009b8e:	e007      	b.n	8009ba0 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009b90:	2300      	movs	r3, #0
 8009b92:	2200      	movs	r2, #0
 8009b94:	f240 2162 	movw	r1, #610	@ 0x262
 8009b98:	f240 2062 	movw	r0, #610	@ 0x262
 8009b9c:	f001 fc04 	bl	800b3a8 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d006      	beq.n	8009bb4 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8009ba6:	6879      	ldr	r1, [r7, #4]
 8009ba8:	4811      	ldr	r0, [pc, #68]	@ (8009bf0 <RadioRxBoosted+0x78>)
 8009baa:	f003 fae5 	bl	800d178 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8009bae:	4810      	ldr	r0, [pc, #64]	@ (8009bf0 <RadioRxBoosted+0x78>)
 8009bb0:	f003 fa04 	bl	800cfbc <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8009bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8009bf4 <RadioRxBoosted+0x7c>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8009bba:	4b0e      	ldr	r3, [pc, #56]	@ (8009bf4 <RadioRxBoosted+0x7c>)
 8009bbc:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f002 f894 	bl	800bcf0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8009bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8009bf4 <RadioRxBoosted+0x7c>)
 8009bca:	785b      	ldrb	r3, [r3, #1]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d004      	beq.n	8009bda <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8009bd0:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8009bd4:	f001 fa70 	bl	800b0b8 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8009bd8:	e005      	b.n	8009be6 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8009bda:	4b06      	ldr	r3, [pc, #24]	@ (8009bf4 <RadioRxBoosted+0x7c>)
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	019b      	lsls	r3, r3, #6
 8009be0:	4618      	mov	r0, r3
 8009be2:	f001 fa69 	bl	800b0b8 <SUBGRF_SetRxBoosted>
}
 8009be6:	bf00      	nop
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	200003a4 	.word	0x200003a4
 8009bf4:	20000330 	.word	0x20000330

08009bf8 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	005a      	lsls	r2, r3, #1
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	4413      	add	r3, r2
 8009c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8009c3c <RadioSetRxDutyCycle+0x44>)
 8009c0c:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8009c0e:	2300      	movs	r3, #0
 8009c10:	2200      	movs	r2, #0
 8009c12:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8009c16:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8009c1a:	f001 fbc5 	bl	800b3a8 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8009c1e:	4b07      	ldr	r3, [pc, #28]	@ (8009c3c <RadioSetRxDutyCycle+0x44>)
 8009c20:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009c24:	2100      	movs	r1, #0
 8009c26:	4618      	mov	r0, r3
 8009c28:	f002 f862 	bl	800bcf0 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8009c2c:	6839      	ldr	r1, [r7, #0]
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f001 fa66 	bl	800b100 <SUBGRF_SetRxDutyCycle>
}
 8009c34:	bf00      	nop
 8009c36:	3708      	adds	r7, #8
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	20000330 	.word	0x20000330

08009c40 <RadioStartCad>:

static void RadioStartCad( void )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8009c44:	4b09      	ldr	r3, [pc, #36]	@ (8009c6c <RadioStartCad+0x2c>)
 8009c46:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f002 f84f 	bl	800bcf0 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8009c52:	2300      	movs	r3, #0
 8009c54:	2200      	movs	r2, #0
 8009c56:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8009c5a:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8009c5e:	f001 fba3 	bl	800b3a8 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8009c62:	f001 fa79 	bl	800b158 <SUBGRF_SetCad>
}
 8009c66:	bf00      	nop
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	20000330 	.word	0x20000330

08009c70 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	460b      	mov	r3, r1
 8009c7a:	70fb      	strb	r3, [r7, #3]
 8009c7c:	4613      	mov	r3, r2
 8009c7e:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8009c80:	883b      	ldrh	r3, [r7, #0]
 8009c82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009c86:	fb02 f303 	mul.w	r3, r2, r3
 8009c8a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f001 fbe7 	bl	800b460 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8009c92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c96:	4618      	mov	r0, r3
 8009c98:	f002 f852 	bl	800bd40 <SUBGRF_SetRfTxPower>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009ca0:	210e      	movs	r1, #14
 8009ca2:	f640 101f 	movw	r0, #2335	@ 0x91f
 8009ca6:	f001 ff2f 	bl	800bb08 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8009caa:	7afb      	ldrb	r3, [r7, #11]
 8009cac:	2101      	movs	r1, #1
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f002 f81e 	bl	800bcf0 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8009cb4:	f001 fa5e 	bl	800b174 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8009cb8:	68f9      	ldr	r1, [r7, #12]
 8009cba:	4805      	ldr	r0, [pc, #20]	@ (8009cd0 <RadioSetTxContinuousWave+0x60>)
 8009cbc:	f003 fa5c 	bl	800d178 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8009cc0:	4803      	ldr	r0, [pc, #12]	@ (8009cd0 <RadioSetTxContinuousWave+0x60>)
 8009cc2:	f003 f97b 	bl	800cfbc <UTIL_TIMER_Start>
}
 8009cc6:	bf00      	nop
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	2000038c 	.word	0x2000038c

08009cd4 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	4603      	mov	r3, r0
 8009cdc:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8009cde:	f001 fe80 	bl	800b9e2 <SUBGRF_GetRssiInst>
 8009ce2:	4603      	mov	r3, r0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3708      	adds	r7, #8
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	460a      	mov	r2, r1
 8009cf6:	80fb      	strh	r3, [r7, #6]
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8009cfc:	797a      	ldrb	r2, [r7, #5]
 8009cfe:	88fb      	ldrh	r3, [r7, #6]
 8009d00:	4611      	mov	r1, r2
 8009d02:	4618      	mov	r0, r3
 8009d04:	f001 ff00 	bl	800bb08 <SUBGRF_WriteRegister>
}
 8009d08:	bf00      	nop
 8009d0a:	3708      	adds	r7, #8
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	4603      	mov	r3, r0
 8009d18:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8009d1a:	88fb      	ldrh	r3, [r7, #6]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f001 ff07 	bl	800bb30 <SUBGRF_ReadRegister>
 8009d22:	4603      	mov	r3, r0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	4603      	mov	r3, r0
 8009d34:	6039      	str	r1, [r7, #0]
 8009d36:	80fb      	strh	r3, [r7, #6]
 8009d38:	4613      	mov	r3, r2
 8009d3a:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8009d3c:	797b      	ldrb	r3, [r7, #5]
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	88fb      	ldrh	r3, [r7, #6]
 8009d42:	6839      	ldr	r1, [r7, #0]
 8009d44:	4618      	mov	r0, r3
 8009d46:	f001 ff07 	bl	800bb58 <SUBGRF_WriteRegisters>
}
 8009d4a:	bf00      	nop
 8009d4c:	3708      	adds	r7, #8
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b082      	sub	sp, #8
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	4603      	mov	r3, r0
 8009d5a:	6039      	str	r1, [r7, #0]
 8009d5c:	80fb      	strh	r3, [r7, #6]
 8009d5e:	4613      	mov	r3, r2
 8009d60:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8009d62:	797b      	ldrb	r3, [r7, #5]
 8009d64:	b29a      	uxth	r2, r3
 8009d66:	88fb      	ldrh	r3, [r7, #6]
 8009d68:	6839      	ldr	r1, [r7, #0]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f001 ff16 	bl	800bb9c <SUBGRF_ReadRegisters>
}
 8009d70:	bf00      	nop
 8009d72:	3708      	adds	r7, #8
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	4603      	mov	r3, r0
 8009d80:	460a      	mov	r2, r1
 8009d82:	71fb      	strb	r3, [r7, #7]
 8009d84:	4613      	mov	r3, r2
 8009d86:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8009d88:	79fb      	ldrb	r3, [r7, #7]
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d10a      	bne.n	8009da4 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8009d8e:	4a0e      	ldr	r2, [pc, #56]	@ (8009dc8 <RadioSetMaxPayloadLength+0x50>)
 8009d90:	79bb      	ldrb	r3, [r7, #6]
 8009d92:	7013      	strb	r3, [r2, #0]
 8009d94:	4b0c      	ldr	r3, [pc, #48]	@ (8009dc8 <RadioSetMaxPayloadLength+0x50>)
 8009d96:	781a      	ldrb	r2, [r3, #0]
 8009d98:	4b0c      	ldr	r3, [pc, #48]	@ (8009dcc <RadioSetMaxPayloadLength+0x54>)
 8009d9a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009d9c:	480c      	ldr	r0, [pc, #48]	@ (8009dd0 <RadioSetMaxPayloadLength+0x58>)
 8009d9e:	f001 fd6b 	bl	800b878 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8009da2:	e00d      	b.n	8009dc0 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8009da4:	4b09      	ldr	r3, [pc, #36]	@ (8009dcc <RadioSetMaxPayloadLength+0x54>)
 8009da6:	7d5b      	ldrb	r3, [r3, #21]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d109      	bne.n	8009dc0 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8009dac:	4a06      	ldr	r2, [pc, #24]	@ (8009dc8 <RadioSetMaxPayloadLength+0x50>)
 8009dae:	79bb      	ldrb	r3, [r7, #6]
 8009db0:	7013      	strb	r3, [r2, #0]
 8009db2:	4b05      	ldr	r3, [pc, #20]	@ (8009dc8 <RadioSetMaxPayloadLength+0x50>)
 8009db4:	781a      	ldrb	r2, [r3, #0]
 8009db6:	4b05      	ldr	r3, [pc, #20]	@ (8009dcc <RadioSetMaxPayloadLength+0x54>)
 8009db8:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009dba:	4805      	ldr	r0, [pc, #20]	@ (8009dd0 <RadioSetMaxPayloadLength+0x58>)
 8009dbc:	f001 fd5c 	bl	800b878 <SUBGRF_SetPacketParams>
}
 8009dc0:	bf00      	nop
 8009dc2:	3708      	adds	r7, #8
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	20000011 	.word	0x20000011
 8009dcc:	20000330 	.word	0x20000330
 8009dd0:	2000033e 	.word	0x2000033e

08009dd4 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	4603      	mov	r3, r0
 8009ddc:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8009dde:	4a13      	ldr	r2, [pc, #76]	@ (8009e2c <RadioSetPublicNetwork+0x58>)
 8009de0:	79fb      	ldrb	r3, [r7, #7]
 8009de2:	7313      	strb	r3, [r2, #12]
 8009de4:	4b11      	ldr	r3, [pc, #68]	@ (8009e2c <RadioSetPublicNetwork+0x58>)
 8009de6:	7b1a      	ldrb	r2, [r3, #12]
 8009de8:	4b10      	ldr	r3, [pc, #64]	@ (8009e2c <RadioSetPublicNetwork+0x58>)
 8009dea:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8009dec:	2001      	movs	r0, #1
 8009dee:	f7ff f813 	bl	8008e18 <RadioSetModem>
    if( enable == true )
 8009df2:	79fb      	ldrb	r3, [r7, #7]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d00a      	beq.n	8009e0e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8009df8:	2134      	movs	r1, #52	@ 0x34
 8009dfa:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8009dfe:	f001 fe83 	bl	800bb08 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8009e02:	2144      	movs	r1, #68	@ 0x44
 8009e04:	f240 7041 	movw	r0, #1857	@ 0x741
 8009e08:	f001 fe7e 	bl	800bb08 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8009e0c:	e009      	b.n	8009e22 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8009e0e:	2114      	movs	r1, #20
 8009e10:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8009e14:	f001 fe78 	bl	800bb08 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8009e18:	2124      	movs	r1, #36	@ 0x24
 8009e1a:	f240 7041 	movw	r0, #1857	@ 0x741
 8009e1e:	f001 fe73 	bl	800bb08 <SUBGRF_WriteRegister>
}
 8009e22:	bf00      	nop
 8009e24:	3708      	adds	r7, #8
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	20000330 	.word	0x20000330

08009e30 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8009e34:	f001 ffb8 	bl	800bda8 <SUBGRF_GetRadioWakeUpTime>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	3303      	adds	r3, #3
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8009e48:	f000 f80e 	bl	8009e68 <RadioOnTxTimeoutProcess>
}
 8009e4c:	bf00      	nop
 8009e4e:	3708      	adds	r7, #8
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8009e5c:	f000 f818 	bl	8009e90 <RadioOnRxTimeoutProcess>
}
 8009e60:	bf00      	nop
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8009e6c:	4b07      	ldr	r3, [pc, #28]	@ (8009e8c <RadioOnTxTimeoutProcess+0x24>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d008      	beq.n	8009e86 <RadioOnTxTimeoutProcess+0x1e>
 8009e74:	4b05      	ldr	r3, [pc, #20]	@ (8009e8c <RadioOnTxTimeoutProcess+0x24>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d003      	beq.n	8009e86 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8009e7e:	4b03      	ldr	r3, [pc, #12]	@ (8009e8c <RadioOnTxTimeoutProcess+0x24>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	4798      	blx	r3
    }
}
 8009e86:	bf00      	nop
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	2000032c 	.word	0x2000032c

08009e90 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009e94:	4b07      	ldr	r3, [pc, #28]	@ (8009eb4 <RadioOnRxTimeoutProcess+0x24>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d008      	beq.n	8009eae <RadioOnRxTimeoutProcess+0x1e>
 8009e9c:	4b05      	ldr	r3, [pc, #20]	@ (8009eb4 <RadioOnRxTimeoutProcess+0x24>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d003      	beq.n	8009eae <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8009ea6:	4b03      	ldr	r3, [pc, #12]	@ (8009eb4 <RadioOnRxTimeoutProcess+0x24>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	4798      	blx	r3
    }
}
 8009eae:	bf00      	nop
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	2000032c 	.word	0x2000032c

08009eb8 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8009ec2:	4a05      	ldr	r2, [pc, #20]	@ (8009ed8 <RadioOnDioIrq+0x20>)
 8009ec4:	88fb      	ldrh	r3, [r7, #6]
 8009ec6:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8009eca:	f000 f807 	bl	8009edc <RadioIrqProcess>
}
 8009ece:	bf00      	nop
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	20000330 	.word	0x20000330

08009edc <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8009edc:	b5b0      	push	{r4, r5, r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8009eea:	4ba8      	ldr	r3, [pc, #672]	@ (800a18c <RadioIrqProcess+0x2b0>)
 8009eec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8009ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ef4:	f000 810d 	beq.w	800a112 <RadioIrqProcess+0x236>
 8009ef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009efc:	f300 81e8 	bgt.w	800a2d0 <RadioIrqProcess+0x3f4>
 8009f00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f04:	f000 80f1 	beq.w	800a0ea <RadioIrqProcess+0x20e>
 8009f08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f0c:	f300 81e0 	bgt.w	800a2d0 <RadioIrqProcess+0x3f4>
 8009f10:	2b80      	cmp	r3, #128	@ 0x80
 8009f12:	f000 80d6 	beq.w	800a0c2 <RadioIrqProcess+0x1e6>
 8009f16:	2b80      	cmp	r3, #128	@ 0x80
 8009f18:	f300 81da 	bgt.w	800a2d0 <RadioIrqProcess+0x3f4>
 8009f1c:	2b20      	cmp	r3, #32
 8009f1e:	dc49      	bgt.n	8009fb4 <RadioIrqProcess+0xd8>
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	f340 81d5 	ble.w	800a2d0 <RadioIrqProcess+0x3f4>
 8009f26:	3b01      	subs	r3, #1
 8009f28:	2b1f      	cmp	r3, #31
 8009f2a:	f200 81d1 	bhi.w	800a2d0 <RadioIrqProcess+0x3f4>
 8009f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f34 <RadioIrqProcess+0x58>)
 8009f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f34:	08009fbd 	.word	0x08009fbd
 8009f38:	08009ff7 	.word	0x08009ff7
 8009f3c:	0800a2d1 	.word	0x0800a2d1
 8009f40:	0800a1ad 	.word	0x0800a1ad
 8009f44:	0800a2d1 	.word	0x0800a2d1
 8009f48:	0800a2d1 	.word	0x0800a2d1
 8009f4c:	0800a2d1 	.word	0x0800a2d1
 8009f50:	0800a229 	.word	0x0800a229
 8009f54:	0800a2d1 	.word	0x0800a2d1
 8009f58:	0800a2d1 	.word	0x0800a2d1
 8009f5c:	0800a2d1 	.word	0x0800a2d1
 8009f60:	0800a2d1 	.word	0x0800a2d1
 8009f64:	0800a2d1 	.word	0x0800a2d1
 8009f68:	0800a2d1 	.word	0x0800a2d1
 8009f6c:	0800a2d1 	.word	0x0800a2d1
 8009f70:	0800a245 	.word	0x0800a245
 8009f74:	0800a2d1 	.word	0x0800a2d1
 8009f78:	0800a2d1 	.word	0x0800a2d1
 8009f7c:	0800a2d1 	.word	0x0800a2d1
 8009f80:	0800a2d1 	.word	0x0800a2d1
 8009f84:	0800a2d1 	.word	0x0800a2d1
 8009f88:	0800a2d1 	.word	0x0800a2d1
 8009f8c:	0800a2d1 	.word	0x0800a2d1
 8009f90:	0800a2d1 	.word	0x0800a2d1
 8009f94:	0800a2d1 	.word	0x0800a2d1
 8009f98:	0800a2d1 	.word	0x0800a2d1
 8009f9c:	0800a2d1 	.word	0x0800a2d1
 8009fa0:	0800a2d1 	.word	0x0800a2d1
 8009fa4:	0800a2d1 	.word	0x0800a2d1
 8009fa8:	0800a2d1 	.word	0x0800a2d1
 8009fac:	0800a2d1 	.word	0x0800a2d1
 8009fb0:	0800a253 	.word	0x0800a253
 8009fb4:	2b40      	cmp	r3, #64	@ 0x40
 8009fb6:	f000 816d 	beq.w	800a294 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8009fba:	e189      	b.n	800a2d0 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8009fbc:	4874      	ldr	r0, [pc, #464]	@ (800a190 <RadioIrqProcess+0x2b4>)
 8009fbe:	f003 f86b 	bl	800d098 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8009fc2:	2000      	movs	r0, #0
 8009fc4:	f001 f81c 	bl	800b000 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8009fc8:	f002 f892 	bl	800c0f0 <RFW_Is_LongPacketModeEnabled>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d101      	bne.n	8009fd6 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8009fd2:	f002 f8b6 	bl	800c142 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8009fd6:	4b6f      	ldr	r3, [pc, #444]	@ (800a194 <RadioIrqProcess+0x2b8>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	f000 817a 	beq.w	800a2d4 <RadioIrqProcess+0x3f8>
 8009fe0:	4b6c      	ldr	r3, [pc, #432]	@ (800a194 <RadioIrqProcess+0x2b8>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	f000 8174 	beq.w	800a2d4 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8009fec:	4b69      	ldr	r3, [pc, #420]	@ (800a194 <RadioIrqProcess+0x2b8>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4798      	blx	r3
        break;
 8009ff4:	e16e      	b.n	800a2d4 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8009ff6:	4868      	ldr	r0, [pc, #416]	@ (800a198 <RadioIrqProcess+0x2bc>)
 8009ff8:	f003 f84e 	bl	800d098 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8009ffc:	4b63      	ldr	r3, [pc, #396]	@ (800a18c <RadioIrqProcess+0x2b0>)
 8009ffe:	785b      	ldrb	r3, [r3, #1]
 800a000:	f083 0301 	eor.w	r3, r3, #1
 800a004:	b2db      	uxtb	r3, r3
 800a006:	2b00      	cmp	r3, #0
 800a008:	d014      	beq.n	800a034 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 800a00a:	2000      	movs	r0, #0
 800a00c:	f000 fff8 	bl	800b000 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800a010:	2100      	movs	r1, #0
 800a012:	f640 1002 	movw	r0, #2306	@ 0x902
 800a016:	f001 fd77 	bl	800bb08 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800a01a:	f640 1044 	movw	r0, #2372	@ 0x944
 800a01e:	f001 fd87 	bl	800bb30 <SUBGRF_ReadRegister>
 800a022:	4603      	mov	r3, r0
 800a024:	f043 0302 	orr.w	r3, r3, #2
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	4619      	mov	r1, r3
 800a02c:	f640 1044 	movw	r0, #2372	@ 0x944
 800a030:	f001 fd6a 	bl	800bb08 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800a034:	1dfb      	adds	r3, r7, #7
 800a036:	22ff      	movs	r2, #255	@ 0xff
 800a038:	4619      	mov	r1, r3
 800a03a:	4858      	ldr	r0, [pc, #352]	@ (800a19c <RadioIrqProcess+0x2c0>)
 800a03c:	f000 feb0 	bl	800ada0 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800a040:	4857      	ldr	r0, [pc, #348]	@ (800a1a0 <RadioIrqProcess+0x2c4>)
 800a042:	f001 fd0f 	bl	800ba64 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800a046:	4b53      	ldr	r3, [pc, #332]	@ (800a194 <RadioIrqProcess+0x2b8>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	f000 8144 	beq.w	800a2d8 <RadioIrqProcess+0x3fc>
 800a050:	4b50      	ldr	r3, [pc, #320]	@ (800a194 <RadioIrqProcess+0x2b8>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	2b00      	cmp	r3, #0
 800a058:	f000 813e 	beq.w	800a2d8 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 800a05c:	4b4b      	ldr	r3, [pc, #300]	@ (800a18c <RadioIrqProcess+0x2b0>)
 800a05e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a062:	2b01      	cmp	r3, #1
 800a064:	d10e      	bne.n	800a084 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 800a066:	4b4b      	ldr	r3, [pc, #300]	@ (800a194 <RadioIrqProcess+0x2b8>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	689c      	ldr	r4, [r3, #8]
 800a06c:	79fb      	ldrb	r3, [r7, #7]
 800a06e:	4619      	mov	r1, r3
 800a070:	4b46      	ldr	r3, [pc, #280]	@ (800a18c <RadioIrqProcess+0x2b0>)
 800a072:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 800a076:	461a      	mov	r2, r3
 800a078:	4b44      	ldr	r3, [pc, #272]	@ (800a18c <RadioIrqProcess+0x2b0>)
 800a07a:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 800a07e:	4847      	ldr	r0, [pc, #284]	@ (800a19c <RadioIrqProcess+0x2c0>)
 800a080:	47a0      	blx	r4
                break;
 800a082:	e01d      	b.n	800a0c0 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800a084:	4b41      	ldr	r3, [pc, #260]	@ (800a18c <RadioIrqProcess+0x2b0>)
 800a086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a088:	463a      	mov	r2, r7
 800a08a:	4611      	mov	r1, r2
 800a08c:	4618      	mov	r0, r3
 800a08e:	f001 ff7d 	bl	800bf8c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800a092:	4b40      	ldr	r3, [pc, #256]	@ (800a194 <RadioIrqProcess+0x2b8>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	689c      	ldr	r4, [r3, #8]
 800a098:	79fb      	ldrb	r3, [r7, #7]
 800a09a:	4619      	mov	r1, r3
 800a09c:	4b3b      	ldr	r3, [pc, #236]	@ (800a18c <RadioIrqProcess+0x2b0>)
 800a09e:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800a0aa:	4a3e      	ldr	r2, [pc, #248]	@ (800a1a4 <RadioIrqProcess+0x2c8>)
 800a0ac:	fb82 5203 	smull	r5, r2, r2, r3
 800a0b0:	1192      	asrs	r2, r2, #6
 800a0b2:	17db      	asrs	r3, r3, #31
 800a0b4:	1ad3      	subs	r3, r2, r3
 800a0b6:	b25b      	sxtb	r3, r3
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	4838      	ldr	r0, [pc, #224]	@ (800a19c <RadioIrqProcess+0x2c0>)
 800a0bc:	47a0      	blx	r4
                break;
 800a0be:	bf00      	nop
        break;
 800a0c0:	e10a      	b.n	800a2d8 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 800a0c2:	2000      	movs	r0, #0
 800a0c4:	f000 ff9c 	bl	800b000 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800a0c8:	4b32      	ldr	r3, [pc, #200]	@ (800a194 <RadioIrqProcess+0x2b8>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f000 8105 	beq.w	800a2dc <RadioIrqProcess+0x400>
 800a0d2:	4b30      	ldr	r3, [pc, #192]	@ (800a194 <RadioIrqProcess+0x2b8>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	699b      	ldr	r3, [r3, #24]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f000 80ff 	beq.w	800a2dc <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 800a0de:	4b2d      	ldr	r3, [pc, #180]	@ (800a194 <RadioIrqProcess+0x2b8>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	699b      	ldr	r3, [r3, #24]
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	4798      	blx	r3
        break;
 800a0e8:	e0f8      	b.n	800a2dc <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	f000 ff88 	bl	800b000 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800a0f0:	4b28      	ldr	r3, [pc, #160]	@ (800a194 <RadioIrqProcess+0x2b8>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f000 80f3 	beq.w	800a2e0 <RadioIrqProcess+0x404>
 800a0fa:	4b26      	ldr	r3, [pc, #152]	@ (800a194 <RadioIrqProcess+0x2b8>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	699b      	ldr	r3, [r3, #24]
 800a100:	2b00      	cmp	r3, #0
 800a102:	f000 80ed 	beq.w	800a2e0 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 800a106:	4b23      	ldr	r3, [pc, #140]	@ (800a194 <RadioIrqProcess+0x2b8>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	699b      	ldr	r3, [r3, #24]
 800a10c:	2001      	movs	r0, #1
 800a10e:	4798      	blx	r3
        break;
 800a110:	e0e6      	b.n	800a2e0 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800a112:	4b25      	ldr	r3, [pc, #148]	@ (800a1a8 <RadioIrqProcess+0x2cc>)
 800a114:	2201      	movs	r2, #1
 800a116:	2100      	movs	r1, #0
 800a118:	2002      	movs	r0, #2
 800a11a:	f002 f96b 	bl	800c3f4 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800a11e:	f000 fe25 	bl	800ad6c <SUBGRF_GetOperatingMode>
 800a122:	4603      	mov	r3, r0
 800a124:	2b04      	cmp	r3, #4
 800a126:	d115      	bne.n	800a154 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 800a128:	4819      	ldr	r0, [pc, #100]	@ (800a190 <RadioIrqProcess+0x2b4>)
 800a12a:	f002 ffb5 	bl	800d098 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800a12e:	2000      	movs	r0, #0
 800a130:	f000 ff66 	bl	800b000 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800a134:	4b17      	ldr	r3, [pc, #92]	@ (800a194 <RadioIrqProcess+0x2b8>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f000 80d3 	beq.w	800a2e4 <RadioIrqProcess+0x408>
 800a13e:	4b15      	ldr	r3, [pc, #84]	@ (800a194 <RadioIrqProcess+0x2b8>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	2b00      	cmp	r3, #0
 800a146:	f000 80cd 	beq.w	800a2e4 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 800a14a:	4b12      	ldr	r3, [pc, #72]	@ (800a194 <RadioIrqProcess+0x2b8>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	4798      	blx	r3
        break;
 800a152:	e0c7      	b.n	800a2e4 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800a154:	f000 fe0a 	bl	800ad6c <SUBGRF_GetOperatingMode>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b05      	cmp	r3, #5
 800a15c:	f040 80c2 	bne.w	800a2e4 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 800a160:	480d      	ldr	r0, [pc, #52]	@ (800a198 <RadioIrqProcess+0x2bc>)
 800a162:	f002 ff99 	bl	800d098 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800a166:	2000      	movs	r0, #0
 800a168:	f000 ff4a 	bl	800b000 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800a16c:	4b09      	ldr	r3, [pc, #36]	@ (800a194 <RadioIrqProcess+0x2b8>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	f000 80b7 	beq.w	800a2e4 <RadioIrqProcess+0x408>
 800a176:	4b07      	ldr	r3, [pc, #28]	@ (800a194 <RadioIrqProcess+0x2b8>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f000 80b1 	beq.w	800a2e4 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 800a182:	4b04      	ldr	r3, [pc, #16]	@ (800a194 <RadioIrqProcess+0x2b8>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	4798      	blx	r3
        break;
 800a18a:	e0ab      	b.n	800a2e4 <RadioIrqProcess+0x408>
 800a18c:	20000330 	.word	0x20000330
 800a190:	2000038c 	.word	0x2000038c
 800a194:	2000032c 	.word	0x2000032c
 800a198:	200003a4 	.word	0x200003a4
 800a19c:	2000022c 	.word	0x2000022c
 800a1a0:	20000354 	.word	0x20000354
 800a1a4:	10624dd3 	.word	0x10624dd3
 800a1a8:	0800daac 	.word	0x0800daac
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800a1ac:	4b54      	ldr	r3, [pc, #336]	@ (800a300 <RadioIrqProcess+0x424>)
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	2002      	movs	r0, #2
 800a1b4:	f002 f91e 	bl	800c3f4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800a1b8:	4b52      	ldr	r3, [pc, #328]	@ (800a304 <RadioIrqProcess+0x428>)
 800a1ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	f000 8093 	beq.w	800a2e8 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800a1c2:	4a51      	ldr	r2, [pc, #324]	@ (800a308 <RadioIrqProcess+0x42c>)
 800a1c4:	4b4f      	ldr	r3, [pc, #316]	@ (800a304 <RadioIrqProcess+0x428>)
 800a1c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1c8:	0c1b      	lsrs	r3, r3, #16
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	f640 1003 	movw	r0, #2307	@ 0x903
 800a1d2:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800a1d4:	4a4c      	ldr	r2, [pc, #304]	@ (800a308 <RadioIrqProcess+0x42c>)
 800a1d6:	4b4b      	ldr	r3, [pc, #300]	@ (800a304 <RadioIrqProcess+0x428>)
 800a1d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1da:	0a1b      	lsrs	r3, r3, #8
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	4619      	mov	r1, r3
 800a1e0:	f640 1004 	movw	r0, #2308	@ 0x904
 800a1e4:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 800a1e6:	4a48      	ldr	r2, [pc, #288]	@ (800a308 <RadioIrqProcess+0x42c>)
 800a1e8:	4b46      	ldr	r3, [pc, #280]	@ (800a304 <RadioIrqProcess+0x428>)
 800a1ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	f640 1005 	movw	r0, #2309	@ 0x905
 800a1f4:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800a1f6:	4c44      	ldr	r4, [pc, #272]	@ (800a308 <RadioIrqProcess+0x42c>)
 800a1f8:	4b44      	ldr	r3, [pc, #272]	@ (800a30c <RadioIrqProcess+0x430>)
 800a1fa:	f640 1002 	movw	r0, #2306	@ 0x902
 800a1fe:	4798      	blx	r3
 800a200:	4603      	mov	r3, r0
 800a202:	f043 0301 	orr.w	r3, r3, #1
 800a206:	b2db      	uxtb	r3, r3
 800a208:	4619      	mov	r1, r3
 800a20a:	f640 1002 	movw	r0, #2306	@ 0x902
 800a20e:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800a210:	4b3c      	ldr	r3, [pc, #240]	@ (800a304 <RadioIrqProcess+0x428>)
 800a212:	2200      	movs	r2, #0
 800a214:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800a216:	2300      	movs	r3, #0
 800a218:	2200      	movs	r2, #0
 800a21a:	f240 2162 	movw	r1, #610	@ 0x262
 800a21e:	f240 2062 	movw	r0, #610	@ 0x262
 800a222:	f001 f8c1 	bl	800b3a8 <SUBGRF_SetDioIrqParams>
        break;
 800a226:	e05f      	b.n	800a2e8 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 800a228:	4b39      	ldr	r3, [pc, #228]	@ (800a310 <RadioIrqProcess+0x434>)
 800a22a:	2201      	movs	r2, #1
 800a22c:	2100      	movs	r1, #0
 800a22e:	2002      	movs	r0, #2
 800a230:	f002 f8e0 	bl	800c3f4 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 800a234:	f001 ff55 	bl	800c0e2 <RFW_Is_Init>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d156      	bne.n	800a2ec <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 800a23e:	f001 ff86 	bl	800c14e <RFW_ReceivePayload>
        break;
 800a242:	e053      	b.n	800a2ec <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800a244:	4b33      	ldr	r3, [pc, #204]	@ (800a314 <RadioIrqProcess+0x438>)
 800a246:	2201      	movs	r2, #1
 800a248:	2100      	movs	r1, #0
 800a24a:	2002      	movs	r0, #2
 800a24c:	f002 f8d2 	bl	800c3f4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a250:	e051      	b.n	800a2f6 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 800a252:	4831      	ldr	r0, [pc, #196]	@ (800a318 <RadioIrqProcess+0x43c>)
 800a254:	f002 ff20 	bl	800d098 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800a258:	4b2a      	ldr	r3, [pc, #168]	@ (800a304 <RadioIrqProcess+0x428>)
 800a25a:	785b      	ldrb	r3, [r3, #1]
 800a25c:	f083 0301 	eor.w	r3, r3, #1
 800a260:	b2db      	uxtb	r3, r3
 800a262:	2b00      	cmp	r3, #0
 800a264:	d002      	beq.n	800a26c <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 800a266:	2000      	movs	r0, #0
 800a268:	f000 feca 	bl	800b000 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800a26c:	4b2b      	ldr	r3, [pc, #172]	@ (800a31c <RadioIrqProcess+0x440>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d03d      	beq.n	800a2f0 <RadioIrqProcess+0x414>
 800a274:	4b29      	ldr	r3, [pc, #164]	@ (800a31c <RadioIrqProcess+0x440>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d038      	beq.n	800a2f0 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 800a27e:	4b27      	ldr	r3, [pc, #156]	@ (800a31c <RadioIrqProcess+0x440>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800a286:	4b26      	ldr	r3, [pc, #152]	@ (800a320 <RadioIrqProcess+0x444>)
 800a288:	2201      	movs	r2, #1
 800a28a:	2100      	movs	r1, #0
 800a28c:	2002      	movs	r0, #2
 800a28e:	f002 f8b1 	bl	800c3f4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a292:	e02d      	b.n	800a2f0 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800a294:	4b23      	ldr	r3, [pc, #140]	@ (800a324 <RadioIrqProcess+0x448>)
 800a296:	2201      	movs	r2, #1
 800a298:	2100      	movs	r1, #0
 800a29a:	2002      	movs	r0, #2
 800a29c:	f002 f8aa 	bl	800c3f4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800a2a0:	4b18      	ldr	r3, [pc, #96]	@ (800a304 <RadioIrqProcess+0x428>)
 800a2a2:	785b      	ldrb	r3, [r3, #1]
 800a2a4:	f083 0301 	eor.w	r3, r3, #1
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d002      	beq.n	800a2b4 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 800a2ae:	2000      	movs	r0, #0
 800a2b0:	f000 fea6 	bl	800b000 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800a2b4:	4b19      	ldr	r3, [pc, #100]	@ (800a31c <RadioIrqProcess+0x440>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d01b      	beq.n	800a2f4 <RadioIrqProcess+0x418>
 800a2bc:	4b17      	ldr	r3, [pc, #92]	@ (800a31c <RadioIrqProcess+0x440>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d016      	beq.n	800a2f4 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 800a2c6:	4b15      	ldr	r3, [pc, #84]	@ (800a31c <RadioIrqProcess+0x440>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	4798      	blx	r3
        break;
 800a2ce:	e011      	b.n	800a2f4 <RadioIrqProcess+0x418>
        break;
 800a2d0:	bf00      	nop
 800a2d2:	e010      	b.n	800a2f6 <RadioIrqProcess+0x41a>
        break;
 800a2d4:	bf00      	nop
 800a2d6:	e00e      	b.n	800a2f6 <RadioIrqProcess+0x41a>
        break;
 800a2d8:	bf00      	nop
 800a2da:	e00c      	b.n	800a2f6 <RadioIrqProcess+0x41a>
        break;
 800a2dc:	bf00      	nop
 800a2de:	e00a      	b.n	800a2f6 <RadioIrqProcess+0x41a>
        break;
 800a2e0:	bf00      	nop
 800a2e2:	e008      	b.n	800a2f6 <RadioIrqProcess+0x41a>
        break;
 800a2e4:	bf00      	nop
 800a2e6:	e006      	b.n	800a2f6 <RadioIrqProcess+0x41a>
        break;
 800a2e8:	bf00      	nop
 800a2ea:	e004      	b.n	800a2f6 <RadioIrqProcess+0x41a>
        break;
 800a2ec:	bf00      	nop
 800a2ee:	e002      	b.n	800a2f6 <RadioIrqProcess+0x41a>
        break;
 800a2f0:	bf00      	nop
 800a2f2:	e000      	b.n	800a2f6 <RadioIrqProcess+0x41a>
        break;
 800a2f4:	bf00      	nop
    }
}
 800a2f6:	bf00      	nop
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bdb0      	pop	{r4, r5, r7, pc}
 800a2fe:	bf00      	nop
 800a300:	0800dac0 	.word	0x0800dac0
 800a304:	20000330 	.word	0x20000330
 800a308:	08009ced 	.word	0x08009ced
 800a30c:	08009d11 	.word	0x08009d11
 800a310:	0800dacc 	.word	0x0800dacc
 800a314:	0800dad8 	.word	0x0800dad8
 800a318:	200003a4 	.word	0x200003a4
 800a31c:	2000032c 	.word	0x2000032c
 800a320:	0800dae4 	.word	0x0800dae4
 800a324:	0800daf0 	.word	0x0800daf0

0800a328 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800a32c:	4b09      	ldr	r3, [pc, #36]	@ (800a354 <RadioTxPrbs+0x2c>)
 800a32e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800a332:	2101      	movs	r1, #1
 800a334:	4618      	mov	r0, r3
 800a336:	f001 fcdb 	bl	800bcf0 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800a33a:	4b07      	ldr	r3, [pc, #28]	@ (800a358 <RadioTxPrbs+0x30>)
 800a33c:	212d      	movs	r1, #45	@ 0x2d
 800a33e:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800a342:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800a344:	f000 ff1f 	bl	800b186 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800a348:	4804      	ldr	r0, [pc, #16]	@ (800a35c <RadioTxPrbs+0x34>)
 800a34a:	f000 fe75 	bl	800b038 <SUBGRF_SetTx>
}
 800a34e:	bf00      	nop
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	20000330 	.word	0x20000330
 800a358:	08009ced 	.word	0x08009ced
 800a35c:	000fffff 	.word	0x000fffff

0800a360 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	4603      	mov	r3, r0
 800a368:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800a36a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a36e:	4618      	mov	r0, r3
 800a370:	f001 fce6 	bl	800bd40 <SUBGRF_SetRfTxPower>
 800a374:	4603      	mov	r3, r0
 800a376:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800a378:	210e      	movs	r1, #14
 800a37a:	f640 101f 	movw	r0, #2335	@ 0x91f
 800a37e:	f001 fbc3 	bl	800bb08 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800a382:	7bfb      	ldrb	r3, [r7, #15]
 800a384:	2101      	movs	r1, #1
 800a386:	4618      	mov	r0, r3
 800a388:	f001 fcb2 	bl	800bcf0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800a38c:	f000 fef2 	bl	800b174 <SUBGRF_SetTxContinuousWave>
}
 800a390:	bf00      	nop
 800a392:	3710      	adds	r7, #16
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800a398:	b480      	push	{r7}
 800a39a:	b089      	sub	sp, #36	@ 0x24
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	61bb      	str	r3, [r7, #24]
 800a3b2:	e011      	b.n	800a3d8 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	68ba      	ldr	r2, [r7, #8]
 800a3b8:	4413      	add	r3, r2
 800a3ba:	781a      	ldrb	r2, [r3, #0]
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	68b9      	ldr	r1, [r7, #8]
 800a3c0:	440b      	add	r3, r1
 800a3c2:	43d2      	mvns	r2, r2
 800a3c4:	b2d2      	uxtb	r2, r2
 800a3c6:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800a3c8:	69bb      	ldr	r3, [r7, #24]
 800a3ca:	68fa      	ldr	r2, [r7, #12]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	61bb      	str	r3, [r7, #24]
 800a3d8:	79fb      	ldrb	r3, [r7, #7]
 800a3da:	69ba      	ldr	r2, [r7, #24]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	dbe9      	blt.n	800a3b4 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	61bb      	str	r3, [r7, #24]
 800a3e4:	e049      	b.n	800a47a <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	425a      	negs	r2, r3
 800a3ea:	f003 0307 	and.w	r3, r3, #7
 800a3ee:	f002 0207 	and.w	r2, r2, #7
 800a3f2:	bf58      	it	pl
 800a3f4:	4253      	negpl	r3, r2
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	f1c3 0307 	rsb	r3, r3, #7
 800a3fc:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	2b00      	cmp	r3, #0
 800a402:	da00      	bge.n	800a406 <payload_integration+0x6e>
 800a404:	3307      	adds	r3, #7
 800a406:	10db      	asrs	r3, r3, #3
 800a408:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	3301      	adds	r3, #1
 800a40e:	425a      	negs	r2, r3
 800a410:	f003 0307 	and.w	r3, r3, #7
 800a414:	f002 0207 	and.w	r2, r2, #7
 800a418:	bf58      	it	pl
 800a41a:	4253      	negpl	r3, r2
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	f1c3 0307 	rsb	r3, r3, #7
 800a422:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	3301      	adds	r3, #1
 800a428:	2b00      	cmp	r3, #0
 800a42a:	da00      	bge.n	800a42e <payload_integration+0x96>
 800a42c:	3307      	adds	r3, #7
 800a42e:	10db      	asrs	r3, r3, #3
 800a430:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800a432:	7dbb      	ldrb	r3, [r7, #22]
 800a434:	68ba      	ldr	r2, [r7, #8]
 800a436:	4413      	add	r3, r2
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	461a      	mov	r2, r3
 800a43c:	7dfb      	ldrb	r3, [r7, #23]
 800a43e:	fa42 f303 	asr.w	r3, r2, r3
 800a442:	b2db      	uxtb	r3, r3
 800a444:	f003 0301 	and.w	r3, r3, #1
 800a448:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800a44a:	7ffa      	ldrb	r2, [r7, #31]
 800a44c:	7cfb      	ldrb	r3, [r7, #19]
 800a44e:	4053      	eors	r3, r2
 800a450:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800a452:	7d3b      	ldrb	r3, [r7, #20]
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	4413      	add	r3, r2
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	b25a      	sxtb	r2, r3
 800a45c:	7ff9      	ldrb	r1, [r7, #31]
 800a45e:	7d7b      	ldrb	r3, [r7, #21]
 800a460:	fa01 f303 	lsl.w	r3, r1, r3
 800a464:	b25b      	sxtb	r3, r3
 800a466:	4313      	orrs	r3, r2
 800a468:	b259      	sxtb	r1, r3
 800a46a:	7d3b      	ldrb	r3, [r7, #20]
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	4413      	add	r3, r2
 800a470:	b2ca      	uxtb	r2, r1
 800a472:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 800a474:	69bb      	ldr	r3, [r7, #24]
 800a476:	3301      	adds	r3, #1
 800a478:	61bb      	str	r3, [r7, #24]
 800a47a:	79fb      	ldrb	r3, [r7, #7]
 800a47c:	00db      	lsls	r3, r3, #3
 800a47e:	69ba      	ldr	r2, [r7, #24]
 800a480:	429a      	cmp	r2, r3
 800a482:	dbb0      	blt.n	800a3e6 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800a484:	7ffb      	ldrb	r3, [r7, #31]
 800a486:	01db      	lsls	r3, r3, #7
 800a488:	b25a      	sxtb	r2, r3
 800a48a:	7ffb      	ldrb	r3, [r7, #31]
 800a48c:	019b      	lsls	r3, r3, #6
 800a48e:	b25b      	sxtb	r3, r3
 800a490:	4313      	orrs	r3, r2
 800a492:	b25b      	sxtb	r3, r3
 800a494:	7ffa      	ldrb	r2, [r7, #31]
 800a496:	2a00      	cmp	r2, #0
 800a498:	d101      	bne.n	800a49e <payload_integration+0x106>
 800a49a:	2220      	movs	r2, #32
 800a49c:	e000      	b.n	800a4a0 <payload_integration+0x108>
 800a49e:	2200      	movs	r2, #0
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	b259      	sxtb	r1, r3
 800a4a4:	79fb      	ldrb	r3, [r7, #7]
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	b2ca      	uxtb	r2, r1
 800a4ac:	701a      	strb	r2, [r3, #0]
}
 800a4ae:	bf00      	nop
 800a4b0:	3724      	adds	r7, #36	@ 0x24
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bc80      	pop	{r7}
 800a4b6:	4770      	bx	lr

0800a4b8 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b08c      	sub	sp, #48	@ 0x30
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60b9      	str	r1, [r7, #8]
 800a4c0:	607a      	str	r2, [r7, #4]
 800a4c2:	603b      	str	r3, [r7, #0]
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	623b      	str	r3, [r7, #32]
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800a4d4:	f001 fdff 	bl	800c0d6 <RFW_DeInit>

    if( rxContinuous != 0 )
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d001      	beq.n	800a4e2 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	bf14      	ite	ne
 800a4e8:	2301      	movne	r3, #1
 800a4ea:	2300      	moveq	r3, #0
 800a4ec:	b2da      	uxtb	r2, r3
 800a4ee:	4ba3      	ldr	r3, [pc, #652]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a4f0:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800a4f2:	7bfb      	ldrb	r3, [r7, #15]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d003      	beq.n	800a500 <RadioSetRxGenericConfig+0x48>
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	f000 80dc 	beq.w	800a6b6 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800a4fe:	e194      	b.n	800a82a <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d003      	beq.n	800a510 <RadioSetRxGenericConfig+0x58>
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d102      	bne.n	800a516 <RadioSetRxGenericConfig+0x5e>
            return -1;
 800a510:	f04f 33ff 	mov.w	r3, #4294967295
 800a514:	e18a      	b.n	800a82c <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	7f9b      	ldrb	r3, [r3, #30]
 800a51a:	2b08      	cmp	r3, #8
 800a51c:	d902      	bls.n	800a524 <RadioSetRxGenericConfig+0x6c>
            return -1;
 800a51e:	f04f 33ff 	mov.w	r3, #4294967295
 800a522:	e183      	b.n	800a82c <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	6919      	ldr	r1, [r3, #16]
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	7f9b      	ldrb	r3, [r3, #30]
 800a52c:	461a      	mov	r2, r3
 800a52e:	f107 0320 	add.w	r3, r7, #32
 800a532:	4618      	mov	r0, r3
 800a534:	f002 fa7c 	bl	800ca30 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	bf14      	ite	ne
 800a540:	2301      	movne	r3, #1
 800a542:	2300      	moveq	r3, #0
 800a544:	b2db      	uxtb	r3, r3
 800a546:	4618      	mov	r0, r3
 800a548:	f000 fe26 	bl	800b198 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a54c:	4b8b      	ldr	r3, [pc, #556]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a54e:	2200      	movs	r2, #0
 800a550:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	4a88      	ldr	r2, [pc, #544]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a55a:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	f893 2020 	ldrb.w	r2, [r3, #32]
 800a562:	4b86      	ldr	r3, [pc, #536]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	4618      	mov	r0, r3
 800a56e:	f001 fce5 	bl	800bf3c <SUBGRF_GetFskBandwidthRegValue>
 800a572:	4603      	mov	r3, r0
 800a574:	461a      	mov	r2, r3
 800a576:	4b81      	ldr	r3, [pc, #516]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a578:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a57c:	4b7f      	ldr	r3, [pc, #508]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a57e:	2200      	movs	r2, #0
 800a580:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	b29b      	uxth	r3, r3
 800a588:	00db      	lsls	r3, r3, #3
 800a58a:	b29a      	uxth	r2, r3
 800a58c:	4b7b      	ldr	r3, [pc, #492]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a58e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	7fda      	ldrb	r2, [r3, #31]
 800a594:	4b79      	ldr	r3, [pc, #484]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a596:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	7f9b      	ldrb	r3, [r3, #30]
 800a59c:	00db      	lsls	r3, r3, #3
 800a59e:	b2da      	uxtb	r2, r3
 800a5a0:	4b76      	ldr	r3, [pc, #472]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a5a2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800a5aa:	4b74      	ldr	r3, [pc, #464]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a5ac:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d105      	bne.n	800a5c4 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	695b      	ldr	r3, [r3, #20]
 800a5bc:	b2da      	uxtb	r2, r3
 800a5be:	4b6f      	ldr	r3, [pc, #444]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a5c0:	759a      	strb	r2, [r3, #22]
 800a5c2:	e00b      	b.n	800a5dc <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	d103      	bne.n	800a5d6 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800a5ce:	4b6b      	ldr	r3, [pc, #428]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a5d0:	22ff      	movs	r2, #255	@ 0xff
 800a5d2:	759a      	strb	r2, [r3, #22]
 800a5d4:	e002      	b.n	800a5dc <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800a5d6:	4b69      	ldr	r3, [pc, #420]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a5d8:	22ff      	movs	r2, #255	@ 0xff
 800a5da:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a5e2:	2b02      	cmp	r3, #2
 800a5e4:	d004      	beq.n	800a5f0 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a5ec:	2b02      	cmp	r3, #2
 800a5ee:	d12d      	bne.n	800a64c <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800a5f6:	2bf1      	cmp	r3, #241	@ 0xf1
 800a5f8:	d00c      	beq.n	800a614 <RadioSetRxGenericConfig+0x15c>
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800a600:	2bf2      	cmp	r3, #242	@ 0xf2
 800a602:	d007      	beq.n	800a614 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d002      	beq.n	800a614 <RadioSetRxGenericConfig+0x15c>
                return -1;
 800a60e:	f04f 33ff 	mov.w	r3, #4294967295
 800a612:	e10b      	b.n	800a82c <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 800a614:	2300      	movs	r3, #0
 800a616:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800a61c:	4b58      	ldr	r3, [pc, #352]	@ (800a780 <RadioSetRxGenericConfig+0x2c8>)
 800a61e:	6819      	ldr	r1, [r3, #0]
 800a620:	f107 0314 	add.w	r3, r7, #20
 800a624:	4a57      	ldr	r2, [pc, #348]	@ (800a784 <RadioSetRxGenericConfig+0x2cc>)
 800a626:	4618      	mov	r0, r3
 800a628:	f001 fd48 	bl	800c0bc <RFW_Init>
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d002      	beq.n	800a638 <RadioSetRxGenericConfig+0x180>
                return -1;
 800a632:	f04f 33ff 	mov.w	r3, #4294967295
 800a636:	e0f9      	b.n	800a82c <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800a638:	4b50      	ldr	r3, [pc, #320]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a63a:	2200      	movs	r2, #0
 800a63c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800a63e:	4b4f      	ldr	r3, [pc, #316]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a640:	2201      	movs	r2, #1
 800a642:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800a644:	4b4d      	ldr	r3, [pc, #308]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a646:	2200      	movs	r2, #0
 800a648:	755a      	strb	r2, [r3, #21]
        {
 800a64a:	e00e      	b.n	800a66a <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800a652:	4b4a      	ldr	r3, [pc, #296]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a654:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800a65c:	4b47      	ldr	r3, [pc, #284]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a65e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800a666:	4b45      	ldr	r3, [pc, #276]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a668:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800a66a:	f7ff fa3e 	bl	8009aea <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800a66e:	2000      	movs	r0, #0
 800a670:	f7fe fbd2 	bl	8008e18 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a674:	4844      	ldr	r0, [pc, #272]	@ (800a788 <RadioSetRxGenericConfig+0x2d0>)
 800a676:	f001 f82d 	bl	800b6d4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a67a:	4844      	ldr	r0, [pc, #272]	@ (800a78c <RadioSetRxGenericConfig+0x2d4>)
 800a67c:	f001 f8fc 	bl	800b878 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800a680:	f107 0320 	add.w	r3, r7, #32
 800a684:	4618      	mov	r0, r3
 800a686:	f000 fbc0 	bl	800ae0a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	8b9b      	ldrh	r3, [r3, #28]
 800a68e:	4618      	mov	r0, r3
 800a690:	f000 fc0a 	bl	800aea8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	8b1b      	ldrh	r3, [r3, #24]
 800a698:	4618      	mov	r0, r3
 800a69a:	f000 fbe5 	bl	800ae68 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800a6a4:	fb03 f202 	mul.w	r2, r3, r2
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6b0:	4a32      	ldr	r2, [pc, #200]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a6b2:	6093      	str	r3, [r2, #8]
        break;
 800a6b4:	e0b9      	b.n	800a82a <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d102      	bne.n	800a6c4 <RadioSetRxGenericConfig+0x20c>
            return -1;
 800a6be:	f04f 33ff 	mov.w	r3, #4294967295
 800a6c2:	e0b3      	b.n	800a82c <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d104      	bne.n	800a6d8 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	695b      	ldr	r3, [r3, #20]
 800a6d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a6d6:	e002      	b.n	800a6de <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 800a6d8:	23ff      	movs	r3, #255	@ 0xff
 800a6da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	bf14      	ite	ne
 800a6e6:	2301      	movne	r3, #1
 800a6e8:	2300      	moveq	r3, #0
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f000 fd53 	bl	800b198 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f000 fd5d 	bl	800b1b6 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800a6fc:	4b1f      	ldr	r3, [pc, #124]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a6fe:	2201      	movs	r2, #1
 800a700:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800a70a:	4b1c      	ldr	r3, [pc, #112]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a70c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800a716:	4b19      	ldr	r3, [pc, #100]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a718:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 800a722:	4b16      	ldr	r3, [pc, #88]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a724:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a72e:	2b02      	cmp	r3, #2
 800a730:	d010      	beq.n	800a754 <RadioSetRxGenericConfig+0x29c>
 800a732:	2b02      	cmp	r3, #2
 800a734:	dc2c      	bgt.n	800a790 <RadioSetRxGenericConfig+0x2d8>
 800a736:	2b00      	cmp	r3, #0
 800a738:	d002      	beq.n	800a740 <RadioSetRxGenericConfig+0x288>
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d005      	beq.n	800a74a <RadioSetRxGenericConfig+0x292>
            break;
 800a73e:	e027      	b.n	800a790 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800a740:	4b0e      	ldr	r3, [pc, #56]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a742:	2200      	movs	r2, #0
 800a744:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a748:	e023      	b.n	800a792 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800a74a:	4b0c      	ldr	r3, [pc, #48]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a74c:	2201      	movs	r2, #1
 800a74e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a752:	e01e      	b.n	800a792 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a75a:	2b0b      	cmp	r3, #11
 800a75c:	d004      	beq.n	800a768 <RadioSetRxGenericConfig+0x2b0>
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a764:	2b0c      	cmp	r3, #12
 800a766:	d104      	bne.n	800a772 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800a768:	4b04      	ldr	r3, [pc, #16]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a770:	e00f      	b.n	800a792 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800a772:	4b02      	ldr	r3, [pc, #8]	@ (800a77c <RadioSetRxGenericConfig+0x2c4>)
 800a774:	2200      	movs	r2, #0
 800a776:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a77a:	e00a      	b.n	800a792 <RadioSetRxGenericConfig+0x2da>
 800a77c:	20000330 	.word	0x20000330
 800a780:	2000032c 	.word	0x2000032c
 800a784:	200003a4 	.word	0x200003a4
 800a788:	20000368 	.word	0x20000368
 800a78c:	2000033e 	.word	0x2000033e
            break;
 800a790:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800a792:	4b28      	ldr	r3, [pc, #160]	@ (800a834 <RadioSetRxGenericConfig+0x37c>)
 800a794:	2201      	movs	r2, #1
 800a796:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800a79c:	4b25      	ldr	r3, [pc, #148]	@ (800a834 <RadioSetRxGenericConfig+0x37c>)
 800a79e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 800a7a6:	4b23      	ldr	r3, [pc, #140]	@ (800a834 <RadioSetRxGenericConfig+0x37c>)
 800a7a8:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800a7aa:	4a22      	ldr	r2, [pc, #136]	@ (800a834 <RadioSetRxGenericConfig+0x37c>)
 800a7ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a7b0:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800a7b8:	4b1e      	ldr	r3, [pc, #120]	@ (800a834 <RadioSetRxGenericConfig+0x37c>)
 800a7ba:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 800a7c4:	4b1b      	ldr	r3, [pc, #108]	@ (800a834 <RadioSetRxGenericConfig+0x37c>)
 800a7c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 800a7ca:	f7ff f98e 	bl	8009aea <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800a7ce:	2001      	movs	r0, #1
 800a7d0:	f7fe fb22 	bl	8008e18 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a7d4:	4818      	ldr	r0, [pc, #96]	@ (800a838 <RadioSetRxGenericConfig+0x380>)
 800a7d6:	f000 ff7d 	bl	800b6d4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a7da:	4818      	ldr	r0, [pc, #96]	@ (800a83c <RadioSetRxGenericConfig+0x384>)
 800a7dc:	f001 f84c 	bl	800b878 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800a7e0:	4b14      	ldr	r3, [pc, #80]	@ (800a834 <RadioSetRxGenericConfig+0x37c>)
 800a7e2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d10d      	bne.n	800a806 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800a7ea:	f240 7036 	movw	r0, #1846	@ 0x736
 800a7ee:	f001 f99f 	bl	800bb30 <SUBGRF_ReadRegister>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	f023 0304 	bic.w	r3, r3, #4
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	f240 7036 	movw	r0, #1846	@ 0x736
 800a800:	f001 f982 	bl	800bb08 <SUBGRF_WriteRegister>
 800a804:	e00c      	b.n	800a820 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800a806:	f240 7036 	movw	r0, #1846	@ 0x736
 800a80a:	f001 f991 	bl	800bb30 <SUBGRF_ReadRegister>
 800a80e:	4603      	mov	r3, r0
 800a810:	f043 0304 	orr.w	r3, r3, #4
 800a814:	b2db      	uxtb	r3, r3
 800a816:	4619      	mov	r1, r3
 800a818:	f240 7036 	movw	r0, #1846	@ 0x736
 800a81c:	f001 f974 	bl	800bb08 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800a820:	4b04      	ldr	r3, [pc, #16]	@ (800a834 <RadioSetRxGenericConfig+0x37c>)
 800a822:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a826:	609a      	str	r2, [r3, #8]
        break;
 800a828:	bf00      	nop
    }
    return status;
 800a82a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3730      	adds	r7, #48	@ 0x30
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	20000330 	.word	0x20000330
 800a838:	20000368 	.word	0x20000368
 800a83c:	2000033e 	.word	0x2000033e

0800a840 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b08e      	sub	sp, #56	@ 0x38
 800a844:	af00      	add	r7, sp, #0
 800a846:	60b9      	str	r1, [r7, #8]
 800a848:	607b      	str	r3, [r7, #4]
 800a84a:	4603      	mov	r3, r0
 800a84c:	73fb      	strb	r3, [r7, #15]
 800a84e:	4613      	mov	r3, r2
 800a850:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 800a852:	2300      	movs	r3, #0
 800a854:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a856:	2300      	movs	r3, #0
 800a858:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800a85a:	f001 fc3c 	bl	800c0d6 <RFW_DeInit>
    switch( modem )
 800a85e:	7bfb      	ldrb	r3, [r7, #15]
 800a860:	2b03      	cmp	r3, #3
 800a862:	f200 8204 	bhi.w	800ac6e <RadioSetTxGenericConfig+0x42e>
 800a866:	a201      	add	r2, pc, #4	@ (adr r2, 800a86c <RadioSetTxGenericConfig+0x2c>)
 800a868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a86c:	0800a9f1 	.word	0x0800a9f1
 800a870:	0800ab39 	.word	0x0800ab39
 800a874:	0800ac31 	.word	0x0800ac31
 800a878:	0800a87d 	.word	0x0800a87d
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	7c9b      	ldrb	r3, [r3, #18]
 800a880:	2b08      	cmp	r3, #8
 800a882:	d902      	bls.n	800a88a <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 800a884:	f04f 33ff 	mov.w	r3, #4294967295
 800a888:	e206      	b.n	800ac98 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	6899      	ldr	r1, [r3, #8]
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	7c9b      	ldrb	r3, [r3, #18]
 800a892:	461a      	mov	r2, r3
 800a894:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a898:	4618      	mov	r0, r3
 800a89a:	f002 f8c9 	bl	800ca30 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d102      	bne.n	800a8ac <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 800a8a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a8aa:	e1f5      	b.n	800ac98 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d813      	bhi.n	800a8e0 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 800a8b8:	2302      	movs	r3, #2
 800a8ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800a8be:	4b99      	ldr	r3, [pc, #612]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800a8c0:	2203      	movs	r2, #3
 800a8c2:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 800a8c4:	4b97      	ldr	r3, [pc, #604]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800a8c6:	2203      	movs	r2, #3
 800a8c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a94      	ldr	r2, [pc, #592]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800a8d2:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	7cda      	ldrb	r2, [r3, #19]
 800a8d8:	4b92      	ldr	r3, [pc, #584]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800a8da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a8de:	e017      	b.n	800a910 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a8e6:	4b8f      	ldr	r3, [pc, #572]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a8ec:	4b8d      	ldr	r3, [pc, #564]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a8a      	ldr	r2, [pc, #552]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800a8fa:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	7cda      	ldrb	r2, [r3, #19]
 800a900:	4b88      	ldr	r3, [pc, #544]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800a902:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	089b      	lsrs	r3, r3, #2
 800a90c:	4a85      	ldr	r2, [pc, #532]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800a90e:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	b29b      	uxth	r3, r3
 800a916:	00db      	lsls	r3, r3, #3
 800a918:	b29a      	uxth	r2, r3
 800a91a:	4b82      	ldr	r3, [pc, #520]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800a91c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800a91e:	4b81      	ldr	r3, [pc, #516]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800a920:	2204      	movs	r2, #4
 800a922:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	7c9b      	ldrb	r3, [r3, #18]
 800a928:	00db      	lsls	r3, r3, #3
 800a92a:	b2da      	uxtb	r2, r3
 800a92c:	4b7d      	ldr	r3, [pc, #500]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800a92e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800a930:	4b7c      	ldr	r3, [pc, #496]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800a932:	2200      	movs	r2, #0
 800a934:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	7d9b      	ldrb	r3, [r3, #22]
 800a93a:	2b02      	cmp	r3, #2
 800a93c:	d003      	beq.n	800a946 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	7d1b      	ldrb	r3, [r3, #20]
 800a942:	2b02      	cmp	r3, #2
 800a944:	d12b      	bne.n	800a99e <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	7d5b      	ldrb	r3, [r3, #21]
 800a94a:	2bf1      	cmp	r3, #241	@ 0xf1
 800a94c:	d00a      	beq.n	800a964 <RadioSetTxGenericConfig+0x124>
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	7d5b      	ldrb	r3, [r3, #21]
 800a952:	2bf2      	cmp	r3, #242	@ 0xf2
 800a954:	d006      	beq.n	800a964 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	7d5b      	ldrb	r3, [r3, #21]
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d002      	beq.n	800a964 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 800a95e:	f04f 33ff 	mov.w	r3, #4294967295
 800a962:	e199      	b.n	800ac98 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 800a968:	2301      	movs	r3, #1
 800a96a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800a96e:	4b6e      	ldr	r3, [pc, #440]	@ (800ab28 <RadioSetTxGenericConfig+0x2e8>)
 800a970:	6819      	ldr	r1, [r3, #0]
 800a972:	f107 0320 	add.w	r3, r7, #32
 800a976:	4a6d      	ldr	r2, [pc, #436]	@ (800ab2c <RadioSetTxGenericConfig+0x2ec>)
 800a978:	4618      	mov	r0, r3
 800a97a:	f001 fb9f 	bl	800c0bc <RFW_Init>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d002      	beq.n	800a98a <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 800a984:	f04f 33ff 	mov.w	r3, #4294967295
 800a988:	e186      	b.n	800ac98 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800a98a:	4b66      	ldr	r3, [pc, #408]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800a98c:	2200      	movs	r2, #0
 800a98e:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800a990:	4b64      	ldr	r3, [pc, #400]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800a992:	2201      	movs	r2, #1
 800a994:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800a996:	4b63      	ldr	r3, [pc, #396]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800a998:	2200      	movs	r2, #0
 800a99a:	755a      	strb	r2, [r3, #21]
        {
 800a99c:	e00b      	b.n	800a9b6 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	7d5a      	ldrb	r2, [r3, #21]
 800a9a2:	4b60      	ldr	r3, [pc, #384]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800a9a4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	7d9a      	ldrb	r2, [r3, #22]
 800a9aa:	4b5e      	ldr	r3, [pc, #376]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800a9ac:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	7d1a      	ldrb	r2, [r3, #20]
 800a9b2:	4b5c      	ldr	r3, [pc, #368]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800a9b4:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800a9b6:	f7ff f898 	bl	8009aea <RadioStandby>
        RadioSetModem( radio_modem );
 800a9ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fe fa2a 	bl	8008e18 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a9c4:	485a      	ldr	r0, [pc, #360]	@ (800ab30 <RadioSetTxGenericConfig+0x2f0>)
 800a9c6:	f000 fe85 	bl	800b6d4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a9ca:	485a      	ldr	r0, [pc, #360]	@ (800ab34 <RadioSetTxGenericConfig+0x2f4>)
 800a9cc:	f000 ff54 	bl	800b878 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800a9d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f000 fa18 	bl	800ae0a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	8a1b      	ldrh	r3, [r3, #16]
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f000 fa62 	bl	800aea8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	899b      	ldrh	r3, [r3, #12]
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f000 fa3d 	bl	800ae68 <SUBGRF_SetCrcPolynomial>
        break;
 800a9ee:	e13f      	b.n	800ac70 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d102      	bne.n	800a9fe <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 800a9f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a9fc:	e14c      	b.n	800ac98 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	7c9b      	ldrb	r3, [r3, #18]
 800aa02:	2b08      	cmp	r3, #8
 800aa04:	d902      	bls.n	800aa0c <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 800aa06:	f04f 33ff 	mov.w	r3, #4294967295
 800aa0a:	e145      	b.n	800ac98 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	6899      	ldr	r1, [r3, #8]
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	7c9b      	ldrb	r3, [r3, #18]
 800aa14:	461a      	mov	r2, r3
 800aa16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f002 f808 	bl	800ca30 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800aa20:	4b40      	ldr	r3, [pc, #256]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800aa22:	2200      	movs	r2, #0
 800aa24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a3d      	ldr	r2, [pc, #244]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800aa2e:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	7cda      	ldrb	r2, [r3, #19]
 800aa34:	4b3b      	ldr	r3, [pc, #236]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800aa36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	699b      	ldr	r3, [r3, #24]
 800aa3e:	4a39      	ldr	r2, [pc, #228]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800aa40:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800aa42:	4b38      	ldr	r3, [pc, #224]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800aa44:	2200      	movs	r2, #0
 800aa46:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	00db      	lsls	r3, r3, #3
 800aa50:	b29a      	uxth	r2, r3
 800aa52:	4b34      	ldr	r3, [pc, #208]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800aa54:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800aa56:	4b33      	ldr	r3, [pc, #204]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800aa58:	2204      	movs	r2, #4
 800aa5a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	7c9b      	ldrb	r3, [r3, #18]
 800aa60:	00db      	lsls	r3, r3, #3
 800aa62:	b2da      	uxtb	r2, r3
 800aa64:	4b2f      	ldr	r3, [pc, #188]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800aa66:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800aa68:	4b2e      	ldr	r3, [pc, #184]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	7d9b      	ldrb	r3, [r3, #22]
 800aa72:	2b02      	cmp	r3, #2
 800aa74:	d003      	beq.n	800aa7e <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	7d1b      	ldrb	r3, [r3, #20]
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	d12a      	bne.n	800aad4 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	7d5b      	ldrb	r3, [r3, #21]
 800aa82:	2bf1      	cmp	r3, #241	@ 0xf1
 800aa84:	d00a      	beq.n	800aa9c <RadioSetTxGenericConfig+0x25c>
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	7d5b      	ldrb	r3, [r3, #21]
 800aa8a:	2bf2      	cmp	r3, #242	@ 0xf2
 800aa8c:	d006      	beq.n	800aa9c <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	7d5b      	ldrb	r3, [r3, #21]
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d002      	beq.n	800aa9c <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 800aa96:	f04f 33ff 	mov.w	r3, #4294967295
 800aa9a:	e0fd      	b.n	800ac98 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800aaa4:	4b20      	ldr	r3, [pc, #128]	@ (800ab28 <RadioSetTxGenericConfig+0x2e8>)
 800aaa6:	6819      	ldr	r1, [r3, #0]
 800aaa8:	f107 0314 	add.w	r3, r7, #20
 800aaac:	4a1f      	ldr	r2, [pc, #124]	@ (800ab2c <RadioSetTxGenericConfig+0x2ec>)
 800aaae:	4618      	mov	r0, r3
 800aab0:	f001 fb04 	bl	800c0bc <RFW_Init>
 800aab4:	4603      	mov	r3, r0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d002      	beq.n	800aac0 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 800aaba:	f04f 33ff 	mov.w	r3, #4294967295
 800aabe:	e0eb      	b.n	800ac98 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800aac0:	4b18      	ldr	r3, [pc, #96]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800aac2:	2200      	movs	r2, #0
 800aac4:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800aac6:	4b17      	ldr	r3, [pc, #92]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800aac8:	2201      	movs	r2, #1
 800aaca:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800aacc:	4b15      	ldr	r3, [pc, #84]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800aace:	2200      	movs	r2, #0
 800aad0:	755a      	strb	r2, [r3, #21]
        {
 800aad2:	e00b      	b.n	800aaec <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	7d5a      	ldrb	r2, [r3, #21]
 800aad8:	4b12      	ldr	r3, [pc, #72]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800aada:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	7d9a      	ldrb	r2, [r3, #22]
 800aae0:	4b10      	ldr	r3, [pc, #64]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800aae2:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	7d1a      	ldrb	r2, [r3, #20]
 800aae8:	4b0e      	ldr	r3, [pc, #56]	@ (800ab24 <RadioSetTxGenericConfig+0x2e4>)
 800aaea:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800aaec:	f7fe fffd 	bl	8009aea <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800aaf0:	2000      	movs	r0, #0
 800aaf2:	f7fe f991 	bl	8008e18 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800aaf6:	480e      	ldr	r0, [pc, #56]	@ (800ab30 <RadioSetTxGenericConfig+0x2f0>)
 800aaf8:	f000 fdec 	bl	800b6d4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800aafc:	480d      	ldr	r0, [pc, #52]	@ (800ab34 <RadioSetTxGenericConfig+0x2f4>)
 800aafe:	f000 febb 	bl	800b878 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800ab02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ab06:	4618      	mov	r0, r3
 800ab08:	f000 f97f 	bl	800ae0a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	8a1b      	ldrh	r3, [r3, #16]
 800ab10:	4618      	mov	r0, r3
 800ab12:	f000 f9c9 	bl	800aea8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	899b      	ldrh	r3, [r3, #12]
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f000 f9a4 	bl	800ae68 <SUBGRF_SetCrcPolynomial>
        break;
 800ab20:	e0a6      	b.n	800ac70 <RadioSetTxGenericConfig+0x430>
 800ab22:	bf00      	nop
 800ab24:	20000330 	.word	0x20000330
 800ab28:	2000032c 	.word	0x2000032c
 800ab2c:	2000038c 	.word	0x2000038c
 800ab30:	20000368 	.word	0x20000368
 800ab34:	2000033e 	.word	0x2000033e
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800ab38:	4b59      	ldr	r3, [pc, #356]	@ (800aca0 <RadioSetTxGenericConfig+0x460>)
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	781a      	ldrb	r2, [r3, #0]
 800ab44:	4b56      	ldr	r3, [pc, #344]	@ (800aca0 <RadioSetTxGenericConfig+0x460>)
 800ab46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	785a      	ldrb	r2, [r3, #1]
 800ab4e:	4b54      	ldr	r3, [pc, #336]	@ (800aca0 <RadioSetTxGenericConfig+0x460>)
 800ab50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	789a      	ldrb	r2, [r3, #2]
 800ab58:	4b51      	ldr	r3, [pc, #324]	@ (800aca0 <RadioSetTxGenericConfig+0x460>)
 800ab5a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	78db      	ldrb	r3, [r3, #3]
 800ab62:	2b02      	cmp	r3, #2
 800ab64:	d010      	beq.n	800ab88 <RadioSetTxGenericConfig+0x348>
 800ab66:	2b02      	cmp	r3, #2
 800ab68:	dc20      	bgt.n	800abac <RadioSetTxGenericConfig+0x36c>
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d002      	beq.n	800ab74 <RadioSetTxGenericConfig+0x334>
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d005      	beq.n	800ab7e <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 800ab72:	e01b      	b.n	800abac <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800ab74:	4b4a      	ldr	r3, [pc, #296]	@ (800aca0 <RadioSetTxGenericConfig+0x460>)
 800ab76:	2200      	movs	r2, #0
 800ab78:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800ab7c:	e017      	b.n	800abae <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800ab7e:	4b48      	ldr	r3, [pc, #288]	@ (800aca0 <RadioSetTxGenericConfig+0x460>)
 800ab80:	2201      	movs	r2, #1
 800ab82:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800ab86:	e012      	b.n	800abae <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	2b0b      	cmp	r3, #11
 800ab8e:	d003      	beq.n	800ab98 <RadioSetTxGenericConfig+0x358>
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	2b0c      	cmp	r3, #12
 800ab96:	d104      	bne.n	800aba2 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800ab98:	4b41      	ldr	r3, [pc, #260]	@ (800aca0 <RadioSetTxGenericConfig+0x460>)
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800aba0:	e005      	b.n	800abae <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800aba2:	4b3f      	ldr	r3, [pc, #252]	@ (800aca0 <RadioSetTxGenericConfig+0x460>)
 800aba4:	2200      	movs	r2, #0
 800aba6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800abaa:	e000      	b.n	800abae <RadioSetTxGenericConfig+0x36e>
            break;
 800abac:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800abae:	4b3c      	ldr	r3, [pc, #240]	@ (800aca0 <RadioSetTxGenericConfig+0x460>)
 800abb0:	2201      	movs	r2, #1
 800abb2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	889a      	ldrh	r2, [r3, #4]
 800abb8:	4b39      	ldr	r3, [pc, #228]	@ (800aca0 <RadioSetTxGenericConfig+0x460>)
 800abba:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	799a      	ldrb	r2, [r3, #6]
 800abc0:	4b37      	ldr	r3, [pc, #220]	@ (800aca0 <RadioSetTxGenericConfig+0x460>)
 800abc2:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	79da      	ldrb	r2, [r3, #7]
 800abc8:	4b35      	ldr	r3, [pc, #212]	@ (800aca0 <RadioSetTxGenericConfig+0x460>)
 800abca:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	7a1a      	ldrb	r2, [r3, #8]
 800abd2:	4b33      	ldr	r3, [pc, #204]	@ (800aca0 <RadioSetTxGenericConfig+0x460>)
 800abd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 800abd8:	f7fe ff87 	bl	8009aea <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800abdc:	2001      	movs	r0, #1
 800abde:	f7fe f91b 	bl	8008e18 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800abe2:	4830      	ldr	r0, [pc, #192]	@ (800aca4 <RadioSetTxGenericConfig+0x464>)
 800abe4:	f000 fd76 	bl	800b6d4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800abe8:	482f      	ldr	r0, [pc, #188]	@ (800aca8 <RadioSetTxGenericConfig+0x468>)
 800abea:	f000 fe45 	bl	800b878 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800abee:	4b2c      	ldr	r3, [pc, #176]	@ (800aca0 <RadioSetTxGenericConfig+0x460>)
 800abf0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800abf4:	2b06      	cmp	r3, #6
 800abf6:	d10d      	bne.n	800ac14 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800abf8:	f640 0089 	movw	r0, #2185	@ 0x889
 800abfc:	f000 ff98 	bl	800bb30 <SUBGRF_ReadRegister>
 800ac00:	4603      	mov	r3, r0
 800ac02:	f023 0304 	bic.w	r3, r3, #4
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	4619      	mov	r1, r3
 800ac0a:	f640 0089 	movw	r0, #2185	@ 0x889
 800ac0e:	f000 ff7b 	bl	800bb08 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 800ac12:	e02d      	b.n	800ac70 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800ac14:	f640 0089 	movw	r0, #2185	@ 0x889
 800ac18:	f000 ff8a 	bl	800bb30 <SUBGRF_ReadRegister>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	f043 0304 	orr.w	r3, r3, #4
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	4619      	mov	r1, r3
 800ac26:	f640 0089 	movw	r0, #2185	@ 0x889
 800ac2a:	f000 ff6d 	bl	800bb08 <SUBGRF_WriteRegister>
        break;
 800ac2e:	e01f      	b.n	800ac70 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d004      	beq.n	800ac42 <RadioSetTxGenericConfig+0x402>
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ac40:	d902      	bls.n	800ac48 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 800ac42:	f04f 33ff 	mov.w	r3, #4294967295
 800ac46:	e027      	b.n	800ac98 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 800ac48:	2003      	movs	r0, #3
 800ac4a:	f7fe f8e5 	bl	8008e18 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800ac4e:	4b14      	ldr	r3, [pc, #80]	@ (800aca0 <RadioSetTxGenericConfig+0x460>)
 800ac50:	2202      	movs	r2, #2
 800ac52:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a11      	ldr	r2, [pc, #68]	@ (800aca0 <RadioSetTxGenericConfig+0x460>)
 800ac5c:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800ac5e:	4b10      	ldr	r3, [pc, #64]	@ (800aca0 <RadioSetTxGenericConfig+0x460>)
 800ac60:	2216      	movs	r2, #22
 800ac62:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ac66:	480f      	ldr	r0, [pc, #60]	@ (800aca4 <RadioSetTxGenericConfig+0x464>)
 800ac68:	f000 fd34 	bl	800b6d4 <SUBGRF_SetModulationParams>
        break;
 800ac6c:	e000      	b.n	800ac70 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 800ac6e:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800ac70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac74:	4618      	mov	r0, r3
 800ac76:	f001 f863 	bl	800bd40 <SUBGRF_SetRfTxPower>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	4b08      	ldr	r3, [pc, #32]	@ (800aca0 <RadioSetTxGenericConfig+0x460>)
 800ac80:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800ac84:	4b06      	ldr	r3, [pc, #24]	@ (800aca0 <RadioSetTxGenericConfig+0x460>)
 800ac86:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f001 fa37 	bl	800c0fe <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800ac90:	4a03      	ldr	r2, [pc, #12]	@ (800aca0 <RadioSetTxGenericConfig+0x460>)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6053      	str	r3, [r2, #4]
    return 0;
 800ac96:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3738      	adds	r7, #56	@ 0x38
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	20000330 	.word	0x20000330
 800aca4:	20000368 	.word	0x20000368
 800aca8:	2000033e 	.word	0x2000033e

0800acac <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 800acac:	b480      	push	{r7}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 800acb4:	2301      	movs	r3, #1
 800acb6:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 800acb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3714      	adds	r7, #20
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bc80      	pop	{r7}
 800acc2:	4770      	bx	lr

0800acc4 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 800acce:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 800acd0:	4618      	mov	r0, r3
 800acd2:	370c      	adds	r7, #12
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bc80      	pop	{r7}
 800acd8:	4770      	bx	lr
	...

0800acdc <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d002      	beq.n	800acf0 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800acea:	4a1d      	ldr	r2, [pc, #116]	@ (800ad60 <SUBGRF_Init+0x84>)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800acf0:	f7f5 fffc 	bl	8000cec <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800acf4:	2002      	movs	r0, #2
 800acf6:	f001 f8ff 	bl	800bef8 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800acfa:	4b1a      	ldr	r3, [pc, #104]	@ (800ad64 <SUBGRF_Init+0x88>)
 800acfc:	2200      	movs	r2, #0
 800acfe:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800ad00:	2000      	movs	r0, #0
 800ad02:	f000 f97d 	bl	800b000 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800ad06:	f001 fb2e 	bl	800c366 <RBI_IsTCXO>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d10e      	bne.n	800ad2e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800ad10:	2140      	movs	r1, #64	@ 0x40
 800ad12:	2001      	movs	r0, #1
 800ad14:	f000 fb82 	bl	800b41c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800ad18:	2100      	movs	r1, #0
 800ad1a:	f640 1011 	movw	r0, #2321	@ 0x911
 800ad1e:	f000 fef3 	bl	800bb08 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800ad22:	237f      	movs	r3, #127	@ 0x7f
 800ad24:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800ad26:	7b38      	ldrb	r0, [r7, #12]
 800ad28:	f000 fa8b 	bl	800b242 <SUBGRF_Calibrate>
 800ad2c:	e009      	b.n	800ad42 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800ad2e:	2120      	movs	r1, #32
 800ad30:	f640 1011 	movw	r0, #2321	@ 0x911
 800ad34:	f000 fee8 	bl	800bb08 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800ad38:	2120      	movs	r1, #32
 800ad3a:	f640 1012 	movw	r0, #2322	@ 0x912
 800ad3e:	f000 fee3 	bl	800bb08 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800ad42:	210e      	movs	r1, #14
 800ad44:	f640 101f 	movw	r0, #2335	@ 0x91f
 800ad48:	f000 fede 	bl	800bb08 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 800ad4c:	f001 fae8 	bl	800c320 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800ad50:	4b05      	ldr	r3, [pc, #20]	@ (800ad68 <SUBGRF_Init+0x8c>)
 800ad52:	2201      	movs	r2, #1
 800ad54:	701a      	strb	r2, [r3, #0]
}
 800ad56:	bf00      	nop
 800ad58:	3710      	adds	r7, #16
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	200003c8 	.word	0x200003c8
 800ad64:	200003c4 	.word	0x200003c4
 800ad68:	200003bc 	.word	0x200003bc

0800ad6c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	af00      	add	r7, sp, #0
    return OperatingMode;
 800ad70:	4b02      	ldr	r3, [pc, #8]	@ (800ad7c <SUBGRF_GetOperatingMode+0x10>)
 800ad72:	781b      	ldrb	r3, [r3, #0]
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bc80      	pop	{r7}
 800ad7a:	4770      	bx	lr
 800ad7c:	200003bc 	.word	0x200003bc

0800ad80 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	460b      	mov	r3, r1
 800ad8a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800ad8c:	78fb      	ldrb	r3, [r7, #3]
 800ad8e:	461a      	mov	r2, r3
 800ad90:	6879      	ldr	r1, [r7, #4]
 800ad92:	2000      	movs	r0, #0
 800ad94:	f000 ff24 	bl	800bbe0 <SUBGRF_WriteBuffer>
}
 800ad98:	bf00      	nop
 800ad9a:	3708      	adds	r7, #8
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b086      	sub	sp, #24
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	4613      	mov	r3, r2
 800adac:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800adae:	2300      	movs	r3, #0
 800adb0:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800adb2:	f107 0317 	add.w	r3, r7, #23
 800adb6:	4619      	mov	r1, r3
 800adb8:	68b8      	ldr	r0, [r7, #8]
 800adba:	f000 fe27 	bl	800ba0c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	79fa      	ldrb	r2, [r7, #7]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d201      	bcs.n	800adcc <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800adc8:	2301      	movs	r3, #1
 800adca:	e007      	b.n	800addc <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800adcc:	7df8      	ldrb	r0, [r7, #23]
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	461a      	mov	r2, r3
 800add4:	68f9      	ldr	r1, [r7, #12]
 800add6:	f000 ff25 	bl	800bc24 <SUBGRF_ReadBuffer>

    return 0;
 800adda:	2300      	movs	r3, #0
}
 800addc:	4618      	mov	r0, r3
 800adde:	3718      	adds	r7, #24
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	460b      	mov	r3, r1
 800adee:	607a      	str	r2, [r7, #4]
 800adf0:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800adf2:	7afb      	ldrb	r3, [r7, #11]
 800adf4:	4619      	mov	r1, r3
 800adf6:	68f8      	ldr	r0, [r7, #12]
 800adf8:	f7ff ffc2 	bl	800ad80 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 f91b 	bl	800b038 <SUBGRF_SetTx>
}
 800ae02:	bf00      	nop
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b082      	sub	sp, #8
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800ae12:	2208      	movs	r2, #8
 800ae14:	6879      	ldr	r1, [r7, #4]
 800ae16:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 800ae1a:	f000 fe9d 	bl	800bb58 <SUBGRF_WriteRegisters>
    return 0;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	4603      	mov	r3, r0
 800ae30:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800ae32:	88fb      	ldrh	r3, [r7, #6]
 800ae34:	0a1b      	lsrs	r3, r3, #8
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800ae3c:	88fb      	ldrh	r3, [r7, #6]
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800ae42:	f000 fb6f 	bl	800b524 <SUBGRF_GetPacketType>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d108      	bne.n	800ae5e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800ae4c:	f107 030c 	add.w	r3, r7, #12
 800ae50:	2202      	movs	r2, #2
 800ae52:	4619      	mov	r1, r3
 800ae54:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 800ae58:	f000 fe7e 	bl	800bb58 <SUBGRF_WriteRegisters>
            break;
 800ae5c:	e000      	b.n	800ae60 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800ae5e:	bf00      	nop
    }
}
 800ae60:	bf00      	nop
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	4603      	mov	r3, r0
 800ae70:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800ae72:	88fb      	ldrh	r3, [r7, #6]
 800ae74:	0a1b      	lsrs	r3, r3, #8
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800ae7c:	88fb      	ldrh	r3, [r7, #6]
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800ae82:	f000 fb4f 	bl	800b524 <SUBGRF_GetPacketType>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d108      	bne.n	800ae9e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800ae8c:	f107 030c 	add.w	r3, r7, #12
 800ae90:	2202      	movs	r2, #2
 800ae92:	4619      	mov	r1, r3
 800ae94:	f240 60be 	movw	r0, #1726	@ 0x6be
 800ae98:	f000 fe5e 	bl	800bb58 <SUBGRF_WriteRegisters>
            break;
 800ae9c:	e000      	b.n	800aea0 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800ae9e:	bf00      	nop
    }
}
 800aea0:	bf00      	nop
 800aea2:	3710      	adds	r7, #16
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	4603      	mov	r3, r0
 800aeb0:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800aeb6:	f000 fb35 	bl	800b524 <SUBGRF_GetPacketType>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d121      	bne.n	800af04 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800aec0:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800aec4:	f000 fe34 	bl	800bb30 <SUBGRF_ReadRegister>
 800aec8:	4603      	mov	r3, r0
 800aeca:	f023 0301 	bic.w	r3, r3, #1
 800aece:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800aed0:	88fb      	ldrh	r3, [r7, #6]
 800aed2:	0a1b      	lsrs	r3, r3, #8
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	b25b      	sxtb	r3, r3
 800aed8:	f003 0301 	and.w	r3, r3, #1
 800aedc:	b25a      	sxtb	r2, r3
 800aede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aee2:	4313      	orrs	r3, r2
 800aee4:	b25b      	sxtb	r3, r3
 800aee6:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800aee8:	7bfb      	ldrb	r3, [r7, #15]
 800aeea:	4619      	mov	r1, r3
 800aeec:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800aef0:	f000 fe0a 	bl	800bb08 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800aef4:	88fb      	ldrh	r3, [r7, #6]
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	4619      	mov	r1, r3
 800aefa:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 800aefe:	f000 fe03 	bl	800bb08 <SUBGRF_WriteRegister>
            break;
 800af02:	e000      	b.n	800af06 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800af04:	bf00      	nop
    }
}
 800af06:	bf00      	nop
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b082      	sub	sp, #8
 800af12:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800af14:	2300      	movs	r3, #0
 800af16:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800af18:	2300      	movs	r3, #0
 800af1a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800af1c:	2300      	movs	r3, #0
 800af1e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800af20:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800af24:	f000 fe04 	bl	800bb30 <SUBGRF_ReadRegister>
 800af28:	4603      	mov	r3, r0
 800af2a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800af2c:	79fb      	ldrb	r3, [r7, #7]
 800af2e:	f023 0301 	bic.w	r3, r3, #1
 800af32:	b2db      	uxtb	r3, r3
 800af34:	4619      	mov	r1, r3
 800af36:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800af3a:	f000 fde5 	bl	800bb08 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800af3e:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800af42:	f000 fdf5 	bl	800bb30 <SUBGRF_ReadRegister>
 800af46:	4603      	mov	r3, r0
 800af48:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800af4a:	79bb      	ldrb	r3, [r7, #6]
 800af4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af50:	b2db      	uxtb	r3, r3
 800af52:	4619      	mov	r1, r3
 800af54:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800af58:	f000 fdd6 	bl	800bb08 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800af5c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800af60:	f000 f88a 	bl	800b078 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800af64:	463b      	mov	r3, r7
 800af66:	2204      	movs	r2, #4
 800af68:	4619      	mov	r1, r3
 800af6a:	f640 0019 	movw	r0, #2073	@ 0x819
 800af6e:	f000 fe15 	bl	800bb9c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800af72:	2000      	movs	r0, #0
 800af74:	f000 f844 	bl	800b000 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800af78:	79fb      	ldrb	r3, [r7, #7]
 800af7a:	4619      	mov	r1, r3
 800af7c:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800af80:	f000 fdc2 	bl	800bb08 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800af84:	79bb      	ldrb	r3, [r7, #6]
 800af86:	4619      	mov	r1, r3
 800af88:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800af8c:	f000 fdbc 	bl	800bb08 <SUBGRF_WriteRegister>

    return number;
 800af90:	683b      	ldr	r3, [r7, #0]
}
 800af92:	4618      	mov	r0, r3
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
	...

0800af9c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800afa4:	2000      	movs	r0, #0
 800afa6:	f001 f9c6 	bl	800c336 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800afaa:	2002      	movs	r0, #2
 800afac:	f000 ffa4 	bl	800bef8 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800afb0:	793b      	ldrb	r3, [r7, #4]
 800afb2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	009b      	lsls	r3, r3, #2
 800afba:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800afbc:	793b      	ldrb	r3, [r7, #4]
 800afbe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800afc6:	b25b      	sxtb	r3, r3
 800afc8:	4313      	orrs	r3, r2
 800afca:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800afcc:	793b      	ldrb	r3, [r7, #4]
 800afce:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800afd2:	b2db      	uxtb	r3, r3
 800afd4:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800afd6:	4313      	orrs	r3, r2
 800afd8:	b25b      	sxtb	r3, r3
 800afda:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800afdc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800afde:	f107 030f 	add.w	r3, r7, #15
 800afe2:	2201      	movs	r2, #1
 800afe4:	4619      	mov	r1, r3
 800afe6:	2084      	movs	r0, #132	@ 0x84
 800afe8:	f000 fe3e 	bl	800bc68 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800afec:	4b03      	ldr	r3, [pc, #12]	@ (800affc <SUBGRF_SetSleep+0x60>)
 800afee:	2200      	movs	r2, #0
 800aff0:	701a      	strb	r2, [r3, #0]
}
 800aff2:	bf00      	nop
 800aff4:	3710      	adds	r7, #16
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	200003bc 	.word	0x200003bc

0800b000 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	4603      	mov	r3, r0
 800b008:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800b00a:	1dfb      	adds	r3, r7, #7
 800b00c:	2201      	movs	r2, #1
 800b00e:	4619      	mov	r1, r3
 800b010:	2080      	movs	r0, #128	@ 0x80
 800b012:	f000 fe29 	bl	800bc68 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800b016:	79fb      	ldrb	r3, [r7, #7]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d103      	bne.n	800b024 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800b01c:	4b05      	ldr	r3, [pc, #20]	@ (800b034 <SUBGRF_SetStandby+0x34>)
 800b01e:	2201      	movs	r2, #1
 800b020:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800b022:	e002      	b.n	800b02a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800b024:	4b03      	ldr	r3, [pc, #12]	@ (800b034 <SUBGRF_SetStandby+0x34>)
 800b026:	2202      	movs	r2, #2
 800b028:	701a      	strb	r2, [r3, #0]
}
 800b02a:	bf00      	nop
 800b02c:	3708      	adds	r7, #8
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	200003bc 	.word	0x200003bc

0800b038 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800b040:	4b0c      	ldr	r3, [pc, #48]	@ (800b074 <SUBGRF_SetTx+0x3c>)
 800b042:	2204      	movs	r2, #4
 800b044:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	0c1b      	lsrs	r3, r3, #16
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	0a1b      	lsrs	r3, r3, #8
 800b052:	b2db      	uxtb	r3, r3
 800b054:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800b05c:	f107 030c 	add.w	r3, r7, #12
 800b060:	2203      	movs	r2, #3
 800b062:	4619      	mov	r1, r3
 800b064:	2083      	movs	r0, #131	@ 0x83
 800b066:	f000 fdff 	bl	800bc68 <SUBGRF_WriteCommand>
}
 800b06a:	bf00      	nop
 800b06c:	3710      	adds	r7, #16
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	200003bc 	.word	0x200003bc

0800b078 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800b080:	4b0c      	ldr	r3, [pc, #48]	@ (800b0b4 <SUBGRF_SetRx+0x3c>)
 800b082:	2205      	movs	r2, #5
 800b084:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	0c1b      	lsrs	r3, r3, #16
 800b08a:	b2db      	uxtb	r3, r3
 800b08c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	0a1b      	lsrs	r3, r3, #8
 800b092:	b2db      	uxtb	r3, r3
 800b094:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800b09c:	f107 030c 	add.w	r3, r7, #12
 800b0a0:	2203      	movs	r2, #3
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	2082      	movs	r0, #130	@ 0x82
 800b0a6:	f000 fddf 	bl	800bc68 <SUBGRF_WriteCommand>
}
 800b0aa:	bf00      	nop
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	200003bc 	.word	0x200003bc

0800b0b8 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800b0c0:	4b0e      	ldr	r3, [pc, #56]	@ (800b0fc <SUBGRF_SetRxBoosted+0x44>)
 800b0c2:	2205      	movs	r2, #5
 800b0c4:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800b0c6:	2197      	movs	r1, #151	@ 0x97
 800b0c8:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 800b0cc:	f000 fd1c 	bl	800bb08 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	0c1b      	lsrs	r3, r3, #16
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	0a1b      	lsrs	r3, r3, #8
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800b0e6:	f107 030c 	add.w	r3, r7, #12
 800b0ea:	2203      	movs	r2, #3
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	2082      	movs	r0, #130	@ 0x82
 800b0f0:	f000 fdba 	bl	800bc68 <SUBGRF_WriteCommand>
}
 800b0f4:	bf00      	nop
 800b0f6:	3710      	adds	r7, #16
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	200003bc 	.word	0x200003bc

0800b100 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	0c1b      	lsrs	r3, r3, #16
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	0a1b      	lsrs	r3, r3, #8
 800b116:	b2db      	uxtb	r3, r3
 800b118:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	0c1b      	lsrs	r3, r3, #16
 800b124:	b2db      	uxtb	r3, r3
 800b126:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	0a1b      	lsrs	r3, r3, #8
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	b2db      	uxtb	r3, r3
 800b134:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800b136:	f107 0308 	add.w	r3, r7, #8
 800b13a:	2206      	movs	r2, #6
 800b13c:	4619      	mov	r1, r3
 800b13e:	2094      	movs	r0, #148	@ 0x94
 800b140:	f000 fd92 	bl	800bc68 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800b144:	4b03      	ldr	r3, [pc, #12]	@ (800b154 <SUBGRF_SetRxDutyCycle+0x54>)
 800b146:	2206      	movs	r2, #6
 800b148:	701a      	strb	r2, [r3, #0]
}
 800b14a:	bf00      	nop
 800b14c:	3710      	adds	r7, #16
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	200003bc 	.word	0x200003bc

0800b158 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800b15c:	2200      	movs	r2, #0
 800b15e:	2100      	movs	r1, #0
 800b160:	20c5      	movs	r0, #197	@ 0xc5
 800b162:	f000 fd81 	bl	800bc68 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800b166:	4b02      	ldr	r3, [pc, #8]	@ (800b170 <SUBGRF_SetCad+0x18>)
 800b168:	2207      	movs	r2, #7
 800b16a:	701a      	strb	r2, [r3, #0]
}
 800b16c:	bf00      	nop
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	200003bc 	.word	0x200003bc

0800b174 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800b174:	b580      	push	{r7, lr}
 800b176:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800b178:	2200      	movs	r2, #0
 800b17a:	2100      	movs	r1, #0
 800b17c:	20d1      	movs	r0, #209	@ 0xd1
 800b17e:	f000 fd73 	bl	800bc68 <SUBGRF_WriteCommand>
}
 800b182:	bf00      	nop
 800b184:	bd80      	pop	{r7, pc}

0800b186 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800b186:	b580      	push	{r7, lr}
 800b188:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800b18a:	2200      	movs	r2, #0
 800b18c:	2100      	movs	r1, #0
 800b18e:	20d2      	movs	r0, #210	@ 0xd2
 800b190:	f000 fd6a 	bl	800bc68 <SUBGRF_WriteCommand>
}
 800b194:	bf00      	nop
 800b196:	bd80      	pop	{r7, pc}

0800b198 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	4603      	mov	r3, r0
 800b1a0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800b1a2:	1dfb      	adds	r3, r7, #7
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	209f      	movs	r0, #159	@ 0x9f
 800b1aa:	f000 fd5d 	bl	800bc68 <SUBGRF_WriteCommand>
}
 800b1ae:	bf00      	nop
 800b1b0:	3708      	adds	r7, #8
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b084      	sub	sp, #16
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	4603      	mov	r3, r0
 800b1be:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800b1c0:	1dfb      	adds	r3, r7, #7
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	20a0      	movs	r0, #160	@ 0xa0
 800b1c8:	f000 fd4e 	bl	800bc68 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800b1cc:	79fb      	ldrb	r3, [r7, #7]
 800b1ce:	2b3f      	cmp	r3, #63	@ 0x3f
 800b1d0:	d91c      	bls.n	800b20c <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800b1d2:	79fb      	ldrb	r3, [r7, #7]
 800b1d4:	085b      	lsrs	r3, r3, #1
 800b1d6:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800b1e0:	e005      	b.n	800b1ee <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800b1e2:	7bfb      	ldrb	r3, [r7, #15]
 800b1e4:	089b      	lsrs	r3, r3, #2
 800b1e6:	73fb      	strb	r3, [r7, #15]
            exp++;
 800b1e8:	7bbb      	ldrb	r3, [r7, #14]
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800b1ee:	7bfb      	ldrb	r3, [r7, #15]
 800b1f0:	2b1f      	cmp	r3, #31
 800b1f2:	d8f6      	bhi.n	800b1e2 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800b1f4:	7bfb      	ldrb	r3, [r7, #15]
 800b1f6:	00db      	lsls	r3, r3, #3
 800b1f8:	b2da      	uxtb	r2, r3
 800b1fa:	7bbb      	ldrb	r3, [r7, #14]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800b200:	7b7b      	ldrb	r3, [r7, #13]
 800b202:	4619      	mov	r1, r3
 800b204:	f240 7006 	movw	r0, #1798	@ 0x706
 800b208:	f000 fc7e 	bl	800bb08 <SUBGRF_WriteRegister>
    }
}
 800b20c:	bf00      	nop
 800b20e:	3710      	adds	r7, #16
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b082      	sub	sp, #8
 800b218:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800b21a:	f001 f8af 	bl	800c37c <RBI_IsDCDC>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b01      	cmp	r3, #1
 800b222:	d102      	bne.n	800b22a <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800b224:	2301      	movs	r3, #1
 800b226:	71fb      	strb	r3, [r7, #7]
 800b228:	e001      	b.n	800b22e <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800b22a:	2300      	movs	r3, #0
 800b22c:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800b22e:	1dfb      	adds	r3, r7, #7
 800b230:	2201      	movs	r2, #1
 800b232:	4619      	mov	r1, r3
 800b234:	2096      	movs	r0, #150	@ 0x96
 800b236:	f000 fd17 	bl	800bc68 <SUBGRF_WriteCommand>
}
 800b23a:	bf00      	nop
 800b23c:	3708      	adds	r7, #8
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}

0800b242 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800b242:	b580      	push	{r7, lr}
 800b244:	b084      	sub	sp, #16
 800b246:	af00      	add	r7, sp, #0
 800b248:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800b24a:	793b      	ldrb	r3, [r7, #4]
 800b24c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b250:	b2db      	uxtb	r3, r3
 800b252:	019b      	lsls	r3, r3, #6
 800b254:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800b256:	793b      	ldrb	r3, [r7, #4]
 800b258:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800b260:	b25b      	sxtb	r3, r3
 800b262:	4313      	orrs	r3, r2
 800b264:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800b266:	793b      	ldrb	r3, [r7, #4]
 800b268:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800b270:	b25b      	sxtb	r3, r3
 800b272:	4313      	orrs	r3, r2
 800b274:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800b276:	793b      	ldrb	r3, [r7, #4]
 800b278:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800b280:	b25b      	sxtb	r3, r3
 800b282:	4313      	orrs	r3, r2
 800b284:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800b286:	793b      	ldrb	r3, [r7, #4]
 800b288:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800b290:	b25b      	sxtb	r3, r3
 800b292:	4313      	orrs	r3, r2
 800b294:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800b296:	793b      	ldrb	r3, [r7, #4]
 800b298:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800b2a0:	b25b      	sxtb	r3, r3
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800b2a6:	793b      	ldrb	r3, [r7, #4]
 800b2a8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	b25b      	sxtb	r3, r3
 800b2b4:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800b2b6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800b2b8:	f107 030f 	add.w	r3, r7, #15
 800b2bc:	2201      	movs	r2, #1
 800b2be:	4619      	mov	r1, r3
 800b2c0:	2089      	movs	r0, #137	@ 0x89
 800b2c2:	f000 fcd1 	bl	800bc68 <SUBGRF_WriteCommand>
}
 800b2c6:	bf00      	nop
 800b2c8:	3710      	adds	r7, #16
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
	...

0800b2d0 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	4a1d      	ldr	r2, [pc, #116]	@ (800b350 <SUBGRF_CalibrateImage+0x80>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d904      	bls.n	800b2ea <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800b2e0:	23e1      	movs	r3, #225	@ 0xe1
 800b2e2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800b2e4:	23e9      	movs	r3, #233	@ 0xe9
 800b2e6:	737b      	strb	r3, [r7, #13]
 800b2e8:	e027      	b.n	800b33a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	4a19      	ldr	r2, [pc, #100]	@ (800b354 <SUBGRF_CalibrateImage+0x84>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d904      	bls.n	800b2fc <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800b2f2:	23d7      	movs	r3, #215	@ 0xd7
 800b2f4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800b2f6:	23db      	movs	r3, #219	@ 0xdb
 800b2f8:	737b      	strb	r3, [r7, #13]
 800b2fa:	e01e      	b.n	800b33a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	4a16      	ldr	r2, [pc, #88]	@ (800b358 <SUBGRF_CalibrateImage+0x88>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d904      	bls.n	800b30e <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800b304:	23c1      	movs	r3, #193	@ 0xc1
 800b306:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800b308:	23c5      	movs	r3, #197	@ 0xc5
 800b30a:	737b      	strb	r3, [r7, #13]
 800b30c:	e015      	b.n	800b33a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4a12      	ldr	r2, [pc, #72]	@ (800b35c <SUBGRF_CalibrateImage+0x8c>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d904      	bls.n	800b320 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800b316:	2375      	movs	r3, #117	@ 0x75
 800b318:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800b31a:	2381      	movs	r3, #129	@ 0x81
 800b31c:	737b      	strb	r3, [r7, #13]
 800b31e:	e00c      	b.n	800b33a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	4a0f      	ldr	r2, [pc, #60]	@ (800b360 <SUBGRF_CalibrateImage+0x90>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d904      	bls.n	800b332 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800b328:	236b      	movs	r3, #107	@ 0x6b
 800b32a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800b32c:	236f      	movs	r3, #111	@ 0x6f
 800b32e:	737b      	strb	r3, [r7, #13]
 800b330:	e003      	b.n	800b33a <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800b332:	2329      	movs	r3, #41	@ 0x29
 800b334:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800b336:	232b      	movs	r3, #43	@ 0x2b
 800b338:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800b33a:	f107 030c 	add.w	r3, r7, #12
 800b33e:	2202      	movs	r2, #2
 800b340:	4619      	mov	r1, r3
 800b342:	2098      	movs	r0, #152	@ 0x98
 800b344:	f000 fc90 	bl	800bc68 <SUBGRF_WriteCommand>
}
 800b348:	bf00      	nop
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	35a4e900 	.word	0x35a4e900
 800b354:	32a9f880 	.word	0x32a9f880
 800b358:	2de54480 	.word	0x2de54480
 800b35c:	1b6b0b00 	.word	0x1b6b0b00
 800b360:	1954fc40 	.word	0x1954fc40

0800b364 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800b364:	b590      	push	{r4, r7, lr}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
 800b36a:	4604      	mov	r4, r0
 800b36c:	4608      	mov	r0, r1
 800b36e:	4611      	mov	r1, r2
 800b370:	461a      	mov	r2, r3
 800b372:	4623      	mov	r3, r4
 800b374:	71fb      	strb	r3, [r7, #7]
 800b376:	4603      	mov	r3, r0
 800b378:	71bb      	strb	r3, [r7, #6]
 800b37a:	460b      	mov	r3, r1
 800b37c:	717b      	strb	r3, [r7, #5]
 800b37e:	4613      	mov	r3, r2
 800b380:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800b382:	79fb      	ldrb	r3, [r7, #7]
 800b384:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800b386:	79bb      	ldrb	r3, [r7, #6]
 800b388:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800b38a:	797b      	ldrb	r3, [r7, #5]
 800b38c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800b38e:	793b      	ldrb	r3, [r7, #4]
 800b390:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800b392:	f107 030c 	add.w	r3, r7, #12
 800b396:	2204      	movs	r2, #4
 800b398:	4619      	mov	r1, r3
 800b39a:	2095      	movs	r0, #149	@ 0x95
 800b39c:	f000 fc64 	bl	800bc68 <SUBGRF_WriteCommand>
}
 800b3a0:	bf00      	nop
 800b3a2:	3714      	adds	r7, #20
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd90      	pop	{r4, r7, pc}

0800b3a8 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800b3a8:	b590      	push	{r4, r7, lr}
 800b3aa:	b085      	sub	sp, #20
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	4604      	mov	r4, r0
 800b3b0:	4608      	mov	r0, r1
 800b3b2:	4611      	mov	r1, r2
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	4623      	mov	r3, r4
 800b3b8:	80fb      	strh	r3, [r7, #6]
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	80bb      	strh	r3, [r7, #4]
 800b3be:	460b      	mov	r3, r1
 800b3c0:	807b      	strh	r3, [r7, #2]
 800b3c2:	4613      	mov	r3, r2
 800b3c4:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800b3c6:	88fb      	ldrh	r3, [r7, #6]
 800b3c8:	0a1b      	lsrs	r3, r3, #8
 800b3ca:	b29b      	uxth	r3, r3
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800b3d0:	88fb      	ldrh	r3, [r7, #6]
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800b3d6:	88bb      	ldrh	r3, [r7, #4]
 800b3d8:	0a1b      	lsrs	r3, r3, #8
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	b2db      	uxtb	r3, r3
 800b3de:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800b3e0:	88bb      	ldrh	r3, [r7, #4]
 800b3e2:	b2db      	uxtb	r3, r3
 800b3e4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800b3e6:	887b      	ldrh	r3, [r7, #2]
 800b3e8:	0a1b      	lsrs	r3, r3, #8
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800b3f0:	887b      	ldrh	r3, [r7, #2]
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800b3f6:	883b      	ldrh	r3, [r7, #0]
 800b3f8:	0a1b      	lsrs	r3, r3, #8
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800b400:	883b      	ldrh	r3, [r7, #0]
 800b402:	b2db      	uxtb	r3, r3
 800b404:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800b406:	f107 0308 	add.w	r3, r7, #8
 800b40a:	2208      	movs	r2, #8
 800b40c:	4619      	mov	r1, r3
 800b40e:	2008      	movs	r0, #8
 800b410:	f000 fc2a 	bl	800bc68 <SUBGRF_WriteCommand>
}
 800b414:	bf00      	nop
 800b416:	3714      	adds	r7, #20
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd90      	pop	{r4, r7, pc}

0800b41c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	4603      	mov	r3, r0
 800b424:	6039      	str	r1, [r7, #0]
 800b426:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800b428:	79fb      	ldrb	r3, [r7, #7]
 800b42a:	f003 0307 	and.w	r3, r3, #7
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	0c1b      	lsrs	r3, r3, #16
 800b436:	b2db      	uxtb	r3, r3
 800b438:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	0a1b      	lsrs	r3, r3, #8
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	b2db      	uxtb	r3, r3
 800b446:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800b448:	f107 030c 	add.w	r3, r7, #12
 800b44c:	2204      	movs	r2, #4
 800b44e:	4619      	mov	r1, r3
 800b450:	2097      	movs	r0, #151	@ 0x97
 800b452:	f000 fc09 	bl	800bc68 <SUBGRF_WriteCommand>
}
 800b456:	bf00      	nop
 800b458:	3710      	adds	r7, #16
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
	...

0800b460 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800b460:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b464:	b084      	sub	sp, #16
 800b466:	af00      	add	r7, sp, #0
 800b468:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800b46a:	2300      	movs	r3, #0
 800b46c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800b46e:	4b1d      	ldr	r3, [pc, #116]	@ (800b4e4 <SUBGRF_SetRfFrequency+0x84>)
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	f083 0301 	eor.w	r3, r3, #1
 800b476:	b2db      	uxtb	r3, r3
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d005      	beq.n	800b488 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f7ff ff27 	bl	800b2d0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800b482:	4b18      	ldr	r3, [pc, #96]	@ (800b4e4 <SUBGRF_SetRfFrequency+0x84>)
 800b484:	2201      	movs	r2, #1
 800b486:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2200      	movs	r2, #0
 800b48c:	461c      	mov	r4, r3
 800b48e:	4615      	mov	r5, r2
 800b490:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800b494:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800b498:	4a13      	ldr	r2, [pc, #76]	@ (800b4e8 <SUBGRF_SetRfFrequency+0x88>)
 800b49a:	f04f 0300 	mov.w	r3, #0
 800b49e:	4640      	mov	r0, r8
 800b4a0:	4649      	mov	r1, r9
 800b4a2:	f7f4 fe71 	bl	8000188 <__aeabi_uldivmod>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	4613      	mov	r3, r2
 800b4ac:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	0e1b      	lsrs	r3, r3, #24
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	0c1b      	lsrs	r3, r3, #16
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	0a1b      	lsrs	r3, r3, #8
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800b4cc:	f107 0308 	add.w	r3, r7, #8
 800b4d0:	2204      	movs	r2, #4
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	2086      	movs	r0, #134	@ 0x86
 800b4d6:	f000 fbc7 	bl	800bc68 <SUBGRF_WriteCommand>
}
 800b4da:	bf00      	nop
 800b4dc:	3710      	adds	r7, #16
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b4e4:	200003c4 	.word	0x200003c4
 800b4e8:	01e84800 	.word	0x01e84800

0800b4ec <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800b4f6:	79fa      	ldrb	r2, [r7, #7]
 800b4f8:	4b09      	ldr	r3, [pc, #36]	@ (800b520 <SUBGRF_SetPacketType+0x34>)
 800b4fa:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800b4fc:	79fb      	ldrb	r3, [r7, #7]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d104      	bne.n	800b50c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800b502:	2100      	movs	r1, #0
 800b504:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800b508:	f000 fafe 	bl	800bb08 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800b50c:	1dfb      	adds	r3, r7, #7
 800b50e:	2201      	movs	r2, #1
 800b510:	4619      	mov	r1, r3
 800b512:	208a      	movs	r0, #138	@ 0x8a
 800b514:	f000 fba8 	bl	800bc68 <SUBGRF_WriteCommand>
}
 800b518:	bf00      	nop
 800b51a:	3708      	adds	r7, #8
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	200003bd 	.word	0x200003bd

0800b524 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800b524:	b480      	push	{r7}
 800b526:	af00      	add	r7, sp, #0
    return PacketType;
 800b528:	4b02      	ldr	r3, [pc, #8]	@ (800b534 <SUBGRF_GetPacketType+0x10>)
 800b52a:	781b      	ldrb	r3, [r3, #0]
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	46bd      	mov	sp, r7
 800b530:	bc80      	pop	{r7}
 800b532:	4770      	bx	lr
 800b534:	200003bd 	.word	0x200003bd

0800b538 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	4603      	mov	r3, r0
 800b540:	71fb      	strb	r3, [r7, #7]
 800b542:	460b      	mov	r3, r1
 800b544:	71bb      	strb	r3, [r7, #6]
 800b546:	4613      	mov	r3, r2
 800b548:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800b54a:	79fb      	ldrb	r3, [r7, #7]
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d149      	bne.n	800b5e4 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800b550:	2000      	movs	r0, #0
 800b552:	f000 ff1e 	bl	800c392 <RBI_GetRFOMaxPowerConfig>
 800b556:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800b558:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b55c:	68fa      	ldr	r2, [r7, #12]
 800b55e:	429a      	cmp	r2, r3
 800b560:	da01      	bge.n	800b566 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2b0e      	cmp	r3, #14
 800b56a:	d10e      	bne.n	800b58a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800b56c:	2301      	movs	r3, #1
 800b56e:	2201      	movs	r2, #1
 800b570:	2100      	movs	r1, #0
 800b572:	2004      	movs	r0, #4
 800b574:	f7ff fef6 	bl	800b364 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800b578:	79ba      	ldrb	r2, [r7, #6]
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	1ad3      	subs	r3, r2, r3
 800b580:	b2db      	uxtb	r3, r3
 800b582:	330e      	adds	r3, #14
 800b584:	b2db      	uxtb	r3, r3
 800b586:	71bb      	strb	r3, [r7, #6]
 800b588:	e01f      	b.n	800b5ca <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	2b0a      	cmp	r3, #10
 800b58e:	d10e      	bne.n	800b5ae <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800b590:	2301      	movs	r3, #1
 800b592:	2201      	movs	r2, #1
 800b594:	2100      	movs	r1, #0
 800b596:	2001      	movs	r0, #1
 800b598:	f7ff fee4 	bl	800b364 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800b59c:	79ba      	ldrb	r2, [r7, #6]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	1ad3      	subs	r3, r2, r3
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	330d      	adds	r3, #13
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	71bb      	strb	r3, [r7, #6]
 800b5ac:	e00d      	b.n	800b5ca <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	2007      	movs	r0, #7
 800b5b6:	f7ff fed5 	bl	800b364 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800b5ba:	79ba      	ldrb	r2, [r7, #6]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	1ad3      	subs	r3, r2, r3
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	330e      	adds	r3, #14
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800b5ca:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b5ce:	f113 0f11 	cmn.w	r3, #17
 800b5d2:	da01      	bge.n	800b5d8 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800b5d4:	23ef      	movs	r3, #239	@ 0xef
 800b5d6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800b5d8:	2118      	movs	r1, #24
 800b5da:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800b5de:	f000 fa93 	bl	800bb08 <SUBGRF_WriteRegister>
 800b5e2:	e067      	b.n	800b6b4 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800b5e4:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800b5e8:	f000 faa2 	bl	800bb30 <SUBGRF_ReadRegister>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	f043 031e 	orr.w	r3, r3, #30
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800b5fa:	f000 fa85 	bl	800bb08 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800b5fe:	2001      	movs	r0, #1
 800b600:	f000 fec7 	bl	800c392 <RBI_GetRFOMaxPowerConfig>
 800b604:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800b606:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b60a:	68fa      	ldr	r2, [r7, #12]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	da01      	bge.n	800b614 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2b14      	cmp	r3, #20
 800b618:	d10e      	bne.n	800b638 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800b61a:	2301      	movs	r3, #1
 800b61c:	2200      	movs	r2, #0
 800b61e:	2105      	movs	r1, #5
 800b620:	2003      	movs	r0, #3
 800b622:	f7ff fe9f 	bl	800b364 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800b626:	79ba      	ldrb	r2, [r7, #6]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	b2db      	uxtb	r3, r3
 800b62c:	1ad3      	subs	r3, r2, r3
 800b62e:	b2db      	uxtb	r3, r3
 800b630:	3316      	adds	r3, #22
 800b632:	b2db      	uxtb	r3, r3
 800b634:	71bb      	strb	r3, [r7, #6]
 800b636:	e031      	b.n	800b69c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2b11      	cmp	r3, #17
 800b63c:	d10e      	bne.n	800b65c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800b63e:	2301      	movs	r3, #1
 800b640:	2200      	movs	r2, #0
 800b642:	2103      	movs	r1, #3
 800b644:	2002      	movs	r0, #2
 800b646:	f7ff fe8d 	bl	800b364 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800b64a:	79ba      	ldrb	r2, [r7, #6]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	1ad3      	subs	r3, r2, r3
 800b652:	b2db      	uxtb	r3, r3
 800b654:	3316      	adds	r3, #22
 800b656:	b2db      	uxtb	r3, r3
 800b658:	71bb      	strb	r3, [r7, #6]
 800b65a:	e01f      	b.n	800b69c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2b0e      	cmp	r3, #14
 800b660:	d10e      	bne.n	800b680 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800b662:	2301      	movs	r3, #1
 800b664:	2200      	movs	r2, #0
 800b666:	2102      	movs	r1, #2
 800b668:	2002      	movs	r0, #2
 800b66a:	f7ff fe7b 	bl	800b364 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800b66e:	79ba      	ldrb	r2, [r7, #6]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	b2db      	uxtb	r3, r3
 800b674:	1ad3      	subs	r3, r2, r3
 800b676:	b2db      	uxtb	r3, r3
 800b678:	330e      	adds	r3, #14
 800b67a:	b2db      	uxtb	r3, r3
 800b67c:	71bb      	strb	r3, [r7, #6]
 800b67e:	e00d      	b.n	800b69c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800b680:	2301      	movs	r3, #1
 800b682:	2200      	movs	r2, #0
 800b684:	2107      	movs	r1, #7
 800b686:	2004      	movs	r0, #4
 800b688:	f7ff fe6c 	bl	800b364 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800b68c:	79ba      	ldrb	r2, [r7, #6]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	b2db      	uxtb	r3, r3
 800b692:	1ad3      	subs	r3, r2, r3
 800b694:	b2db      	uxtb	r3, r3
 800b696:	3316      	adds	r3, #22
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800b69c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b6a0:	f113 0f09 	cmn.w	r3, #9
 800b6a4:	da01      	bge.n	800b6aa <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800b6a6:	23f7      	movs	r3, #247	@ 0xf7
 800b6a8:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800b6aa:	2138      	movs	r1, #56	@ 0x38
 800b6ac:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800b6b0:	f000 fa2a 	bl	800bb08 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800b6b4:	79bb      	ldrb	r3, [r7, #6]
 800b6b6:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800b6b8:	797b      	ldrb	r3, [r7, #5]
 800b6ba:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800b6bc:	f107 0308 	add.w	r3, r7, #8
 800b6c0:	2202      	movs	r2, #2
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	208e      	movs	r0, #142	@ 0x8e
 800b6c6:	f000 facf 	bl	800bc68 <SUBGRF_WriteCommand>
}
 800b6ca:	bf00      	nop
 800b6cc:	3710      	adds	r7, #16
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
	...

0800b6d4 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800b6d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b6d8:	b086      	sub	sp, #24
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800b6e2:	4a61      	ldr	r2, [pc, #388]	@ (800b868 <SUBGRF_SetModulationParams+0x194>)
 800b6e4:	f107 0308 	add.w	r3, r7, #8
 800b6e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b6ec:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	781a      	ldrb	r2, [r3, #0]
 800b6f4:	4b5d      	ldr	r3, [pc, #372]	@ (800b86c <SUBGRF_SetModulationParams+0x198>)
 800b6f6:	781b      	ldrb	r3, [r3, #0]
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d004      	beq.n	800b706 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	4618      	mov	r0, r3
 800b702:	f7ff fef3 	bl	800b4ec <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	2b03      	cmp	r3, #3
 800b70c:	f200 80a5 	bhi.w	800b85a <SUBGRF_SetModulationParams+0x186>
 800b710:	a201      	add	r2, pc, #4	@ (adr r2, 800b718 <SUBGRF_SetModulationParams+0x44>)
 800b712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b716:	bf00      	nop
 800b718:	0800b729 	.word	0x0800b729
 800b71c:	0800b7e9 	.word	0x0800b7e9
 800b720:	0800b7ab 	.word	0x0800b7ab
 800b724:	0800b817 	.word	0x0800b817
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800b728:	2308      	movs	r3, #8
 800b72a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	4a4f      	ldr	r2, [pc, #316]	@ (800b870 <SUBGRF_SetModulationParams+0x19c>)
 800b732:	fbb2 f3f3 	udiv	r3, r2, r3
 800b736:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	0c1b      	lsrs	r3, r3, #16
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	0a1b      	lsrs	r3, r3, #8
 800b744:	b2db      	uxtb	r3, r3
 800b746:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	7b1b      	ldrb	r3, [r3, #12]
 800b752:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	7b5b      	ldrb	r3, [r3, #13]
 800b758:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	689b      	ldr	r3, [r3, #8]
 800b75e:	2200      	movs	r2, #0
 800b760:	461c      	mov	r4, r3
 800b762:	4615      	mov	r5, r2
 800b764:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800b768:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800b76c:	4a41      	ldr	r2, [pc, #260]	@ (800b874 <SUBGRF_SetModulationParams+0x1a0>)
 800b76e:	f04f 0300 	mov.w	r3, #0
 800b772:	4640      	mov	r0, r8
 800b774:	4649      	mov	r1, r9
 800b776:	f7f4 fd07 	bl	8000188 <__aeabi_uldivmod>
 800b77a:	4602      	mov	r2, r0
 800b77c:	460b      	mov	r3, r1
 800b77e:	4613      	mov	r3, r2
 800b780:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	0c1b      	lsrs	r3, r3, #16
 800b786:	b2db      	uxtb	r3, r3
 800b788:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	0a1b      	lsrs	r3, r3, #8
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	b2db      	uxtb	r3, r3
 800b796:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b798:	7cfb      	ldrb	r3, [r7, #19]
 800b79a:	b29a      	uxth	r2, r3
 800b79c:	f107 0308 	add.w	r3, r7, #8
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	208b      	movs	r0, #139	@ 0x8b
 800b7a4:	f000 fa60 	bl	800bc68 <SUBGRF_WriteCommand>
        break;
 800b7a8:	e058      	b.n	800b85c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800b7aa:	2304      	movs	r3, #4
 800b7ac:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	691b      	ldr	r3, [r3, #16]
 800b7b2:	4a2f      	ldr	r2, [pc, #188]	@ (800b870 <SUBGRF_SetModulationParams+0x19c>)
 800b7b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7b8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	0c1b      	lsrs	r3, r3, #16
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	0a1b      	lsrs	r3, r3, #8
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	b2db      	uxtb	r3, r3
 800b7ce:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	7d1b      	ldrb	r3, [r3, #20]
 800b7d4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b7d6:	7cfb      	ldrb	r3, [r7, #19]
 800b7d8:	b29a      	uxth	r2, r3
 800b7da:	f107 0308 	add.w	r3, r7, #8
 800b7de:	4619      	mov	r1, r3
 800b7e0:	208b      	movs	r0, #139	@ 0x8b
 800b7e2:	f000 fa41 	bl	800bc68 <SUBGRF_WriteCommand>
        break;
 800b7e6:	e039      	b.n	800b85c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800b7e8:	2304      	movs	r3, #4
 800b7ea:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	7e1b      	ldrb	r3, [r3, #24]
 800b7f0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	7e5b      	ldrb	r3, [r3, #25]
 800b7f6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	7e9b      	ldrb	r3, [r3, #26]
 800b7fc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	7edb      	ldrb	r3, [r3, #27]
 800b802:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b804:	7cfb      	ldrb	r3, [r7, #19]
 800b806:	b29a      	uxth	r2, r3
 800b808:	f107 0308 	add.w	r3, r7, #8
 800b80c:	4619      	mov	r1, r3
 800b80e:	208b      	movs	r0, #139	@ 0x8b
 800b810:	f000 fa2a 	bl	800bc68 <SUBGRF_WriteCommand>

        break;
 800b814:	e022      	b.n	800b85c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800b816:	2305      	movs	r3, #5
 800b818:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	4a14      	ldr	r2, [pc, #80]	@ (800b870 <SUBGRF_SetModulationParams+0x19c>)
 800b820:	fbb2 f3f3 	udiv	r3, r2, r3
 800b824:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	0c1b      	lsrs	r3, r3, #16
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	0a1b      	lsrs	r3, r3, #8
 800b832:	b2db      	uxtb	r3, r3
 800b834:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	7b1b      	ldrb	r3, [r3, #12]
 800b840:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	7b5b      	ldrb	r3, [r3, #13]
 800b846:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b848:	7cfb      	ldrb	r3, [r7, #19]
 800b84a:	b29a      	uxth	r2, r3
 800b84c:	f107 0308 	add.w	r3, r7, #8
 800b850:	4619      	mov	r1, r3
 800b852:	208b      	movs	r0, #139	@ 0x8b
 800b854:	f000 fa08 	bl	800bc68 <SUBGRF_WriteCommand>
        break;
 800b858:	e000      	b.n	800b85c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800b85a:	bf00      	nop
    }
}
 800b85c:	bf00      	nop
 800b85e:	3718      	adds	r7, #24
 800b860:	46bd      	mov	sp, r7
 800b862:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b866:	bf00      	nop
 800b868:	0800db00 	.word	0x0800db00
 800b86c:	200003bd 	.word	0x200003bd
 800b870:	3d090000 	.word	0x3d090000
 800b874:	01e84800 	.word	0x01e84800

0800b878 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b086      	sub	sp, #24
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800b880:	2300      	movs	r3, #0
 800b882:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800b884:	4a48      	ldr	r2, [pc, #288]	@ (800b9a8 <SUBGRF_SetPacketParams+0x130>)
 800b886:	f107 030c 	add.w	r3, r7, #12
 800b88a:	ca07      	ldmia	r2, {r0, r1, r2}
 800b88c:	c303      	stmia	r3!, {r0, r1}
 800b88e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	781a      	ldrb	r2, [r3, #0]
 800b894:	4b45      	ldr	r3, [pc, #276]	@ (800b9ac <SUBGRF_SetPacketParams+0x134>)
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	429a      	cmp	r2, r3
 800b89a:	d004      	beq.n	800b8a6 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7ff fe23 	bl	800b4ec <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	2b03      	cmp	r3, #3
 800b8ac:	d878      	bhi.n	800b9a0 <SUBGRF_SetPacketParams+0x128>
 800b8ae:	a201      	add	r2, pc, #4	@ (adr r2, 800b8b4 <SUBGRF_SetPacketParams+0x3c>)
 800b8b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8b4:	0800b8c5 	.word	0x0800b8c5
 800b8b8:	0800b955 	.word	0x0800b955
 800b8bc:	0800b949 	.word	0x0800b949
 800b8c0:	0800b8c5 	.word	0x0800b8c5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	7a5b      	ldrb	r3, [r3, #9]
 800b8c8:	2bf1      	cmp	r3, #241	@ 0xf1
 800b8ca:	d10a      	bne.n	800b8e2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800b8cc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800b8d0:	f7ff faaa 	bl	800ae28 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800b8d4:	f248 0005 	movw	r0, #32773	@ 0x8005
 800b8d8:	f7ff fac6 	bl	800ae68 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800b8dc:	2302      	movs	r3, #2
 800b8de:	75bb      	strb	r3, [r7, #22]
 800b8e0:	e011      	b.n	800b906 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	7a5b      	ldrb	r3, [r3, #9]
 800b8e6:	2bf2      	cmp	r3, #242	@ 0xf2
 800b8e8:	d10a      	bne.n	800b900 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800b8ea:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 800b8ee:	f7ff fa9b 	bl	800ae28 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800b8f2:	f241 0021 	movw	r0, #4129	@ 0x1021
 800b8f6:	f7ff fab7 	bl	800ae68 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800b8fa:	2306      	movs	r3, #6
 800b8fc:	75bb      	strb	r3, [r7, #22]
 800b8fe:	e002      	b.n	800b906 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	7a5b      	ldrb	r3, [r3, #9]
 800b904:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800b906:	2309      	movs	r3, #9
 800b908:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	885b      	ldrh	r3, [r3, #2]
 800b90e:	0a1b      	lsrs	r3, r3, #8
 800b910:	b29b      	uxth	r3, r3
 800b912:	b2db      	uxtb	r3, r3
 800b914:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	885b      	ldrh	r3, [r3, #2]
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	791b      	ldrb	r3, [r3, #4]
 800b922:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	795b      	ldrb	r3, [r3, #5]
 800b928:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	799b      	ldrb	r3, [r3, #6]
 800b92e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	79db      	ldrb	r3, [r3, #7]
 800b934:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	7a1b      	ldrb	r3, [r3, #8]
 800b93a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800b93c:	7dbb      	ldrb	r3, [r7, #22]
 800b93e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	7a9b      	ldrb	r3, [r3, #10]
 800b944:	753b      	strb	r3, [r7, #20]
        break;
 800b946:	e022      	b.n	800b98e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800b948:	2301      	movs	r3, #1
 800b94a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	7b1b      	ldrb	r3, [r3, #12]
 800b950:	733b      	strb	r3, [r7, #12]
        break;
 800b952:	e01c      	b.n	800b98e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800b954:	2306      	movs	r3, #6
 800b956:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	89db      	ldrh	r3, [r3, #14]
 800b95c:	0a1b      	lsrs	r3, r3, #8
 800b95e:	b29b      	uxth	r3, r3
 800b960:	b2db      	uxtb	r3, r3
 800b962:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	89db      	ldrh	r3, [r3, #14]
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	7c1a      	ldrb	r2, [r3, #16]
 800b970:	4b0f      	ldr	r3, [pc, #60]	@ (800b9b0 <SUBGRF_SetPacketParams+0x138>)
 800b972:	4611      	mov	r1, r2
 800b974:	7019      	strb	r1, [r3, #0]
 800b976:	4613      	mov	r3, r2
 800b978:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	7c5b      	ldrb	r3, [r3, #17]
 800b97e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	7c9b      	ldrb	r3, [r3, #18]
 800b984:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	7cdb      	ldrb	r3, [r3, #19]
 800b98a:	747b      	strb	r3, [r7, #17]
        break;
 800b98c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800b98e:	7dfb      	ldrb	r3, [r7, #23]
 800b990:	b29a      	uxth	r2, r3
 800b992:	f107 030c 	add.w	r3, r7, #12
 800b996:	4619      	mov	r1, r3
 800b998:	208c      	movs	r0, #140	@ 0x8c
 800b99a:	f000 f965 	bl	800bc68 <SUBGRF_WriteCommand>
 800b99e:	e000      	b.n	800b9a2 <SUBGRF_SetPacketParams+0x12a>
        return;
 800b9a0:	bf00      	nop
}
 800b9a2:	3718      	adds	r7, #24
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	0800db08 	.word	0x0800db08
 800b9ac:	200003bd 	.word	0x200003bd
 800b9b0:	200003be 	.word	0x200003be

0800b9b4 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b084      	sub	sp, #16
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	460a      	mov	r2, r1
 800b9be:	71fb      	strb	r3, [r7, #7]
 800b9c0:	4613      	mov	r3, r2
 800b9c2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800b9c4:	79fb      	ldrb	r3, [r7, #7]
 800b9c6:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800b9c8:	79bb      	ldrb	r3, [r7, #6]
 800b9ca:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800b9cc:	f107 030c 	add.w	r3, r7, #12
 800b9d0:	2202      	movs	r2, #2
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	208f      	movs	r0, #143	@ 0x8f
 800b9d6:	f000 f947 	bl	800bc68 <SUBGRF_WriteCommand>
}
 800b9da:	bf00      	nop
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b082      	sub	sp, #8
 800b9e6:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800b9ec:	1d3b      	adds	r3, r7, #4
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	2015      	movs	r0, #21
 800b9f4:	f000 f95a 	bl	800bcac <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800b9f8:	793b      	ldrb	r3, [r7, #4]
 800b9fa:	425b      	negs	r3, r3
 800b9fc:	105b      	asrs	r3, r3, #1
 800b9fe:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800ba00:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3708      	adds	r7, #8
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b084      	sub	sp, #16
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800ba16:	f107 030c 	add.w	r3, r7, #12
 800ba1a:	2202      	movs	r2, #2
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	2013      	movs	r0, #19
 800ba20:	f000 f944 	bl	800bcac <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800ba24:	f7ff fd7e 	bl	800b524 <SUBGRF_GetPacketType>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d10d      	bne.n	800ba4a <SUBGRF_GetRxBufferStatus+0x3e>
 800ba2e:	4b0c      	ldr	r3, [pc, #48]	@ (800ba60 <SUBGRF_GetRxBufferStatus+0x54>)
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d108      	bne.n	800ba4a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800ba38:	f240 7002 	movw	r0, #1794	@ 0x702
 800ba3c:	f000 f878 	bl	800bb30 <SUBGRF_ReadRegister>
 800ba40:	4603      	mov	r3, r0
 800ba42:	461a      	mov	r2, r3
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	701a      	strb	r2, [r3, #0]
 800ba48:	e002      	b.n	800ba50 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800ba4a:	7b3a      	ldrb	r2, [r7, #12]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800ba50:	7b7a      	ldrb	r2, [r7, #13]
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	701a      	strb	r2, [r3, #0]
}
 800ba56:	bf00      	nop
 800ba58:	3710      	adds	r7, #16
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	200003be 	.word	0x200003be

0800ba64 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800ba6c:	f107 030c 	add.w	r3, r7, #12
 800ba70:	2203      	movs	r2, #3
 800ba72:	4619      	mov	r1, r3
 800ba74:	2014      	movs	r0, #20
 800ba76:	f000 f919 	bl	800bcac <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800ba7a:	f7ff fd53 	bl	800b524 <SUBGRF_GetPacketType>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	461a      	mov	r2, r3
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d002      	beq.n	800ba94 <SUBGRF_GetPacketStatus+0x30>
 800ba8e:	2b01      	cmp	r3, #1
 800ba90:	d013      	beq.n	800baba <SUBGRF_GetPacketStatus+0x56>
 800ba92:	e02a      	b.n	800baea <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800ba94:	7b3a      	ldrb	r2, [r7, #12]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800ba9a:	7b7b      	ldrb	r3, [r7, #13]
 800ba9c:	425b      	negs	r3, r3
 800ba9e:	105b      	asrs	r3, r3, #1
 800baa0:	b25a      	sxtb	r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800baa6:	7bbb      	ldrb	r3, [r7, #14]
 800baa8:	425b      	negs	r3, r3
 800baaa:	105b      	asrs	r3, r3, #1
 800baac:	b25a      	sxtb	r2, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2200      	movs	r2, #0
 800bab6:	609a      	str	r2, [r3, #8]
            break;
 800bab8:	e020      	b.n	800bafc <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800baba:	7b3b      	ldrb	r3, [r7, #12]
 800babc:	425b      	negs	r3, r3
 800babe:	105b      	asrs	r3, r3, #1
 800bac0:	b25a      	sxtb	r2, r3
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800bac6:	7b7b      	ldrb	r3, [r7, #13]
 800bac8:	b25b      	sxtb	r3, r3
 800baca:	3302      	adds	r3, #2
 800bacc:	109b      	asrs	r3, r3, #2
 800bace:	b25a      	sxtb	r2, r3
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800bad4:	7bbb      	ldrb	r3, [r7, #14]
 800bad6:	425b      	negs	r3, r3
 800bad8:	105b      	asrs	r3, r3, #1
 800bada:	b25a      	sxtb	r2, r3
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800bae0:	4b08      	ldr	r3, [pc, #32]	@ (800bb04 <SUBGRF_GetPacketStatus+0xa0>)
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	611a      	str	r2, [r3, #16]
            break;
 800bae8:	e008      	b.n	800bafc <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800baea:	2214      	movs	r2, #20
 800baec:	2100      	movs	r1, #0
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 ffbd 	bl	800ca6e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	220f      	movs	r2, #15
 800baf8:	701a      	strb	r2, [r3, #0]
            break;
 800bafa:	bf00      	nop
    }
}
 800bafc:	bf00      	nop
 800bafe:	3710      	adds	r7, #16
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	200003c0 	.word	0x200003c0

0800bb08 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	4603      	mov	r3, r0
 800bb10:	460a      	mov	r2, r1
 800bb12:	80fb      	strh	r3, [r7, #6]
 800bb14:	4613      	mov	r3, r2
 800bb16:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800bb18:	1d7a      	adds	r2, r7, #5
 800bb1a:	88f9      	ldrh	r1, [r7, #6]
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	4803      	ldr	r0, [pc, #12]	@ (800bb2c <SUBGRF_WriteRegister+0x24>)
 800bb20:	f7fa fb16 	bl	8006150 <HAL_SUBGHZ_WriteRegisters>
}
 800bb24:	bf00      	nop
 800bb26:	3708      	adds	r7, #8
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}
 800bb2c:	20000114 	.word	0x20000114

0800bb30 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	4603      	mov	r3, r0
 800bb38:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800bb3a:	f107 020f 	add.w	r2, r7, #15
 800bb3e:	88f9      	ldrh	r1, [r7, #6]
 800bb40:	2301      	movs	r3, #1
 800bb42:	4804      	ldr	r0, [pc, #16]	@ (800bb54 <SUBGRF_ReadRegister+0x24>)
 800bb44:	f7fa fb63 	bl	800620e <HAL_SUBGHZ_ReadRegisters>
    return data;
 800bb48:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3710      	adds	r7, #16
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	20000114 	.word	0x20000114

0800bb58 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b086      	sub	sp, #24
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	4603      	mov	r3, r0
 800bb60:	6039      	str	r1, [r7, #0]
 800bb62:	80fb      	strh	r3, [r7, #6]
 800bb64:	4613      	mov	r3, r2
 800bb66:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb68:	f3ef 8310 	mrs	r3, PRIMASK
 800bb6c:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800bb70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bb72:	b672      	cpsid	i
}
 800bb74:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800bb76:	88bb      	ldrh	r3, [r7, #4]
 800bb78:	88f9      	ldrh	r1, [r7, #6]
 800bb7a:	683a      	ldr	r2, [r7, #0]
 800bb7c:	4806      	ldr	r0, [pc, #24]	@ (800bb98 <SUBGRF_WriteRegisters+0x40>)
 800bb7e:	f7fa fae7 	bl	8006150 <HAL_SUBGHZ_WriteRegisters>
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	f383 8810 	msr	PRIMASK, r3
}
 800bb8c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800bb8e:	bf00      	nop
 800bb90:	3718      	adds	r7, #24
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	20000114 	.word	0x20000114

0800bb9c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b086      	sub	sp, #24
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	4603      	mov	r3, r0
 800bba4:	6039      	str	r1, [r7, #0]
 800bba6:	80fb      	strh	r3, [r7, #6]
 800bba8:	4613      	mov	r3, r2
 800bbaa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bbac:	f3ef 8310 	mrs	r3, PRIMASK
 800bbb0:	60fb      	str	r3, [r7, #12]
  return(result);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800bbb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bbb6:	b672      	cpsid	i
}
 800bbb8:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800bbba:	88bb      	ldrh	r3, [r7, #4]
 800bbbc:	88f9      	ldrh	r1, [r7, #6]
 800bbbe:	683a      	ldr	r2, [r7, #0]
 800bbc0:	4806      	ldr	r0, [pc, #24]	@ (800bbdc <SUBGRF_ReadRegisters+0x40>)
 800bbc2:	f7fa fb24 	bl	800620e <HAL_SUBGHZ_ReadRegisters>
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	f383 8810 	msr	PRIMASK, r3
}
 800bbd0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800bbd2:	bf00      	nop
 800bbd4:	3718      	adds	r7, #24
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	bf00      	nop
 800bbdc:	20000114 	.word	0x20000114

0800bbe0 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b086      	sub	sp, #24
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	6039      	str	r1, [r7, #0]
 800bbea:	71fb      	strb	r3, [r7, #7]
 800bbec:	4613      	mov	r3, r2
 800bbee:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bbf0:	f3ef 8310 	mrs	r3, PRIMASK
 800bbf4:	60fb      	str	r3, [r7, #12]
  return(result);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800bbf8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bbfa:	b672      	cpsid	i
}
 800bbfc:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800bbfe:	79bb      	ldrb	r3, [r7, #6]
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	79f9      	ldrb	r1, [r7, #7]
 800bc04:	683a      	ldr	r2, [r7, #0]
 800bc06:	4806      	ldr	r0, [pc, #24]	@ (800bc20 <SUBGRF_WriteBuffer+0x40>)
 800bc08:	f7fa fc15 	bl	8006436 <HAL_SUBGHZ_WriteBuffer>
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	f383 8810 	msr	PRIMASK, r3
}
 800bc16:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800bc18:	bf00      	nop
 800bc1a:	3718      	adds	r7, #24
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	20000114 	.word	0x20000114

0800bc24 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b086      	sub	sp, #24
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	6039      	str	r1, [r7, #0]
 800bc2e:	71fb      	strb	r3, [r7, #7]
 800bc30:	4613      	mov	r3, r2
 800bc32:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc34:	f3ef 8310 	mrs	r3, PRIMASK
 800bc38:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc3a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800bc3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc3e:	b672      	cpsid	i
}
 800bc40:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800bc42:	79bb      	ldrb	r3, [r7, #6]
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	79f9      	ldrb	r1, [r7, #7]
 800bc48:	683a      	ldr	r2, [r7, #0]
 800bc4a:	4806      	ldr	r0, [pc, #24]	@ (800bc64 <SUBGRF_ReadBuffer+0x40>)
 800bc4c:	f7fa fc46 	bl	80064dc <HAL_SUBGHZ_ReadBuffer>
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	f383 8810 	msr	PRIMASK, r3
}
 800bc5a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800bc5c:	bf00      	nop
 800bc5e:	3718      	adds	r7, #24
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}
 800bc64:	20000114 	.word	0x20000114

0800bc68 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b086      	sub	sp, #24
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	4603      	mov	r3, r0
 800bc70:	6039      	str	r1, [r7, #0]
 800bc72:	71fb      	strb	r3, [r7, #7]
 800bc74:	4613      	mov	r3, r2
 800bc76:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc78:	f3ef 8310 	mrs	r3, PRIMASK
 800bc7c:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800bc80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc82:	b672      	cpsid	i
}
 800bc84:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800bc86:	88bb      	ldrh	r3, [r7, #4]
 800bc88:	79f9      	ldrb	r1, [r7, #7]
 800bc8a:	683a      	ldr	r2, [r7, #0]
 800bc8c:	4806      	ldr	r0, [pc, #24]	@ (800bca8 <SUBGRF_WriteCommand+0x40>)
 800bc8e:	f7fa fb1f 	bl	80062d0 <HAL_SUBGHZ_ExecSetCmd>
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	f383 8810 	msr	PRIMASK, r3
}
 800bc9c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800bc9e:	bf00      	nop
 800bca0:	3718      	adds	r7, #24
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	20000114 	.word	0x20000114

0800bcac <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b086      	sub	sp, #24
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	6039      	str	r1, [r7, #0]
 800bcb6:	71fb      	strb	r3, [r7, #7]
 800bcb8:	4613      	mov	r3, r2
 800bcba:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bcbc:	f3ef 8310 	mrs	r3, PRIMASK
 800bcc0:	60fb      	str	r3, [r7, #12]
  return(result);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800bcc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bcc6:	b672      	cpsid	i
}
 800bcc8:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800bcca:	88bb      	ldrh	r3, [r7, #4]
 800bccc:	79f9      	ldrb	r1, [r7, #7]
 800bcce:	683a      	ldr	r2, [r7, #0]
 800bcd0:	4806      	ldr	r0, [pc, #24]	@ (800bcec <SUBGRF_ReadCommand+0x40>)
 800bcd2:	f7fa fb5c 	bl	800638e <HAL_SUBGHZ_ExecGetCmd>
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	f383 8810 	msr	PRIMASK, r3
}
 800bce0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800bce2:	bf00      	nop
 800bce4:	3718      	adds	r7, #24
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	20000114 	.word	0x20000114

0800bcf0 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	460a      	mov	r2, r1
 800bcfa:	71fb      	strb	r3, [r7, #7]
 800bcfc:	4613      	mov	r3, r2
 800bcfe:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800bd00:	2301      	movs	r3, #1
 800bd02:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800bd04:	79bb      	ldrb	r3, [r7, #6]
 800bd06:	2b01      	cmp	r3, #1
 800bd08:	d10d      	bne.n	800bd26 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800bd0a:	79fb      	ldrb	r3, [r7, #7]
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d104      	bne.n	800bd1a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800bd10:	2302      	movs	r3, #2
 800bd12:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800bd14:	2004      	movs	r0, #4
 800bd16:	f000 f8ef 	bl	800bef8 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800bd1a:	79fb      	ldrb	r3, [r7, #7]
 800bd1c:	2b02      	cmp	r3, #2
 800bd1e:	d107      	bne.n	800bd30 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800bd20:	2303      	movs	r3, #3
 800bd22:	73fb      	strb	r3, [r7, #15]
 800bd24:	e004      	b.n	800bd30 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800bd26:	79bb      	ldrb	r3, [r7, #6]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d101      	bne.n	800bd30 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800bd30:	7bfb      	ldrb	r3, [r7, #15]
 800bd32:	4618      	mov	r0, r3
 800bd34:	f000 faff 	bl	800c336 <RBI_ConfigRFSwitch>
}
 800bd38:	bf00      	nop
 800bd3a:	3710      	adds	r7, #16
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	4603      	mov	r3, r0
 800bd48:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800bd4e:	f000 faff 	bl	800c350 <RBI_GetTxConfig>
 800bd52:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	2b02      	cmp	r3, #2
 800bd58:	d016      	beq.n	800bd88 <SUBGRF_SetRfTxPower+0x48>
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	2b02      	cmp	r3, #2
 800bd5e:	dc16      	bgt.n	800bd8e <SUBGRF_SetRfTxPower+0x4e>
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d003      	beq.n	800bd6e <SUBGRF_SetRfTxPower+0x2e>
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d00a      	beq.n	800bd82 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800bd6c:	e00f      	b.n	800bd8e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800bd6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd72:	2b0f      	cmp	r3, #15
 800bd74:	dd02      	ble.n	800bd7c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800bd76:	2302      	movs	r3, #2
 800bd78:	73fb      	strb	r3, [r7, #15]
            break;
 800bd7a:	e009      	b.n	800bd90 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	73fb      	strb	r3, [r7, #15]
            break;
 800bd80:	e006      	b.n	800bd90 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800bd82:	2301      	movs	r3, #1
 800bd84:	73fb      	strb	r3, [r7, #15]
            break;
 800bd86:	e003      	b.n	800bd90 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800bd88:	2302      	movs	r3, #2
 800bd8a:	73fb      	strb	r3, [r7, #15]
            break;
 800bd8c:	e000      	b.n	800bd90 <SUBGRF_SetRfTxPower+0x50>
            break;
 800bd8e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800bd90:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800bd94:	7bfb      	ldrb	r3, [r7, #15]
 800bd96:	2202      	movs	r2, #2
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7ff fbcd 	bl	800b538 <SUBGRF_SetTxParams>

    return paSelect;
 800bd9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3710      	adds	r7, #16
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800bda8:	b480      	push	{r7}
 800bdaa:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800bdac:	2301      	movs	r3, #1
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bc80      	pop	{r7}
 800bdb4:	4770      	bx	lr
	...

0800bdb8 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800bdc0:	4b03      	ldr	r3, [pc, #12]	@ (800bdd0 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	2001      	movs	r0, #1
 800bdc6:	4798      	blx	r3
}
 800bdc8:	bf00      	nop
 800bdca:	3708      	adds	r7, #8
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}
 800bdd0:	200003c8 	.word	0x200003c8

0800bdd4 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800bddc:	4b03      	ldr	r3, [pc, #12]	@ (800bdec <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	2002      	movs	r0, #2
 800bde2:	4798      	blx	r3
}
 800bde4:	bf00      	nop
 800bde6:	3708      	adds	r7, #8
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}
 800bdec:	200003c8 	.word	0x200003c8

0800bdf0 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800bdf8:	4b03      	ldr	r3, [pc, #12]	@ (800be08 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2040      	movs	r0, #64	@ 0x40
 800bdfe:	4798      	blx	r3
}
 800be00:	bf00      	nop
 800be02:	3708      	adds	r7, #8
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}
 800be08:	200003c8 	.word	0x200003c8

0800be0c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	460b      	mov	r3, r1
 800be16:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800be18:	78fb      	ldrb	r3, [r7, #3]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d002      	beq.n	800be24 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d005      	beq.n	800be2e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800be22:	e00a      	b.n	800be3a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800be24:	4b07      	ldr	r3, [pc, #28]	@ (800be44 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2080      	movs	r0, #128	@ 0x80
 800be2a:	4798      	blx	r3
            break;
 800be2c:	e005      	b.n	800be3a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800be2e:	4b05      	ldr	r3, [pc, #20]	@ (800be44 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800be36:	4798      	blx	r3
            break;
 800be38:	bf00      	nop
    }
}
 800be3a:	bf00      	nop
 800be3c:	3708      	adds	r7, #8
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	200003c8 	.word	0x200003c8

0800be48 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800be50:	4b04      	ldr	r3, [pc, #16]	@ (800be64 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800be58:	4798      	blx	r3
}
 800be5a:	bf00      	nop
 800be5c:	3708      	adds	r7, #8
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	200003c8 	.word	0x200003c8

0800be68 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800be70:	4b03      	ldr	r3, [pc, #12]	@ (800be80 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	2020      	movs	r0, #32
 800be76:	4798      	blx	r3
}
 800be78:	bf00      	nop
 800be7a:	3708      	adds	r7, #8
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	200003c8 	.word	0x200003c8

0800be84 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800be8c:	4b03      	ldr	r3, [pc, #12]	@ (800be9c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	2004      	movs	r0, #4
 800be92:	4798      	blx	r3
}
 800be94:	bf00      	nop
 800be96:	3708      	adds	r7, #8
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}
 800be9c:	200003c8 	.word	0x200003c8

0800bea0 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800bea8:	4b03      	ldr	r3, [pc, #12]	@ (800beb8 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	2008      	movs	r0, #8
 800beae:	4798      	blx	r3
}
 800beb0:	bf00      	nop
 800beb2:	3708      	adds	r7, #8
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}
 800beb8:	200003c8 	.word	0x200003c8

0800bebc <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800bec4:	4b03      	ldr	r3, [pc, #12]	@ (800bed4 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	2010      	movs	r0, #16
 800beca:	4798      	blx	r3
}
 800becc:	bf00      	nop
 800bece:	3708      	adds	r7, #8
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}
 800bed4:	200003c8 	.word	0x200003c8

0800bed8 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800bee0:	4b04      	ldr	r3, [pc, #16]	@ (800bef4 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800bee8:	4798      	blx	r3
}
 800beea:	bf00      	nop
 800beec:	3708      	adds	r7, #8
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	200003c8 	.word	0x200003c8

0800bef8 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b084      	sub	sp, #16
 800befc:	af00      	add	r7, sp, #0
 800befe:	4603      	mov	r3, r0
 800bf00:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800bf02:	f000 fa3b 	bl	800c37c <RBI_IsDCDC>
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d112      	bne.n	800bf32 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800bf0c:	f640 1023 	movw	r0, #2339	@ 0x923
 800bf10:	f7ff fe0e 	bl	800bb30 <SUBGRF_ReadRegister>
 800bf14:	4603      	mov	r3, r0
 800bf16:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800bf18:	7bfb      	ldrb	r3, [r7, #15]
 800bf1a:	f023 0306 	bic.w	r3, r3, #6
 800bf1e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800bf20:	7bfa      	ldrb	r2, [r7, #15]
 800bf22:	79fb      	ldrb	r3, [r7, #7]
 800bf24:	4313      	orrs	r3, r2
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	4619      	mov	r1, r3
 800bf2a:	f640 1023 	movw	r0, #2339	@ 0x923
 800bf2e:	f7ff fdeb 	bl	800bb08 <SUBGRF_WriteRegister>
  }
}
 800bf32:	bf00      	nop
 800bf34:	3710      	adds	r7, #16
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
	...

0800bf3c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b085      	sub	sp, #20
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d101      	bne.n	800bf4e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800bf4a:	231f      	movs	r3, #31
 800bf4c:	e017      	b.n	800bf7e <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800bf4e:	2300      	movs	r3, #0
 800bf50:	73fb      	strb	r3, [r7, #15]
 800bf52:	e00f      	b.n	800bf74 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800bf54:	7bfb      	ldrb	r3, [r7, #15]
 800bf56:	4a0c      	ldr	r2, [pc, #48]	@ (800bf88 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800bf58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d205      	bcs.n	800bf6e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800bf62:	7bfb      	ldrb	r3, [r7, #15]
 800bf64:	4a08      	ldr	r2, [pc, #32]	@ (800bf88 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800bf66:	00db      	lsls	r3, r3, #3
 800bf68:	4413      	add	r3, r2
 800bf6a:	791b      	ldrb	r3, [r3, #4]
 800bf6c:	e007      	b.n	800bf7e <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800bf6e:	7bfb      	ldrb	r3, [r7, #15]
 800bf70:	3301      	adds	r3, #1
 800bf72:	73fb      	strb	r3, [r7, #15]
 800bf74:	7bfb      	ldrb	r3, [r7, #15]
 800bf76:	2b15      	cmp	r3, #21
 800bf78:	d9ec      	bls.n	800bf54 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800bf7a:	bf00      	nop
 800bf7c:	e7fd      	b.n	800bf7a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3714      	adds	r7, #20
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bc80      	pop	{r7}
 800bf86:	4770      	bx	lr
 800bf88:	0800dd2c 	.word	0x0800dd2c

0800bf8c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b08a      	sub	sp, #40	@ 0x28
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800bf96:	4b35      	ldr	r3, [pc, #212]	@ (800c06c <SUBGRF_GetCFO+0xe0>)
 800bf98:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800bf9a:	f640 0007 	movw	r0, #2055	@ 0x807
 800bf9e:	f7ff fdc7 	bl	800bb30 <SUBGRF_ReadRegister>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800bfa6:	7ffb      	ldrb	r3, [r7, #31]
 800bfa8:	08db      	lsrs	r3, r3, #3
 800bfaa:	b2db      	uxtb	r3, r3
 800bfac:	f003 0303 	and.w	r3, r3, #3
 800bfb0:	3328      	adds	r3, #40	@ 0x28
 800bfb2:	443b      	add	r3, r7
 800bfb4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800bfb8:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800bfba:	7ffb      	ldrb	r3, [r7, #31]
 800bfbc:	f003 0307 	and.w	r3, r3, #7
 800bfc0:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800bfc2:	7fba      	ldrb	r2, [r7, #30]
 800bfc4:	7f7b      	ldrb	r3, [r7, #29]
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	fa02 f303 	lsl.w	r3, r2, r3
 800bfcc:	461a      	mov	r2, r3
 800bfce:	4b28      	ldr	r3, [pc, #160]	@ (800c070 <SUBGRF_GetCFO+0xe4>)
 800bfd0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bfd4:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800bfd6:	69ba      	ldr	r2, [r7, #24]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfde:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800bfe6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfea:	697a      	ldr	r2, [r7, #20]
 800bfec:	fb02 f303 	mul.w	r3, r2, r3
 800bff0:	2b07      	cmp	r3, #7
 800bff2:	d802      	bhi.n	800bffa <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800bff4:	2302      	movs	r3, #2
 800bff6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 800bffa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bffe:	697a      	ldr	r2, [r7, #20]
 800c000:	fb02 f303 	mul.w	r3, r2, r3
 800c004:	2b03      	cmp	r3, #3
 800c006:	d802      	bhi.n	800c00e <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800c008:	2304      	movs	r3, #4
 800c00a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800c00e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c012:	69bb      	ldr	r3, [r7, #24]
 800c014:	fb02 f303 	mul.w	r3, r2, r3
 800c018:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800c01a:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 800c01e:	f7ff fd87 	bl	800bb30 <SUBGRF_ReadRegister>
 800c022:	4603      	mov	r3, r0
 800c024:	021b      	lsls	r3, r3, #8
 800c026:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800c02a:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800c02c:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 800c030:	f7ff fd7e 	bl	800bb30 <SUBGRF_ReadRegister>
 800c034:	4603      	mov	r3, r0
 800c036:	461a      	mov	r2, r3
 800c038:	6a3b      	ldr	r3, [r7, #32]
 800c03a:	4313      	orrs	r3, r2
 800c03c:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800c03e:	6a3b      	ldr	r3, [r7, #32]
 800c040:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c044:	2b00      	cmp	r3, #0
 800c046:	d005      	beq.n	800c054 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800c048:	6a3b      	ldr	r3, [r7, #32]
 800c04a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800c04e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800c052:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	095b      	lsrs	r3, r3, #5
 800c058:	6a3a      	ldr	r2, [r7, #32]
 800c05a:	fb02 f303 	mul.w	r3, r2, r3
 800c05e:	11da      	asrs	r2, r3, #7
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	601a      	str	r2, [r3, #0]
}
 800c064:	bf00      	nop
 800c066:	3728      	adds	r7, #40	@ 0x28
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	0c0a0804 	.word	0x0c0a0804
 800c070:	01e84800 	.word	0x01e84800

0800c074 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800c074:	b480      	push	{r7}
 800c076:	b087      	sub	sp, #28
 800c078:	af00      	add	r7, sp, #0
 800c07a:	4603      	mov	r3, r0
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	607a      	str	r2, [r7, #4]
 800c080:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800c082:	2300      	movs	r3, #0
 800c084:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800c086:	f04f 33ff 	mov.w	r3, #4294967295
 800c08a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800c08c:	697b      	ldr	r3, [r7, #20]
}
 800c08e:	4618      	mov	r0, r3
 800c090:	371c      	adds	r7, #28
 800c092:	46bd      	mov	sp, r7
 800c094:	bc80      	pop	{r7}
 800c096:	4770      	bx	lr

0800c098 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800c098:	b480      	push	{r7}
 800c09a:	b087      	sub	sp, #28
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	4603      	mov	r3, r0
 800c0a0:	60b9      	str	r1, [r7, #8]
 800c0a2:	607a      	str	r2, [r7, #4]
 800c0a4:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800c0aa:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ae:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800c0b0:	697b      	ldr	r3, [r7, #20]
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	371c      	adds	r7, #28
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bc80      	pop	{r7}
 800c0ba:	4770      	bx	lr

0800c0bc <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b085      	sub	sp, #20
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	60b9      	str	r1, [r7, #8]
 800c0c6:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800c0c8:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3714      	adds	r7, #20
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bc80      	pop	{r7}
 800c0d4:	4770      	bx	lr

0800c0d6 <RFW_DeInit>:

void RFW_DeInit( void )
{
 800c0d6:	b480      	push	{r7}
 800c0d8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800c0da:	bf00      	nop
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bc80      	pop	{r7}
 800c0e0:	4770      	bx	lr

0800c0e2 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800c0e2:	b480      	push	{r7}
 800c0e4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800c0e6:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bc80      	pop	{r7}
 800c0ee:	4770      	bx	lr

0800c0f0 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800c0f4:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bc80      	pop	{r7}
 800c0fc:	4770      	bx	lr

0800c0fe <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800c0fe:	b480      	push	{r7}
 800c100:	b083      	sub	sp, #12
 800c102:	af00      	add	r7, sp, #0
 800c104:	4603      	mov	r3, r0
 800c106:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800c108:	bf00      	nop
 800c10a:	370c      	adds	r7, #12
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bc80      	pop	{r7}
 800c110:	4770      	bx	lr

0800c112 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800c112:	b480      	push	{r7}
 800c114:	b087      	sub	sp, #28
 800c116:	af00      	add	r7, sp, #0
 800c118:	60f8      	str	r0, [r7, #12]
 800c11a:	460b      	mov	r3, r1
 800c11c:	607a      	str	r2, [r7, #4]
 800c11e:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800c120:	f04f 33ff 	mov.w	r3, #4294967295
 800c124:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800c126:	697b      	ldr	r3, [r7, #20]
}
 800c128:	4618      	mov	r0, r3
 800c12a:	371c      	adds	r7, #28
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bc80      	pop	{r7}
 800c130:	4770      	bx	lr

0800c132 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800c132:	b480      	push	{r7}
 800c134:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800c136:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bc80      	pop	{r7}
 800c140:	4770      	bx	lr

0800c142 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800c142:	b480      	push	{r7}
 800c144:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800c146:	bf00      	nop
 800c148:	46bd      	mov	sp, r7
 800c14a:	bc80      	pop	{r7}
 800c14c:	4770      	bx	lr

0800c14e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800c14e:	b480      	push	{r7}
 800c150:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800c152:	bf00      	nop
 800c154:	46bd      	mov	sp, r7
 800c156:	bc80      	pop	{r7}
 800c158:	4770      	bx	lr

0800c15a <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800c15a:	b480      	push	{r7}
 800c15c:	b083      	sub	sp, #12
 800c15e:	af00      	add	r7, sp, #0
 800c160:	4603      	mov	r3, r0
 800c162:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800c164:	bf00      	nop
 800c166:	370c      	adds	r7, #12
 800c168:	46bd      	mov	sp, r7
 800c16a:	bc80      	pop	{r7}
 800c16c:	4770      	bx	lr

0800c16e <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800c16e:	b580      	push	{r7, lr}
 800c170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800c172:	f7f4 fdf3 	bl	8000d5c <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800c176:	f000 f80b 	bl	800c190 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800c17a:	bf00      	nop
 800c17c:	bd80      	pop	{r7, pc}

0800c17e <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800c17e:	b580      	push	{r7, lr}
 800c180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800c182:	f04f 30ff 	mov.w	r0, #4294967295
 800c186:	f000 fcd3 	bl	800cb30 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 800c18a:	bf00      	nop
 800c18c:	bd80      	pop	{r7, pc}
	...

0800c190 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800c190:	b590      	push	{r4, r7, lr}
 800c192:	b08b      	sub	sp, #44	@ 0x2c
 800c194:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800c196:	4b29      	ldr	r3, [pc, #164]	@ (800c23c <SubghzApp_Init+0xac>)
 800c198:	4a29      	ldr	r2, [pc, #164]	@ (800c240 <SubghzApp_Init+0xb0>)
 800c19a:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800c19c:	4b27      	ldr	r3, [pc, #156]	@ (800c23c <SubghzApp_Init+0xac>)
 800c19e:	4a29      	ldr	r2, [pc, #164]	@ (800c244 <SubghzApp_Init+0xb4>)
 800c1a0:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800c1a2:	4b26      	ldr	r3, [pc, #152]	@ (800c23c <SubghzApp_Init+0xac>)
 800c1a4:	4a28      	ldr	r2, [pc, #160]	@ (800c248 <SubghzApp_Init+0xb8>)
 800c1a6:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800c1a8:	4b24      	ldr	r3, [pc, #144]	@ (800c23c <SubghzApp_Init+0xac>)
 800c1aa:	4a28      	ldr	r2, [pc, #160]	@ (800c24c <SubghzApp_Init+0xbc>)
 800c1ac:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800c1ae:	4b23      	ldr	r3, [pc, #140]	@ (800c23c <SubghzApp_Init+0xac>)
 800c1b0:	4a27      	ldr	r2, [pc, #156]	@ (800c250 <SubghzApp_Init+0xc0>)
 800c1b2:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800c1b4:	4b27      	ldr	r3, [pc, #156]	@ (800c254 <SubghzApp_Init+0xc4>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4820      	ldr	r0, [pc, #128]	@ (800c23c <SubghzApp_Init+0xac>)
 800c1ba:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800c1bc:	4b25      	ldr	r3, [pc, #148]	@ (800c254 <SubghzApp_Init+0xc4>)
 800c1be:	69dc      	ldr	r4, [r3, #28]
 800c1c0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800c1c4:	9308      	str	r3, [sp, #32]
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	9307      	str	r3, [sp, #28]
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	9306      	str	r3, [sp, #24]
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	9305      	str	r3, [sp, #20]
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	9304      	str	r3, [sp, #16]
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	9303      	str	r3, [sp, #12]
 800c1da:	2308      	movs	r3, #8
 800c1dc:	9302      	str	r3, [sp, #8]
 800c1de:	2301      	movs	r3, #1
 800c1e0:	9301      	str	r3, [sp, #4]
 800c1e2:	2307      	movs	r3, #7
 800c1e4:	9300      	str	r3, [sp, #0]
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	2116      	movs	r1, #22
 800c1ec:	2001      	movs	r0, #1
 800c1ee:	47a0      	blx	r4
                      LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                      LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                      true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

  Radio.SetMaxPayloadLength(MODEM_LORA, BUFFER_SIZE);
 800c1f0:	4b18      	ldr	r3, [pc, #96]	@ (800c254 <SubghzApp_Init+0xc4>)
 800c1f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1f4:	2106      	movs	r1, #6
 800c1f6:	2001      	movs	r0, #1
 800c1f8:	4798      	blx	r3

  Radio.SetChannel(RF_FREQUENCY);
 800c1fa:	4b16      	ldr	r3, [pc, #88]	@ (800c254 <SubghzApp_Init+0xc4>)
 800c1fc:	68db      	ldr	r3, [r3, #12]
 800c1fe:	4816      	ldr	r0, [pc, #88]	@ (800c258 <SubghzApp_Init+0xc8>)
 800c200:	4798      	blx	r3

  HAL_Delay(Radio.GetWakeupTime() + TCXO_WORKAROUND_TIME_MARGIN);
 800c202:	4b14      	ldr	r3, [pc, #80]	@ (800c254 <SubghzApp_Init+0xc4>)
 800c204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c206:	4798      	blx	r3
 800c208:	4603      	mov	r3, r0
 800c20a:	3332      	adds	r3, #50	@ 0x32
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7f4 fe25 	bl	8000e5c <HAL_Delay>

  UTIL_TIMER_Create(&timerTransmit, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, TransmitPacket, NULL);
 800c212:	2300      	movs	r3, #0
 800c214:	9300      	str	r3, [sp, #0]
 800c216:	4b11      	ldr	r3, [pc, #68]	@ (800c25c <SubghzApp_Init+0xcc>)
 800c218:	2200      	movs	r2, #0
 800c21a:	f04f 31ff 	mov.w	r1, #4294967295
 800c21e:	4810      	ldr	r0, [pc, #64]	@ (800c260 <SubghzApp_Init+0xd0>)
 800c220:	f000 fe96 	bl	800cf50 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&timerTransmit, TRANSMIT_PERIOD_MS);
 800c224:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800c228:	480d      	ldr	r0, [pc, #52]	@ (800c260 <SubghzApp_Init+0xd0>)
 800c22a:	f000 ffa5 	bl	800d178 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&timerTransmit);  // start transmitting packets every 2s
 800c22e:	480c      	ldr	r0, [pc, #48]	@ (800c260 <SubghzApp_Init+0xd0>)
 800c230:	f000 fec4 	bl	800cfbc <UTIL_TIMER_Start>
  /* USER CODE END SubghzApp_Init_2 */
}
 800c234:	bf00      	nop
 800c236:	3704      	adds	r7, #4
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd90      	pop	{r4, r7, pc}
 800c23c:	200003e4 	.word	0x200003e4
 800c240:	0800c2c5 	.word	0x0800c2c5
 800c244:	0800c2d9 	.word	0x0800c2d9
 800c248:	0800c2fd 	.word	0x0800c2fd
 800c24c:	0800c309 	.word	0x0800c309
 800c250:	0800c315 	.word	0x0800c315
 800c254:	0800dc9c 	.word	0x0800dc9c
 800c258:	36884420 	.word	0x36884420
 800c25c:	0800c265 	.word	0x0800c265
 800c260:	200003cc 	.word	0x200003cc

0800c264 <TransmitPacket>:

/* USER CODE BEGIN EF */
static void TransmitPacket(void *context)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b084      	sub	sp, #16
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
	uint8_t i =0;
 800c26c:	2300      	movs	r3, #0
 800c26e:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<10;i++)
 800c270:	2300      	movs	r3, #0
 800c272:	73fb      	strb	r3, [r7, #15]
 800c274:	e009      	b.n	800c28a <TransmitPacket+0x26>
	{
		Buffer[i]++;
 800c276:	7bfb      	ldrb	r3, [r7, #15]
 800c278:	4a0d      	ldr	r2, [pc, #52]	@ (800c2b0 <TransmitPacket+0x4c>)
 800c27a:	5cd2      	ldrb	r2, [r2, r3]
 800c27c:	3201      	adds	r2, #1
 800c27e:	b2d1      	uxtb	r1, r2
 800c280:	4a0b      	ldr	r2, [pc, #44]	@ (800c2b0 <TransmitPacket+0x4c>)
 800c282:	54d1      	strb	r1, [r2, r3]
	for(i=0; i<10;i++)
 800c284:	7bfb      	ldrb	r3, [r7, #15]
 800c286:	3301      	adds	r3, #1
 800c288:	73fb      	strb	r3, [r7, #15]
 800c28a:	7bfb      	ldrb	r3, [r7, #15]
 800c28c:	2b09      	cmp	r3, #9
 800c28e:	d9f2      	bls.n	800c276 <TransmitPacket+0x12>
	}
	StatusTX = Radio.Send(RecievedData, bufferSize);
 800c290:	4b08      	ldr	r3, [pc, #32]	@ (800c2b4 <TransmitPacket+0x50>)
 800c292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c294:	4a08      	ldr	r2, [pc, #32]	@ (800c2b8 <TransmitPacket+0x54>)
 800c296:	7812      	ldrb	r2, [r2, #0]
 800c298:	4611      	mov	r1, r2
 800c29a:	4808      	ldr	r0, [pc, #32]	@ (800c2bc <TransmitPacket+0x58>)
 800c29c:	4798      	blx	r3
 800c29e:	4603      	mov	r3, r0
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	4b07      	ldr	r3, [pc, #28]	@ (800c2c0 <TransmitPacket+0x5c>)
 800c2a4:	701a      	strb	r2, [r3, #0]
}
 800c2a6:	bf00      	nop
 800c2a8:	3710      	adds	r7, #16
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	20000014 	.word	0x20000014
 800c2b4:	0800dc9c 	.word	0x0800dc9c
 800c2b8:	2000001e 	.word	0x2000001e
 800c2bc:	200000d0 	.word	0x200000d0
 800c2c0:	20000400 	.word	0x20000400

0800c2c4 <OnTxDone>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
	  UTIL_TIMER_Start(&timerTransmit);  //Transmit packet in 2s
 800c2c8:	4802      	ldr	r0, [pc, #8]	@ (800c2d4 <OnTxDone+0x10>)
 800c2ca:	f000 fe77 	bl	800cfbc <UTIL_TIMER_Start>
//		  itoa(Buffer[i],BuffCharSended,10);
//		  APP_LOG(TS_OFF, VLEVEL_L,  "Wyslane dane: %s \n\r", BuffCharSended);
//	  }

  /* USER CODE END OnTxDone */
}
 800c2ce:	bf00      	nop
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	200003cc 	.word	0x200003cc

0800c2d8 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b085      	sub	sp, #20
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	4608      	mov	r0, r1
 800c2e2:	4611      	mov	r1, r2
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	817b      	strh	r3, [r7, #10]
 800c2ea:	460b      	mov	r3, r1
 800c2ec:	813b      	strh	r3, [r7, #8]
 800c2ee:	4613      	mov	r3, r2
 800c2f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 800c2f2:	bf00      	nop
 800c2f4:	3714      	adds	r7, #20
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bc80      	pop	{r7}
 800c2fa:	4770      	bx	lr

0800c2fc <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 800c300:	bf00      	nop
 800c302:	46bd      	mov	sp, r7
 800c304:	bc80      	pop	{r7}
 800c306:	4770      	bx	lr

0800c308 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800c308:	b480      	push	{r7}
 800c30a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 800c30c:	bf00      	nop
 800c30e:	46bd      	mov	sp, r7
 800c310:	bc80      	pop	{r7}
 800c312:	4770      	bx	lr

0800c314 <OnRxError>:

static void OnRxError(void)
{
 800c314:	b480      	push	{r7}
 800c316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 800c318:	bf00      	nop
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bc80      	pop	{r7}
 800c31e:	4770      	bx	lr

0800c320 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800c320:	b480      	push	{r7}
 800c322:	b083      	sub	sp, #12
 800c324:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800c326:	2300      	movs	r3, #0
 800c328:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800c32a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	370c      	adds	r7, #12
 800c330:	46bd      	mov	sp, r7
 800c332:	bc80      	pop	{r7}
 800c334:	4770      	bx	lr

0800c336 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800c336:	b480      	push	{r7}
 800c338:	b085      	sub	sp, #20
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	4603      	mov	r3, r0
 800c33e:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800c340:	2300      	movs	r3, #0
 800c342:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800c344:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800c346:	4618      	mov	r0, r3
 800c348:	3714      	adds	r7, #20
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bc80      	pop	{r7}
 800c34e:	4770      	bx	lr

0800c350 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800c356:	2300      	movs	r3, #0
 800c358:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 800c35a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	370c      	adds	r7, #12
 800c360:	46bd      	mov	sp, r7
 800c362:	bc80      	pop	{r7}
 800c364:	4770      	bx	lr

0800c366 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800c366:	b480      	push	{r7}
 800c368:	b083      	sub	sp, #12
 800c36a:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800c36c:	2301      	movs	r3, #1
 800c36e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 800c370:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800c372:	4618      	mov	r0, r3
 800c374:	370c      	adds	r7, #12
 800c376:	46bd      	mov	sp, r7
 800c378:	bc80      	pop	{r7}
 800c37a:	4770      	bx	lr

0800c37c <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800c382:	2301      	movs	r3, #1
 800c384:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 800c386:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800c388:	4618      	mov	r0, r3
 800c38a:	370c      	adds	r7, #12
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bc80      	pop	{r7}
 800c390:	4770      	bx	lr

0800c392 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800c392:	b480      	push	{r7}
 800c394:	b085      	sub	sp, #20
 800c396:	af00      	add	r7, sp, #0
 800c398:	4603      	mov	r3, r0
 800c39a:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800c39c:	2300      	movs	r3, #0
 800c39e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 800c3a0:	79fb      	ldrb	r3, [r7, #7]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d102      	bne.n	800c3ac <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 800c3a6:	230f      	movs	r3, #15
 800c3a8:	60fb      	str	r3, [r7, #12]
 800c3aa:	e001      	b.n	800c3b0 <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 800c3ac:	2316      	movs	r3, #22
 800c3ae:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3714      	adds	r7, #20
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bc80      	pop	{r7}
 800c3ba:	4770      	bx	lr

0800c3bc <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800c3c0:	2218      	movs	r2, #24
 800c3c2:	2100      	movs	r1, #0
 800c3c4:	4807      	ldr	r0, [pc, #28]	@ (800c3e4 <UTIL_ADV_TRACE_Init+0x28>)
 800c3c6:	f000 fb52 	bl	800ca6e <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800c3ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c3ce:	2100      	movs	r1, #0
 800c3d0:	4805      	ldr	r0, [pc, #20]	@ (800c3e8 <UTIL_ADV_TRACE_Init+0x2c>)
 800c3d2:	f000 fb4c 	bl	800ca6e <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800c3d6:	4b05      	ldr	r3, [pc, #20]	@ (800c3ec <UTIL_ADV_TRACE_Init+0x30>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4805      	ldr	r0, [pc, #20]	@ (800c3f0 <UTIL_ADV_TRACE_Init+0x34>)
 800c3dc:	4798      	blx	r3
 800c3de:	4603      	mov	r3, r0
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	bd80      	pop	{r7, pc}
 800c3e4:	20000404 	.word	0x20000404
 800c3e8:	2000041c 	.word	0x2000041c
 800c3ec:	0800dc64 	.word	0x0800dc64
 800c3f0:	0800c639 	.word	0x0800c639

0800c3f4 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 800c3f4:	b408      	push	{r3}
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b08d      	sub	sp, #52	@ 0x34
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	60f8      	str	r0, [r7, #12]
 800c3fe:	60b9      	str	r1, [r7, #8]
 800c400:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 800c402:	2300      	movs	r3, #0
 800c404:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 800c406:	2300      	movs	r3, #0
 800c408:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800c40a:	4b37      	ldr	r3, [pc, #220]	@ (800c4e8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800c40c:	7a1b      	ldrb	r3, [r3, #8]
 800c40e:	461a      	mov	r2, r3
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	4293      	cmp	r3, r2
 800c414:	d902      	bls.n	800c41c <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 800c416:	f06f 0304 	mvn.w	r3, #4
 800c41a:	e05e      	b.n	800c4da <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800c41c:	4b32      	ldr	r3, [pc, #200]	@ (800c4e8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800c41e:	68da      	ldr	r2, [r3, #12]
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	4013      	ands	r3, r2
 800c424:	68ba      	ldr	r2, [r7, #8]
 800c426:	429a      	cmp	r2, r3
 800c428:	d002      	beq.n	800c430 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 800c42a:	f06f 0305 	mvn.w	r3, #5
 800c42e:	e054      	b.n	800c4da <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800c430:	4b2d      	ldr	r3, [pc, #180]	@ (800c4e8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d00a      	beq.n	800c44e <UTIL_ADV_TRACE_COND_FSend+0x5a>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d007      	beq.n	800c44e <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800c43e:	4b2a      	ldr	r3, [pc, #168]	@ (800c4e8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	f107 0116 	add.w	r1, r7, #22
 800c446:	f107 0218 	add.w	r2, r7, #24
 800c44a:	4610      	mov	r0, r2
 800c44c:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 800c44e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c452:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800c454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c456:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c458:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c45c:	4823      	ldr	r0, [pc, #140]	@ (800c4ec <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800c45e:	f001 f90b 	bl	800d678 <tiny_vsnprintf_like>
 800c462:	4603      	mov	r3, r0
 800c464:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 800c466:	f000 f9f1 	bl	800c84c <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800c46a:	8afa      	ldrh	r2, [r7, #22]
 800c46c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c46e:	4413      	add	r3, r2
 800c470:	b29b      	uxth	r3, r3
 800c472:	f107 0214 	add.w	r2, r7, #20
 800c476:	4611      	mov	r1, r2
 800c478:	4618      	mov	r0, r3
 800c47a:	f000 f969 	bl	800c750 <TRACE_AllocateBufer>
 800c47e:	4603      	mov	r3, r0
 800c480:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c484:	d025      	beq.n	800c4d2 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 800c486:	2300      	movs	r3, #0
 800c488:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c48a:	e00e      	b.n	800c4aa <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800c48c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c48e:	8aba      	ldrh	r2, [r7, #20]
 800c490:	3330      	adds	r3, #48	@ 0x30
 800c492:	443b      	add	r3, r7
 800c494:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800c498:	4b15      	ldr	r3, [pc, #84]	@ (800c4f0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800c49a:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 800c49c:	8abb      	ldrh	r3, [r7, #20]
 800c49e:	3301      	adds	r3, #1
 800c4a0:	b29b      	uxth	r3, r3
 800c4a2:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 800c4a4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c4aa:	8afb      	ldrh	r3, [r7, #22]
 800c4ac:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d3ec      	bcc.n	800c48c <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800c4b2:	8abb      	ldrh	r3, [r7, #20]
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	4b0e      	ldr	r3, [pc, #56]	@ (800c4f0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800c4b8:	18d0      	adds	r0, r2, r3
 800c4ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c4be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c4c2:	f001 f8d9 	bl	800d678 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 800c4c6:	f000 f9df 	bl	800c888 <TRACE_UnLock>

    return TRACE_Send();
 800c4ca:	f000 f831 	bl	800c530 <TRACE_Send>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	e003      	b.n	800c4da <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 800c4d2:	f000 f9d9 	bl	800c888 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 800c4d6:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3734      	adds	r7, #52	@ 0x34
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c4e4:	b001      	add	sp, #4
 800c4e6:	4770      	bx	lr
 800c4e8:	20000404 	.word	0x20000404
 800c4ec:	2000061c 	.word	0x2000061c
 800c4f0:	2000041c 	.word	0x2000041c

0800c4f4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800c4fc:	4a03      	ldr	r2, [pc, #12]	@ (800c50c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6053      	str	r3, [r2, #4]
}
 800c502:	bf00      	nop
 800c504:	370c      	adds	r7, #12
 800c506:	46bd      	mov	sp, r7
 800c508:	bc80      	pop	{r7}
 800c50a:	4770      	bx	lr
 800c50c:	20000404 	.word	0x20000404

0800c510 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
 800c516:	4603      	mov	r3, r0
 800c518:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800c51a:	4a04      	ldr	r2, [pc, #16]	@ (800c52c <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 800c51c:	79fb      	ldrb	r3, [r7, #7]
 800c51e:	7213      	strb	r3, [r2, #8]
}
 800c520:	bf00      	nop
 800c522:	370c      	adds	r7, #12
 800c524:	46bd      	mov	sp, r7
 800c526:	bc80      	pop	{r7}
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	20000404 	.word	0x20000404

0800c530 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b088      	sub	sp, #32
 800c534:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800c536:	2300      	movs	r3, #0
 800c538:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 800c53a:	2300      	movs	r3, #0
 800c53c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c53e:	f3ef 8310 	mrs	r3, PRIMASK
 800c542:	613b      	str	r3, [r7, #16]
  return(result);
 800c544:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c546:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c548:	b672      	cpsid	i
}
 800c54a:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 800c54c:	f000 f9ba 	bl	800c8c4 <TRACE_IsLocked>
 800c550:	4603      	mov	r3, r0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d15d      	bne.n	800c612 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 800c556:	f000 f979 	bl	800c84c <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800c55a:	4b34      	ldr	r3, [pc, #208]	@ (800c62c <TRACE_Send+0xfc>)
 800c55c:	8a1a      	ldrh	r2, [r3, #16]
 800c55e:	4b33      	ldr	r3, [pc, #204]	@ (800c62c <TRACE_Send+0xfc>)
 800c560:	8a5b      	ldrh	r3, [r3, #18]
 800c562:	429a      	cmp	r2, r3
 800c564:	d04d      	beq.n	800c602 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800c566:	4b31      	ldr	r3, [pc, #196]	@ (800c62c <TRACE_Send+0xfc>)
 800c568:	789b      	ldrb	r3, [r3, #2]
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d117      	bne.n	800c59e <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800c56e:	4b2f      	ldr	r3, [pc, #188]	@ (800c62c <TRACE_Send+0xfc>)
 800c570:	881a      	ldrh	r2, [r3, #0]
 800c572:	4b2e      	ldr	r3, [pc, #184]	@ (800c62c <TRACE_Send+0xfc>)
 800c574:	8a1b      	ldrh	r3, [r3, #16]
 800c576:	1ad3      	subs	r3, r2, r3
 800c578:	b29a      	uxth	r2, r3
 800c57a:	4b2c      	ldr	r3, [pc, #176]	@ (800c62c <TRACE_Send+0xfc>)
 800c57c:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800c57e:	4b2b      	ldr	r3, [pc, #172]	@ (800c62c <TRACE_Send+0xfc>)
 800c580:	2202      	movs	r2, #2
 800c582:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800c584:	4b29      	ldr	r3, [pc, #164]	@ (800c62c <TRACE_Send+0xfc>)
 800c586:	2200      	movs	r2, #0
 800c588:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800c58a:	4b28      	ldr	r3, [pc, #160]	@ (800c62c <TRACE_Send+0xfc>)
 800c58c:	8a9b      	ldrh	r3, [r3, #20]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d105      	bne.n	800c59e <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c592:	4b26      	ldr	r3, [pc, #152]	@ (800c62c <TRACE_Send+0xfc>)
 800c594:	2200      	movs	r2, #0
 800c596:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c598:	4b24      	ldr	r3, [pc, #144]	@ (800c62c <TRACE_Send+0xfc>)
 800c59a:	2200      	movs	r2, #0
 800c59c:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800c59e:	4b23      	ldr	r3, [pc, #140]	@ (800c62c <TRACE_Send+0xfc>)
 800c5a0:	789b      	ldrb	r3, [r3, #2]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d115      	bne.n	800c5d2 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c5a6:	4b21      	ldr	r3, [pc, #132]	@ (800c62c <TRACE_Send+0xfc>)
 800c5a8:	8a5a      	ldrh	r2, [r3, #18]
 800c5aa:	4b20      	ldr	r3, [pc, #128]	@ (800c62c <TRACE_Send+0xfc>)
 800c5ac:	8a1b      	ldrh	r3, [r3, #16]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d908      	bls.n	800c5c4 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800c5b2:	4b1e      	ldr	r3, [pc, #120]	@ (800c62c <TRACE_Send+0xfc>)
 800c5b4:	8a5a      	ldrh	r2, [r3, #18]
 800c5b6:	4b1d      	ldr	r3, [pc, #116]	@ (800c62c <TRACE_Send+0xfc>)
 800c5b8:	8a1b      	ldrh	r3, [r3, #16]
 800c5ba:	1ad3      	subs	r3, r2, r3
 800c5bc:	b29a      	uxth	r2, r3
 800c5be:	4b1b      	ldr	r3, [pc, #108]	@ (800c62c <TRACE_Send+0xfc>)
 800c5c0:	829a      	strh	r2, [r3, #20]
 800c5c2:	e006      	b.n	800c5d2 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800c5c4:	4b19      	ldr	r3, [pc, #100]	@ (800c62c <TRACE_Send+0xfc>)
 800c5c6:	8a1b      	ldrh	r3, [r3, #16]
 800c5c8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c5cc:	b29a      	uxth	r2, r3
 800c5ce:	4b17      	ldr	r3, [pc, #92]	@ (800c62c <TRACE_Send+0xfc>)
 800c5d0:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800c5d2:	4b16      	ldr	r3, [pc, #88]	@ (800c62c <TRACE_Send+0xfc>)
 800c5d4:	8a1b      	ldrh	r3, [r3, #16]
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	4b15      	ldr	r3, [pc, #84]	@ (800c630 <TRACE_Send+0x100>)
 800c5da:	4413      	add	r3, r2
 800c5dc:	61bb      	str	r3, [r7, #24]
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	f383 8810 	msr	PRIMASK, r3
}
 800c5e8:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 800c5ea:	f7f4 fbfd 	bl	8000de8 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800c5ee:	4b11      	ldr	r3, [pc, #68]	@ (800c634 <TRACE_Send+0x104>)
 800c5f0:	68db      	ldr	r3, [r3, #12]
 800c5f2:	4a0e      	ldr	r2, [pc, #56]	@ (800c62c <TRACE_Send+0xfc>)
 800c5f4:	8a92      	ldrh	r2, [r2, #20]
 800c5f6:	4611      	mov	r1, r2
 800c5f8:	69b8      	ldr	r0, [r7, #24]
 800c5fa:	4798      	blx	r3
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	77fb      	strb	r3, [r7, #31]
 800c600:	e00d      	b.n	800c61e <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 800c602:	f000 f941 	bl	800c888 <TRACE_UnLock>
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	f383 8810 	msr	PRIMASK, r3
}
 800c610:	e005      	b.n	800c61e <TRACE_Send+0xee>
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f383 8810 	msr	PRIMASK, r3
}
 800c61c:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 800c61e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c622:	4618      	mov	r0, r3
 800c624:	3720      	adds	r7, #32
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}
 800c62a:	bf00      	nop
 800c62c:	20000404 	.word	0x20000404
 800c630:	2000041c 	.word	0x2000041c
 800c634:	0800dc64 	.word	0x0800dc64

0800c638 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b088      	sub	sp, #32
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 800c640:	2300      	movs	r3, #0
 800c642:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c644:	f3ef 8310 	mrs	r3, PRIMASK
 800c648:	617b      	str	r3, [r7, #20]
  return(result);
 800c64a:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c64c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800c64e:	b672      	cpsid	i
}
 800c650:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800c652:	4b3c      	ldr	r3, [pc, #240]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c654:	789b      	ldrb	r3, [r3, #2]
 800c656:	2b02      	cmp	r3, #2
 800c658:	d106      	bne.n	800c668 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c65a:	4b3a      	ldr	r3, [pc, #232]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c65c:	2200      	movs	r2, #0
 800c65e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c660:	4b38      	ldr	r3, [pc, #224]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c662:	2200      	movs	r2, #0
 800c664:	821a      	strh	r2, [r3, #16]
 800c666:	e00a      	b.n	800c67e <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800c668:	4b36      	ldr	r3, [pc, #216]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c66a:	8a1a      	ldrh	r2, [r3, #16]
 800c66c:	4b35      	ldr	r3, [pc, #212]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c66e:	8a9b      	ldrh	r3, [r3, #20]
 800c670:	4413      	add	r3, r2
 800c672:	b29b      	uxth	r3, r3
 800c674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c678:	b29a      	uxth	r2, r3
 800c67a:	4b32      	ldr	r3, [pc, #200]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c67c:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800c67e:	4b31      	ldr	r3, [pc, #196]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c680:	8a1a      	ldrh	r2, [r3, #16]
 800c682:	4b30      	ldr	r3, [pc, #192]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c684:	8a5b      	ldrh	r3, [r3, #18]
 800c686:	429a      	cmp	r2, r3
 800c688:	d04d      	beq.n	800c726 <TRACE_TxCpltCallback+0xee>
 800c68a:	4b2e      	ldr	r3, [pc, #184]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c68c:	8adb      	ldrh	r3, [r3, #22]
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d149      	bne.n	800c726 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800c692:	4b2c      	ldr	r3, [pc, #176]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c694:	789b      	ldrb	r3, [r3, #2]
 800c696:	2b01      	cmp	r3, #1
 800c698:	d117      	bne.n	800c6ca <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800c69a:	4b2a      	ldr	r3, [pc, #168]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c69c:	881a      	ldrh	r2, [r3, #0]
 800c69e:	4b29      	ldr	r3, [pc, #164]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c6a0:	8a1b      	ldrh	r3, [r3, #16]
 800c6a2:	1ad3      	subs	r3, r2, r3
 800c6a4:	b29a      	uxth	r2, r3
 800c6a6:	4b27      	ldr	r3, [pc, #156]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c6a8:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800c6aa:	4b26      	ldr	r3, [pc, #152]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c6ac:	2202      	movs	r2, #2
 800c6ae:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800c6b0:	4b24      	ldr	r3, [pc, #144]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800c6b6:	4b23      	ldr	r3, [pc, #140]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c6b8:	8a9b      	ldrh	r3, [r3, #20]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d105      	bne.n	800c6ca <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c6be:	4b21      	ldr	r3, [pc, #132]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c6c4:	4b1f      	ldr	r3, [pc, #124]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800c6ca:	4b1e      	ldr	r3, [pc, #120]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c6cc:	789b      	ldrb	r3, [r3, #2]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d115      	bne.n	800c6fe <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c6d2:	4b1c      	ldr	r3, [pc, #112]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c6d4:	8a5a      	ldrh	r2, [r3, #18]
 800c6d6:	4b1b      	ldr	r3, [pc, #108]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c6d8:	8a1b      	ldrh	r3, [r3, #16]
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d908      	bls.n	800c6f0 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800c6de:	4b19      	ldr	r3, [pc, #100]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c6e0:	8a5a      	ldrh	r2, [r3, #18]
 800c6e2:	4b18      	ldr	r3, [pc, #96]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c6e4:	8a1b      	ldrh	r3, [r3, #16]
 800c6e6:	1ad3      	subs	r3, r2, r3
 800c6e8:	b29a      	uxth	r2, r3
 800c6ea:	4b16      	ldr	r3, [pc, #88]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c6ec:	829a      	strh	r2, [r3, #20]
 800c6ee:	e006      	b.n	800c6fe <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800c6f0:	4b14      	ldr	r3, [pc, #80]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c6f2:	8a1b      	ldrh	r3, [r3, #16]
 800c6f4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c6f8:	b29a      	uxth	r2, r3
 800c6fa:	4b12      	ldr	r3, [pc, #72]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c6fc:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800c6fe:	4b11      	ldr	r3, [pc, #68]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c700:	8a1b      	ldrh	r3, [r3, #16]
 800c702:	461a      	mov	r2, r3
 800c704:	4b10      	ldr	r3, [pc, #64]	@ (800c748 <TRACE_TxCpltCallback+0x110>)
 800c706:	4413      	add	r3, r2
 800c708:	61fb      	str	r3, [r7, #28]
 800c70a:	69bb      	ldr	r3, [r7, #24]
 800c70c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	f383 8810 	msr	PRIMASK, r3
}
 800c714:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800c716:	4b0d      	ldr	r3, [pc, #52]	@ (800c74c <TRACE_TxCpltCallback+0x114>)
 800c718:	68db      	ldr	r3, [r3, #12]
 800c71a:	4a0a      	ldr	r2, [pc, #40]	@ (800c744 <TRACE_TxCpltCallback+0x10c>)
 800c71c:	8a92      	ldrh	r2, [r2, #20]
 800c71e:	4611      	mov	r1, r2
 800c720:	69f8      	ldr	r0, [r7, #28]
 800c722:	4798      	blx	r3
 800c724:	e00a      	b.n	800c73c <TRACE_TxCpltCallback+0x104>
 800c726:	69bb      	ldr	r3, [r7, #24]
 800c728:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	f383 8810 	msr	PRIMASK, r3
}
 800c730:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 800c732:	f7f4 fb61 	bl	8000df8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800c736:	f000 f8a7 	bl	800c888 <TRACE_UnLock>
  }
}
 800c73a:	bf00      	nop
 800c73c:	bf00      	nop
 800c73e:	3720      	adds	r7, #32
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}
 800c744:	20000404 	.word	0x20000404
 800c748:	2000041c 	.word	0x2000041c
 800c74c:	0800dc64 	.word	0x0800dc64

0800c750 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800c750:	b480      	push	{r7}
 800c752:	b087      	sub	sp, #28
 800c754:	af00      	add	r7, sp, #0
 800c756:	4603      	mov	r3, r0
 800c758:	6039      	str	r1, [r7, #0]
 800c75a:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 800c75c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c760:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c762:	f3ef 8310 	mrs	r3, PRIMASK
 800c766:	60fb      	str	r3, [r7, #12]
  return(result);
 800c768:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c76a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c76c:	b672      	cpsid	i
}
 800c76e:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800c770:	4b35      	ldr	r3, [pc, #212]	@ (800c848 <TRACE_AllocateBufer+0xf8>)
 800c772:	8a5a      	ldrh	r2, [r3, #18]
 800c774:	4b34      	ldr	r3, [pc, #208]	@ (800c848 <TRACE_AllocateBufer+0xf8>)
 800c776:	8a1b      	ldrh	r3, [r3, #16]
 800c778:	429a      	cmp	r2, r3
 800c77a:	d11b      	bne.n	800c7b4 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800c77c:	4b32      	ldr	r3, [pc, #200]	@ (800c848 <TRACE_AllocateBufer+0xf8>)
 800c77e:	8a5b      	ldrh	r3, [r3, #18]
 800c780:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c784:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800c786:	88fa      	ldrh	r2, [r7, #6]
 800c788:	8afb      	ldrh	r3, [r7, #22]
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d33a      	bcc.n	800c804 <TRACE_AllocateBufer+0xb4>
 800c78e:	4b2e      	ldr	r3, [pc, #184]	@ (800c848 <TRACE_AllocateBufer+0xf8>)
 800c790:	8a1b      	ldrh	r3, [r3, #16]
 800c792:	88fa      	ldrh	r2, [r7, #6]
 800c794:	429a      	cmp	r2, r3
 800c796:	d235      	bcs.n	800c804 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800c798:	4b2b      	ldr	r3, [pc, #172]	@ (800c848 <TRACE_AllocateBufer+0xf8>)
 800c79a:	2201      	movs	r2, #1
 800c79c:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800c79e:	4b2a      	ldr	r3, [pc, #168]	@ (800c848 <TRACE_AllocateBufer+0xf8>)
 800c7a0:	8a5a      	ldrh	r2, [r3, #18]
 800c7a2:	4b29      	ldr	r3, [pc, #164]	@ (800c848 <TRACE_AllocateBufer+0xf8>)
 800c7a4:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800c7a6:	4b28      	ldr	r3, [pc, #160]	@ (800c848 <TRACE_AllocateBufer+0xf8>)
 800c7a8:	8a1b      	ldrh	r3, [r3, #16]
 800c7aa:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800c7ac:	4b26      	ldr	r3, [pc, #152]	@ (800c848 <TRACE_AllocateBufer+0xf8>)
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	825a      	strh	r2, [r3, #18]
 800c7b2:	e027      	b.n	800c804 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c7b4:	4b24      	ldr	r3, [pc, #144]	@ (800c848 <TRACE_AllocateBufer+0xf8>)
 800c7b6:	8a5a      	ldrh	r2, [r3, #18]
 800c7b8:	4b23      	ldr	r3, [pc, #140]	@ (800c848 <TRACE_AllocateBufer+0xf8>)
 800c7ba:	8a1b      	ldrh	r3, [r3, #16]
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	d91b      	bls.n	800c7f8 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800c7c0:	4b21      	ldr	r3, [pc, #132]	@ (800c848 <TRACE_AllocateBufer+0xf8>)
 800c7c2:	8a5b      	ldrh	r3, [r3, #18]
 800c7c4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c7c8:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800c7ca:	88fa      	ldrh	r2, [r7, #6]
 800c7cc:	8afb      	ldrh	r3, [r7, #22]
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d318      	bcc.n	800c804 <TRACE_AllocateBufer+0xb4>
 800c7d2:	4b1d      	ldr	r3, [pc, #116]	@ (800c848 <TRACE_AllocateBufer+0xf8>)
 800c7d4:	8a1b      	ldrh	r3, [r3, #16]
 800c7d6:	88fa      	ldrh	r2, [r7, #6]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d213      	bcs.n	800c804 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800c7dc:	4b1a      	ldr	r3, [pc, #104]	@ (800c848 <TRACE_AllocateBufer+0xf8>)
 800c7de:	2201      	movs	r2, #1
 800c7e0:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800c7e2:	4b19      	ldr	r3, [pc, #100]	@ (800c848 <TRACE_AllocateBufer+0xf8>)
 800c7e4:	8a5a      	ldrh	r2, [r3, #18]
 800c7e6:	4b18      	ldr	r3, [pc, #96]	@ (800c848 <TRACE_AllocateBufer+0xf8>)
 800c7e8:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800c7ea:	4b17      	ldr	r3, [pc, #92]	@ (800c848 <TRACE_AllocateBufer+0xf8>)
 800c7ec:	8a1b      	ldrh	r3, [r3, #16]
 800c7ee:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800c7f0:	4b15      	ldr	r3, [pc, #84]	@ (800c848 <TRACE_AllocateBufer+0xf8>)
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	825a      	strh	r2, [r3, #18]
 800c7f6:	e005      	b.n	800c804 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800c7f8:	4b13      	ldr	r3, [pc, #76]	@ (800c848 <TRACE_AllocateBufer+0xf8>)
 800c7fa:	8a1a      	ldrh	r2, [r3, #16]
 800c7fc:	4b12      	ldr	r3, [pc, #72]	@ (800c848 <TRACE_AllocateBufer+0xf8>)
 800c7fe:	8a5b      	ldrh	r3, [r3, #18]
 800c800:	1ad3      	subs	r3, r2, r3
 800c802:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800c804:	8afa      	ldrh	r2, [r7, #22]
 800c806:	88fb      	ldrh	r3, [r7, #6]
 800c808:	429a      	cmp	r2, r3
 800c80a:	d90f      	bls.n	800c82c <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800c80c:	4b0e      	ldr	r3, [pc, #56]	@ (800c848 <TRACE_AllocateBufer+0xf8>)
 800c80e:	8a5a      	ldrh	r2, [r3, #18]
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800c814:	4b0c      	ldr	r3, [pc, #48]	@ (800c848 <TRACE_AllocateBufer+0xf8>)
 800c816:	8a5a      	ldrh	r2, [r3, #18]
 800c818:	88fb      	ldrh	r3, [r7, #6]
 800c81a:	4413      	add	r3, r2
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c822:	b29a      	uxth	r2, r3
 800c824:	4b08      	ldr	r3, [pc, #32]	@ (800c848 <TRACE_AllocateBufer+0xf8>)
 800c826:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800c828:	2300      	movs	r3, #0
 800c82a:	82bb      	strh	r3, [r7, #20]
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	f383 8810 	msr	PRIMASK, r3
}
 800c836:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 800c838:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	371c      	adds	r7, #28
 800c840:	46bd      	mov	sp, r7
 800c842:	bc80      	pop	{r7}
 800c844:	4770      	bx	lr
 800c846:	bf00      	nop
 800c848:	20000404 	.word	0x20000404

0800c84c <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b085      	sub	sp, #20
 800c850:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c852:	f3ef 8310 	mrs	r3, PRIMASK
 800c856:	607b      	str	r3, [r7, #4]
  return(result);
 800c858:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c85a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c85c:	b672      	cpsid	i
}
 800c85e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 800c860:	4b08      	ldr	r3, [pc, #32]	@ (800c884 <TRACE_Lock+0x38>)
 800c862:	8adb      	ldrh	r3, [r3, #22]
 800c864:	3301      	adds	r3, #1
 800c866:	b29a      	uxth	r2, r3
 800c868:	4b06      	ldr	r3, [pc, #24]	@ (800c884 <TRACE_Lock+0x38>)
 800c86a:	82da      	strh	r2, [r3, #22]
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	f383 8810 	msr	PRIMASK, r3
}
 800c876:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800c878:	bf00      	nop
 800c87a:	3714      	adds	r7, #20
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bc80      	pop	{r7}
 800c880:	4770      	bx	lr
 800c882:	bf00      	nop
 800c884:	20000404 	.word	0x20000404

0800c888 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 800c888:	b480      	push	{r7}
 800c88a:	b085      	sub	sp, #20
 800c88c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c88e:	f3ef 8310 	mrs	r3, PRIMASK
 800c892:	607b      	str	r3, [r7, #4]
  return(result);
 800c894:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c896:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c898:	b672      	cpsid	i
}
 800c89a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 800c89c:	4b08      	ldr	r3, [pc, #32]	@ (800c8c0 <TRACE_UnLock+0x38>)
 800c89e:	8adb      	ldrh	r3, [r3, #22]
 800c8a0:	3b01      	subs	r3, #1
 800c8a2:	b29a      	uxth	r2, r3
 800c8a4:	4b06      	ldr	r3, [pc, #24]	@ (800c8c0 <TRACE_UnLock+0x38>)
 800c8a6:	82da      	strh	r2, [r3, #22]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	f383 8810 	msr	PRIMASK, r3
}
 800c8b2:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800c8b4:	bf00      	nop
 800c8b6:	3714      	adds	r7, #20
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bc80      	pop	{r7}
 800c8bc:	4770      	bx	lr
 800c8be:	bf00      	nop
 800c8c0:	20000404 	.word	0x20000404

0800c8c4 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800c8c8:	4b05      	ldr	r3, [pc, #20]	@ (800c8e0 <TRACE_IsLocked+0x1c>)
 800c8ca:	8adb      	ldrh	r3, [r3, #22]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	bf14      	ite	ne
 800c8d0:	2301      	movne	r3, #1
 800c8d2:	2300      	moveq	r3, #0
 800c8d4:	b2db      	uxtb	r3, r3
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bc80      	pop	{r7}
 800c8dc:	4770      	bx	lr
 800c8de:	bf00      	nop
 800c8e0:	20000404 	.word	0x20000404

0800c8e4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800c8e8:	4b04      	ldr	r3, [pc, #16]	@ (800c8fc <UTIL_LPM_Init+0x18>)
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800c8ee:	4b04      	ldr	r3, [pc, #16]	@ (800c900 <UTIL_LPM_Init+0x1c>)
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800c8f4:	bf00      	nop
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bc80      	pop	{r7}
 800c8fa:	4770      	bx	lr
 800c8fc:	2000071c 	.word	0x2000071c
 800c900:	20000720 	.word	0x20000720

0800c904 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800c904:	b480      	push	{r7}
 800c906:	b087      	sub	sp, #28
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	460b      	mov	r3, r1
 800c90e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c910:	f3ef 8310 	mrs	r3, PRIMASK
 800c914:	613b      	str	r3, [r7, #16]
  return(result);
 800c916:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800c918:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c91a:	b672      	cpsid	i
}
 800c91c:	bf00      	nop
  
  switch( state )
 800c91e:	78fb      	ldrb	r3, [r7, #3]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d008      	beq.n	800c936 <UTIL_LPM_SetStopMode+0x32>
 800c924:	2b01      	cmp	r3, #1
 800c926:	d10e      	bne.n	800c946 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800c928:	4b0d      	ldr	r3, [pc, #52]	@ (800c960 <UTIL_LPM_SetStopMode+0x5c>)
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	4313      	orrs	r3, r2
 800c930:	4a0b      	ldr	r2, [pc, #44]	@ (800c960 <UTIL_LPM_SetStopMode+0x5c>)
 800c932:	6013      	str	r3, [r2, #0]
      break;
 800c934:	e008      	b.n	800c948 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	43da      	mvns	r2, r3
 800c93a:	4b09      	ldr	r3, [pc, #36]	@ (800c960 <UTIL_LPM_SetStopMode+0x5c>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	4013      	ands	r3, r2
 800c940:	4a07      	ldr	r2, [pc, #28]	@ (800c960 <UTIL_LPM_SetStopMode+0x5c>)
 800c942:	6013      	str	r3, [r2, #0]
      break;
 800c944:	e000      	b.n	800c948 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800c946:	bf00      	nop
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	f383 8810 	msr	PRIMASK, r3
}
 800c952:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800c954:	bf00      	nop
 800c956:	371c      	adds	r7, #28
 800c958:	46bd      	mov	sp, r7
 800c95a:	bc80      	pop	{r7}
 800c95c:	4770      	bx	lr
 800c95e:	bf00      	nop
 800c960:	2000071c 	.word	0x2000071c

0800c964 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800c964:	b480      	push	{r7}
 800c966:	b087      	sub	sp, #28
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	460b      	mov	r3, r1
 800c96e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c970:	f3ef 8310 	mrs	r3, PRIMASK
 800c974:	613b      	str	r3, [r7, #16]
  return(result);
 800c976:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800c978:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c97a:	b672      	cpsid	i
}
 800c97c:	bf00      	nop
  
  switch(state)
 800c97e:	78fb      	ldrb	r3, [r7, #3]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d008      	beq.n	800c996 <UTIL_LPM_SetOffMode+0x32>
 800c984:	2b01      	cmp	r3, #1
 800c986:	d10e      	bne.n	800c9a6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800c988:	4b0d      	ldr	r3, [pc, #52]	@ (800c9c0 <UTIL_LPM_SetOffMode+0x5c>)
 800c98a:	681a      	ldr	r2, [r3, #0]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	4313      	orrs	r3, r2
 800c990:	4a0b      	ldr	r2, [pc, #44]	@ (800c9c0 <UTIL_LPM_SetOffMode+0x5c>)
 800c992:	6013      	str	r3, [r2, #0]
      break;
 800c994:	e008      	b.n	800c9a8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	43da      	mvns	r2, r3
 800c99a:	4b09      	ldr	r3, [pc, #36]	@ (800c9c0 <UTIL_LPM_SetOffMode+0x5c>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	4013      	ands	r3, r2
 800c9a0:	4a07      	ldr	r2, [pc, #28]	@ (800c9c0 <UTIL_LPM_SetOffMode+0x5c>)
 800c9a2:	6013      	str	r3, [r2, #0]
      break;
 800c9a4:	e000      	b.n	800c9a8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800c9a6:	bf00      	nop
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f383 8810 	msr	PRIMASK, r3
}
 800c9b2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800c9b4:	bf00      	nop
 800c9b6:	371c      	adds	r7, #28
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bc80      	pop	{r7}
 800c9bc:	4770      	bx	lr
 800c9be:	bf00      	nop
 800c9c0:	20000720 	.word	0x20000720

0800c9c4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b084      	sub	sp, #16
 800c9c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9ca:	f3ef 8310 	mrs	r3, PRIMASK
 800c9ce:	60bb      	str	r3, [r7, #8]
  return(result);
 800c9d0:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800c9d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c9d4:	b672      	cpsid	i
}
 800c9d6:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800c9d8:	4b12      	ldr	r3, [pc, #72]	@ (800ca24 <UTIL_LPM_EnterLowPower+0x60>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d006      	beq.n	800c9ee <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800c9e0:	4b11      	ldr	r3, [pc, #68]	@ (800ca28 <UTIL_LPM_EnterLowPower+0x64>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800c9e6:	4b10      	ldr	r3, [pc, #64]	@ (800ca28 <UTIL_LPM_EnterLowPower+0x64>)
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	4798      	blx	r3
 800c9ec:	e010      	b.n	800ca10 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800c9ee:	4b0f      	ldr	r3, [pc, #60]	@ (800ca2c <UTIL_LPM_EnterLowPower+0x68>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d006      	beq.n	800ca04 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800c9f6:	4b0c      	ldr	r3, [pc, #48]	@ (800ca28 <UTIL_LPM_EnterLowPower+0x64>)
 800c9f8:	689b      	ldr	r3, [r3, #8]
 800c9fa:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800c9fc:	4b0a      	ldr	r3, [pc, #40]	@ (800ca28 <UTIL_LPM_EnterLowPower+0x64>)
 800c9fe:	68db      	ldr	r3, [r3, #12]
 800ca00:	4798      	blx	r3
 800ca02:	e005      	b.n	800ca10 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800ca04:	4b08      	ldr	r3, [pc, #32]	@ (800ca28 <UTIL_LPM_EnterLowPower+0x64>)
 800ca06:	691b      	ldr	r3, [r3, #16]
 800ca08:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800ca0a:	4b07      	ldr	r3, [pc, #28]	@ (800ca28 <UTIL_LPM_EnterLowPower+0x64>)
 800ca0c:	695b      	ldr	r3, [r3, #20]
 800ca0e:	4798      	blx	r3
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f383 8810 	msr	PRIMASK, r3
}
 800ca1a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800ca1c:	bf00      	nop
 800ca1e:	3710      	adds	r7, #16
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}
 800ca24:	2000071c 	.word	0x2000071c
 800ca28:	0800db6c 	.word	0x0800db6c
 800ca2c:	20000720 	.word	0x20000720

0800ca30 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800ca30:	b480      	push	{r7}
 800ca32:	b087      	sub	sp, #28
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	60b9      	str	r1, [r7, #8]
 800ca3a:	4613      	mov	r3, r2
 800ca3c:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	613b      	str	r3, [r7, #16]

  while( size-- )
 800ca46:	e007      	b.n	800ca58 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800ca48:	693a      	ldr	r2, [r7, #16]
 800ca4a:	1c53      	adds	r3, r2, #1
 800ca4c:	613b      	str	r3, [r7, #16]
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	1c59      	adds	r1, r3, #1
 800ca52:	6179      	str	r1, [r7, #20]
 800ca54:	7812      	ldrb	r2, [r2, #0]
 800ca56:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800ca58:	88fb      	ldrh	r3, [r7, #6]
 800ca5a:	1e5a      	subs	r2, r3, #1
 800ca5c:	80fa      	strh	r2, [r7, #6]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d1f2      	bne.n	800ca48 <UTIL_MEM_cpy_8+0x18>
    }
}
 800ca62:	bf00      	nop
 800ca64:	bf00      	nop
 800ca66:	371c      	adds	r7, #28
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bc80      	pop	{r7}
 800ca6c:	4770      	bx	lr

0800ca6e <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800ca6e:	b480      	push	{r7}
 800ca70:	b085      	sub	sp, #20
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
 800ca76:	460b      	mov	r3, r1
 800ca78:	70fb      	strb	r3, [r7, #3]
 800ca7a:	4613      	mov	r3, r2
 800ca7c:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800ca82:	e004      	b.n	800ca8e <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	1c5a      	adds	r2, r3, #1
 800ca88:	60fa      	str	r2, [r7, #12]
 800ca8a:	78fa      	ldrb	r2, [r7, #3]
 800ca8c:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800ca8e:	883b      	ldrh	r3, [r7, #0]
 800ca90:	1e5a      	subs	r2, r3, #1
 800ca92:	803a      	strh	r2, [r7, #0]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d1f5      	bne.n	800ca84 <UTIL_MEM_set_8+0x16>
  }
}
 800ca98:	bf00      	nop
 800ca9a:	bf00      	nop
 800ca9c:	3714      	adds	r7, #20
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bc80      	pop	{r7}
 800caa2:	4770      	bx	lr

0800caa4 <UTIL_SEQ_Init>:

/** @addtogroup SEQUENCER_Exported_function SEQUENCER exported functions
 *  @{
 */
void UTIL_SEQ_Init( void )
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
  TaskSet = UTIL_SEQ_NO_BIT_SET;
 800caaa:	4b19      	ldr	r3, [pc, #100]	@ (800cb10 <UTIL_SEQ_Init+0x6c>)
 800caac:	2200      	movs	r2, #0
 800caae:	601a      	str	r2, [r3, #0]
  TaskMask = UTIL_SEQ_ALL_BIT_SET;
 800cab0:	4b18      	ldr	r3, [pc, #96]	@ (800cb14 <UTIL_SEQ_Init+0x70>)
 800cab2:	f04f 32ff 	mov.w	r2, #4294967295
 800cab6:	601a      	str	r2, [r3, #0]
  SuperMask = UTIL_SEQ_ALL_BIT_SET;
 800cab8:	4b17      	ldr	r3, [pc, #92]	@ (800cb18 <UTIL_SEQ_Init+0x74>)
 800caba:	f04f 32ff 	mov.w	r2, #4294967295
 800cabe:	601a      	str	r2, [r3, #0]
  EvtSet = UTIL_SEQ_NO_BIT_SET;
 800cac0:	4b16      	ldr	r3, [pc, #88]	@ (800cb1c <UTIL_SEQ_Init+0x78>)
 800cac2:	2200      	movs	r2, #0
 800cac4:	601a      	str	r2, [r3, #0]
  EvtWaited = UTIL_SEQ_NO_BIT_SET;
 800cac6:	4b16      	ldr	r3, [pc, #88]	@ (800cb20 <UTIL_SEQ_Init+0x7c>)
 800cac8:	2200      	movs	r2, #0
 800caca:	601a      	str	r2, [r3, #0]
  CurrentTaskIdx = 0U;
 800cacc:	4b15      	ldr	r3, [pc, #84]	@ (800cb24 <UTIL_SEQ_Init+0x80>)
 800cace:	2200      	movs	r2, #0
 800cad0:	601a      	str	r2, [r3, #0]
  (void)UTIL_SEQ_MEMSET8((uint8_t *)TaskCb, 0, sizeof(TaskCb));
 800cad2:	220c      	movs	r2, #12
 800cad4:	2100      	movs	r1, #0
 800cad6:	4814      	ldr	r0, [pc, #80]	@ (800cb28 <UTIL_SEQ_Init+0x84>)
 800cad8:	f7ff ffc9 	bl	800ca6e <UTIL_MEM_set_8>
  for(uint32_t index = 0; index < UTIL_SEQ_CONF_PRIO_NBR; index++)
 800cadc:	2300      	movs	r3, #0
 800cade:	607b      	str	r3, [r7, #4]
 800cae0:	e00d      	b.n	800cafe <UTIL_SEQ_Init+0x5a>
  {
      TaskPrio[index].priority = 0;
 800cae2:	4a12      	ldr	r2, [pc, #72]	@ (800cb2c <UTIL_SEQ_Init+0x88>)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2100      	movs	r1, #0
 800cae8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
      TaskPrio[index].round_robin = 0;
 800caec:	4a0f      	ldr	r2, [pc, #60]	@ (800cb2c <UTIL_SEQ_Init+0x88>)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	00db      	lsls	r3, r3, #3
 800caf2:	4413      	add	r3, r2
 800caf4:	2200      	movs	r2, #0
 800caf6:	605a      	str	r2, [r3, #4]
  for(uint32_t index = 0; index < UTIL_SEQ_CONF_PRIO_NBR; index++)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	3301      	adds	r3, #1
 800cafc:	607b      	str	r3, [r7, #4]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2b02      	cmp	r3, #2
 800cb02:	d9ee      	bls.n	800cae2 <UTIL_SEQ_Init+0x3e>
  }
  UTIL_SEQ_INIT_CRITICAL_SECTION( );
}
 800cb04:	bf00      	nop
 800cb06:	bf00      	nop
 800cb08:	3708      	adds	r7, #8
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	20000724 	.word	0x20000724
 800cb14:	20000020 	.word	0x20000020
 800cb18:	20000024 	.word	0x20000024
 800cb1c:	20000728 	.word	0x20000728
 800cb20:	2000072c 	.word	0x2000072c
 800cb24:	20000730 	.word	0x20000730
 800cb28:	20000734 	.word	0x20000734
 800cb2c:	20000740 	.word	0x20000740

0800cb30 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b090      	sub	sp, #64	@ 0x40
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800cb38:	4b73      	ldr	r3, [pc, #460]	@ (800cd08 <UTIL_SEQ_Run+0x1d8>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800cb3e:	4b72      	ldr	r3, [pc, #456]	@ (800cd08 <UTIL_SEQ_Run+0x1d8>)
 800cb40:	681a      	ldr	r2, [r3, #0]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	4013      	ands	r3, r2
 800cb46:	4a70      	ldr	r2, [pc, #448]	@ (800cd08 <UTIL_SEQ_Run+0x1d8>)
 800cb48:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800cb4a:	4b70      	ldr	r3, [pc, #448]	@ (800cd0c <UTIL_SEQ_Run+0x1dc>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800cb50:	4b6f      	ldr	r3, [pc, #444]	@ (800cd10 <UTIL_SEQ_Run+0x1e0>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800cb56:	4b6f      	ldr	r3, [pc, #444]	@ (800cd14 <UTIL_SEQ_Run+0x1e4>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800cb5c:	4b6e      	ldr	r3, [pc, #440]	@ (800cd18 <UTIL_SEQ_Run+0x1e8>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800cb62:	e08d      	b.n	800cc80 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800cb64:	2300      	movs	r3, #0
 800cb66:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800cb68:	e002      	b.n	800cb70 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800cb6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800cb70:	4a6a      	ldr	r2, [pc, #424]	@ (800cd1c <UTIL_SEQ_Run+0x1ec>)
 800cb72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb74:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cb78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb7a:	401a      	ands	r2, r3
 800cb7c:	4b62      	ldr	r3, [pc, #392]	@ (800cd08 <UTIL_SEQ_Run+0x1d8>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4013      	ands	r3, r2
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d0f1      	beq.n	800cb6a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800cb86:	4a65      	ldr	r2, [pc, #404]	@ (800cd1c <UTIL_SEQ_Run+0x1ec>)
 800cb88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb8a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cb8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb90:	401a      	ands	r2, r3
 800cb92:	4b5d      	ldr	r3, [pc, #372]	@ (800cd08 <UTIL_SEQ_Run+0x1d8>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4013      	ands	r3, r2
 800cb98:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800cb9a:	4a60      	ldr	r2, [pc, #384]	@ (800cd1c <UTIL_SEQ_Run+0x1ec>)
 800cb9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb9e:	00db      	lsls	r3, r3, #3
 800cba0:	4413      	add	r3, r2
 800cba2:	685a      	ldr	r2, [r3, #4]
 800cba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba6:	4013      	ands	r3, r2
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d106      	bne.n	800cbba <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800cbac:	4a5b      	ldr	r2, [pc, #364]	@ (800cd1c <UTIL_SEQ_Run+0x1ec>)
 800cbae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbb0:	00db      	lsls	r3, r3, #3
 800cbb2:	4413      	add	r3, r2
 800cbb4:	f04f 32ff 	mov.w	r2, #4294967295
 800cbb8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800cbba:	4a58      	ldr	r2, [pc, #352]	@ (800cd1c <UTIL_SEQ_Run+0x1ec>)
 800cbbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbbe:	00db      	lsls	r3, r3, #3
 800cbc0:	4413      	add	r3, r2
 800cbc2:	685a      	ldr	r2, [r3, #4]
 800cbc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc6:	4013      	ands	r3, r2
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f000 f907 	bl	800cddc <SEQ_BitPosition>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	4b53      	ldr	r3, [pc, #332]	@ (800cd20 <UTIL_SEQ_Run+0x1f0>)
 800cbd4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800cbd6:	4a51      	ldr	r2, [pc, #324]	@ (800cd1c <UTIL_SEQ_Run+0x1ec>)
 800cbd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbda:	00db      	lsls	r3, r3, #3
 800cbdc:	4413      	add	r3, r2
 800cbde:	685a      	ldr	r2, [r3, #4]
 800cbe0:	4b4f      	ldr	r3, [pc, #316]	@ (800cd20 <UTIL_SEQ_Run+0x1f0>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	2101      	movs	r1, #1
 800cbe6:	fa01 f303 	lsl.w	r3, r1, r3
 800cbea:	43db      	mvns	r3, r3
 800cbec:	401a      	ands	r2, r3
 800cbee:	494b      	ldr	r1, [pc, #300]	@ (800cd1c <UTIL_SEQ_Run+0x1ec>)
 800cbf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbf2:	00db      	lsls	r3, r3, #3
 800cbf4:	440b      	add	r3, r1
 800cbf6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbf8:	f3ef 8310 	mrs	r3, PRIMASK
 800cbfc:	61bb      	str	r3, [r7, #24]
  return(result);
 800cbfe:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cc00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800cc02:	b672      	cpsid	i
}
 800cc04:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800cc06:	4b46      	ldr	r3, [pc, #280]	@ (800cd20 <UTIL_SEQ_Run+0x1f0>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	fa02 f303 	lsl.w	r3, r2, r3
 800cc10:	43da      	mvns	r2, r3
 800cc12:	4b3e      	ldr	r3, [pc, #248]	@ (800cd0c <UTIL_SEQ_Run+0x1dc>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4013      	ands	r3, r2
 800cc18:	4a3c      	ldr	r2, [pc, #240]	@ (800cd0c <UTIL_SEQ_Run+0x1dc>)
 800cc1a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800cc1c:	2303      	movs	r3, #3
 800cc1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc20:	e013      	b.n	800cc4a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800cc22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc24:	3b01      	subs	r3, #1
 800cc26:	4a3d      	ldr	r2, [pc, #244]	@ (800cd1c <UTIL_SEQ_Run+0x1ec>)
 800cc28:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800cc2c:	4b3c      	ldr	r3, [pc, #240]	@ (800cd20 <UTIL_SEQ_Run+0x1f0>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2201      	movs	r2, #1
 800cc32:	fa02 f303 	lsl.w	r3, r2, r3
 800cc36:	43da      	mvns	r2, r3
 800cc38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc3a:	3b01      	subs	r3, #1
 800cc3c:	400a      	ands	r2, r1
 800cc3e:	4937      	ldr	r1, [pc, #220]	@ (800cd1c <UTIL_SEQ_Run+0x1ec>)
 800cc40:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800cc44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc46:	3b01      	subs	r3, #1
 800cc48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d1e8      	bne.n	800cc22 <UTIL_SEQ_Run+0xf2>
 800cc50:	6a3b      	ldr	r3, [r7, #32]
 800cc52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	f383 8810 	msr	PRIMASK, r3
}
 800cc5a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800cc5c:	4b30      	ldr	r3, [pc, #192]	@ (800cd20 <UTIL_SEQ_Run+0x1f0>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4a30      	ldr	r2, [pc, #192]	@ (800cd24 <UTIL_SEQ_Run+0x1f4>)
 800cc62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc66:	4798      	blx	r3

    local_taskset = TaskSet;
 800cc68:	4b28      	ldr	r3, [pc, #160]	@ (800cd0c <UTIL_SEQ_Run+0x1dc>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800cc6e:	4b28      	ldr	r3, [pc, #160]	@ (800cd10 <UTIL_SEQ_Run+0x1e0>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800cc74:	4b27      	ldr	r3, [pc, #156]	@ (800cd14 <UTIL_SEQ_Run+0x1e4>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800cc7a:	4b27      	ldr	r3, [pc, #156]	@ (800cd18 <UTIL_SEQ_Run+0x1e8>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800cc80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc84:	401a      	ands	r2, r3
 800cc86:	4b20      	ldr	r3, [pc, #128]	@ (800cd08 <UTIL_SEQ_Run+0x1d8>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	4013      	ands	r3, r2
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d005      	beq.n	800cc9c <UTIL_SEQ_Run+0x16c>
 800cc90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cc92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc94:	4013      	ands	r3, r2
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	f43f af64 	beq.w	800cb64 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800cc9c:	4b20      	ldr	r3, [pc, #128]	@ (800cd20 <UTIL_SEQ_Run+0x1f0>)
 800cc9e:	f04f 32ff 	mov.w	r2, #4294967295
 800cca2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800cca4:	f000 f88e 	bl	800cdc4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cca8:	f3ef 8310 	mrs	r3, PRIMASK
 800ccac:	613b      	str	r3, [r7, #16]
  return(result);
 800ccae:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800ccb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ccb2:	b672      	cpsid	i
}
 800ccb4:	bf00      	nop
  local_taskset = TaskSet;
 800ccb6:	4b15      	ldr	r3, [pc, #84]	@ (800cd0c <UTIL_SEQ_Run+0x1dc>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800ccbc:	4b14      	ldr	r3, [pc, #80]	@ (800cd10 <UTIL_SEQ_Run+0x1e0>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800ccc2:	4b14      	ldr	r3, [pc, #80]	@ (800cd14 <UTIL_SEQ_Run+0x1e4>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800ccc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ccca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cccc:	401a      	ands	r2, r3
 800ccce:	4b0e      	ldr	r3, [pc, #56]	@ (800cd08 <UTIL_SEQ_Run+0x1d8>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	4013      	ands	r3, r2
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d107      	bne.n	800cce8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800ccd8:	4b0f      	ldr	r3, [pc, #60]	@ (800cd18 <UTIL_SEQ_Run+0x1e8>)
 800ccda:	681a      	ldr	r2, [r3, #0]
 800ccdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccde:	4013      	ands	r3, r2
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d101      	bne.n	800cce8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800cce4:	f7f4 f85a 	bl	8000d9c <UTIL_SEQ_Idle>
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	f383 8810 	msr	PRIMASK, r3
}
 800ccf2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800ccf4:	f000 f86c 	bl	800cdd0 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800ccf8:	4a03      	ldr	r2, [pc, #12]	@ (800cd08 <UTIL_SEQ_Run+0x1d8>)
 800ccfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccfc:	6013      	str	r3, [r2, #0]

  return;
 800ccfe:	bf00      	nop
}
 800cd00:	3740      	adds	r7, #64	@ 0x40
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop
 800cd08:	20000024 	.word	0x20000024
 800cd0c:	20000724 	.word	0x20000724
 800cd10:	20000728 	.word	0x20000728
 800cd14:	20000020 	.word	0x20000020
 800cd18:	2000072c 	.word	0x2000072c
 800cd1c:	20000740 	.word	0x20000740
 800cd20:	20000730 	.word	0x20000730
 800cd24:	20000734 	.word	0x20000734

0800cd28 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b088      	sub	sp, #32
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd34:	f3ef 8310 	mrs	r3, PRIMASK
 800cd38:	617b      	str	r3, [r7, #20]
  return(result);
 800cd3a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800cd3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800cd3e:	b672      	cpsid	i
}
 800cd40:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800cd42:	68f8      	ldr	r0, [r7, #12]
 800cd44:	f000 f84a 	bl	800cddc <SEQ_BitPosition>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	4a06      	ldr	r2, [pc, #24]	@ (800cd68 <UTIL_SEQ_RegTask+0x40>)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800cd54:	69fb      	ldr	r3, [r7, #28]
 800cd56:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd58:	69bb      	ldr	r3, [r7, #24]
 800cd5a:	f383 8810 	msr	PRIMASK, r3
}
 800cd5e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800cd60:	bf00      	nop
}
 800cd62:	3720      	adds	r7, #32
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}
 800cd68:	20000734 	.word	0x20000734

0800cd6c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b087      	sub	sp, #28
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd76:	f3ef 8310 	mrs	r3, PRIMASK
 800cd7a:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd7c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cd7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cd80:	b672      	cpsid	i
}
 800cd82:	bf00      	nop

  TaskSet |= TaskId_bm;
 800cd84:	4b0d      	ldr	r3, [pc, #52]	@ (800cdbc <UTIL_SEQ_SetTask+0x50>)
 800cd86:	681a      	ldr	r2, [r3, #0]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	4313      	orrs	r3, r2
 800cd8c:	4a0b      	ldr	r2, [pc, #44]	@ (800cdbc <UTIL_SEQ_SetTask+0x50>)
 800cd8e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800cd90:	4a0b      	ldr	r2, [pc, #44]	@ (800cdc0 <UTIL_SEQ_SetTask+0x54>)
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	431a      	orrs	r2, r3
 800cd9c:	4908      	ldr	r1, [pc, #32]	@ (800cdc0 <UTIL_SEQ_SetTask+0x54>)
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	f383 8810 	msr	PRIMASK, r3
}
 800cdae:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800cdb0:	bf00      	nop
}
 800cdb2:	371c      	adds	r7, #28
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bc80      	pop	{r7}
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop
 800cdbc:	20000724 	.word	0x20000724
 800cdc0:	20000740 	.word	0x20000740

0800cdc4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800cdc8:	bf00      	nop
}
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bc80      	pop	{r7}
 800cdce:	4770      	bx	lr

0800cdd0 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800cdd4:	bf00      	nop
}
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bc80      	pop	{r7}
 800cdda:	4770      	bx	lr

0800cddc <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800cddc:	b480      	push	{r7}
 800cdde:	b085      	sub	sp, #20
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800cde4:	2300      	movs	r3, #0
 800cde6:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cdf2:	d204      	bcs.n	800cdfe <SEQ_BitPosition+0x22>
 800cdf4:	2310      	movs	r3, #16
 800cdf6:	73fb      	strb	r3, [r7, #15]
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	041b      	lsls	r3, r3, #16
 800cdfc:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ce04:	d205      	bcs.n	800ce12 <SEQ_BitPosition+0x36>
 800ce06:	7bfb      	ldrb	r3, [r7, #15]
 800ce08:	3308      	adds	r3, #8
 800ce0a:	73fb      	strb	r3, [r7, #15]
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	021b      	lsls	r3, r3, #8
 800ce10:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce18:	d205      	bcs.n	800ce26 <SEQ_BitPosition+0x4a>
 800ce1a:	7bfb      	ldrb	r3, [r7, #15]
 800ce1c:	3304      	adds	r3, #4
 800ce1e:	73fb      	strb	r3, [r7, #15]
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	011b      	lsls	r3, r3, #4
 800ce24:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	0f1b      	lsrs	r3, r3, #28
 800ce2a:	4a07      	ldr	r2, [pc, #28]	@ (800ce48 <SEQ_BitPosition+0x6c>)
 800ce2c:	5cd2      	ldrb	r2, [r2, r3]
 800ce2e:	7bfb      	ldrb	r3, [r7, #15]
 800ce30:	4413      	add	r3, r2
 800ce32:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800ce34:	7bfb      	ldrb	r3, [r7, #15]
 800ce36:	f1c3 031f 	rsb	r3, r3, #31
 800ce3a:	b2db      	uxtb	r3, r3
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3714      	adds	r7, #20
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bc80      	pop	{r7}
 800ce44:	4770      	bx	lr
 800ce46:	bf00      	nop
 800ce48:	0800dddc 	.word	0x0800dddc

0800ce4c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800ce4c:	b082      	sub	sp, #8
 800ce4e:	b480      	push	{r7}
 800ce50:	b087      	sub	sp, #28
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	60f8      	str	r0, [r7, #12]
 800ce56:	1d38      	adds	r0, r7, #4
 800ce58:	e880 0006 	stmia.w	r0, {r1, r2}
 800ce5c:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800ce5e:	2300      	movs	r3, #0
 800ce60:	613b      	str	r3, [r7, #16]
 800ce62:	2300      	movs	r3, #0
 800ce64:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 800ce66:	687a      	ldr	r2, [r7, #4]
 800ce68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce6a:	4413      	add	r3, r2
 800ce6c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800ce6e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ce72:	b29a      	uxth	r2, r3
 800ce74:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800ce78:	b29b      	uxth	r3, r3
 800ce7a:	4413      	add	r3, r2
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	b21b      	sxth	r3, r3
 800ce80:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 800ce82:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ce86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ce8a:	db0a      	blt.n	800cea2 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	3301      	adds	r3, #1
 800ce90:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 800ce92:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800ce9c:	b29b      	uxth	r3, r3
 800ce9e:	b21b      	sxth	r3, r3
 800cea0:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	461a      	mov	r2, r3
 800cea6:	f107 0310 	add.w	r3, r7, #16
 800ceaa:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ceae:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800ceb2:	68f8      	ldr	r0, [r7, #12]
 800ceb4:	371c      	adds	r7, #28
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bc80      	pop	{r7}
 800ceba:	b002      	add	sp, #8
 800cebc:	4770      	bx	lr
	...

0800cec0 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b08a      	sub	sp, #40	@ 0x28
 800cec4:	af02      	add	r7, sp, #8
 800cec6:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800cec8:	2300      	movs	r3, #0
 800ceca:	61bb      	str	r3, [r7, #24]
 800cecc:	2300      	movs	r3, #0
 800cece:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800ced0:	2300      	movs	r3, #0
 800ced2:	613b      	str	r3, [r7, #16]
 800ced4:	2300      	movs	r3, #0
 800ced6:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800ced8:	4b14      	ldr	r3, [pc, #80]	@ (800cf2c <SysTimeGet+0x6c>)
 800ceda:	691b      	ldr	r3, [r3, #16]
 800cedc:	f107 0218 	add.w	r2, r7, #24
 800cee0:	3204      	adds	r2, #4
 800cee2:	4610      	mov	r0, r2
 800cee4:	4798      	blx	r3
 800cee6:	4603      	mov	r3, r0
 800cee8:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800ceea:	4b10      	ldr	r3, [pc, #64]	@ (800cf2c <SysTimeGet+0x6c>)
 800ceec:	68db      	ldr	r3, [r3, #12]
 800ceee:	4798      	blx	r3
 800cef0:	4603      	mov	r3, r0
 800cef2:	b21b      	sxth	r3, r3
 800cef4:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800cef6:	4b0d      	ldr	r3, [pc, #52]	@ (800cf2c <SysTimeGet+0x6c>)
 800cef8:	685b      	ldr	r3, [r3, #4]
 800cefa:	4798      	blx	r3
 800cefc:	4603      	mov	r3, r0
 800cefe:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800cf00:	f107 0010 	add.w	r0, r7, #16
 800cf04:	69fb      	ldr	r3, [r7, #28]
 800cf06:	9300      	str	r3, [sp, #0]
 800cf08:	69bb      	ldr	r3, [r7, #24]
 800cf0a:	f107 0208 	add.w	r2, r7, #8
 800cf0e:	ca06      	ldmia	r2, {r1, r2}
 800cf10:	f7ff ff9c 	bl	800ce4c <SysTimeAdd>

  return sysTime;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	461a      	mov	r2, r3
 800cf18:	f107 0310 	add.w	r3, r7, #16
 800cf1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cf20:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	3720      	adds	r7, #32
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}
 800cf2c:	0800dc50 	.word	0x0800dc50

0800cf30 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800cf34:	4b04      	ldr	r3, [pc, #16]	@ (800cf48 <UTIL_TIMER_Init+0x18>)
 800cf36:	2200      	movs	r2, #0
 800cf38:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800cf3a:	4b04      	ldr	r3, [pc, #16]	@ (800cf4c <UTIL_TIMER_Init+0x1c>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4798      	blx	r3
 800cf40:	4603      	mov	r3, r0
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	20000758 	.word	0x20000758
 800cf4c:	0800dc24 	.word	0x0800dc24

0800cf50 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	60f8      	str	r0, [r7, #12]
 800cf58:	60b9      	str	r1, [r7, #8]
 800cf5a:	603b      	str	r3, [r7, #0]
 800cf5c:	4613      	mov	r3, r2
 800cf5e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d023      	beq.n	800cfae <UTIL_TIMER_Create+0x5e>
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d020      	beq.n	800cfae <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800cf72:	4b11      	ldr	r3, [pc, #68]	@ (800cfb8 <UTIL_TIMER_Create+0x68>)
 800cf74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf76:	68b8      	ldr	r0, [r7, #8]
 800cf78:	4798      	blx	r3
 800cf7a:	4602      	mov	r2, r0
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	2200      	movs	r2, #0
 800cf84:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	683a      	ldr	r2, [r7, #0]
 800cf96:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	69ba      	ldr	r2, [r7, #24]
 800cf9c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	79fa      	ldrb	r2, [r7, #7]
 800cfa2:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	e000      	b.n	800cfb0 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800cfae:	2301      	movs	r3, #1
  }
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3710      	adds	r7, #16
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	0800dc24 	.word	0x0800dc24

0800cfbc <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b08a      	sub	sp, #40	@ 0x28
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d056      	beq.n	800d07e <UTIL_TIMER_Start+0xc2>
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f000 f9a9 	bl	800d328 <TimerExists>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	f083 0301 	eor.w	r3, r3, #1
 800cfdc:	b2db      	uxtb	r3, r3
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d04d      	beq.n	800d07e <UTIL_TIMER_Start+0xc2>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	7a5b      	ldrb	r3, [r3, #9]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d149      	bne.n	800d07e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfea:	f3ef 8310 	mrs	r3, PRIMASK
 800cfee:	613b      	str	r3, [r7, #16]
  return(result);
 800cff0:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800cff2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800cff4:	b672      	cpsid	i
}
 800cff6:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800cffe:	4b24      	ldr	r3, [pc, #144]	@ (800d090 <UTIL_TIMER_Start+0xd4>)
 800d000:	6a1b      	ldr	r3, [r3, #32]
 800d002:	4798      	blx	r3
 800d004:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800d006:	6a3a      	ldr	r2, [r7, #32]
 800d008:	69bb      	ldr	r3, [r7, #24]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d201      	bcs.n	800d012 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800d00e:	69bb      	ldr	r3, [r7, #24]
 800d010:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6a3a      	ldr	r2, [r7, #32]
 800d016:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2200      	movs	r2, #0
 800d01c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2201      	movs	r2, #1
 800d022:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2200      	movs	r2, #0
 800d028:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800d02a:	4b1a      	ldr	r3, [pc, #104]	@ (800d094 <UTIL_TIMER_Start+0xd8>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d106      	bne.n	800d040 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800d032:	4b17      	ldr	r3, [pc, #92]	@ (800d090 <UTIL_TIMER_Start+0xd4>)
 800d034:	691b      	ldr	r3, [r3, #16]
 800d036:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f000 f9eb 	bl	800d414 <TimerInsertNewHeadTimer>
 800d03e:	e017      	b.n	800d070 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800d040:	4b13      	ldr	r3, [pc, #76]	@ (800d090 <UTIL_TIMER_Start+0xd4>)
 800d042:	699b      	ldr	r3, [r3, #24]
 800d044:	4798      	blx	r3
 800d046:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681a      	ldr	r2, [r3, #0]
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	441a      	add	r2, r3
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681a      	ldr	r2, [r3, #0]
 800d058:	4b0e      	ldr	r3, [pc, #56]	@ (800d094 <UTIL_TIMER_Start+0xd8>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	429a      	cmp	r2, r3
 800d060:	d203      	bcs.n	800d06a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f000 f9d6 	bl	800d414 <TimerInsertNewHeadTimer>
 800d068:	e002      	b.n	800d070 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f000 f9a2 	bl	800d3b4 <TimerInsertTimer>
 800d070:	69fb      	ldr	r3, [r7, #28]
 800d072:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f383 8810 	msr	PRIMASK, r3
}
 800d07a:	bf00      	nop
  {
 800d07c:	e002      	b.n	800d084 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800d07e:	2301      	movs	r3, #1
 800d080:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 800d084:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3728      	adds	r7, #40	@ 0x28
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	0800dc24 	.word	0x0800dc24
 800d094:	20000758 	.word	0x20000758

0800d098 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b088      	sub	sp, #32
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d05b      	beq.n	800d162 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0aa:	f3ef 8310 	mrs	r3, PRIMASK
 800d0ae:	60fb      	str	r3, [r7, #12]
  return(result);
 800d0b0:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800d0b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d0b4:	b672      	cpsid	i
}
 800d0b6:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800d0b8:	4b2d      	ldr	r3, [pc, #180]	@ (800d170 <UTIL_TIMER_Stop+0xd8>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800d0be:	4b2c      	ldr	r3, [pc, #176]	@ (800d170 <UTIL_TIMER_Stop+0xd8>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800d0ca:	4b29      	ldr	r3, [pc, #164]	@ (800d170 <UTIL_TIMER_Stop+0xd8>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d041      	beq.n	800d156 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800d0d8:	4b25      	ldr	r3, [pc, #148]	@ (800d170 <UTIL_TIMER_Stop+0xd8>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	d134      	bne.n	800d14c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800d0e2:	4b23      	ldr	r3, [pc, #140]	@ (800d170 <UTIL_TIMER_Stop+0xd8>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800d0ea:	4b21      	ldr	r3, [pc, #132]	@ (800d170 <UTIL_TIMER_Stop+0xd8>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	695b      	ldr	r3, [r3, #20]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d00a      	beq.n	800d10a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800d0f4:	4b1e      	ldr	r3, [pc, #120]	@ (800d170 <UTIL_TIMER_Stop+0xd8>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	695b      	ldr	r3, [r3, #20]
 800d0fa:	4a1d      	ldr	r2, [pc, #116]	@ (800d170 <UTIL_TIMER_Stop+0xd8>)
 800d0fc:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800d0fe:	4b1c      	ldr	r3, [pc, #112]	@ (800d170 <UTIL_TIMER_Stop+0xd8>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	4618      	mov	r0, r3
 800d104:	f000 f92c 	bl	800d360 <TimerSetTimeout>
 800d108:	e023      	b.n	800d152 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800d10a:	4b1a      	ldr	r3, [pc, #104]	@ (800d174 <UTIL_TIMER_Stop+0xdc>)
 800d10c:	68db      	ldr	r3, [r3, #12]
 800d10e:	4798      	blx	r3
            TimerListHead = NULL;
 800d110:	4b17      	ldr	r3, [pc, #92]	@ (800d170 <UTIL_TIMER_Stop+0xd8>)
 800d112:	2200      	movs	r2, #0
 800d114:	601a      	str	r2, [r3, #0]
 800d116:	e01c      	b.n	800d152 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800d118:	697a      	ldr	r2, [r7, #20]
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d110      	bne.n	800d142 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	695b      	ldr	r3, [r3, #20]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d006      	beq.n	800d136 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	695b      	ldr	r3, [r3, #20]
 800d12c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800d12e:	69bb      	ldr	r3, [r7, #24]
 800d130:	697a      	ldr	r2, [r7, #20]
 800d132:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800d134:	e00d      	b.n	800d152 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800d136:	2300      	movs	r3, #0
 800d138:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800d13a:	69bb      	ldr	r3, [r7, #24]
 800d13c:	697a      	ldr	r2, [r7, #20]
 800d13e:	615a      	str	r2, [r3, #20]
            break;
 800d140:	e007      	b.n	800d152 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	695b      	ldr	r3, [r3, #20]
 800d14a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d1e2      	bne.n	800d118 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800d152:	2300      	movs	r3, #0
 800d154:	77fb      	strb	r3, [r7, #31]
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	f383 8810 	msr	PRIMASK, r3
}
 800d160:	e001      	b.n	800d166 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800d162:	2301      	movs	r3, #1
 800d164:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800d166:	7ffb      	ldrb	r3, [r7, #31]
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3720      	adds	r7, #32
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}
 800d170:	20000758 	.word	0x20000758
 800d174:	0800dc24 	.word	0x0800dc24

0800d178 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800d182:	2300      	movs	r3, #0
 800d184:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d102      	bne.n	800d192 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800d18c:	2301      	movs	r3, #1
 800d18e:	73fb      	strb	r3, [r7, #15]
 800d190:	e014      	b.n	800d1bc <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800d192:	4b0d      	ldr	r3, [pc, #52]	@ (800d1c8 <UTIL_TIMER_SetPeriod+0x50>)
 800d194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d196:	6838      	ldr	r0, [r7, #0]
 800d198:	4798      	blx	r3
 800d19a:	4602      	mov	r2, r0
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f000 f8c1 	bl	800d328 <TimerExists>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d007      	beq.n	800d1bc <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f7ff ff73 	bl	800d098 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f7ff ff02 	bl	800cfbc <UTIL_TIMER_Start>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800d1bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3710      	adds	r7, #16
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	0800dc24 	.word	0x0800dc24

0800d1cc <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 800d1cc:	b590      	push	{r4, r7, lr}
 800d1ce:	b089      	sub	sp, #36	@ 0x24
 800d1d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1d2:	f3ef 8310 	mrs	r3, PRIMASK
 800d1d6:	60bb      	str	r3, [r7, #8]
  return(result);
 800d1d8:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800d1da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800d1dc:	b672      	cpsid	i
}
 800d1de:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 800d1e0:	4b38      	ldr	r3, [pc, #224]	@ (800d2c4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800d1e2:	695b      	ldr	r3, [r3, #20]
 800d1e4:	4798      	blx	r3
 800d1e6:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800d1e8:	4b36      	ldr	r3, [pc, #216]	@ (800d2c4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800d1ea:	691b      	ldr	r3, [r3, #16]
 800d1ec:	4798      	blx	r3
 800d1ee:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 800d1f0:	693a      	ldr	r2, [r7, #16]
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	1ad3      	subs	r3, r2, r3
 800d1f6:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 800d1f8:	4b33      	ldr	r3, [pc, #204]	@ (800d2c8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d037      	beq.n	800d270 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 800d200:	4b31      	ldr	r3, [pc, #196]	@ (800d2c8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 800d206:	69fb      	ldr	r3, [r7, #28]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	68fa      	ldr	r2, [r7, #12]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d206      	bcs.n	800d21e <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	681a      	ldr	r2, [r3, #0]
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	1ad2      	subs	r2, r2, r3
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	601a      	str	r2, [r3, #0]
 800d21c:	e002      	b.n	800d224 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 800d21e:	69fb      	ldr	r3, [r7, #28]
 800d220:	2200      	movs	r2, #0
 800d222:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 800d224:	69fb      	ldr	r3, [r7, #28]
 800d226:	695b      	ldr	r3, [r3, #20]
 800d228:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d1ea      	bne.n	800d206 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800d230:	e01e      	b.n	800d270 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 800d232:	4b25      	ldr	r3, [pc, #148]	@ (800d2c8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 800d238:	4b23      	ldr	r3, [pc, #140]	@ (800d2c8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	695b      	ldr	r3, [r3, #20]
 800d23e:	4a22      	ldr	r2, [pc, #136]	@ (800d2c8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d240:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 800d242:	69fb      	ldr	r3, [r7, #28]
 800d244:	2200      	movs	r2, #0
 800d246:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 800d248:	69fb      	ldr	r3, [r7, #28]
 800d24a:	2200      	movs	r2, #0
 800d24c:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 800d24e:	69fb      	ldr	r3, [r7, #28]
 800d250:	68db      	ldr	r3, [r3, #12]
 800d252:	69fa      	ldr	r2, [r7, #28]
 800d254:	6912      	ldr	r2, [r2, #16]
 800d256:	4610      	mov	r0, r2
 800d258:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800d25a:	69fb      	ldr	r3, [r7, #28]
 800d25c:	7adb      	ldrb	r3, [r3, #11]
 800d25e:	2b01      	cmp	r3, #1
 800d260:	d106      	bne.n	800d270 <UTIL_TIMER_IRQ_Handler+0xa4>
 800d262:	69fb      	ldr	r3, [r7, #28]
 800d264:	7a9b      	ldrb	r3, [r3, #10]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d102      	bne.n	800d270 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 800d26a:	69f8      	ldr	r0, [r7, #28]
 800d26c:	f7ff fea6 	bl	800cfbc <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800d270:	4b15      	ldr	r3, [pc, #84]	@ (800d2c8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d00d      	beq.n	800d294 <UTIL_TIMER_IRQ_Handler+0xc8>
 800d278:	4b13      	ldr	r3, [pc, #76]	@ (800d2c8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d0d7      	beq.n	800d232 <UTIL_TIMER_IRQ_Handler+0x66>
 800d282:	4b11      	ldr	r3, [pc, #68]	@ (800d2c8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	681c      	ldr	r4, [r3, #0]
 800d288:	4b0e      	ldr	r3, [pc, #56]	@ (800d2c4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800d28a:	699b      	ldr	r3, [r3, #24]
 800d28c:	4798      	blx	r3
 800d28e:	4603      	mov	r3, r0
 800d290:	429c      	cmp	r4, r3
 800d292:	d3ce      	bcc.n	800d232 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800d294:	4b0c      	ldr	r3, [pc, #48]	@ (800d2c8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d009      	beq.n	800d2b0 <UTIL_TIMER_IRQ_Handler+0xe4>
 800d29c:	4b0a      	ldr	r3, [pc, #40]	@ (800d2c8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	7a1b      	ldrb	r3, [r3, #8]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d104      	bne.n	800d2b0 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 800d2a6:	4b08      	ldr	r3, [pc, #32]	@ (800d2c8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f000 f858 	bl	800d360 <TimerSetTimeout>
 800d2b0:	69bb      	ldr	r3, [r7, #24]
 800d2b2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f383 8810 	msr	PRIMASK, r3
}
 800d2ba:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 800d2bc:	bf00      	nop
 800d2be:	3724      	adds	r7, #36	@ 0x24
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd90      	pop	{r4, r7, pc}
 800d2c4:	0800dc24 	.word	0x0800dc24
 800d2c8:	20000758 	.word	0x20000758

0800d2cc <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800d2d2:	4b06      	ldr	r3, [pc, #24]	@ (800d2ec <UTIL_TIMER_GetCurrentTime+0x20>)
 800d2d4:	69db      	ldr	r3, [r3, #28]
 800d2d6:	4798      	blx	r3
 800d2d8:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800d2da:	4b04      	ldr	r3, [pc, #16]	@ (800d2ec <UTIL_TIMER_GetCurrentTime+0x20>)
 800d2dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	4798      	blx	r3
 800d2e2:	4603      	mov	r3, r0
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3708      	adds	r7, #8
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}
 800d2ec:	0800dc24 	.word	0x0800dc24

0800d2f0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b084      	sub	sp, #16
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800d2f8:	4b0a      	ldr	r3, [pc, #40]	@ (800d324 <UTIL_TIMER_GetElapsedTime+0x34>)
 800d2fa:	69db      	ldr	r3, [r3, #28]
 800d2fc:	4798      	blx	r3
 800d2fe:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800d300:	4b08      	ldr	r3, [pc, #32]	@ (800d324 <UTIL_TIMER_GetElapsedTime+0x34>)
 800d302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	4798      	blx	r3
 800d308:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800d30a:	4b06      	ldr	r3, [pc, #24]	@ (800d324 <UTIL_TIMER_GetElapsedTime+0x34>)
 800d30c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d30e:	68f9      	ldr	r1, [r7, #12]
 800d310:	68ba      	ldr	r2, [r7, #8]
 800d312:	1a8a      	subs	r2, r1, r2
 800d314:	4610      	mov	r0, r2
 800d316:	4798      	blx	r3
 800d318:	4603      	mov	r3, r0
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3710      	adds	r7, #16
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	0800dc24 	.word	0x0800dc24

0800d328 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800d328:	b480      	push	{r7}
 800d32a:	b085      	sub	sp, #20
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800d330:	4b0a      	ldr	r3, [pc, #40]	@ (800d35c <TimerExists+0x34>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800d336:	e008      	b.n	800d34a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800d338:	68fa      	ldr	r2, [r7, #12]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d101      	bne.n	800d344 <TimerExists+0x1c>
    {
      return true;
 800d340:	2301      	movs	r3, #1
 800d342:	e006      	b.n	800d352 <TimerExists+0x2a>
    }
    cur = cur->Next;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	695b      	ldr	r3, [r3, #20]
 800d348:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d1f3      	bne.n	800d338 <TimerExists+0x10>
  }
  return false;
 800d350:	2300      	movs	r3, #0
}
 800d352:	4618      	mov	r0, r3
 800d354:	3714      	adds	r7, #20
 800d356:	46bd      	mov	sp, r7
 800d358:	bc80      	pop	{r7}
 800d35a:	4770      	bx	lr
 800d35c:	20000758 	.word	0x20000758

0800d360 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800d360:	b590      	push	{r4, r7, lr}
 800d362:	b085      	sub	sp, #20
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800d368:	4b11      	ldr	r3, [pc, #68]	@ (800d3b0 <TimerSetTimeout+0x50>)
 800d36a:	6a1b      	ldr	r3, [r3, #32]
 800d36c:	4798      	blx	r3
 800d36e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2201      	movs	r2, #1
 800d374:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681c      	ldr	r4, [r3, #0]
 800d37a:	4b0d      	ldr	r3, [pc, #52]	@ (800d3b0 <TimerSetTimeout+0x50>)
 800d37c:	699b      	ldr	r3, [r3, #24]
 800d37e:	4798      	blx	r3
 800d380:	4602      	mov	r2, r0
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	4413      	add	r3, r2
 800d386:	429c      	cmp	r4, r3
 800d388:	d207      	bcs.n	800d39a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800d38a:	4b09      	ldr	r3, [pc, #36]	@ (800d3b0 <TimerSetTimeout+0x50>)
 800d38c:	699b      	ldr	r3, [r3, #24]
 800d38e:	4798      	blx	r3
 800d390:	4602      	mov	r2, r0
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	441a      	add	r2, r3
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800d39a:	4b05      	ldr	r3, [pc, #20]	@ (800d3b0 <TimerSetTimeout+0x50>)
 800d39c:	689b      	ldr	r3, [r3, #8]
 800d39e:	687a      	ldr	r2, [r7, #4]
 800d3a0:	6812      	ldr	r2, [r2, #0]
 800d3a2:	4610      	mov	r0, r2
 800d3a4:	4798      	blx	r3
}
 800d3a6:	bf00      	nop
 800d3a8:	3714      	adds	r7, #20
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd90      	pop	{r4, r7, pc}
 800d3ae:	bf00      	nop
 800d3b0:	0800dc24 	.word	0x0800dc24

0800d3b4 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b085      	sub	sp, #20
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800d3bc:	4b14      	ldr	r3, [pc, #80]	@ (800d410 <TimerInsertTimer+0x5c>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800d3c2:	4b13      	ldr	r3, [pc, #76]	@ (800d410 <TimerInsertTimer+0x5c>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	695b      	ldr	r3, [r3, #20]
 800d3c8:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800d3ca:	e012      	b.n	800d3f2 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681a      	ldr	r2, [r3, #0]
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d905      	bls.n	800d3e4 <TimerInsertTimer+0x30>
    {
        cur = next;
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	695b      	ldr	r3, [r3, #20]
 800d3e0:	60bb      	str	r3, [r7, #8]
 800d3e2:	e006      	b.n	800d3f2 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	687a      	ldr	r2, [r7, #4]
 800d3e8:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	68ba      	ldr	r2, [r7, #8]
 800d3ee:	615a      	str	r2, [r3, #20]
        return;
 800d3f0:	e009      	b.n	800d406 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	695b      	ldr	r3, [r3, #20]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d1e8      	bne.n	800d3cc <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2200      	movs	r2, #0
 800d404:	615a      	str	r2, [r3, #20]
}
 800d406:	3714      	adds	r7, #20
 800d408:	46bd      	mov	sp, r7
 800d40a:	bc80      	pop	{r7}
 800d40c:	4770      	bx	lr
 800d40e:	bf00      	nop
 800d410:	20000758 	.word	0x20000758

0800d414 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b084      	sub	sp, #16
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800d41c:	4b0b      	ldr	r3, [pc, #44]	@ (800d44c <TimerInsertNewHeadTimer+0x38>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d002      	beq.n	800d42e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	2200      	movs	r2, #0
 800d42c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	68fa      	ldr	r2, [r7, #12]
 800d432:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800d434:	4a05      	ldr	r2, [pc, #20]	@ (800d44c <TimerInsertNewHeadTimer+0x38>)
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800d43a:	4b04      	ldr	r3, [pc, #16]	@ (800d44c <TimerInsertNewHeadTimer+0x38>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	4618      	mov	r0, r3
 800d440:	f7ff ff8e 	bl	800d360 <TimerSetTimeout>
}
 800d444:	bf00      	nop
 800d446:	3710      	adds	r7, #16
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}
 800d44c:	20000758 	.word	0x20000758

0800d450 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800d450:	b480      	push	{r7}
 800d452:	b085      	sub	sp, #20
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
  int i = 0;
 800d458:	2300      	movs	r3, #0
 800d45a:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800d45c:	e00e      	b.n	800d47c <ee_skip_atoi+0x2c>
 800d45e:	68fa      	ldr	r2, [r7, #12]
 800d460:	4613      	mov	r3, r2
 800d462:	009b      	lsls	r3, r3, #2
 800d464:	4413      	add	r3, r2
 800d466:	005b      	lsls	r3, r3, #1
 800d468:	4618      	mov	r0, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	1c59      	adds	r1, r3, #1
 800d470:	687a      	ldr	r2, [r7, #4]
 800d472:	6011      	str	r1, [r2, #0]
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	4403      	add	r3, r0
 800d478:	3b30      	subs	r3, #48	@ 0x30
 800d47a:	60fb      	str	r3, [r7, #12]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	2b2f      	cmp	r3, #47	@ 0x2f
 800d484:	d904      	bls.n	800d490 <ee_skip_atoi+0x40>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	781b      	ldrb	r3, [r3, #0]
 800d48c:	2b39      	cmp	r3, #57	@ 0x39
 800d48e:	d9e6      	bls.n	800d45e <ee_skip_atoi+0xe>
  return i;
 800d490:	68fb      	ldr	r3, [r7, #12]
}
 800d492:	4618      	mov	r0, r3
 800d494:	3714      	adds	r7, #20
 800d496:	46bd      	mov	sp, r7
 800d498:	bc80      	pop	{r7}
 800d49a:	4770      	bx	lr

0800d49c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b099      	sub	sp, #100	@ 0x64
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	60f8      	str	r0, [r7, #12]
 800d4a4:	60b9      	str	r1, [r7, #8]
 800d4a6:	607a      	str	r2, [r7, #4]
 800d4a8:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 800d4aa:	4b71      	ldr	r3, [pc, #452]	@ (800d670 <ee_number+0x1d4>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800d4b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d4b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d002      	beq.n	800d4c0 <ee_number+0x24>
 800d4ba:	4b6e      	ldr	r3, [pc, #440]	@ (800d674 <ee_number+0x1d8>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	dd02      	ble.n	800d4cc <ee_number+0x30>
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	2b24      	cmp	r3, #36	@ 0x24
 800d4ca:	dd01      	ble.n	800d4d0 <ee_number+0x34>
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	e0ca      	b.n	800d666 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 800d4d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d4d2:	f003 0301 	and.w	r3, r3, #1
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d001      	beq.n	800d4de <ee_number+0x42>
 800d4da:	2330      	movs	r3, #48	@ 0x30
 800d4dc:	e000      	b.n	800d4e0 <ee_number+0x44>
 800d4de:	2320      	movs	r3, #32
 800d4e0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 800d4ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d4ec:	f003 0302 	and.w	r3, r3, #2
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d00b      	beq.n	800d50c <ee_number+0x70>
  {
    if (num < 0)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	da08      	bge.n	800d50c <ee_number+0x70>
    {
      sign = '-';
 800d4fa:	232d      	movs	r3, #45	@ 0x2d
 800d4fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	425b      	negs	r3, r3
 800d504:	607b      	str	r3, [r7, #4]
      size--;
 800d506:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d508:	3b01      	subs	r3, #1
 800d50a:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 800d50c:	2300      	movs	r3, #0
 800d50e:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d11e      	bne.n	800d554 <ee_number+0xb8>
    tmp[i++] = '0';
 800d516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d518:	1c5a      	adds	r2, r3, #1
 800d51a:	657a      	str	r2, [r7, #84]	@ 0x54
 800d51c:	3360      	adds	r3, #96	@ 0x60
 800d51e:	443b      	add	r3, r7
 800d520:	2230      	movs	r2, #48	@ 0x30
 800d522:	f803 2c50 	strb.w	r2, [r3, #-80]
 800d526:	e018      	b.n	800d55a <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	683a      	ldr	r2, [r7, #0]
 800d52c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d530:	fb01 f202 	mul.w	r2, r1, r2
 800d534:	1a9b      	subs	r3, r3, r2
 800d536:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d538:	441a      	add	r2, r3
 800d53a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d53c:	1c59      	adds	r1, r3, #1
 800d53e:	6579      	str	r1, [r7, #84]	@ 0x54
 800d540:	7812      	ldrb	r2, [r2, #0]
 800d542:	3360      	adds	r3, #96	@ 0x60
 800d544:	443b      	add	r3, r7
 800d546:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 800d54a:	687a      	ldr	r2, [r7, #4]
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d552:	607b      	str	r3, [r7, #4]
    while (num != 0)
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d1e6      	bne.n	800d528 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 800d55a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d55c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d55e:	429a      	cmp	r2, r3
 800d560:	dd01      	ble.n	800d566 <ee_number+0xca>
 800d562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d564:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 800d566:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d568:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d56a:	1ad3      	subs	r3, r2, r3
 800d56c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800d56e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d570:	f003 0301 	and.w	r3, r3, #1
 800d574:	2b00      	cmp	r3, #0
 800d576:	d112      	bne.n	800d59e <ee_number+0x102>
 800d578:	e00c      	b.n	800d594 <ee_number+0xf8>
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	1c5a      	adds	r2, r3, #1
 800d57e:	60fa      	str	r2, [r7, #12]
 800d580:	2220      	movs	r2, #32
 800d582:	701a      	strb	r2, [r3, #0]
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	3b01      	subs	r3, #1
 800d588:	60bb      	str	r3, [r7, #8]
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d101      	bne.n	800d594 <ee_number+0xf8>
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	e068      	b.n	800d666 <ee_number+0x1ca>
 800d594:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d596:	1e5a      	subs	r2, r3, #1
 800d598:	66ba      	str	r2, [r7, #104]	@ 0x68
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	dced      	bgt.n	800d57a <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 800d59e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d01b      	beq.n	800d5de <ee_number+0x142>
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	1c5a      	adds	r2, r3, #1
 800d5aa:	60fa      	str	r2, [r7, #12]
 800d5ac:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800d5b0:	701a      	strb	r2, [r3, #0]
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	3b01      	subs	r3, #1
 800d5b6:	60bb      	str	r3, [r7, #8]
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d10f      	bne.n	800d5de <ee_number+0x142>
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	e051      	b.n	800d666 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	1c5a      	adds	r2, r3, #1
 800d5c6:	60fa      	str	r2, [r7, #12]
 800d5c8:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 800d5cc:	701a      	strb	r2, [r3, #0]
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	3b01      	subs	r3, #1
 800d5d2:	60bb      	str	r3, [r7, #8]
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d101      	bne.n	800d5de <ee_number+0x142>
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	e043      	b.n	800d666 <ee_number+0x1ca>
 800d5de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d5e0:	1e5a      	subs	r2, r3, #1
 800d5e2:	66ba      	str	r2, [r7, #104]	@ 0x68
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	dcec      	bgt.n	800d5c2 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 800d5e8:	e00c      	b.n	800d604 <ee_number+0x168>
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	1c5a      	adds	r2, r3, #1
 800d5ee:	60fa      	str	r2, [r7, #12]
 800d5f0:	2230      	movs	r2, #48	@ 0x30
 800d5f2:	701a      	strb	r2, [r3, #0]
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	3b01      	subs	r3, #1
 800d5f8:	60bb      	str	r3, [r7, #8]
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d101      	bne.n	800d604 <ee_number+0x168>
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	e030      	b.n	800d666 <ee_number+0x1ca>
 800d604:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d606:	1e5a      	subs	r2, r3, #1
 800d608:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d60a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d60c:	429a      	cmp	r2, r3
 800d60e:	dbec      	blt.n	800d5ea <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800d610:	e010      	b.n	800d634 <ee_number+0x198>
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	1c5a      	adds	r2, r3, #1
 800d616:	60fa      	str	r2, [r7, #12]
 800d618:	f107 0110 	add.w	r1, r7, #16
 800d61c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d61e:	440a      	add	r2, r1
 800d620:	7812      	ldrb	r2, [r2, #0]
 800d622:	701a      	strb	r2, [r3, #0]
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	3b01      	subs	r3, #1
 800d628:	60bb      	str	r3, [r7, #8]
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d101      	bne.n	800d634 <ee_number+0x198>
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	e018      	b.n	800d666 <ee_number+0x1ca>
 800d634:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d636:	1e5a      	subs	r2, r3, #1
 800d638:	657a      	str	r2, [r7, #84]	@ 0x54
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	dce9      	bgt.n	800d612 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 800d63e:	e00c      	b.n	800d65a <ee_number+0x1be>
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	1c5a      	adds	r2, r3, #1
 800d644:	60fa      	str	r2, [r7, #12]
 800d646:	2220      	movs	r2, #32
 800d648:	701a      	strb	r2, [r3, #0]
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	3b01      	subs	r3, #1
 800d64e:	60bb      	str	r3, [r7, #8]
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d101      	bne.n	800d65a <ee_number+0x1be>
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	e005      	b.n	800d666 <ee_number+0x1ca>
 800d65a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d65c:	1e5a      	subs	r2, r3, #1
 800d65e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800d660:	2b00      	cmp	r3, #0
 800d662:	dced      	bgt.n	800d640 <ee_number+0x1a4>

  return str;
 800d664:	68fb      	ldr	r3, [r7, #12]
}
 800d666:	4618      	mov	r0, r3
 800d668:	3764      	adds	r7, #100	@ 0x64
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bc80      	pop	{r7}
 800d66e:	4770      	bx	lr
 800d670:	20000028 	.word	0x20000028
 800d674:	2000002c 	.word	0x2000002c

0800d678 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b092      	sub	sp, #72	@ 0x48
 800d67c:	af04      	add	r7, sp, #16
 800d67e:	60f8      	str	r0, [r7, #12]
 800d680:	60b9      	str	r1, [r7, #8]
 800d682:	607a      	str	r2, [r7, #4]
 800d684:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	dc01      	bgt.n	800d690 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 800d68c:	2300      	movs	r3, #0
 800d68e:	e13e      	b.n	800d90e <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d694:	e128      	b.n	800d8e8 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 800d696:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	1ad2      	subs	r2, r2, r3
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	3b01      	subs	r3, #1
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	f280 812e 	bge.w	800d902 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	2b25      	cmp	r3, #37	@ 0x25
 800d6ac:	d006      	beq.n	800d6bc <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 800d6ae:	687a      	ldr	r2, [r7, #4]
 800d6b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6b2:	1c59      	adds	r1, r3, #1
 800d6b4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d6b6:	7812      	ldrb	r2, [r2, #0]
 800d6b8:	701a      	strb	r2, [r3, #0]
      continue;
 800d6ba:	e112      	b.n	800d8e2 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	2b30      	cmp	r3, #48	@ 0x30
 800d6cc:	d103      	bne.n	800d6d6 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 800d6ce:	6a3b      	ldr	r3, [r7, #32]
 800d6d0:	f043 0301 	orr.w	r3, r3, #1
 800d6d4:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 800d6d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d6da:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	781b      	ldrb	r3, [r3, #0]
 800d6e0:	2b2f      	cmp	r3, #47	@ 0x2f
 800d6e2:	d908      	bls.n	800d6f6 <tiny_vsnprintf_like+0x7e>
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	2b39      	cmp	r3, #57	@ 0x39
 800d6ea:	d804      	bhi.n	800d6f6 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 800d6ec:	1d3b      	adds	r3, r7, #4
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7ff feae 	bl	800d450 <ee_skip_atoi>
 800d6f4:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 800d6f6:	f04f 33ff 	mov.w	r3, #4294967295
 800d6fa:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 800d6fc:	f04f 33ff 	mov.w	r3, #4294967295
 800d700:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 800d702:	230a      	movs	r3, #10
 800d704:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	781b      	ldrb	r3, [r3, #0]
 800d70a:	3b58      	subs	r3, #88	@ 0x58
 800d70c:	2b20      	cmp	r3, #32
 800d70e:	f200 8094 	bhi.w	800d83a <tiny_vsnprintf_like+0x1c2>
 800d712:	a201      	add	r2, pc, #4	@ (adr r2, 800d718 <tiny_vsnprintf_like+0xa0>)
 800d714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d718:	0800d823 	.word	0x0800d823
 800d71c:	0800d83b 	.word	0x0800d83b
 800d720:	0800d83b 	.word	0x0800d83b
 800d724:	0800d83b 	.word	0x0800d83b
 800d728:	0800d83b 	.word	0x0800d83b
 800d72c:	0800d83b 	.word	0x0800d83b
 800d730:	0800d83b 	.word	0x0800d83b
 800d734:	0800d83b 	.word	0x0800d83b
 800d738:	0800d83b 	.word	0x0800d83b
 800d73c:	0800d83b 	.word	0x0800d83b
 800d740:	0800d83b 	.word	0x0800d83b
 800d744:	0800d7a7 	.word	0x0800d7a7
 800d748:	0800d831 	.word	0x0800d831
 800d74c:	0800d83b 	.word	0x0800d83b
 800d750:	0800d83b 	.word	0x0800d83b
 800d754:	0800d83b 	.word	0x0800d83b
 800d758:	0800d83b 	.word	0x0800d83b
 800d75c:	0800d831 	.word	0x0800d831
 800d760:	0800d83b 	.word	0x0800d83b
 800d764:	0800d83b 	.word	0x0800d83b
 800d768:	0800d83b 	.word	0x0800d83b
 800d76c:	0800d83b 	.word	0x0800d83b
 800d770:	0800d83b 	.word	0x0800d83b
 800d774:	0800d83b 	.word	0x0800d83b
 800d778:	0800d83b 	.word	0x0800d83b
 800d77c:	0800d83b 	.word	0x0800d83b
 800d780:	0800d83b 	.word	0x0800d83b
 800d784:	0800d7c7 	.word	0x0800d7c7
 800d788:	0800d83b 	.word	0x0800d83b
 800d78c:	0800d887 	.word	0x0800d887
 800d790:	0800d83b 	.word	0x0800d83b
 800d794:	0800d83b 	.word	0x0800d83b
 800d798:	0800d82b 	.word	0x0800d82b
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800d79c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d79e:	1c5a      	adds	r2, r3, #1
 800d7a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d7a2:	2220      	movs	r2, #32
 800d7a4:	701a      	strb	r2, [r3, #0]
 800d7a6:	69fb      	ldr	r3, [r7, #28]
 800d7a8:	3b01      	subs	r3, #1
 800d7aa:	61fb      	str	r3, [r7, #28]
 800d7ac:	69fb      	ldr	r3, [r7, #28]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	dcf4      	bgt.n	800d79c <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	1d1a      	adds	r2, r3, #4
 800d7b6:	603a      	str	r2, [r7, #0]
 800d7b8:	6819      	ldr	r1, [r3, #0]
 800d7ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7bc:	1c5a      	adds	r2, r3, #1
 800d7be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d7c0:	b2ca      	uxtb	r2, r1
 800d7c2:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800d7c4:	e08d      	b.n	800d8e2 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	1d1a      	adds	r2, r3, #4
 800d7ca:	603a      	str	r2, [r7, #0]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 800d7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d101      	bne.n	800d7da <tiny_vsnprintf_like+0x162>
 800d7d6:	4b50      	ldr	r3, [pc, #320]	@ (800d918 <tiny_vsnprintf_like+0x2a0>)
 800d7d8:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 800d7da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d7dc:	f7f2 fccc 	bl	8000178 <strlen>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800d7e4:	e004      	b.n	800d7f0 <tiny_vsnprintf_like+0x178>
 800d7e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7e8:	1c5a      	adds	r2, r3, #1
 800d7ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d7ec:	2220      	movs	r2, #32
 800d7ee:	701a      	strb	r2, [r3, #0]
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	1e5a      	subs	r2, r3, #1
 800d7f4:	61fa      	str	r2, [r7, #28]
 800d7f6:	693a      	ldr	r2, [r7, #16]
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	dbf4      	blt.n	800d7e6 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d800:	e00a      	b.n	800d818 <tiny_vsnprintf_like+0x1a0>
 800d802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d804:	1c53      	adds	r3, r2, #1
 800d806:	627b      	str	r3, [r7, #36]	@ 0x24
 800d808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d80a:	1c59      	adds	r1, r3, #1
 800d80c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d80e:	7812      	ldrb	r2, [r2, #0]
 800d810:	701a      	strb	r2, [r3, #0]
 800d812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d814:	3301      	adds	r3, #1
 800d816:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d818:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d81a:	693b      	ldr	r3, [r7, #16]
 800d81c:	429a      	cmp	r2, r3
 800d81e:	dbf0      	blt.n	800d802 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 800d820:	e05f      	b.n	800d8e2 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 800d822:	6a3b      	ldr	r3, [r7, #32]
 800d824:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d828:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 800d82a:	2310      	movs	r3, #16
 800d82c:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 800d82e:	e02b      	b.n	800d888 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 800d830:	6a3b      	ldr	r3, [r7, #32]
 800d832:	f043 0302 	orr.w	r3, r3, #2
 800d836:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 800d838:	e025      	b.n	800d886 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	781b      	ldrb	r3, [r3, #0]
 800d83e:	2b25      	cmp	r3, #37	@ 0x25
 800d840:	d004      	beq.n	800d84c <tiny_vsnprintf_like+0x1d4>
 800d842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d844:	1c5a      	adds	r2, r3, #1
 800d846:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d848:	2225      	movs	r2, #37	@ 0x25
 800d84a:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 800d84c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	1ad2      	subs	r2, r2, r3
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	3b01      	subs	r3, #1
 800d856:	429a      	cmp	r2, r3
 800d858:	da16      	bge.n	800d888 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	781b      	ldrb	r3, [r3, #0]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d006      	beq.n	800d870 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 800d862:	687a      	ldr	r2, [r7, #4]
 800d864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d866:	1c59      	adds	r1, r3, #1
 800d868:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d86a:	7812      	ldrb	r2, [r2, #0]
 800d86c:	701a      	strb	r2, [r3, #0]
 800d86e:	e002      	b.n	800d876 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	3b01      	subs	r3, #1
 800d874:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 800d876:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	1ad2      	subs	r2, r2, r3
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	3b01      	subs	r3, #1
 800d880:	429a      	cmp	r2, r3
 800d882:	db2d      	blt.n	800d8e0 <tiny_vsnprintf_like+0x268>
 800d884:	e000      	b.n	800d888 <tiny_vsnprintf_like+0x210>
        break;
 800d886:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	2b6c      	cmp	r3, #108	@ 0x6c
 800d88c:	d105      	bne.n	800d89a <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	1d1a      	adds	r2, r3, #4
 800d892:	603a      	str	r2, [r7, #0]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	637b      	str	r3, [r7, #52]	@ 0x34
 800d898:	e00f      	b.n	800d8ba <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 800d89a:	6a3b      	ldr	r3, [r7, #32]
 800d89c:	f003 0302 	and.w	r3, r3, #2
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d005      	beq.n	800d8b0 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	1d1a      	adds	r2, r3, #4
 800d8a8:	603a      	str	r2, [r7, #0]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8ae:	e004      	b.n	800d8ba <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	1d1a      	adds	r2, r3, #4
 800d8b4:	603a      	str	r2, [r7, #0]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	1e5a      	subs	r2, r3, #1
 800d8be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	1acb      	subs	r3, r1, r3
 800d8c4:	1ad1      	subs	r1, r2, r3
 800d8c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d8c8:	6a3b      	ldr	r3, [r7, #32]
 800d8ca:	9302      	str	r3, [sp, #8]
 800d8cc:	69bb      	ldr	r3, [r7, #24]
 800d8ce:	9301      	str	r3, [sp, #4]
 800d8d0:	69fb      	ldr	r3, [r7, #28]
 800d8d2:	9300      	str	r3, [sp, #0]
 800d8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d8d8:	f7ff fde0 	bl	800d49c <ee_number>
 800d8dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800d8de:	e000      	b.n	800d8e2 <tiny_vsnprintf_like+0x26a>
        continue;
 800d8e0:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	607b      	str	r3, [r7, #4]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	f47f aed2 	bne.w	800d696 <tiny_vsnprintf_like+0x1e>
 800d8f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	1ad2      	subs	r2, r2, r3
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	3b01      	subs	r3, #1
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	f6bf aeca 	bge.w	800d696 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 800d902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d904:	2200      	movs	r2, #0
 800d906:	701a      	strb	r2, [r3, #0]
  return str - buf;
 800d908:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	1ad3      	subs	r3, r2, r3
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3738      	adds	r7, #56	@ 0x38
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
 800d916:	bf00      	nop
 800d918:	0800db64 	.word	0x0800db64

0800d91c <__itoa>:
 800d91c:	1e93      	subs	r3, r2, #2
 800d91e:	2b22      	cmp	r3, #34	@ 0x22
 800d920:	b510      	push	{r4, lr}
 800d922:	460c      	mov	r4, r1
 800d924:	d904      	bls.n	800d930 <__itoa+0x14>
 800d926:	2300      	movs	r3, #0
 800d928:	700b      	strb	r3, [r1, #0]
 800d92a:	461c      	mov	r4, r3
 800d92c:	4620      	mov	r0, r4
 800d92e:	bd10      	pop	{r4, pc}
 800d930:	2a0a      	cmp	r2, #10
 800d932:	d109      	bne.n	800d948 <__itoa+0x2c>
 800d934:	2800      	cmp	r0, #0
 800d936:	da07      	bge.n	800d948 <__itoa+0x2c>
 800d938:	232d      	movs	r3, #45	@ 0x2d
 800d93a:	700b      	strb	r3, [r1, #0]
 800d93c:	4240      	negs	r0, r0
 800d93e:	2101      	movs	r1, #1
 800d940:	4421      	add	r1, r4
 800d942:	f000 f805 	bl	800d950 <__utoa>
 800d946:	e7f1      	b.n	800d92c <__itoa+0x10>
 800d948:	2100      	movs	r1, #0
 800d94a:	e7f9      	b.n	800d940 <__itoa+0x24>

0800d94c <itoa>:
 800d94c:	f7ff bfe6 	b.w	800d91c <__itoa>

0800d950 <__utoa>:
 800d950:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d952:	4c1f      	ldr	r4, [pc, #124]	@ (800d9d0 <__utoa+0x80>)
 800d954:	b08b      	sub	sp, #44	@ 0x2c
 800d956:	4605      	mov	r5, r0
 800d958:	460b      	mov	r3, r1
 800d95a:	466e      	mov	r6, sp
 800d95c:	f104 0c20 	add.w	ip, r4, #32
 800d960:	6820      	ldr	r0, [r4, #0]
 800d962:	6861      	ldr	r1, [r4, #4]
 800d964:	4637      	mov	r7, r6
 800d966:	c703      	stmia	r7!, {r0, r1}
 800d968:	3408      	adds	r4, #8
 800d96a:	4564      	cmp	r4, ip
 800d96c:	463e      	mov	r6, r7
 800d96e:	d1f7      	bne.n	800d960 <__utoa+0x10>
 800d970:	7921      	ldrb	r1, [r4, #4]
 800d972:	7139      	strb	r1, [r7, #4]
 800d974:	1e91      	subs	r1, r2, #2
 800d976:	6820      	ldr	r0, [r4, #0]
 800d978:	6038      	str	r0, [r7, #0]
 800d97a:	2922      	cmp	r1, #34	@ 0x22
 800d97c:	f04f 0100 	mov.w	r1, #0
 800d980:	d904      	bls.n	800d98c <__utoa+0x3c>
 800d982:	7019      	strb	r1, [r3, #0]
 800d984:	460b      	mov	r3, r1
 800d986:	4618      	mov	r0, r3
 800d988:	b00b      	add	sp, #44	@ 0x2c
 800d98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d98c:	1e58      	subs	r0, r3, #1
 800d98e:	4684      	mov	ip, r0
 800d990:	fbb5 f7f2 	udiv	r7, r5, r2
 800d994:	fb02 5617 	mls	r6, r2, r7, r5
 800d998:	3628      	adds	r6, #40	@ 0x28
 800d99a:	446e      	add	r6, sp
 800d99c:	460c      	mov	r4, r1
 800d99e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d9a2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d9a6:	462e      	mov	r6, r5
 800d9a8:	42b2      	cmp	r2, r6
 800d9aa:	f101 0101 	add.w	r1, r1, #1
 800d9ae:	463d      	mov	r5, r7
 800d9b0:	d9ee      	bls.n	800d990 <__utoa+0x40>
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	545a      	strb	r2, [r3, r1]
 800d9b6:	1919      	adds	r1, r3, r4
 800d9b8:	1aa5      	subs	r5, r4, r2
 800d9ba:	42aa      	cmp	r2, r5
 800d9bc:	dae3      	bge.n	800d986 <__utoa+0x36>
 800d9be:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d9c2:	780e      	ldrb	r6, [r1, #0]
 800d9c4:	7006      	strb	r6, [r0, #0]
 800d9c6:	3201      	adds	r2, #1
 800d9c8:	f801 5901 	strb.w	r5, [r1], #-1
 800d9cc:	e7f4      	b.n	800d9b8 <__utoa+0x68>
 800d9ce:	bf00      	nop
 800d9d0:	0800ddec 	.word	0x0800ddec

0800d9d4 <memset>:
 800d9d4:	4402      	add	r2, r0
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	4293      	cmp	r3, r2
 800d9da:	d100      	bne.n	800d9de <memset+0xa>
 800d9dc:	4770      	bx	lr
 800d9de:	f803 1b01 	strb.w	r1, [r3], #1
 800d9e2:	e7f9      	b.n	800d9d8 <memset+0x4>

0800d9e4 <__libc_init_array>:
 800d9e4:	b570      	push	{r4, r5, r6, lr}
 800d9e6:	4d0d      	ldr	r5, [pc, #52]	@ (800da1c <__libc_init_array+0x38>)
 800d9e8:	4c0d      	ldr	r4, [pc, #52]	@ (800da20 <__libc_init_array+0x3c>)
 800d9ea:	1b64      	subs	r4, r4, r5
 800d9ec:	10a4      	asrs	r4, r4, #2
 800d9ee:	2600      	movs	r6, #0
 800d9f0:	42a6      	cmp	r6, r4
 800d9f2:	d109      	bne.n	800da08 <__libc_init_array+0x24>
 800d9f4:	4d0b      	ldr	r5, [pc, #44]	@ (800da24 <__libc_init_array+0x40>)
 800d9f6:	4c0c      	ldr	r4, [pc, #48]	@ (800da28 <__libc_init_array+0x44>)
 800d9f8:	f000 f818 	bl	800da2c <_init>
 800d9fc:	1b64      	subs	r4, r4, r5
 800d9fe:	10a4      	asrs	r4, r4, #2
 800da00:	2600      	movs	r6, #0
 800da02:	42a6      	cmp	r6, r4
 800da04:	d105      	bne.n	800da12 <__libc_init_array+0x2e>
 800da06:	bd70      	pop	{r4, r5, r6, pc}
 800da08:	f855 3b04 	ldr.w	r3, [r5], #4
 800da0c:	4798      	blx	r3
 800da0e:	3601      	adds	r6, #1
 800da10:	e7ee      	b.n	800d9f0 <__libc_init_array+0xc>
 800da12:	f855 3b04 	ldr.w	r3, [r5], #4
 800da16:	4798      	blx	r3
 800da18:	3601      	adds	r6, #1
 800da1a:	e7f2      	b.n	800da02 <__libc_init_array+0x1e>
 800da1c:	0800de1c 	.word	0x0800de1c
 800da20:	0800de1c 	.word	0x0800de1c
 800da24:	0800de1c 	.word	0x0800de1c
 800da28:	0800de20 	.word	0x0800de20

0800da2c <_init>:
 800da2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da2e:	bf00      	nop
 800da30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da32:	bc08      	pop	{r3}
 800da34:	469e      	mov	lr, r3
 800da36:	4770      	bx	lr

0800da38 <_fini>:
 800da38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da3a:	bf00      	nop
 800da3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da3e:	bc08      	pop	{r3}
 800da40:	469e      	mov	lr, r3
 800da42:	4770      	bx	lr
